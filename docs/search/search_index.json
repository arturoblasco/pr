{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#indice-de-unidades","title":"\u00cdndice de unidades","text":"unidad UD 00 Conocimientos previos UD 01 Elementos de un programa inform\u00e1tico UD 02 Utilizaci\u00f3n de objetos y clases UD 03 Estructuras de control y excepciones UD 04 Estructuras de datos Arrays y matrices. Recursividad UD 05 Desarrollo de clases UD 06 Lectura y escritura de informaci\u00f3n UD 07 Colecciones UD 08 Composici\u00f3n, Herencia y Polimorfismo UD 09 Acceso a bases de datos UD 10 Interfaz gr\u00e1fica <p>Licencia</p> <p> Este material est\u00e1 bajo una Licencia Creative Commons Atribuci\u00f3n-Compartir-Igual 4.0 Internacional. Derivado a partir de material de David Mart\u00ednez Pe\u00f1a (https://github.com/martinezpenya).</p>"},{"location":"default/","title":"Default","text":""},{"location":"ud00/ud0001/","title":"0.1 Introducci\u00f3n","text":"<p>Bienvenidos al curso de Programaci\u00f3n PR del Ciclo Formativo Superior de Deserrallo de Apliaciones Web DAW.</p> <p>Antes de entrar en materia, ser\u00eda conveniente e interesante introducir un par de conceptos para realizar nuestro trabajo en clase y en casa de forma m\u00e1s organizada.</p> <p>Esta primera unidad estar\u00e1 dedicada a este menester. En ella, comentaremos, a modo \"manual de supervivencia\", conceptos como: </p> SOFTWARE Markdown Lenguaje de marcado que facilita la aplicaci\u00f3n de formato a un texto Git Sistema de control de versiones Github Plataforma web para alojar y compartir proyectos de software y c\u00f3digo fuente Visual Studio Code Entorno Desarrollo Integrado (IDE)"},{"location":"ud00/ud0002/","title":"0.2 Markdown","text":"<p>Markdown nace como herramienta de conversi\u00f3n de texto plano a HTML. Fue creada en 2004 por John Gruber, y se distribuye de manera gratuita bajo una licencia BSD.</p> <p>Markdown es un maravilloso lenguaje para escribir documentos de una manera sencilla de escribir, y que en todo momento mantenga un dise\u00f1o legible que contengan elementos como secciones, p\u00e1rrafos, listas, v\u00ednculos e im\u00e1genes, etc. Pandoc http://pandoc.org ha extendido enormemente la sintaxis original de Markdown y ha a\u00f1adido unas peque\u00f1as nuevas caracter\u00edsticas tales como notas al pie de p\u00e1gina, citas y tablas. Lo m\u00e1s importante que hace Pandoc es hacer posible la generaci\u00f3n de documentos en una amplia variedad de formatos desde Markdown, HTML, LaTeX/PDF, MSWord y Slides.</p> <p>Este m\u00e9todo te permitir\u00e1 a\u00f1adir formatos tales como negritas, cursivas o enlaces, utilizando texto plano, lo que permitir\u00e1 hacer de tu escritura algo m\u00e1s simple y eficiente al evitar distracciones.</p> <p>Con Markdown no vas a reemplazar todo, sino cubrir las funcionalidades m\u00e1s comunes que se requieren para escribir un documento relativamente complicado.</p>"},{"location":"ud00/ud0002/#para-que-sirve-markdown","title":"Para qu\u00e9 sirve Markdown","text":"<p>Markdown ser\u00e1 perfecto para ti sobre todo si publicas de manera constante en Internet, donde el lenguaje HTML est\u00e1 m\u00e1s que presente: WordPress, Squarespace, Jekyll\u2026</p> <p>Pero no estoy hablando solo de blogs o p\u00e1ginas web. Servicios como Trello o foros como Stackoverflow tambi\u00e9n soportan este lenguaje, y con el paso del tiempo encontrar\u00e1s a\u00fan m\u00e1s lugares que lo utilicen.</p> <p>Adem\u00e1s, Markdown est\u00e1 cada vez m\u00e1s extendido en el mundo \u201coffline\u201d. Nada te impedir\u00e1 utilizar este lenguaje para tomar notas y apuntes de tus clases o reuniones en una determinada aplicaci\u00f3n(incluso podr\u00edas escribir un libro con \u00e9l, ya que puedes exportar f\u00e1cilmente el resultado final a un formato ePub).</p> <p>Gracias a la simplicidad de su sintaxis podr\u00e1s utilizarlo siempre que necesites escribir y dar formato r\u00e1pidamente, sobre todo si quieres hacerlo desde dispositivos m\u00f3viles.</p>"},{"location":"ud00/ud0002/#por-que-utilizar-markdown","title":"Por qu\u00e9 utilizar Markdown","text":""},{"location":"ud00/ud0002/#ventajas","title":"Ventajas","text":"<ul> <li> <p>Markdown para todo. Para crear apuntes, documentos, notas, sitios web, libros, documentaci\u00f3n t\u00e9cnica, etc. de forma off-line.</p> </li> <li> <p>Markdown transportable. Este tipo de formato siempre ser\u00e1 compatible con todas las plataformas que utilices, as\u00ed que utilizar Markdown es una manera de mantener todo tu contenido siempre accesible desde cualquier dispositivo (smartphones, ordenadores de escritorio, tablets\u2026), ya que en cualquiera de ellas siempre encontrar\u00e1s las aplicaciones adecuadas para leer y editar este tipo de contenido.</p> </li> <li> <p>Ideal para escribir un libro, pues permite la exportaci\u00f3n f\u00e1cil en ePub, PDF...</p> </li> </ul> <p> </p> <p>Si en el futuro Microsoft Word desapareciese perder\u00edas acceso a todo el contenido que has creado durante a\u00f1os utilizando dicho procesador. As\u00ed que lo m\u00e1s inteligente para evitar eso es generar tu contenido de la manera m\u00e1s sencilla posible: utilizando texto plano.</p>"},{"location":"ud00/ud0002/#desventajas","title":"Desventajas","text":"<ul> <li>No tiene muchas funcionalidades (esto es lo que lo hace muy compatible).</li> </ul>"},{"location":"ud00/ud0002/#editores-para-markdown","title":"Editores para Markdown","text":""},{"location":"ud00/ud0002/#off-line","title":"Off-line","text":"<ul> <li>Typora, MarkdownPad, HarooPad, Markdown Monster ...</li> </ul>"},{"location":"ud00/ud0002/#online","title":"Online","text":"<ul> <li>Dillinger ...</li> </ul>"},{"location":"ud00/ud0002/#parrafos-y-saltos-de-linea","title":"P\u00e1rrafos y saltos de l\u00ednea","text":"<p>Si queremos generar un nuevo p\u00e1rrafo en Markdown simplemente separa el texto mediante una l\u00ednea en blanco (pulsando dos veces intro).</p> <p>Al igual que sucede con HTML, Markdown no soporta dobles l\u00edneas en blanco, as\u00ed que si intentas generarlas estas se convertir\u00e1n en una sola al procesarse.</p> <p>Para realizar un salto de l\u00ednea y empezar una frase en una l\u00ednea siguiente dentro del mismo p\u00e1rrafo, tendr\u00e1s que pulsar dos veces la barra espaciadora antes de pulsar una vez intro.</p> <p>Por ejemplo, si quisieses escribir un poema quedar\u00eda tal que as\u00ed: \u00abLa tierra estaba seca,       No hab\u00eda r\u00edos ni fuentes.       Y brot\u00f3 de tus ojos.</p> <p>Donde cada verso tiene dos espacios en blanco al final.</p>"},{"location":"ud00/ud0002/#encabezados","title":"Encabezados","text":"<p>Las <code>#</code> almohadillas son uno de los m\u00e9todos utilizados en Markdown para crear encabezados. Debes usarlos a\u00f1adiendo uno por cada nivel.</p> <p>Es decir:</p> Text Only<pre><code># Encabezado 1\n## Encabezado 2\n### Encabezado 3\n#### Encabezado 4\n##### Encabezado 5\n###### Encabezado 6\n</code></pre> <p>Se corresponde con:</p> <p>Tambi\u00e9n puedes cerrar los encabezados con el mismo n\u00famero de almohadillas, por ejemplo escribiendo <code>### Encabezado 3 ###</code>. Pero la \u00fanica finalidad de esto es un motivo est\u00e9tico.</p>"},{"location":"ud00/ud0002/#texto-basico","title":"Texto b\u00e1sico","text":"<p>Un p\u00e1rrafo no requiere sintaxis especial.</p> <p>Para aplicar negrita al texto, se escribe entre dos asteriscos. </p> <p>Para aplicar cursiva al texto, se escribe entre un solo asterisco.</p> <p>Para tachar el texto, se escribir\u00e1 dos virgulillas antes y dos despu\u00e9s de \u00e9ste.</p> Text Only<pre><code>Este texto es en **negrita**.\nEste texto es en *it\u00e1lica*.\nEste texto est\u00e1 ~~tachado~~.\nEste texto es en ambos ***negrita e it\u00e0lica***.\n</code></pre> <p>Se corresponde a:</p> Text Only<pre><code>Este texto es en \\*\\***negrita**\\*\\*.\n\nEste texto es en *\\*it\u00e1lica*\\*.\n\nEste texto est\u00e1 ~~tachado~~.\n\nEste texto es en ambos \\*\\*\\****negrita e it\u00e0lica***\\*\\*\\*.\n</code></pre> <p>Subrayar</p> <p>En Markdown no podemos subrayar el texto. Sin embargo, podremos a\u00f1adir la etiqueta de html underline <code>&lt;u&gt;...&lt;/u&gt;</code>.  Este texto est\u00e1 subrayado.</p> <p>Para ignorar los caracteres de formato de Markdown, pon <code>\\</code> antes del car\u00e1cter:</p>"},{"location":"ud00/ud0002/#citas","title":"Citas","text":"<p>Las citas se generar utilizando el car\u00e1cter mayor que <code> &gt; </code> al comienzo del bloque de texto.</p> Text Only<pre><code>&gt; No hay que ir para atr\u00e1s ni para darse impulso.  \u2014 Lao Ts\u00e9.\n</code></pre> <p>No hay que ir para atr\u00e1s ni para darse impulso.  \u2014 Lao Ts\u00e9.</p> <p>Si la cita en cuesti\u00f3n se compone de varios p\u00e1rrafos, deber\u00e1s a\u00f1adir el mismo s\u00edmbolo <code>&gt;</code> al comienzo de cada uno de ellos.</p>"},{"location":"ud00/ud0002/#listas","title":"Listas","text":""},{"location":"ud00/ud0002/#listas-ordenadas","title":"Listas ordenadas","text":"<p>Para crear listas numeradas, empieza una l\u00ednea con <code>1.</code> or <code>1)</code>.</p> <p>No debes mezclar los formatos dentro de la misma lista. No es necesario especificar los n\u00fameros. GitHub lo hace por t\u00ed.</p> Text Only<pre><code>1. \u00cdtem 1 de la lista.\n1. Siguiente \u00edtem de la lista.\n1. Siguiente \u00edtem, el tercero, de la lista.\n</code></pre> <p>Se corresponde con:</p> <ol> <li>\u00cdtem 1 de la lista.</li> <li>Siguiente \u00edtem de la lista.</li> <li>Siguiente \u00edtem, el tercero, de la lista.</li> </ol>"},{"location":"ud00/ud0002/#listas-no-ordenadas","title":"Listas no ordenadas","text":"<p>Para crear listas no numeradas, o de vi\u00f1etas, empieza una l\u00ednea con <code>*</code>, <code>-</code> o <code>+</code>, pero no mezcles los formatos dentro de la misma lista. (No mezclar formatos de vi\u00f1etas, como * y + por ejemplo, dentro del mismo documento).</p> Text Only<pre><code>* \u00cdtem 1 de la lista.\n* Siguiente \u00edtem de la lista.\n* Siguiente \u00edtem, el tercero, de la lista.\n</code></pre> <p>Se corresponde con:</p> <ul> <li>\u00cdtem 1 de la lista.</li> <li>Siguiente \u00edtem de la lista.</li> <li>Siguiente \u00edtem, el tercero, de la lista.</li> </ul> <p>Tambi\u00e9n podremos combinar ambos tipos de listas. Como por ejemplo:</p> <ul> <li> <p>element de llista 2</p> </li> <li> <p>element de llista 2.2</p> <ul> <li>element de llista 2.2.1</li> <li>element de llista 2.2.2</li> </ul> </li> </ul>"},{"location":"ud00/ud0002/#listas-de-tareas","title":"Listas de tareas","text":"<p>Para crear listas de tareas basta con que empiece la l\u00ednea con <code>- [ ]</code>, si queremos que no est\u00e9 el check marcado, y <code>- [x]</code>, si queremos que est\u00e9 el check marcado.</p> Text Only<pre><code>- [x] regar plantas.\n- [ ] realizar ejercicios de programaci\u00f3n.\n</code></pre> <p>Se corresponde con:</p>"},{"location":"ud00/ud0002/#tablas","title":"Tablas","text":"<p>Las tablas no forman parte de la especificaci\u00f3n principal de Markdown, pero Adobe, en cierta forma, las admite. </p> <p>Para generar una tabla utiliza la barra vertical <code>|</code> para generar filas y columnas.</p> <p>Si insertamos guiones <code>---</code> dentro de una celda crearemos el encabezado de la tabla.</p> Markdown<pre><code>| encabezado1 | encabezado2 | encabezado3 |\n|--- |--- |--- |\n| celda 1.1 | celda 1.2 | celda 1.3 |\n| celda 2.1 | celda 2.2 | celda 2.3 |\n</code></pre> <p>Quedar\u00eda:</p> <p>Si queremos una celda con m\u00e1s de una l\u00ednea de texto podremos insertar <code>\\</code> (o Shift+Intro) al final de \u00e9sta.</p>"},{"location":"ud00/ud0002/#enlaces","title":"Enlaces","text":"<p>Para generar en enlace en Markdown se debe poner un c\u00f3digo con dos partes:</p> <ul> <li><code>[texto del enlace]</code>, que es el texto que se va a a mostrar, </li> <li>Y despu\u00e9s <code>(nombrefichero.md)</code>, que es la URL o el nombre de archivo al que se va a vincular.</li> </ul> Text Only<pre><code>[link text](file-name.md)\n</code></pre> Un ejemplo Bash<pre><code>**\\[enlace a web del centro](https://iesmre.com)**\n</code></pre> <p>La visualizaci\u00f3n quedar\u00eda: Bash<pre><code>    [enlace a web del centro](https://iesmre.com)\n</code></pre></p>"},{"location":"ud00/ud0002/#imagenes","title":"Im\u00e1genes","text":"<p>Para insertar una imagen se debe poner un c\u00f3digo con dos partes:</p> <ul> <li><code>![texto alternativo]</code>, que es el texto que se va a a mostrar si la imagen no pudiera visualizarse, </li> <li>Seguido de <code>(nombrefichero.extension)</code>, que es el archivo imagen (con su direcci\u00f3n).</li> </ul> Text Only<pre><code>[texto alternativo](file-name.md)\n</code></pre> Un ejemplo <p>Bash<pre><code>**\\[logo markdown](/assets/mardown_logo.png)**\n</code></pre> La visualizaci\u00f3n de la imagen anterior:  </p>"},{"location":"ud00/ud0002/#codigo-de-bloque","title":"C\u00f3digo de bloque","text":"<p>Uno de los puntos m\u00e1s \u00fatiles de Markdown a la hora de crear un documento con texto espec\u00edfico de inform\u00e1tica es que admite la colocaci\u00f3n de bloques de c\u00f3digo tanto en l\u00ednea como en un bloque \"delimitado\" independiente entre frases.</p> <p>Para ello utilizaremos:</p> <ul> <li>Dos comillas invertidas <code>``</code> si queremos escribir c\u00f3digo dentro de la misma l\u00ednea de texto del p\u00e1rrafo.</li> <li>Si queremos crear un bloque de c\u00f3digo multil\u00ednea, con un lenguaje espec\u00edfico, pondremos <code>```</code> seguido del <code>nombre del lenguaje del bloque</code>.</li> </ul> Ejemplo 1 <p>En la misma l\u00ednea: Bash<pre><code>...estamos escribiendo un p\u00e1rrafo &lt;code&gt;``insertar el bloque&lt;/code&gt; y seguimos escribiendo...\n</code></pre></p> Ejemplo 2 <p>Un bloque de c\u00f3digo: <code>```javascript</code> y escribimos el c\u00f3digo. JavaScript<pre><code>function holamundo(){\n    console.log (\"hola mundo web\");\n}\n</code></pre></p>"},{"location":"ud00/ud0002/#linea-horizontal","title":"L\u00ednea horizontal","text":"<p>Para crear una l\u00ednea horizontal, de separaci\u00f3n de contenido por ejemplo, se a\u00f1aden tres guiones:  <code>---</code></p> <p>Visualizaci\u00f3n:</p>"},{"location":"ud00/ud0002/#insertar-emojis","title":"Insertar emojis","text":"<p>Para insertar emojis basta con utilizar <code>:</code> seguido del nombre del emojii y cerrar con otro <code>:</code>.</p> <p>Podemos observar, que en algunos editores markdown, al escribir, por ejemplo, :a nos muestra todos los emojiis con la inicial a.</p> Por ejemplo: Bash<pre><code>&lt;code&gt;: star :&lt;/code&gt;\n</code></pre> <p>Visualizaci\u00f3n:  </p>"},{"location":"ud00/ud0002/#crear-diagrama-de-flujo","title":"Crear diagrama de flujo","text":"<p>Cuando queremos crear documentos con elementos gr\u00e1ficos como diagramas de flujo, debemos generar una especie de c\u00f3digo para construirlos.</p> <ul> <li>Por eso, comenzaremos introduciendo la l\u00ednea de inicio:       <code>```flow</code> </li> <li>Es conveniente asignar un nombre (por ejemplo: st, op, cond, e...) a cada elemento que conforma el diagrama; as\u00ed, despu\u00e9s, podremos unir todos estos.</li> </ul> descripci\u00f3n de elementos c\u00f3digo comenzamos introduciendo la l\u00ednea de inicio <code>```flow</code> elemento de inicio <code>inicio=&gt;start: Nombre</code> elemento de fin <code>fin=&gt;end: Nombre</code> rect\u00e1ngulo <code>op=&gt;operation: texto de nombre</code> condici\u00f3n <code>cond=&gt;condition: texto de la condici\u00f3n (Si o No?)</code> subrutina <code>sub1=&gt;subroutine: nombre subtarea</code> elemento de entrada/salida <code>io1=&gt;inputoutput: nombre elemento entrada/salida</code> conexi\u00f3n de elementos <code>inicio-&gt;op-&gt;cond</code> caminos de la condici\u00f3n <code>cond(yes)-&gt;e</code>        y       <code>cond(no)-&gt;op</code> terminamos con el cierre del bloque de c\u00f3digo <code>```</code> Ejemplo Text Only<pre><code>```flow\ninicio=&gt;start: Usuario\nfin=&gt;end: Acceso\nop=&gt;operation: Operacion de usuario\ncond=&gt;condition: S\u00ed o No?\ninicio-&gt;op-&gt;cond\ncond(yes)-&gt;fin\ncond(no)-&gt;op\n```\n</code></pre> <p>Visualizaci\u00f3n:</p> Text Only<pre><code>inicio=&gt;start: Usuario\nop=&gt;operation: Operacion de usuario\ncond=&gt;condition: S\u00ed o No?\nfin=&gt;end: Acceso\n\ninicio-&gt;op-&gt;cond\ncond(yes)-&gt;fin\ncond(no)-&gt;op\n</code></pre> <p> </p> Ejercicio <p>Intenta realizar un diagrama para \"programar\" un almuerzo. En \u00e9l, deber\u00e1s dar los buenos d\u00edas, indicar que es hora del descanso, y preguntar si algui\u00e9n quiere almorzar. Si no hay nadie que quiera almorzar contigo, debes ir a otro grupo de amigos y volver a indicar que es hora del descanso. Si alguien s\u00ed quiere almorzar escribe en la pizarra que os vais a almorzar y sal al patio.</p>"},{"location":"ud00/ud0002/#crear-secuencias","title":"Crear secuencias","text":"<p>La secuenciaci\u00f3n es paracido a la creaci\u00f3n de diagramas pero la primera l\u00ednea (crear un bloque de c\u00f3digo ser\u00e1 sequence y no ~~flow~~).</p> Ejemplo Text Only<pre><code>```sequence\nAna-&gt;Mundo: Hola Mundo \nNote right of Mundo: Mundo est\u00e1 pensando\\nla respuesta\nMundo--&gt;Ana: C\u00f3mo est\u00e1s? \nAna-&gt;&gt;Mundo: Estoy bien gracias!\n```\n</code></pre> <p>Visualizaci\u00f3n:</p> <p>Text Only<pre><code>Ana-&gt;Mundo: Hola Mundo \nNote right of Mundo: Mundo est\u00e1 pensando\\nla respuesta\nMundo--&gt;Ana: C\u00f3mo est\u00e1s? \nAna-&gt;&gt;Mundo: Estoy bien gracias!\n</code></pre> </p>"},{"location":"ud00/ud0002/#crear-indice","title":"Crear \u00edndice","text":"<p>Para crear el \u00edndice a partir de los encabezados creados debemos insertar <code>[TOC]</code> .</p>"},{"location":"ud00/ud0002/#configuracion-de-typora","title":"Configuraci\u00f3n de Typora","text":""},{"location":"ud00/ud0002/#modificar-la-plantilla-o-css","title":"Modificar la plantilla (o css)","text":"<p>Para modificar el tema (themes) accedemos a Archivo - Preferencias...</p> <p>Dentro de la ventana Preferencias... pulsamos Apariencia (punto 1).     (1) Si queremos modificar el tema: pulsamos en Theme (punto 2).      (2) Si queremos abrir la carpeta que contiene nuestros temas: pulsamos en Abrir carpeta de temas (punto 3). Desde aqu\u00ed podremos introducir nuestro propio <code>.css</code>. Aqu\u00ed dejamos un enlace a un tema abc.css.     (3) Si queremos obtener temas de internet: pulsamos en Get Themes (punto 4). </p>"},{"location":"ud00/ud0002/#crear-portada-cabecera-y-pie-de-pagina","title":"Crear portada, cabecera y pi\u00e9 de p\u00e1gina","text":"<p>Una forma \u00fatil de crear una portada, cabeceras y pi\u00e9 de p\u00e1gina (con contador de p\u00e1ginas) en Typora es utilizar YALM front matter; para eso debemos a\u00f1adir un script en Fichero - Preferencias - Exporta, en el apartado PDF, configurar de la siguiente manera:</p> <p>Marcar el check Read and overwrite export settings from YAML front matters.</p> <p>El script que queda en Append Extra Content (HTML), punto 3 de la imagen, insertar el siguiente c\u00f3digo:</p> JavaScript<pre><code>&lt;meta name=\"unit\" content=\"${unit}\"&gt;\n&lt;meta name=\"title\" content=\"${title}\"&gt;\n&lt;meta name=\"currentPath\" content=\"${currentPath}\"&gt;\n&lt;div id='_export_cover' style=\"height:85vh;\"&gt;\n&lt;div id='_export_unit' style=\"margin-top: 20%; color: #639df3; text-align: center;font-size: 3rem;\"&gt;&lt;/div&gt;\n&lt;div id='_export_title' style=\"color: #003380; text-align: center;font-size: 3rem;\"&gt;&lt;/div&gt;\n&lt;img id=\"imgcover\" style=\"display: block;margin-left: auto;margin-right: auto;width: 75%;\"/&gt;&lt;/div&gt;\n&lt;script&gt;\n    var $cover = document.querySelector(\"#_export_cover\");\n    var unit = document.querySelector(\"meta[name='unit']\").getAttribute(\"content\");\n    var title = document.querySelector(\"meta[name='title']\").getAttribute(\"content\");\n    var currentPath = document.querySelector(\"meta[name='currentPath']\").getAttribute(\"content\");\n    document.body.insertBefore($cover, document.body.childNodes[0])\n    $cover.querySelector(\"#_export_unit\").textContent = unit;\n    $cover.querySelector(\"#_export_title\").textContent = title;\n    document.getElementById(\"imgcover\").src=currentPath+'/../assets/cover.png';\n&lt;/script&gt;\n</code></pre> <p>Seguidamente, al inicio del documento markdown, y delimitadas con <code>---</code>, podremos introducir las variables que utilizaremos ,por ejemplo, para crear el t\u00edtulo de la portada, la cabecera (header) o el pi\u00e9 de p\u00e1gina (footer).</p> Text Only<pre><code>---\n    unit: UD00\n    title: Markdown - Manual de supervivencia\n    language: ES\n    author: Arturo BC [arturoblasco@iesmre.com]\n    subject: Programaci\u00f3n\n    keywords: [Markdown, PROG, 2022, Programacion]\n    IES: IES Mestre Ram\u00f3n Esteve (Catadau) [iesmre.es]\n    header: ${unit}: ${title} - ${subject} (${today})\n    footer:${currentFileName}.pdf - ${author} - ${IES} - ${pageNo}/${pageCount}\n    typora-root-url:${filename}/../\n    typora-copy-images-to:${filename}/../assets\n    imgcover:./assets/cover.png\n---\n</code></pre> Tarea propuesta para el alumn@ <p>Como tarea, se propone: - Crear un documento markdown en tu editor markdown favorito (por ejemplo Typora) que documente informaci\u00f3n acerca de t\u00ed mismo. - En dicho documento crear t\u00edtulo, \u00edndice. - A\u00f1adir 4 encabezados principales (y otros encabezados secundarios dentro de \u00e9stos) en el que hables por ejemplo de: Tus datos, Curr\u00edculum, Aficiones y Otros datos de inter\u00e9s. No hace falta que indiques informaci\u00f3n personal relevante. - Se valorar\u00e1 la inclusi\u00f3n de distintos elementos como: negrita-cursiva-subrayado, listas ordenadas-desordenadas-tareas, enlaces, im\u00e1genes, citas, c\u00f3digo, etc. - Crea una tabla con tu horario semanal de clase. - Si te atreves con ello, crea un diagrama de flujo en el que indiques los pasos que realizas un s\u00e1bado por la ma\u00f1ana. - Exporta el documento a pdf. Subir a la plataforma AULES un documento MD y su PDF de nombre actividad01tunombre.md y actividad01tunombre.pdf.</p>"},{"location":"ud00/ud0003/","title":"0.3 Git","text":""},{"location":"ud00/ud0003/#configuracion-git-config","title":"Configuraci\u00f3n (<code>git config</code>)","text":"<p>Establecer el nombre de usuario:</p> Bash<pre><code>git config --global user.name \"Your-Full-Name\"\n</code></pre> <p>Establecer el correo del usuario:</p> Bash<pre><code>git config --global user.email \"your-email-address\"\n</code></pre> <p>Activar el coloreado de la salida:</p> Bash<pre><code>git config --global color.ui auto\n</code></pre> <p>Mostrar el estado original en los conflictos</p> Bash<pre><code>git config --global merge.conflictstyle diff3\n</code></pre> <p>Mostrar la configuraci\u00f3n</p> Bash<pre><code>git config --list\n</code></pre>"},{"location":"ud00/ud0003/#creacion-de-repositorios","title":"Creaci\u00f3n de repositorios","text":""},{"location":"ud00/ud0003/#creacion-de-un-repositorio-nuevo-git-init","title":"Creaci\u00f3n de un repositorio nuevo (<code>git init</code>)","text":"<p>Este comando crea una nueva carpeta con el nombre del repositorio, que a su vez contiene otra carpeta oculta llamada .git que contiene la base de datos donde se registran los cambios en el repositorio.</p> <p><code>git init &lt;nombre-repositorio&gt;</code> crea un repositorio nuevo con el nombre <code>&lt;nombre-repositorio&gt;</code>.</p>"},{"location":"ud00/ud0003/#copia-de-repositorios-git-clone","title":"Copia de repositorios (<code>git clone</code>)","text":"<p>A partir de que se hace la copia, los dos repositorios, el original y la copia, son independientes, es decir, cualquier cambio en uno de ellos no se ver\u00e1 reflejado en el otro.</p> <p><code>git clone &lt;url-repositorio&gt;</code> crea una copia local del repositorio ubicado en la direcci\u00f3n <code>&lt;url-repositorio&gt;</code>.</p>"},{"location":"ud00/ud0003/#anadir-cambios-a-un-repositorio","title":"A\u00f1adir cambios a un repositorio","text":"<p>Con Git, cualquier cambio que hagamos en un proyecto tiene que pasar por tres estados hasta que guarde definitivamente en el repositorio.</p> <p>Directorio de trabajo: Es el directorio que contiene una copia de una versi\u00f3n concreta del proyecto en la que se est\u00e1 trabajando. Puede contener ficheros que no pertenecen al repositorio.</p> <p>Zona temporal de intercambio (staging area): es una zona donde se guardan los cambios temporalmente desde el directorio de trabajo antes de hacerlos definitivos y registrarlos en el repositorio.</p> <p>Repositorio: Es donde finalmente se guardan los cambios confirmados desde la zona temporal de intercambio.</p>"},{"location":"ud00/ud0003/#anadir-cambios-a-la-zona-de-intercambio-temporal-git-add","title":"A\u00f1adir cambios a la zona de intercambio temporal (<code>git add</code>)","text":"<p><code>git add &lt;fichero&gt;</code> a\u00f1ade los cambios en el fichero <code>&lt;fichero&gt;</code> del directorio de trabajo a la zona de intercambio temporal. <code>git add &lt;carpeta&gt;</code> a\u00f1ade los cambios en todos los ficheros de la carpeta <code>&lt;carpeta&gt;</code> del directorio de trabajo a la zona de intercambio temporal. <code>git add .</code> a\u00f1ade todos los cambios de todos ficheros no guardados a\u00fan en la zona de intercambio temporal.</p>"},{"location":"ud00/ud0003/#anadir-cambios-al-repositorio-git-commit","title":"A\u00f1adir cambios al repositorio (<code>git commit</code>)","text":"<p><code>git commit -m \"mensaje\"</code> confirma todos los cambios de la zona de intercambio temporal a\u00f1adi\u00e9ndolos al repositorio y creando una nueva versi\u00f3n del proyecto. <code>\"mensaje\"</code> es un breve mensaje describiendo los cambios realizados que se asociar\u00e1 a la nueva versi\u00f3n del proyecto.</p> <p><code>git commit --amend -m \"mensaje\"</code> cambia el mensaje del \u00faltimo commit por el nuevo mensaje <code>\"mensaje\"</code>.</p>"},{"location":"ud00/ud0003/#registro-de-cambios","title":"Registro de cambios","text":"<p>Para guardar los cambios en un repositorio Git utiliza una estructura de tres niveles:</p> <ul> <li> <p>Commit Contiene informaci\u00f3n sobre el autor, el momento y el mensaje de los cambios.</p> </li> <li> <p>\u00c1rbol (tree) Cada commit contiene adem\u00e1s un \u00e1rbol donde se registran los nombres y rutas de los ficheros en el repositorio cuando se hizo el commit.</p> </li> <li> <p>Blob (binary file object) Para cada uno de los ficheros listados en el \u00e1rbol hay un blob, que contiene una instant\u00e1nea comprimida del contenido del fichero cuando se hizo el commit.</p> </li> </ul> <p>Si un fichero del repositorio no ha cambiado en el commit, el \u00e1rbol apunta al blob del fichero del \u00faltimo commit donde el fichero cambi\u00f3.</p>"},{"location":"ud00/ud0003/#referenciar-un-commit","title":"Referenciar un commit","text":"<p>Cada commit tiene asociado un c\u00f3digo hash de 40 caracteres hexadecimales que lo identifica de manera \u00fanica. Hay dos formas de referirse a un commit:</p> <ul> <li>Nombre absoluto: Se utiliza su c\u00f3digo hash (basta indicar los 4 o 5 primeros d\u00edgitos).</li> <li>Nombre relativo: Se utiliza la palabra HEAD para referirse siempre al \u00faltimo commit. Para referirse al pen\u00faltimo commit se utiliza HEAD~1, al antepen\u00faltimo HEAD~2, etc.</li> </ul>"},{"location":"ud00/ud0003/#estado-e-historia-de-un-repositorio","title":"Estado e historia de un repositorio","text":""},{"location":"ud00/ud0003/#mostrar-el-estado-de-un-repositorio-git-status","title":"Mostrar el estado de un repositorio (<code>git status</code>)","text":"<p><code>git status</code> muestra el estado de los cambios en el repositorio desde la \u00faltima versi\u00f3n guardada. En particular, muestra los ficheros con cambios en el directorio de trabajo que no se han a\u00f1adido a la zona de intercambio temporal y los ficheros en la zona de intercambio temporal que no se han a\u00f1adido al repositorio.</p>"},{"location":"ud00/ud0003/#mostrar-el-historial-de-versiones-de-un-repositorio-git-log","title":"Mostrar el historial de versiones de un repositorio (<code>git log</code>)","text":"<p><code>git log</code> muestra el historial de commits de un repositorio ordenado cronol\u00f3gicamente. Para cada commit muestra su c\u00f3digo hash, el autor, la fecha, la hora y el mensaje asociado. Este comando es muy vers\u00e1til y muestra la historia del repositorio en distintos formatos dependiendo de los par\u00e1metros que se le den. Los m\u00e1s comunes son:</p> <ul> <li><code>--oneline</code> muestra cada commit en una l\u00ednea produciendo una salida m\u00e1s compacta.</li> <li><code>--graph</code> muestra la historia en forma de grafo.</li> </ul>"},{"location":"ud00/ud0003/#mostrar-los-datos-de-un-commit-git-show","title":"Mostrar los datos de un commit (<code>git show</code>)","text":"<p><code>git show</code> muestra el usuario, el d\u00eda, la hora y el mensaje del \u00faltimo commit, as\u00ed como las diferencias con el anterior.</p> <p><code>git show &lt;commit&gt;</code> muestra el usuario, el d\u00eda, la hora y el mensaje del <code>*commit*</code> indicado, as\u00ed como las diferencias con el anterior.</p>"},{"location":"ud00/ud0003/#mostrar-el-historial-de-cambios-de-un-fichero-git-annotate","title":"Mostrar el historial de cambios de un fichero (<code>git annotate</code>)","text":"<p><code>git annotate</code> muestra el contenido de un fichero anotando cada l\u00ednea con informaci\u00f3n del commit en el que se introdujo. Cada l\u00ednea de la salida contiene los 8 primeros d\u00edgitos del c\u00f3digo hash del commit correspondiente al cambio, el autor de los cambio, la fecha, el n\u00famero de l\u00ednea del fichero y el contenido de la l\u00ednea.</p>"},{"location":"ud00/ud0003/#mostrar-las-diferencias-entre-versiones-git-diff","title":"Mostrar las diferencias entre versiones (<code>git diff</code>)","text":"<p><code>git diff</code> muestra las diferencias entre el directorio de trabajo y la zona de intercambio temporal. <code>git diff --cached</code> muestra las diferencias entre la zona de intercambio temporal y el \u00faltimo commit. <code>git diff HEAD</code> muestra la diferencia entre el directorio de trabajo y el \u00faltimo commit.</p>"},{"location":"ud00/ud0003/#deshacer-cambios","title":"Deshacer cambios","text":""},{"location":"ud00/ud0003/#eliminar-cambios-del-directorio-de-trabajo-o-volver-a-una-version-anterior-git-checkout","title":"Eliminar cambios del directorio de trabajo o volver a una versi\u00f3n anterior (<code>git checkout</code>)","text":"<p><code>git checkout &lt;commit&gt; -- &lt;file&gt;</code> actualiza el fichero <code>&lt;file&gt;</code> a la versi\u00f3n correspondiente al commit <code>&lt;commit&gt;</code>.</p> <p>Suele utilizarse para eliminar los cambios en un fichero que no han sido guardados a\u00fan en la zona de intercambio temporal, mediante el comando <code>git checkout HEAD -- &lt;file&gt;</code></p>"},{"location":"ud00/ud0003/#eliminar-cambios-de-la-zona-de-intercambio-temporal-git-reset","title":"Eliminar cambios de la zona de intercambio temporal (<code>git reset</code>)","text":"<p><code>git reset &lt;fichero&gt;</code> elimina los cambios del fichero <code>&lt;fichero&gt;</code> de la zona de intercambio temporal, pero preserva los cambios en el directorio de trabajo.</p> <p>Para eliminar por completo los cambios de un fichero que han sido guardados en la zona de intercambio temporal hay que aplicar este comando y despu\u00e9s <code>git checkout HEAD -- &lt;fichero&gt;</code>.</p>"},{"location":"ud00/ud0003/#eliminar-cambios-de-un-commit-git-reset","title":"Eliminar cambios de un commit (<code>git reset</code>)","text":"<ul> <li><code>git reset --hard &lt;commit&gt;</code> elimina todos los cambios desde el commit <code>&lt;commit&gt;</code> y actualiza el <code>HEAD</code> este commit. </li> </ul> <p>!!!warning \" \"     Usar con cuidado este comando pues los cambios posteriores al commit indicado se pierden por completo.</p> <p>Suele usarse para eliminar todos los cambios en el directorio de trabajo desde el \u00faltimo commit mediante el comando <code>git reset --hard HEAD</code>.</p> <ul> <li><code>git reset &lt;commit&gt;</code> actualiza el HEAD al commit <code>&lt;commit&gt;</code>; es decir, elimina todos los commits posteriores a este commit, pero no elimina los cambios del directorio de trabajo.</li> </ul>"},{"location":"ud00/ud0003/#ramas","title":"Ramas","text":"<p>Inicialmente cualquier repositorio tiene una \u00fanica rama llamada master (o main) donde se van sucediendo todos los commits de manera lineal.</p> <p>Una de las caracter\u00edsticas m\u00e1s \u00fatiles de Git es que permite la creaci\u00f3n de ramas para trabajar en distintas versiones de un proyecto a la vez.</p> <p>Esto es muy \u00fatil si, por ejemplo, se quieren a\u00f1adir nuevas funcionalidades al proyecto sin que interfieran con lo desarrollado hasta ahora.</p> <p>Cuando se termina el desarrollo de las nuevas funcionalidades las ramas se pueden fusionar para incorporar los cambios al proyecto principal.</p>"},{"location":"ud00/ud0003/#creacion-de-ramas-git-branch","title":"Creaci\u00f3n de ramas (<code>git branch</code>)","text":"<p><code>git branch &lt;rama&gt;</code> crea una nueva rama con el nombre <code>&lt;rama&gt;</code> en el repositorio a partir del \u00faltimo commit, es decir, donde apunte HEAD. Al crear una rama a partir de un commit, el flujo de commits se bifurca en dos de manera que se pueden desarrollar dos versiones del proyecto en paralelo.</p>"},{"location":"ud00/ud0003/#listado-de-ramas-git-log","title":"Listado de ramas (<code>git log</code>)","text":"<p><code>git branch</code> muestra las ramas activas de un repositorio indicando con * la rama activa en ese momento. <code>git log --graph --oneline</code> muestra la historia del repositorio en forma de grafo (<code>--graph</code>) incluyendo todas las ramas (<code>--all</code>).</p>"},{"location":"ud00/ud0003/#cambio-de-ramas-git-checkout","title":"Cambio de ramas (<code>git checkout</code>)","text":"<p><code>git checkout &lt;rama&gt;</code> actualiza los ficheros del directorio de trabajo a la \u00faltima versi\u00f3n del repositorio correspondiente a la rama <code>&lt;rama&gt;</code>, y la activa, es decir, HEAD pasa a apuntar al \u00faltimo commit de esta rama. <code>git checkout -b &lt;rama&gt;</code> crea una nueva rama con el nombre <code>&lt;rama&gt;</code> y la activa, es decir, HEAD pasa a apuntar al \u00faltimo commit de esta rama. Este comando es equivalente aplicar los comandos <code>git branch &lt;rama&gt;</code> y despu\u00e9s <code>git checkout &lt;rama&gt;</code>.</p>"},{"location":"ud00/ud0003/#fusion-de-ramas-git-merge","title":"Fusi\u00f3n de ramas (<code>git merge</code>)","text":"<p><code>git merge &lt;rama&gt;</code> integra los cambios de la rama <code>&lt;rama&gt;</code> en la rama actual a la que apunta HEAD.</p>"},{"location":"ud00/ud0003/#resolucion-de-conflictos","title":"Resoluci\u00f3n de conflictos","text":"<p>Para fusionar dos ramas es necesario que no haya conflictos entre los cambios realizados a las dos versiones del proyecto.</p> <p>Si en ambas versiones se han hecho cambios sobre la misma parte de un fichero, entonces se produce un conflicto y es necesario resolverlo antes de poder fusionar las ramas.</p> <p>La resoluci\u00f3n debe hacerse manualmente observando los cambios que interfieren y decidiendo cu\u00e1les deben prevalecer, aunque existen herramientas como <code>KDif3</code> o <code>meld</code> que facilitan el proceso.</p>"},{"location":"ud00/ud0003/#reorganizacion-de-ramas-git-rebase","title":"Reorganizaci\u00f3n de ramas (<code>git rebase</code>)","text":"<p><code>git rebase &lt;rama-1&gt; &lt;rama-2&gt;</code> replica los cambios de la rama <code>&lt;rama-2&gt;</code> en la rama <code>&lt;rama-1&gt;</code> partiendo del ancestro com\u00fan de ambas ramas. El resultado es el mismo que la fusi\u00f3n de las dos ramas pero la bifurcaci\u00f3n de la <code>&lt;rama-2&gt;</code> desaparece ya que sus commits pasan a estar en la <code>&lt;rama-1&gt;</code>.</p>"},{"location":"ud00/ud0003/#eliminacion-de-ramas-git-branch-d","title":"Eliminaci\u00f3n de ramas (git branch -d)","text":"<p><code>git branch -d &lt;rama&gt;</code> elimina la rama de nombre <code>&lt;rama&gt;</code> siempre y cuando haya sido fusionada previamente. </p> <p><code>git branch -D &lt;rama&gt;</code> elimina la rama de nombre <code>&lt;rama&gt;</code> incluso si no ha sido fusionada. Si la rama no ha sido fusionada previamente se perder\u00e1n todos los cambios de esa rama.</p>"},{"location":"ud00/ud0003/#repositorios-remotos","title":"Repositorios remotos","text":"<p>La otra caracter\u00edstica de Git, que unida a las ramas, facilita la colaboraci\u00f3n entre distintos usuarios en un proyecto son los repositorios remotos.</p> <p>Git permite la creaci\u00f3n de una copia del repositorio en un servidor git en internet. La principal ventaja de tener una copia remota del repositorio, a parte de servir como copia de seguridad, es que otros usuarios pueden acceder a ella y hacer tambi\u00e9n cambios.</p> <p>Existen muchos proveedores de alojamiento para repositorios Git pero los m\u00e1s usados son GitHub y GitLab.</p>"},{"location":"ud00/ud0004/","title":"0.3 Github","text":"<p>Existen muchos proveedores de alojamiento para repositorios Git pero los m\u00e1s usados son GitHub y GitLab.</p>"},{"location":"ud00/ud0004/#que-es-github","title":"\u00bfQu\u00e9 es GitHub?","text":"<p>GitHub es el proveedor de alojamiento en la nube para repositorios gestionados con git m\u00e1s usado y el que actualmente tiene alojados m\u00e1s proyectos de desarrollo de software de c\u00f3digo abierto en el mundo.</p> <p>La principal ventaja de GitHub es que permite albergar un n\u00famero ilimitado de repositorios tanto p\u00fablicos como privados, y que adem\u00e1s ofrece servicios de registro de errores, solicitud de nuevas funcionalidades, gesti\u00f3n de tareas, wikis o publicaci\u00f3n de p\u00e1ginas web, para cada proyecto, incluso con el plan b\u00e1sico que es gratuito.</p>"},{"location":"ud00/ud0004/#configuracion-con-clave-publicaprivada","title":"Configuraci\u00f3n con clave publica/privada","text":"<p>Seguir el manual de github, que resumimos en estos puntos:</p>"},{"location":"ud00/ud0004/#generar-la-clave-linux","title":"Generar la clave (Linux)","text":"Bash<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>o:</p> Bash<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Despu\u00e9s introducir la ubicaci\u00f3n del archivo (o dejarlo por defecto) y introducir la <code>passphrase</code>.</p>"},{"location":"ud00/ud0004/#anadir-la-clave-a-nuestra-cuenta-github","title":"A\u00f1adir la clave a nuestra cuenta github","text":"<p>Siguiendo los pasos de la documentaci\u00f3n.</p>"},{"location":"ud00/ud0004/#configurar-nuestro-equipo-linux","title":"Configurar nuestro equipo linux","text":"<p>Algunas redes bloquean el acceso al puerto <code>22</code> (como por ejemplo la red del instituto), por ello <code>github</code> tiene habilitada la posibilidad de acceder a <code>ssh</code> a trav\u00e9s del puerto <code>443</code> (t\u00edpicamente <code>https</code>). Para configurar nuestro equipo y acceder a <code>github</code> mediante <code>ssh</code> con nuestro usuario y nuestra clave debemos configurar el archivo <code>~/.ssh/config</code> con el siguiente contenido:</p> Text Only<pre><code>Host github.com\nHostname ssh.github.com\nPort 443\nUser arturobc\nIdentityFile ~/.ssh/pubuntu_github_ssh_key\n</code></pre>"},{"location":"ud00/ud0004/#anadir-un-repositorio-remoto-git-remote-add","title":"A\u00f1adir un repositorio remoto (<code>git remote add</code>)","text":"<p><code>git remote add &lt;repositorio-remoto&gt; &lt;url&gt;</code> crea un enlace con el nombre <code>&lt;repositorio-remoto&gt;</code> a un repositorio remoto ubicado en la direcci\u00f3n <code>&lt;url&gt;</code>.</p> <p>Cuando se a\u00f1ade un repositorio remoto a un repositorio, Git seguir\u00e1 tambi\u00e9n los cambios del repositorio remoto de manera que se pueden descargar los cambios del repositorio remoto al local y se pueden subir los cambios del repositorio local al remoto.</p>"},{"location":"ud00/ud0004/#lista-de-repositorios-remotos-git-remote","title":"Lista de repositorios remotos (<code>git remote</code>)","text":"<p><code>git remote</code> muestra un listado con todos los enlaces a repositorios remotos de nidos en un repositorio local. <code>git remote -v</code> muestra adem\u00e1s las direcciones url para cada repositorio remoto.</p>"},{"location":"ud00/ud0004/#descargar-cambios-desde-un-repositorio-remoto-git-pull","title":"Descargar cambios desde un repositorio remoto (<code>git pull</code>)","text":"<p><code>git pull &lt;remoto&gt; &lt;rama&gt;</code> descarga los cambios de la rama <code>&lt;rama&gt;</code> del repositorio remoto <code>&lt;remoto&gt;</code> y los integra en la \u00faltima versi\u00f3n del repositorio local, es decir, en el HEAD.</p> <p><code>git fetch &lt;remoto&gt;</code> descarga los cambios del repositorio remoto <code>&lt;remoto&gt;</code> pero no los integra en la \u00faltima versi\u00f3n del repositorio local.</p>"},{"location":"ud00/ud0004/#subir-cambios-a-un-repositorio-remoto-git-push","title":"Subir cambios a un repositorio remoto (<code>git push</code>)","text":"<p><code>git push &lt;remoto&gt; &lt;rama&gt;</code> sube al repositorio remoto <code>&lt;remoto&gt;</code> los cambios de la rama <code>&lt;rama&gt;</code> en el repositorio local.</p>"},{"location":"ud00/ud0004/#colaboracion-en-repositorios-remotos-de-github","title":"Colaboraci\u00f3n en repositorios remotos de GitHub","text":"<p>Existen dos formas de colaborar en un repositorio alojado en GitHub:</p> <ul> <li>Ser colaborador del repositorio:</li> <li><code>Recibir autorizaci\u00f3n de colaborador</code> por parte de la persona propietaria del proyecto.</li> <li><code>Clonar</code> el repositorio en local.</li> <li><code>Hacer cambios</code> en el repositorio local.</li> <li><code>Subir los cambios</code> al repositorio remoto. Primero hacer <code>git pull</code> para integrar los cambios remotos en el repositorio local y luego <code>git push</code> para subir los cambios del repositorio local al remoto.</li> <li>Replicar el repositorio y solicitar integraci\u00f3n de cambios:</li> <li><code>Replicar</code> el repositorio remoto en nuestra cuenta de GitHub mediante un <code>fork</code>.</li> <li><code>Hacer cambios</code> en nuestro repositorio remoto.</li> <li>Solicitar a la persona propietaria del repositorio original que <code>integre nuestros cambios</code> en su repositorio mediante un <code>pull request</code>.</li> </ul>"},{"location":"ud00/ud0005/","title":"0.5 VS Code","text":""},{"location":"ud00/ud0005/#vscode-integrado-en-github","title":"<code>VsCode</code> integrado en <code>GitHub</code>","text":""},{"location":"ud00/ud0005/#localizar-repositorio","title":"Localizar repositorio","text":"<p>Primero localizamos el repositorio remoto de Github con el que queremos colaborar:</p> <ol> <li>Buscamos al usuario (En todo <code>GitHub</code>):</li> </ol> <ol> <li>Elegimos la pesta\u00f1a <code>Repositorios</code> y despu\u00e9s el repositorio en cuesti\u00f3n:</li> </ol>"},{"location":"ud00/ud0005/#abrir-vscode-integrado","title":"Abrir <code>VSCode</code> integrado","text":"<p>Github cuenta con un editor online muy potente basado en <code>VSCode</code>.</p> <p>Una vez visualizamos el c\u00f3digo del repositorio en cuesti\u00f3n:</p> <p>para abrir el editor solo debemos pulsar la tecla \".\" (punto) de nuestro teclado. Visualizaremos la estructura de carpetas y archivos en un editor <code>VSCode</code> integrado en el navegador Web:</p>"},{"location":"ud00/ud0005/#modificar-un-archivo","title":"Modificar un archivo","text":"<p>Una vez detectada la errata dentro del c\u00f3digo markdown que es muy f\u00e1cil de interpretar (a poco que le dediqu\u00e9is unos minutos) podemos modificar el archivo en cuesti\u00f3n, y a su lado aparecer\u00e1 una M porque el archivo est\u00e1 modificado.</p>"},{"location":"ud00/ud0005/#git-integrado","title":"Git integrado","text":"<p>VSCode lleva integrado un gestor de GIT, el tercer icono de la barra lateral: </p> <p>(1)  Verificamos los archivos cambiados:</p> <p>(2) Los pasamos a \"staged area\" con el s\u00edmbolo \"+\":</p> <p>(3) A\u00f1adimos el comentario del commit:</p> <p>(4) Realizamos el commit:</p> <p> </p> <p>Si el repositorio no es nuestro mostrar\u00e1 este mensaje:  </p> <p>En realidad podemos hacer el fork antes o despu\u00e9s, aqu\u00ed tienes un peque\u00f1o v\u00eddeo que explica qu\u00e9 es un fork.</p> <p>A continuaci\u00f3n nos pide el nombre de la rama que se crear\u00e1 y que luego podremos solicitar se incluya en el proyecto original:</p> <p>Ahora nos pregunta si ya que hemos creado un fork, queremos cambiar el repositorio, y trabajar sobre nuestro fork en lugar de sobre el proyecto original, pulsamos sobre [Switch to Fork]:</p> <p>Ahora ya podemos salir del editor VSCode pulsando sobre el bot\u00f3n de las tres lineas horizontales y elegir la opci\u00f3n \"Go to Repository\":</p>"},{"location":"ud00/ud0005/#pull-request","title":"Pull request","text":"<p>Una vez volvemos a nuestro repositorio (nuestro fork), detectar\u00e1 que hay cambios respecto al repositorio original y nos propone que realicemos un pull request (una petici\u00f3n al usuario propietario del repositorio original para que incluya nuestra modificaci\u00f3n).</p> <p>Una vez pulsado el bot\u00f3n [Compare &amp; pull request] nos aparece la siguiente pantalla:</p> <p>Debemos asegurarnos de que la modificaci\u00f3n se puede agregar al repositorio original \"Able to merge\", y que indicamos en los comentarios nuestro nombre completo para que el profesor nos identifique. F\u00edjate que el nombre del pull request es el nombre del commit que hicimos desde VSCode.</p> <p>Ahora debemos pulsar el bot\u00f3n <code>[Create pull request]</code>.</p>"},{"location":"ud00/ud00ac/","title":"Actividades","text":""},{"location":"ud00/ud00ac/#areas-de-un-repositorio-git","title":"\u00c1reas de un repositorio GIT","text":"<p>En esta actividad deber\u00e1s buscar informaci\u00f3n y explicar las 3 \u00e1reas de un proyecto Git:</p> <ul> <li>Directorio de trabajo (Working directory)</li> <li>\u00c1rea de preparaci\u00f3n (Staging area)</li> <li>Repositorio (Directorio .git)</li> </ul>"},{"location":"ud00/ud00ac/#configurar-nuestro-git","title":"Configurar nuestro git","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea01tunombre con las capturas de pantalla y explicaciones pertinentes.</p> <p>Antes de comenzar a utilizar git, debemos configurarlo con los valores que tendr\u00e1 a partir de ahora (nombre, correo electr\u00f3nico, ...).</p> <p>Para ello, establecemos:</p> <ul> <li>el nombre de usuario:</li> </ul> Text Only<pre><code>git config --global user.name \"tu_nombre_completo\"\n</code></pre> <ul> <li>el correo de usuario:</li> </ul> Text Only<pre><code>git config --global user.email \"tu_direccion_de_correo_electronico\"\n</code></pre> <ul> <li>el coloreado de la salida:</li> </ul> Text Only<pre><code>git config --global colori.ui auto\n</code></pre> <ul> <li>el estado original en los conflictos:</li> </ul> Text Only<pre><code>git config --global merge.conflictstyle diff3\n</code></pre> <p>Para mostrar la configuraci\u00f3n, que ya hemos establecido:</p> Text Only<pre><code>git config --list\n</code></pre>"},{"location":"ud00/ud00ac/#inicializar-repositorio-local","title":"Inicializar repositorio local","text":"<p>En la actividad siguiente, vamos a crear un repositorio local, es decir en nuestro PC personal.  Luego a\u00f1adiremos y modificaremos algunos archivos y registraremos los cambios. Trabajaremos desde el terminal de texto.</p> <p> </p> <p>Debes recopilar la informaci\u00f3n y capturas necesarias para generar el documento final.</p> <p>Seguiremos el siguiente proceso:</p>"},{"location":"ud00/ud00ac/#creamos-una-carpeta-para-alojar-el-proyecto","title":"Creamos una carpeta para alojar el proyecto.","text":"<p>Por ejemplo, podemos poner nuestro nombre:</p> Bash<pre><code>mkdir pruebas-arturo\n</code></pre> <p>Y, acto seguido, entrar en dicha carpeta:</p> Bash<pre><code>cd pruebas-arturo\n</code></pre>"},{"location":"ud00/ud00ac/#comprobamos-que-tenemos-la-carpeta-vacia","title":"Comprobamos que tenemos la carpeta vac\u00eda","text":"Bash<pre><code>ls -la\n</code></pre>"},{"location":"ud00/ud00ac/#inicializamos-el-repositorio","title":"Inicializamos el repositorio","text":"<p>Para inicializar el repositorio se debe ejecutar la siguiente orden dentro de la carpeta:</p> Bash<pre><code>git init\n</code></pre> <p>Puedes observar por el texto <code>Initializade empty Git repository in ...</code> que se acaba de crear un repositorio local:</p>"},{"location":"ud00/ud00ac/#comprobamos-que-se-ha-creado-una-carpeta-git","title":"Comprobamos que se ha creado una carpeta  <code>.git</code>.","text":"<p>Esta es la carpeta donde se registrar\u00e1n todos los cambios que vayamos realizando.</p> Bash<pre><code>ls -la\n</code></pre> <p>Comprueba el contenido de esta nueva carpeta, \u00bfpor qu\u00e9 .git tiene un punto delante?</p>"},{"location":"ud00/ud00ac/#creamoseditamos-un-archivo-readmemd","title":"Creamos/editamos un archivo <code>README.md</code>","text":"<p>Creamos un fichero (con el editor nano, por ejemplo):</p> Bash<pre><code>nano README.md\n</code></pre> <p>Acto seguido, a\u00f1adimos a dicho archivo una l\u00ednea con nuestro nombre y apellidos. Guardamos archivo (en nano con Ctrl+X):</p> <p>Guardar con el mismo nombre (pulsa INTRO):</p>"},{"location":"ud00/ud00ac/#registramos-cambios-en-el-repositorio","title":"Registramos cambios en el repositorio","text":"<p>Para ello deberemos realizar 2 pasos: </p> <p>Paso 1. A\u00f1adimos al \u00e1rea de preparaci\u00f3n con la orden <code>git add ...</code>:   </p> Bash<pre><code>git add README.md\n</code></pre> <p> </p> <p>Si existen varios ficheros que queremos pasar preparaci\u00f3n podemos ejecutar la orden <code>git add .</code>:</p> <p>Paso 2. A\u00f1adimos al repositorio local con la orden <code>git commit -m \"mensage\"</code>: </p> Bash<pre><code>git commit -m \"primer cambio Arturo\"\n</code></pre>"},{"location":"ud00/ud00ac/#realizar-los-puntos-35-36-y-37-otras-dos-veces","title":"Realizar los puntos 3.5, 3.6 y 3.7 otras dos veces","text":"<p>La primera vez a\u00f1adimos una segunda l\u00ednea con la fecha actual y luego volvemos a hacer  <code>git add ...</code>   y   <code>git commit ...</code> correspondientes.</p> <p>La segunda vez a\u00f1adimos una tercera l\u00ednea con el nombre del IES y luego volvemos a hacer  <code>git add ...</code>   y   <code>git commit ...</code> correspondientes.</p>"},{"location":"ud00/ud00ac/#por-ultimo-vemos-cambios-realizados","title":"Por \u00faltimo vemos cambios realizados","text":"<p>Para ver los commit realizados ejecutamos:</p> Bash<pre><code>git  log\ngit  log  --oneline\n</code></pre> <p>Deber\u00edan aparecer 3 commits.</p> <p> </p> <p>No borrar el repositorio local. Lo volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#revisar-commits-realizados","title":"Revisar commits realizados","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea02tunombre con las capturas de pantalla y explicaciones pertinentes.</p> <p>En esta actividad, haremos uso del comando <code>git checkout</code> para movernos por los distintos commits.</p> <p>Antes de nada comprueba que tienes al menos 3 commits realizados. Para ello ejecuta:</p> Bash<pre><code>git  log  --oneline --all\n</code></pre> <p>La opci\u00f3n <code>--oneline</code>, nos muestra la informaci\u00f3n de cada commit en una l\u00ednea.</p> <p>La opci\u00f3n <code>--all</code>,  nos muestra todos los commits.</p> <p>Deber\u00eda aparecerte algo semejante a la siguiente imagen:</p> <p>La primera columna es un hash, un identificador.</p> <p>Los n\u00fameros no est\u00e1n ordenados. En mi caso, el primer commit tiene un hash <code>5e178c8</code>. El \u00faltimo commit es el <code>38428b1</code>. T\u00fa deber\u00edas tener otros hash distintos. No te preocupes, es as\u00ed.</p> <p>La segunda columna es el mensaje que pusimos cuando se hizo el commit.</p> <p>F\u00edjate tambi\u00e9n que en el \u00faltimo commit, en mi caso <code>38428b1</code>, existe un identificador HEAD. \u00c9sta es una referencia que apunta al commit en el que estamos situados en el momento actual. Adem\u00e1s aparece otro identificador master, que indica en la rama en la que estamos. Por defecto, siempre es master.</p> <p>El identificador master siempre apunta al \u00faltimo commit de la rama. Sin embargo el identificador HEAD podemos moverlo y desplazarmos entre distintos commit y ver c\u00f3mo estaban los archivos en cada momento. </p> <p>Para mover el identificador HEAD utilizamos el comando <code>git checkout numero_hash</code>.</p> <p>Realiza los siguientes pasos y crea las capturas correspondientes:</p>"},{"location":"ud00/ud00ac/#ver-el-contenido-de-readmemd-en-commit-actual","title":"Ver el contenido de README.md en commit actual","text":"<p>Para ello:</p> Bash<pre><code>cat  README.md\n</code></pre> <p>Deben aparecer 3 l\u00edneas de texto: tu nombre, la fecha y el IES.</p>"},{"location":"ud00/ud00ac/#vamos-a-movernos-al-primer-commit","title":"Vamos a movernos al primer commit","text":"<p>Para ello hacemos:</p> Bash<pre><code>git  checkout  5e178c8\n</code></pre> <p> </p> <p>T\u00fa deber\u00e1s poner el hash que tengas en el primer commit.</p> <p>Te aparecer\u00e1 un mensaje que contiene \"Te encuentras en estado 'detached HEAD'....\". Esto indica que la referencia HEAD no est\u00e1 al final de la rama. No te preocupes por ello.</p> <p>Ahora veamos el contenido del archivo <code>README.md</code>, Debe aparecer s\u00f3lo una l\u00ednea con tu nombre (el contenido que ten\u00eda el archivo en ese commit):</p> Bash<pre><code>cat README.md\n</code></pre>"},{"location":"ud00/ud00ac/#en-que-posicion-de-la-rama-nos-encontramos","title":"En qu\u00e9 posici\u00f3n de la rama nos encontramos","text":"<p>Para ello ejecutamos:</p> Bash<pre><code>git  log  --oneline --all\n</code></pre> <p>Deber\u00eda aparecer algo semejante a la siguiente imagen:</p> <p>F\u00edjate d\u00f3nde apunta la referencia HEAD en este momento. </p> <p> </p> <p>Algo que quiz\u00e1s te haya pasado desapercibido pero que es extremadamente IMPORTANTE es que cada vez que nos movemos de un commit a otro, el contenido del directorio de trabajo cambia. Esto lo hace git de forma autom\u00e1tica.</p> <p> </p> <p>NO REALIZAREMOS ning\u00fan cambio a los archivos, s\u00f3lo vamos a echar un vistazo.</p>"},{"location":"ud00/ud00ac/#movernos-al-segundo-commit","title":"Movernos al segundo commit","text":"<p>Para ello hacemos:</p> Bash<pre><code>git  checkout  15cb\n</code></pre> <p> </p> <p>En este caso deber\u00e1s poner el hash que tengas en tu repositorio como segundo commit. No es necesario poner todos los d\u00edgitos, podemos acortar el hash. </p> <p>Ejecuta:</p> Bash<pre><code>cat README.md\n</code></pre> <p>y haz una captura de pantalla.</p> <p>Deber\u00edan aparecer 2 l\u00edneas: tu nombre y la fecha.</p>"},{"location":"ud00/ud00ac/#vuelve-a-hacer","title":"Vuelve a hacer","text":"Bash<pre><code>git  log  --oneline --all\n</code></pre> <p>Y comprueba que <code>HEAD</code> est\u00e1 en el segundo commit.</p>"},{"location":"ud00/ud00ac/#volver-al-commit-master","title":"Volver al commit master","text":"<p>Para volver al \u00faltimo commit de la rama master, simplemente hacemos:</p> Bash<pre><code>git checkout master\n</code></pre> <p>Podemos ver que todo est\u00e1 en su sitio haciendo:</p> Bash<pre><code>git log  --oneline --all\n</code></pre> <p>Haz una captura de pantalla.</p> <p> </p> <p>No borrar el repositorio local. Lo volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#etiquetar-commits-y-ver-diferencias","title":"Etiquetar commits y ver diferencias","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea03tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>En esta actividad vamos a ver 3 comandos:</p> <ul> <li><code>git tag</code></li> <li><code>git show</code> </li> <li><code>git diff</code></li> </ul> <p>El primer comando (<code>git tag</code>) nos permite poner etiquetas a los commits. </p> <p> </p> <p>No se etiquetan todos los commits, s\u00f3lo las releases que deseemos.</p> <p>Los 2 siguientes (<code>git show</code> y <code>git diff</code>) son para ver los cambios realizados entre distintos commits. Son muy parecidos aunque con peque\u00f1as diferencias.</p> <p>B\u00e1sicamente <code>git show</code> nos permite ver los cambios de un commit respecto al anterior, mientras que <code>git diff</code> nos permite ver cambios en un rango de commits.</p> <p>De todas formas tanto <code>git show</code> como <code>git diff</code> tienen tantas opciones que aqu\u00ed s\u00f3lo nos centraremos en las esenciales.</p> <p>Empecemos.</p>"},{"location":"ud00/ud00ac/#etiquetamos-el-commit-primero-y-el-tercero","title":"Etiquetamos el commit primero y el tercero.","text":"<p>El primer commit ser\u00e1 la versi\u00f3n 1 de nuestro proyecto. La etiqueta ser\u00e1 <code>v1</code>.</p> <p>El segundo commit no ser\u00e1 etiquetado. </p> <p>El tercer commit ser\u00e1 la versi\u00f3n 2 de nuestro proyecto. La etiqueta ser\u00e1 <code>v2</code>.</p> <p> </p> <p>En la captura se muestra un error que m\u00e1s tarde corregiremos en la etiqueta de la v2.  </p> <p>Para etiquetar utilizamos el comando</p> Bash<pre><code>git  tag  -a  nombre_etiqueta  -m  \"Mensaje\"   commit_a_etiquetar\n</code></pre> <p>Por ejemplo, en mi caso:</p> Bash<pre><code>git tag  -a v1  -m \"Versi\u00f3n 1\"  5e17\ngit tag  -a v2  -m \"Versi\u00f3n 2\"  3842\n</code></pre> <p>La opci\u00f3n <code>-a</code> significa annotate.</p> <p>La opci\u00f3n <code>-m</code> nos permite poner un mensaje.</p> <p>Finalmente debemos poner el commit al que deseamos aplicar la etiqueta.</p> <p>Si por cualquier motivo nos equivocamos al crear la etiqueta podemos eliminarla con:</p> Bash<pre><code>git tag -d nombre_etiqueta\n</code></pre> <p>Por ejemplo, en el caso anterior nos hemos equivocado en el mensaje de v2, as\u00ed que:</p>"},{"location":"ud00/ud00ac/#usando-etiquetas-para-movernos","title":"Usando etiquetas para movernos","text":"<p>Las etiquetas nos permiten referenciar commits de una forma m\u00e1s c\u00f3moda que usando el identificador de hash.</p> <p>Por ejemplo es m\u00e1s c\u00f3modo usar:</p> Bash<pre><code>git checkout v1\n</code></pre> <p>que:</p> Bash<pre><code>git checkout 8b67\n</code></pre> <p>Para volver al \u00faltimo commit:</p> Bash<pre><code>git checkout master\n</code></pre>"},{"location":"ud00/ud00ac/#examinar-cambios-de-un-commit-respecto-al-anterior","title":"Examinar cambios de un commit respecto al anterior","text":"<p>Para ver los cambios introducidos respecto al commit anterior hacemos:</p> Bash<pre><code>git show\n</code></pre> <p>En este caso, al coincidir todos los apuntadores  (HEAD, master, v2 y 3842) al mismo sitio, el comando anterior es equivalente a</p> Bash<pre><code>git show HEAD\ngit show master\ngit show 3842\ngit show v2\n</code></pre> <p>Como podemos observar, se a\u00f1adi\u00f3 una l\u00ednea, la que contiene el IES.</p> <p>Las l\u00edneas a\u00f1adidas aparecen en verde y con un signo <code>+</code>.</p> <p>Las l\u00edneas eliminadas aparecen en rojo y con un signo <code>-</code> (En este caso s\u00f3lo hemos realizado operaciones de adici\u00f3n).</p> <p>Para ver el cambio realizado en el commit segundo respecto al primero:</p> Bash<pre><code>git show 15cb\n</code></pre> <p>Debe aparecer a\u00f1adida la l\u00ednea con la fecha.</p> <p>Y para ver el cambio realizado en el commit primero respecto al repositorio vac\u00edo:</p> Bash<pre><code>git show v1\n</code></pre> <p>Debe aparecer a\u00f1adida la l\u00ednea con el nombre.</p>"},{"location":"ud00/ud00ac/#examinar-cambios-de-un-commit-respecto-anteriores","title":"Examinar cambios de un commit respecto anteriores","text":"<p>Si deseamos ver todos los cambios realizados a lo largo de varios commits, haremos uso de <code>git diff</code>.</p> <p>La forma de uso es </p> Bash<pre><code>git diff commit1..commit2\n</code></pre> <p>Por ejemplo, para ver los cambios entre la versi\u00f3n 1 y la versi\u00f3n 2, hacemos</p> Bash<pre><code>git diff v1..v2\n</code></pre> <p>Podemos ver que se han a\u00f1adido 2 l\u00edneas desde el commit v1.</p> <p>Es muy aconsejable poner primero el commit m\u00e1s antiguo y despu\u00e9s el commit m\u00e1s moderno. Si lo hacemos al contrario, el resultado en lugar de aparecer en color verde aparecer\u00e1 en color rojo, y su interpretaci\u00f3n ser\u00e1 m\u00e1s confusa.</p>"},{"location":"ud00/ud00ac/#diferencia-entre-git-show-y-git-diff","title":"Diferencia entre <code>git show</code> y <code>git diff</code>","text":"<p>Tambi\u00e9n podemos hacer:</p> Bash<pre><code>git show v1..v2\n</code></pre> <p>Ejecuta dicho comando y haz una captura de pantalla. Explica brevemente la diferencia respecto a <code>git diff v1..v2</code></p> <p> </p> <p>No borrar el repositorio local. Lo volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#crear-repositorio-remoto-y-subir-commits-locales","title":"Crear repositorio remoto y subir commits locales","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea04tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>En esta actividad crearemos un repositorio vac\u00edo en GitHub y subiremos el contenido de nuestro repositorio local.</p>"},{"location":"ud00/ud00ac/#creamos-un-repositorio-totalmente-vacio-en-github","title":"Creamos un repositorio totalmente vac\u00edo en GitHub","text":"<p>Accedemos a nuestra cuenta de GitHub. </p> <p>En la esquina superior derecha, pulsamos en el signo + y luego en New repository</p> <p>Escogemos el nombre del repositorio. No tiene porqu\u00e9 coincidir con el nombre del repositorio local, aunque es lo aconsejable para no hacernos un l\u00edo.</p> <p>En lugar de pruebasPROG pon tu nombre.</p> <p> </p> <p>Puedes elegir a tu gusto si el repositorio es p\u00fablico o privado, esto no afectar\u00e1 al resto de secciones.</p> <p> </p> <p>Es muy importante que NO INICIALICES EL REPOSITORIO. Si el repositorio no estuviese vac\u00edo podr\u00eda darnos un conflicto.</p> <p>En una actividad posterior crearemos conflictos y veremos como resolverlos. Pero en en esta actividad, s\u00f3lo vamos a trabajar lo b\u00e1sico.</p> <p>Pulsaremos en Create Repository y nos aparecer\u00e1 una p\u00e1gina como la siguiente:</p> <p>Ah\u00ed podemos ver la URL del repositorio remoto. Hay 2 formas de acceso:</p> <ul> <li>mediante HTTPS</li> <li>mediante SSH</li> </ul> <p> </p> <p>Usaremos SSH ya que es m\u00e1s seguro y nos permite utilizar cifrado p\u00fablico-privado debido a que recientemente github ha deshabilitado el acceso mediante usuario y contrase\u00f1a. En el punto <code>2.1 Configuraci\u00f3n con clave p\u00fablica/privada</code> del archivo <code>UD00_anexo_ES.pdf</code> tienes detallada la configuraci\u00f3n y pasos a seguir, si todavia no has configurado tu PC de este modo... debes hacerlo antes de seguir.</p> <p>M\u00e1s abajo se indican los comandos a ejecutar en nuestro repositorio local. Lo vemos en el siguiente punto. </p> <p>Para tu comodidad, no cierres la p\u00e1gina. M\u00e1s adelante volveremos a ella.</p>"},{"location":"ud00/ud00ac/#asociar-repositorio-local-con-repositorio-remoto","title":"Asociar repositorio local con repositorio remoto","text":"<p>En nuestro repositorio local, para asociarlo con el repositorio remoto, hacemos:</p> Bash<pre><code>git remote add origin git@github.com:arturoblasco/pruebasPROG.git\n</code></pre> <p>Nuestro repositorio remoto ser\u00e1 identificado como origin. Podemos ponerle otro nombre, pero no debemos. Es una convenci\u00f3n ampliamente aceptada poner este nombre al repositorio remoto de GitHub.</p> <p>Para ver si se ha a\u00f1adido bien:</p> Bash<pre><code>git remote -v\n</code></pre> <p>Deben aparecer 2 entradas, una para bajada (fetch) y otra para subida (push)</p> <p> </p> <p>Si por cualquier motivo nos equivocamos y escribimos mal el nombre o la URL, podemos borrar la asociaci\u00f3n con Bash<pre><code>git remote remove origin\n</code></pre> y luego volver a crear la asociaci\u00f3n. </p>"},{"location":"ud00/ud00ac/#subir-todos-los-commits-locales-al-repositorio-remoto","title":"Subir todos los commits locales al repositorio remoto","text":"<p>Para subir el contenido de nuestro repositorio local al repositorio remoto hacemos:</p> Bash<pre><code>git push -u origin master\n</code></pre> <p>El identificador origin es el nombre que dimos a nuestro v\u00ednculo. El identificador master se refiere a la rama principal.</p> <p>Es una convenci\u00f3n ampliamente seguida, as\u00ed que resp\u00e9tala.</p> <p> </p> <p>Si hemos realizado correctamente la configuraci\u00f3n de git en nuestro PC se deber\u00edan enviar los cambios de nuestro PC al repositorio remoto sin pedir contrase\u00f1a ya que estamos usando la llave que tenemos configurada en nuestro sistema.</p>"},{"location":"ud00/ud00ac/#comprobando-la-subida","title":"Comprobando la subida","text":"<p>Volvemos a la p\u00e1gina de GitHub y la actualizamos. Nos aparecer\u00e1 algo semejante a esto:</p> <p>GitHub ofrece muchas funcionalidades.</p> <p>As\u00ed que nos centraremos ahora mismo en las releases. Estas se corresponden con el etiquetado que realizamos en la actividad anterior con <code>git tag</code>. </p> <p>Ten\u00edamos 2 releases, etiquetadas como v1 y v2, pero sin embargo aqu\u00ed no aparece ninguna.</p> <p>El motivo, es que debemos subir las etiquetas por separado con el siguiente comando:</p> Bash<pre><code>git push --tags\n</code></pre> <p>As\u00ed que ejecutaremos dicho comando desde nuestro repositorio local. Refrescaremos la p\u00e1gina. Et voil\u00e0 ! </p>"},{"location":"ud00/ud00ac/#examinando-commits-y-releases-en-github","title":"Examinando commits y releases en GitHub","text":"<p>Pulsa en commits y haz una captura de pantalla. Por tu cuenta puedes examinar cada uno de los commits.</p> <p>Pulsa en Tags y haz una captura de pantalla. Observa que se han creado archivos comprimidos con el c\u00f3digo fuente para descargar.</p> <p> </p> <p>No borrar los repositorio local ni repositorio remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#deshacer-cambios-en-repositorio-local","title":"Deshacer cambios en repositorio local","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea05tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>En esta actividad, veremos qu\u00e9 podemos hacer cuando cometemos errores.</p> <p>Si realizamos alg\u00fan cambio y hemos \"metido la pata\", podemos deshacer el \"entuerto\".</p> <p>Vamos a verlo de forma pr\u00e1ctica haciendo uso del comando  <code>git reset --hard</code></p>"},{"location":"ud00/ud00ac/#deshacer-cambios-en-el-directorio-de-trabajo","title":"Deshacer cambios en el directorio de trabajo","text":"<p>Estando en el \u00faltimo commit de la rama master, modificamos el archivo <code>README.md</code></p> <p>Vamos a eliminar las 2 \u00faltimas l\u00edneas.</p> Bash<pre><code>nano README.md\n</code></pre> <p>Editamos. Debe quedar una sola l\u00ednea con nuestro nombre.</p> <p>Para ver los cambios que hemos introducido ejecutamos:</p> Bash<pre><code>git diff HEAD\n</code></pre> <p>Es decir vamos a ver las diferencias que existen en nuestro directorio de trabajo respecto al commit HEAD, o sea, el \u00faltimo commit confirmado.</p> <p> </p> <p>Si quisiesemos ver las diferencias de nuestro directorio de trabajo respecto al commit de la Versi\u00f3n 1, har\u00edamos <code>git diff v1</code>. Observa que estamos viendo las diferencias hacia al pasado. Esta forma de uso de git diff es diferente a la que vimos en la \u00faltima actividad, en la cual ve\u00edamos las diferencias hacia el futuro.</p> <p>Se ve claramente que hemos eliminado las 2 \u00faltimas l\u00edneas. </p> <p>Para volver el estado de este archivo y de CUALQUIER OTRO de nuestro directorio de trabajo que hayamos modificado, ejecutamos:</p> Bash<pre><code>git reset --hard\n</code></pre>"},{"location":"ud00/ud00ac/#y-para-deshacer-el-area-de-preparacion","title":"\u00bfY para deshacer el \u00e1rea de preparaci\u00f3n?","text":"<p>Imaginemos que hemos ido un poco m\u00e1s lejos, y que adem\u00e1s de modificar el directorio de trabajo, hemos a\u00f1adido los cambios al Staging Area. Es decir hemos hecho:</p> Bash<pre><code>nano README.md\n</code></pre> <p>Borrado las 2 \u00faltimas l\u00edneas.</p> <p>Y luego hemos a\u00f1adido al \u00e1rea de preparaci\u00f3n mediante </p> Bash<pre><code>git add README.md\n</code></pre> <p>No te preocupes en este caso puede tambi\u00e9n aplicarse el comando anterior:</p> Bash<pre><code>git reset --hard\n</code></pre> <p>Dicho comando coge el contenido que hay en nuestro commit confirmado y recupera ambos: el directorio de trabajo y el \u00e1rea de preparaci\u00f3n.</p>"},{"location":"ud00/ud00ac/#y-que-pasa-si-ya-realice-un-commit","title":"\u00bfY qu\u00e9 pasa si ya realic\u00e9 un commit?","text":"<p>Imaginemos que hemos ido todav\u00eda un poco m\u00e1s lejos, y que adem\u00e1s de modificar el directorio de trabajo y a\u00f1adir los cambios al Staging Area, hemos realizado un commit. Es decir hemos hecho</p> Bash<pre><code>nano README.md\n</code></pre> <p>Borrado las 2 \u00faltimas l\u00edneas.</p> <p>Y luego hemos a\u00f1adido al \u00e1rea de preparaci\u00f3n mediante </p> Bash<pre><code>git add README.md\n</code></pre> <p>Y adem\u00e1s hemos hecho</p> Bash<pre><code>git commit -m \"Borras l\u00edneas de README.md\"\n</code></pre> <p>Pues en este caso tambi\u00e9n podemos usar el comando <code>git reset --hard</code> de la siguiente forma:</p> Bash<pre><code>git reset --hard HEAD~1\n</code></pre> <p>HEAD~1 significa el commit anterior al actual. Es decir un commit hacia atr\u00e1s.</p> <p>HEAD~2 significa 2 commits hacia atr\u00e1s. </p> <p>HEAD~n significa n commits hacia atr\u00e1s, sustituyendo n por un n\u00famero.</p> <p> </p> <p>Usar <code>git reset --hard</code> de esta \u00faltima forma es peligroso, porque perdemos el \u00faltimo o \u00faltimos commits. As\u00ed que hay que asegurarse muy bien de que es eso lo que queremos**. </p> <p> </p> <p>No borrar los repositorio local ni el remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#archivo-gitignore","title":"Archivo <code>.gitignore</code>","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea06tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>En esta actividad empezaremos a trabajar con algo m\u00e1s real. Por ejemplo, una sencilla aplicaci\u00f3n de Java. Esta actividad tambi\u00e9n es pr\u00e1ctica.</p> <p>Vamos a seguir utilizando el repositorio que estabamos usando en las actividades anteriores.</p> Bash<pre><code>git log  --oneline --all\n</code></pre>"},{"location":"ud00/ud00ac/#creamos-una-aplicacion-holamundo-en-java-con-nuestro-ide","title":"Creamos una aplicaci\u00f3n HolaMundo en Java con nuestro IDE","text":"<p>Para ello abriremos nuestro IDE favorito (en mi caso Visual Studo Code) crearemos un nuevo proyecto (en mi caso PruebasGit) basado en la misma carpeta en la que tenemos nuestro repositorio local de GIT. Creamos la clase principal, y la modificamos para que pueda imprimir el t\u00edpico \"Hola mundo.\".</p> <p>Nuestra estructura de carpetas deber\u00eda ser algo similar a esto:</p>"},{"location":"ud00/ud00ac/#anadiendo-archivos-al-repositorio-local","title":"A\u00f1adiendo archivos al repositorio local","text":"<p>Como vimos en la actividad anterior, si ahora ejecutamos <code>git diff HEAD</code>, esperariamos ver los cambios de nuestro directorio de trabajo respecto al \u00faltimo commit.</p> <p>Sin embargo esto no es lo que ocurre. NO SE MUESTRA NADA. \u00bfPor qu\u00e9 es esto?</p> <p>Esto es porque <code>git diff HEAD</code> funciona siempre teniendo en cuenta los archivos que ya hab\u00edan sido a\u00f1adidos previamente al repositorio. Es decir s\u00f3lo tiene en cuenta los archivos con seguimiento. </p> <p>Los archivos nuevos son archivos sin seguimiento. En este caso debemos usar <code>git status</code> para ver esta circunstancia.</p> <p>Ahora debemos a\u00f1adir todos estos archivos al \u00e1rea de preparaci\u00f3n (Staging Area) y luego realizar un commit.</p> <p>PERO ESPERA UN MOMENTO. Voy a explicarte algo.</p> <p>Cuando se trabaja con proyectos de c\u00f3digo fuente existen algunos archivos que no interesa a\u00f1adir al repositorio, puesto que no aportan nada. En el repositorio, como norma general, no debe haber archivos ejecutables, ni bytecode, ni c\u00f3digo objeto, y muchas veces tampoco .zip, .rar, .jar, .war, etc. Estos archivos inflan el repositorio y, cuando llevamos muchos commits, hacen crecer demasiado el repositorio y adem\u00e1s pueden ralentizar el trabajo de descarga y subida.</p> <p>Para cada lenguaje y para cada entorno de desarrollo se recomienda no incluir ciertos tipos de archivos. Son los archivos a ignorar. Cada programador puede a\u00f1adir o eliminar de la lista los que considere adecuados. Los archivos y carpetas a ignorar deben indicarse en el archivo <code>.gitignore</code>. En cada l\u00ednea se pone un archivo, una carpeta o una expresi\u00f3n regular indicando varios tipos de archivos o carpetas.</p> <p>En el repositorio https://github.com/github/gitignore tienes muchos ejemplos para distintos lenguajes, herramientas de construcci\u00f3n y entornos.</p> <p>Para el lenguaje Java: https://github.com/github/gitignore/blob/master/Java.gitignore</p> <p>Para la herramienta Gradle: https://github.com/github/gitignore/blob/master/Gradle.gitignore</p> <p>Para el entorno VsCode: https://github.com/github/gitignore/tree/main/Global/VisualStudioCode.gitignore</p> <p>Nosotros, siguiendo las indicaciones de este \u00faltimo enlace vamos a ignorar las carpetas y archivos sugeridos. Entonces, el archivo <code>.gitignore</code> debe tener el siguiente contenido:</p> Bash<pre><code>.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n</code></pre> <p>La barra final es opcional, pero a m\u00ed me gusta ponerla cuando me refiero a carpetas, para as\u00ed saber cuando se trata de un archivo y cuando de una carpeta.</p> <p>Crea el archivo <code>.gitignore</code> con dicho contenido y haz una captura de pantalla.</p> <p>Ahora si, hacemos:</p> Bash<pre><code>git add .\ngit status\n</code></pre> <p>veremos que no nos aparecen las carpetas <code>dist</code>, <code>build</code> ni <code>nbproject/private</code>, ni ninguno de los archivos omitidos en <code>.gitignore</code>.</p> <p>Ahora ya podemos ejecutar</p> Bash<pre><code>git  commit  -m  \"C\u00f3digo fuente inicial\"\n</code></pre> <p> </p> <p>F\u00edjate que he escrito <code>git add .</code> . El punto indica el directorio actual, y es una forma de indicar que incluya en el \u00e1rea de preparaci\u00f3n todos los archivos del directorio en el que me encuentro (salvo los archivos y carpetas indicados en <code>.gitignore</code>) Se utiliza bastante esta forma de git add cuando no queremos a\u00f1adir los archivos uno a uno.</p>"},{"location":"ud00/ud00ac/#subir-cambios-de-repositorio-local-a-repositorio-remoto","title":"Subir cambios de repositorio local a repositorio remoto","text":"<p>Ya s\u00f3lo nos queda subir los cambios realizados al repositorio remoto con git push</p> <p>Para hacer algo m\u00e1s interesante este apartado, vamos a crear una etiqueta en el commit actual y subirla a github para que \u00e9ste cree una nueva release.</p> Bash<pre><code>git  tag  v3\ngit  push --tags\n</code></pre> <p>En este caso, podr\u00edamos tambi\u00e9n haber ejecutado:</p> Bash<pre><code>git push origin v3\n</code></pre> <p>Y la historia de nuestro repositorio local nos quedar\u00eda as\u00ed de bonita:</p> <p>Accede a tu repositorio en GitHub y haz una captura de pantalla de las Tags.</p> <p>Haz otra captura de los archivos y carpetas de c\u00f3digo subidas a GitHub. No deber\u00edan aparecer la carpeta <code>lib</code>. Y s\u00ed deber\u00eda aparecer el archivo <code>.gitignore</code>.</p> <p> </p> <p>La carpeta <code>.git</code> nunca se muestra en GitHub.</p> <p> </p> <p>No borrar los repositorio local ni repositorio remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#usando-un-par-de-claves-ssh","title":"Usando un par de claves SSH","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea07tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p> </p> <p>GitHub ya no permite las conexiones por HTTP, solo por SSH, y esto ya lo hicimos al comenzar los ejercicios, as\u00ed que te puedes saltar el paso 8 e ir directamente al punto 9. Lo dejo aqu\u00ed como referencia y consulta.</p> <p>Como habr\u00e9is observado, cada vez que hacemos un <code>git push</code> nos pide el usuario y contrase\u00f1a. Esto es bastante molesto.</p> <p>Una forma de evitar esto es mediante un par de claves SSH (una clave privada y una clave p\u00fablica). Ambas se complementa. La una sin la otra no sirve de nada.</p> <p>Este m\u00e9todo evita que nuestro usuario y contrase\u00f1a de GitHub se guarde en un archivo de disco. Por tanto es muy seguro. En caso de que algui\u00e9n haga login en nuestro PC podr\u00eda acceder a nuestras claves. En dicho caso eliminar\u00edamos el par de claves y volver\u00edamos a crear unas nuevas y nuestro usuario y contrase\u00f1a de GitHub nunca se ver\u00edan comprometidos.</p> <p>Vamos a seguir los siguientes pasos:</p>"},{"location":"ud00/ud00ac/#generamos-un-par-de-claves-ssh","title":"Generamos un par de claves SSH","text":"<p>Es muy sencillo. Como usuario normal (sin ser root) ejecutamos el comando</p> Bash<pre><code>ssh-keygen\n</code></pre> <p>Pulsamos Intro a todo. Salvo que ya exista un par de claves previo. En ese caso nos preguntar\u00e1 si deseamos sobreescribir (Override (y/n)? ) En este caso, en esta pregunta respondemos y . Luego todo Intro.</p> <p>Esto nos crear\u00e1 una carpeta ~/.ssh  y dentro al menos 2 archivos: </p> <ul> <li>id_rsa</li> <li>id_rsa.pub</li> </ul> <p>El primero archivo corresponde a la clave privada y el segundo a la clave p\u00fablica.</p> <p>Copiamos el contenido de la clave p\u00fablica en un editor de texto. Nos har\u00e1 falta m\u00e1s adelante.</p> <p>Debe copiarse  ssh-rsa  ....  jose@lenovo </p> <p>En vuestro caso, en lugar de jose@lenovo aparecer\u00e1 otro usuario y pc.</p>"},{"location":"ud00/ud00ac/#anadimos-clave-ssh-publica-a-github","title":"A\u00f1adimos clave ssh p\u00fablica a github.","text":"<p>Iniciamos sesi\u00f3n de GitHub y en el men\u00fa general (esquina superior derecha) seleccionamos la opci\u00f3n Settings.</p> <p>Luego, en la parte izquierda, elegimos la opci\u00f3n SSH y GPG keys</p> <p>A continuaci\u00f3n, a la derecha, pulsamos en el bot\u00f3n New SSH key</p> <p>Luego ponemos un nombre a la clave, por ejemplo pc-casa. Y copiamos el contenido de la clave p\u00fablica. Finalmente, pulsamos en el bot\u00f3n Add SSH key </p> <p>La clave anterior puede usarse para cualquiera de nuestros repositorios. Para hacer uso de ella, lo \u00fanico que necesitamos es la URL en formato SSH de cada repositorio.</p>"},{"location":"ud00/ud00ac/#comprobamos-que-se-ha-creado-bien","title":"Comprobamos que se ha creado bien","text":"<p>Si, por cualquier motivo, alguien accediera a nuestro PC y cogiera la clave privada, bastar\u00eda con eliminar esta clave p\u00fablica de GitHub y al ladr\u00f3n no le servir\u00eda de nada nuestra clave privada.</p>"},{"location":"ud00/ud00ac/#obteniendo-url-ssh-del-repositorio","title":"Obteniendo URL SSH del repositorio","text":"<p>Bot\u00f3n Clone or download, Use SSH</p> <p>Copiamos URL en formato SSH. Su formato es relativamente f\u00e1cil de memorizar. Siempre git@githbub.com seguido de dos puntos :  y luego el nombre de usuario / nombre de repositorio.</p>"},{"location":"ud00/ud00ac/#asociando-nuestro-repositorio-local-mediante-ssh","title":"Asociando nuestro repositorio local mediante SSH","text":"<p>Nuestro repositorio local estaba asociado a origin mediante HTTPS. Debemos dar de baja dicho enlace y crear uno nuevo que haga uso del protocolo SSH.</p> <p>Ejecutamos:</p> Bash<pre><code>git  remote  remove  origin\ngit  remote  add  origin   git@github.com:tu_usuario/tu_repositorio\n</code></pre>"},{"location":"ud00/ud00ac/#creamos-un-commit-y-subimos-a-github","title":"Creamos un commit y subimos a GitHub","text":"<p>Para comprobar que no nos pide usuario y contrase\u00f1a cuando hagamos git push, vamos a modificar el archivo README.md , crear un commit y subir a GitHub.</p> <p>Pondremos al principio de cada l\u00ednea el s\u00edmbolo &gt;  y un espacio. El archivo README.md quedar\u00eda m\u00e1s o menos as\u00ed:</p> Text Only<pre><code>&gt; Arturo BC\n&gt; 12 Noviembre 2022\n&gt; IES Mestre Ram\u00f3n Esteve\n</code></pre> <p>Luego guardamos. Ejecutamos:</p> Bash<pre><code>git add README.md\ngit commit -m \"A\u00f1adida cita\"\ngit push -u origin master\n</code></pre> <p>Al ejecutar el \u00faltimo comando, se realizar\u00e1 una conexi\u00f3n SSH con GitHub.</p> <p>Cuando se realiza una conexi\u00f3n SSH con una nueva clave, la primera vez se pide confirmaci\u00f3n y deber\u00e1s escribir yes. Despu\u00e9s de ello, quedar\u00e1 registrado el host remoto en el archivo .ssh/known_hosts. Las siguientes veces ya no se pide confirmaci\u00f3n, siempre que el archivo <code>.ssh/known_hosts</code> contenga dichos registros.</p> <p> </p> <p>No borrar los repositorio local ni repositorio remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#resolviendo-conflictos","title":"Resolviendo conflictos","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea08tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>En esta actividad veremos qu\u00e9 se entiende por conflicto, cu\u00e1ndo se produce y c\u00f3mo resolverlo.</p> <p>Como sab\u00e9is un mismo repositorio puede tener copias en distintos sitios.  Ahora mismo tenemos una copia en GitHub y otra local en nuestro PC. Pero podr\u00edan existir m\u00e1s copias locales en otros PC.</p> <p>Siempre que realicemos cambios (es decir commits) en el mismo archivo en las mismas l\u00edneas pero en copias distintas, se producir\u00e1 un conflicto.</p> <p>Para ver esto, vamos a hacer un commit en nuestro repositorio en GitHub, y luego haremos un commit en nuestro repositorio local. Trabajaremos con el archivo <code>README.md</code> \u00fanicamente.</p>"},{"location":"ud00/ud00ac/#modificamos-archivo-readmemd-remoto","title":"Modificamos archivo README.md remoto","text":"<p>En GitHub vamos a modificar el archivo <code>README.md</code> y registrar el cambio (commit).</p> <p>Para ello, entramos en nuestro repositorio remoto, pulsamos sobre el archivo <code>README.md</code>y luego pulsamos sobre el l\u00e1piz para editar.</p> <p> </p> <p>Recientemente (mediados de agosto de 2021) gitHub a\u00f1adi\u00f3 una funcionalidad interesante a todos sus repositorios, y es la posibilidad de abrir el editor vsCode online para cualquier repositorio simplemente usando la hotkey <code>.</code>.  Por tanto podemos hacer esta modificaci\u00f3n tal y como se muestra en las capturas, o pulsar la tecla \".\" (punto) y usar vsCode Online para hacer la modificaci\u00f3n.</p> <p>Insertamos una primera l\u00ednea con t\u00edtulo # y modificamos la l\u00ednea de la fecha.</p> <p>Registramos commit. Para ello pulsamos en Commit changes</p> <p>Si lo deseamos, podemos poner un mensaje al commit y un descripci\u00f3n, aunque no es obligatorio. GitHub pone una por defecto.</p>"},{"location":"ud00/ud00ac/#modificamos-archivo-readmemd-local","title":"Modificamos archivo README.md local","text":"<p>En nuestro repositorio local, tambi\u00e9n vamos a modificar el archivo README.md.</p> <p>En este caso a\u00f1adiremos una l\u00ednea al final del archivo y modificaremos la l\u00ednea de la fecha.</p> Bash<pre><code>nano  README.md\n</code></pre> <p>Guardamos los cambios y registramos commit.</p> Bash<pre><code>git add README.md\ngit commit -m \"Actualizaci\u00f3n de README.md\"\n</code></pre>"},{"location":"ud00/ud00ac/#intentamos-subir-el-commit-local","title":"Intentamos subir el commit local","text":"<p>Al intentar subir nuestro commit local al repositorio remoto,  se rechazar\u00e1.</p> Bash<pre><code>git push\n</code></pre> <p>Esto no es un conflicto. Simplemente nos dice que debemos actualizar antes nuestro repositorio local con el contenido del repositorio remoto.</p> <p>Si hemos realizado cambios en nuestro repositorio remoto, deberemos integrarlos en nuestro repositorio local antes de poder subir nuevos cambios locales.</p>"},{"location":"ud00/ud00ac/#se-produce-conflicto","title":"Se produce conflicto","text":"<p>As\u00ed que ejecutamos:</p> Bash<pre><code>git pull origin master\n</code></pre> <p>para bajar los commits del repositorio remoto que no tenemos en local.</p> <p>Esto no tendr\u00eda por qu\u00e9 provocar un conflicto. Pero en este caso s\u00ed se produce, porque hemos modificado el mismo archivo (<code>README.md</code>) y adem\u00e1s en la misma linea (la l\u00ednea de la fecha).</p> <p>As\u00ed que se realiza la fusi\u00f3n, pero nos avisa que hay conflicto en dicho archivo. Deberemos resolverlo manualmente.</p>"},{"location":"ud00/ud00ac/#arreglamos-conflicto","title":"Arreglamos conflicto","text":"<p>Para arreglar el conflicto, abrimos el archivo en cuesti\u00f3n y en la l\u00ednea o l\u00edneas donde se ha producido el conflicto veremos unas marcas como las siguientes:</p> <p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></p> Text Only<pre><code> &lt;&lt;&lt;&lt;&lt;&lt;&lt;\n l\u00ednea o l\u00edneas en commit local\n =======\n l\u00ednea o l\u00edneas en commit remoto\n &gt;&gt;&gt;&gt;&gt;&gt;&gt;\n</code></pre> <p>Resolver el conflicto consiste en elegir una de las 2 opciones y eliminar las marcas anteriores.  Aunque tambi\u00e9n podemos no elegir ninguna de las opciones y escribir otra en su lugar. Esto es lo que yo he hecho aqu\u00ed al poner fecha 11 agosto 2022.</p> <p>A continuaci\u00f3n, guardamos los cambios. Y registramos un nuevo commit.</p> Bash<pre><code>git add README.md\ngit commit  -m \"Arreglado conflicto en README.md\"\n</code></pre> <p>Ahora ya podremos subir nuestro commit con el conflicto solucionado.</p> Bash<pre><code>git push origin master\n</code></pre> <p> </p> <p>Para evitar situaciones como la anterior, es aconsejable no realizar modificaciones en GitHub, y si las hemos realizado o hemos subido commits desde otro repositorio local, lo primero que deber\u00edamos hacer es <code>git pull</code>,  resolver los conflictos que puedan darse, realizar los commits locales que deseemos y finalmente subir commits a GitHub.  Resumiendo, una buena estrategia puede ser la siguiente: al principio del d\u00eda haremos <code>git pull</code>, y al final del d\u00eda haremos <code>git push</code>.</p> <p> </p> <p>No borrar los repositorio local ni repositorio remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#creacion-de-ramas","title":"Creaci\u00f3n de ramas","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea09tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>En esta actividad vamos a empezar a trabajar con ramas. En concreto veremos c\u00f3mo crear nuevas ramas.</p> <p>Podemos definir una rama como un desarrollo paralelo dentro del mismo repositorio. Podemos iniciar dicho desarrollo paralelo en cualquier commit.</p> <p>En esencia, las principales finalidades de las ramas son 2:</p> <ul> <li>hacer cambios en el repositorio sin afectar a la rama master. Tambi\u00e9n aplicable a otras ramas.</li> <li>hacer cambios en el repositorio e integrarlos posteriormente en la rama master. Tambi\u00e9n aplicable a otras ramas.</li> </ul> <p>Por defecto cada repositorio de git dispone de una rama master. \u00c9sta es la rama principal.  Por motivos de seguridad, suele ser frecuente realizar los cambios en alguna otra rama y posteriormente integrarlos en la rama master.  Existen flujos de trabajo ( workflows ) en los que apenas se crean commits en la rama master, s\u00f3lo se integran commits de otras ramas.</p> <p>En esta actividad usaremos 2 m\u00e9todos para trabajar con nuevas ramas:</p> <ul> <li><code>git checkout -b</code> <code>nueva-rama</code></li> <li><code>git branch</code> <code>nueva-rama</code> ,   y luego <code>git checkout</code> <code>nueva-rama</code></li> </ul> <p>Comprobemos antes, el estado actual de nuestro repositorio. Con <code>git log ...</code> podemos ver que s\u00f3lo tenemos la rama master. </p> <p>Para ello ejecutamos</p> Bash<pre><code>git log --oneline --all --graph\n</code></pre> <p>La opci\u00f3n <code>--graph</code> nos permite ver las ramas de forma \"gr\u00e1fica\".</p> <p>Podemos ver tambi\u00e9n \"otra rama\" sin nombre con el commit <code>19ea Update README.md</code>. En realidad \u00e9ste es el commit que editamos en GitHub en una actividad anterior y que tuvimos que fusionar en la rama local master, antes de volver a subirlo a GitHub.</p>"},{"location":"ud00/ud00ac/#crear-rama-mediante-git-checkout","title":"Crear rama mediante <code>git checkout</code>","text":"<p>El comando <code>git checkout -b  nueva-rama</code> tiene esencialmente 2 formas:</p> <ol> <li><code>git checkout -b  nueva-rama</code>  (creamos una nueva rama a partir del commit actual, y nos pasamos a ella).</li> <li><code>git checkout -b  nueva-rama  commit-de-partida</code>  (creamos una nueva rama a partir del commit indicado, y nos pasamos a ella).</li> </ol> <p>En este apartado vamos a crear 2 ramas (las llamaremos <code>rama1</code> y <code>rama2</code>) a partir del primer commit, es decir el commit m\u00e1s antiguo, que tenemos etiquetado como <code>v1</code>.</p> <p>Para crear <code>rama1</code> y movernos a ella, vamos a usar la forma m\u00e1s directa. Para ello hacemos:</p> Bash<pre><code>git checkout -b rama1 v1\n</code></pre> <p>En dicha <code>rama1</code>, creamos un nuevo commit:</p> <p>El resultado es:</p> <p>Ahora hagamos otra rama llamada <code>rama2</code> a partir del commit <code>v1</code>, de una forma un poco distinta.</p> <p>Imaginemos que, por despiste, nos hemos movido al commit <code>v1</code> con:</p> Bash<pre><code>git checkout v1\n</code></pre> <p>Como se nos informa en el mensaje, ahora mismo estamos trabajando en modo despegado (detached HEAD). Esto nos permite realizar los cambios que deseemos creando commits sin afectar a la rama master.</p> <p>Lo aconsejable es ejecutar ahora el comando <code>git checkout -b rama2</code>, porque despu\u00e9s se nos podr\u00eda olvidar, y al cambiar de rama perder\u00edamos los commits realizados. </p> <p>No obstante, vamos a simular que se nos olvida ejecutar el comando anterior. Empezamos a realizar commits. En este caso para simplificar, solo realizaremos un commit.</p> <p>Esto nos crea un nuevo commit. Ejecutamos una vez m\u00e1s</p> Bash<pre><code>git log --oneline --all --graph\n</code></pre> <p>Como se muestra en la captura, no existe ning\u00fan apuntador en forma de rama, as\u00ed que si ahora, por ejemplo, ejecut\u00e1semos <code>git checkout master</code>, perder\u00edamos todos los commits realizados (en este caso s\u00f3lo uno, pero podr\u00edan ser muchos m\u00e1s).</p> <p>Si no deseamos perder dichos commits, debemos ejecutar:</p> Bash<pre><code>git checkout -b rama2\n</code></pre> <p>Despu\u00e9s de esto, ya podremos cambiar de rama con <code>git checkout</code> sin miedo a perder los commits realizados anteriormente. </p> <p>Aseg\u00farate de ejecutar el comando anterior antes de pasar al punto siguiente.</p>"},{"location":"ud00/ud00ac/#crear-ramas-con-git-branch","title":"Crear ramas con <code>git branch</code> ...","text":"<p>El comando <code>git branch  nueva-rama</code> tiene esencialmente 2 formas:</p> <ol> <li><code>git branch  nueva-rama</code>  (Creamos una nueva rama a partir del commit actual, pero NO nos pasamos a ella).</li> <li><code>git branch  nueva-rama  commit-de-partida</code>  (Creamos una nueva rama a partir del commit indicado, pero NO nos pasamos a ella).</li> </ol> <p>Despu\u00e9s de ejecutar una de las formas anteriores, siempre deberemos hacer despu\u00e9s un <code>git checkout</code> si queremos trabajar con la nueva rama.</p> <p>Vamos a ver su uso, haciendo uso de la segunda forma. Desde la rama actual, es decir rama2, vamos a crear 2 ramas (llamadas licencia y autor) a partir de la rama master.</p> Bash<pre><code>git branch licencia master\ngit branch autor    master\n</code></pre> <p>Para empezar a trabajar con alguna de ellas, deberemos ejecutar <code>git checkout ...</code> Por ejemplo:</p> Bash<pre><code>git checkout licencia\n</code></pre> <p>Con <code>git log --oneline --all --graph</code> podemos ver que el apuntador <code>HEAD</code> ahora apunta a la rama <code>licencia</code>.</p> <p>En esta rama crearemos un archivo nuevo llamado <code>LICENSE</code>.</p> <p>Para ello:</p> Bash<pre><code>nano LICENSE\n</code></pre> <p>Escribimos dentro un l\u00ednea con el texto siguiente: GPL v3</p> <p>Y realizamos commit:</p> Bash<pre><code>git add LICENSE\ngit commit -m \"Nuevo archivo LICENSE\"\n</code></pre> <p>Para trabajar con la rama <code>autor</code>, ejecutamos:</p> Bash<pre><code>git checkout autor\n</code></pre> <p>En esta rama vamos a crear un archivo <code>AUTHOR</code> y adem\u00e1s vamos a modificar el archivo <code>README.md</code>.</p> <p>Para ello:</p> Bash<pre><code>nano AUTHOR\n</code></pre> <p>Escribimos dentro un l\u00ednea con el texto de vuestro nombre: Arturo BC</p> <p>Tambi\u00e9n modificaremos el archivo <code>README.md</code>.  En la l\u00ednea donde aparece nuestro nombre, cambiaremos el texto para ponerlo todo en may\u00fasculas.  La finalidad es provocar un conflicto de fusi\u00f3n en un futuro, que resolveremos en la siguiente actividad.</p> <p>Y realizamos commit:</p> Bash<pre><code>git add AUTHOR\ngit commit -m \"Nuevo archivo AUTHOR y editado README.md\"\n</code></pre> <p>El resultado de <code>git log --oneline --all --graph</code> es:</p>"},{"location":"ud00/ud00ac/#subir-ramas-a-repositorio-remoto","title":"Subir ramas a repositorio remoto","text":"<p>Para subir todos los cambios realizados en todas las ramas:</p> <p><code>git push origin --all</code></p> <p>El resultado es que todos los apuntadores a ramas remotas se actualizan (aparecen en color rojo en la siguiente captura)</p> <p>En GitHub, dentro del repositorio correspondiente, podemos ver un gr\u00e1fico de las ramas pulsando en la pesta\u00f1a <code>Insights</code> y luego en la opci\u00f3n <code>Network</code> (en la parte izquierda de la nueva p\u00e1gina) </p> <p> </p> <p>No borrar los repositorio local ni repositorio remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#fusion-y-eliminacion-de-ramas","title":"Fusi\u00f3n y eliminaci\u00f3n de ramas","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea10tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>Esta actividad es una continuaci\u00f3n de la anterior. En ella veremos c\u00f3mo realizar fusi\u00f3n de ramas (merge) y como eliminar apuntadores a ramas antiguas.</p> <p>Vamos a suponer que hemos trabajado en las ramas de la actividad anterior <code>rama1</code>, <code>rama2</code>, <code>licencia</code> y <code>autor</code> a\u00f1adiendo varios commits m\u00e1s, aunque realmente no ha sido as\u00ed (las ramas con un \u00fanico commit no suelen ser tan frecuentes).</p> <p>Y llega el momento de desechar el trabajo realizado en alguna rama e integrar el contenido de otras en la rama <code>master</code>.</p> <p>En esta actividad desecharemos el trabajo realizado en <code>rama2</code>, e integraremos en <code>master</code> las ramas <code>rama1</code>, <code>licencia</code> y <code>autor</code>.</p> <p>Para realizar fusi\u00f3n (merge) de ramas se utiliza el comando:</p> <p><code>git merge ...</code></p>"},{"location":"ud00/ud00ac/#eliminando-una-rama-local","title":"Eliminando una rama local","text":"<p>Para eliminar una rama local se usa el comando:</p> Bash<pre><code>git branch -d  rama\n</code></pre> <p>Por ejemplo, para borrar <code>rama2</code> hacemos</p> Bash<pre><code>git branch -d rama2\n</code></pre> <p>No se ejecuta la eliminaci\u00f3n, puesto que los cambios no han sido integrados en <code>master</code>, ni en ninguna otra rama. </p> <p>Para forzar la eliminaci\u00f3n hacemos</p> Bash<pre><code>git branch -D rama2\n</code></pre> <p>De esta manera perdemos todas las modificaciones que hubi\u00e9semos realizado en dicha rama.</p>"},{"location":"ud00/ud00ac/#fusionando-ramas-locales","title":"Fusionando ramas locales","text":"<p>Vamos a integrar en la rama <code>master</code> los cambios realizados en <code>rama1</code>, <code>licencia</code> y <code>autor</code>.</p> <p>Procederemos de la siguiente forma:</p> <ol> <li>Cambiamos a rama <code>master</code></li> <li>Fusionamos rama <code>licencia</code></li> <li>Fusionamos rama <code>autor</code></li> <li>Fusionamos rama <code>rama1</code></li> </ol>"},{"location":"ud00/ud00ac/#cambiamos-a-rama-master","title":"Cambiamos a rama <code>master</code>","text":"<p>Es MUY IMPORTANTE cambiar a la rama <code>master</code>. Si no hacemos el cambio, todas las fusiones se realizar\u00edan sobre la rama <code>autor</code> (la rama en la que actualmente estamos).</p> <p>Debemos hacer</p> Bash<pre><code>git  checkout master\n</code></pre>"},{"location":"ud00/ud00ac/#fusionamos-rama-licencia","title":"Fusionamos rama <code>licencia</code>","text":"<p>Antes, fij\u00e9monos en la estructura de las ramas. Hacemos </p> Bash<pre><code>git log --oneline --all --graph\n</code></pre> <p>Observa que fusionar la rama <code>licencia</code> en la rama <code>master</code> es equivalente a mover los apuntadores <code>HEAD</code> y <code>master</code> hacia arriba, es decir, hacerlos coincidir con el apuntador <code>licencia</code>.</p> <p>Este tipo de fusi\u00f3n es el m\u00e1s sencillo y nunca da conflictos. Se conoce como fast-forward merge (abreviado FF) o fusi\u00f3n con avance r\u00e1pido.</p> <p>Para fusionar esta rama hacemos</p> Bash<pre><code>git merge licencia\n</code></pre> <p>Observa como queda tras la fusi\u00f3n. \u00danicamente se han movido los apuntadores <code>HEAD</code> y <code>master</code>.</p> <p> </p> <p>No te preocupes ahora mismo por los apuntadores remotos (los que aparecen en color rojo). M\u00e1s adelante los sincronizaremos con el repositorio remoto.</p>"},{"location":"ud00/ud00ac/#fusionamos-rama-autor","title":"Fusionamos rama autor","text":"<p>Si en lugar de fusionar una rama que est\u00e1 adelantada respecto a <code>master</code>,  lo que hacemos es fusionar una rama que est\u00e1 en paralelo con la rama <code>master</code>,  entonces realizaremos una fusi\u00f3n de 3 v\u00edas (3-way merge)</p> <p>Este tipo de fusi\u00f3n puede provocar conflictos. Si ambas ramas contienen modificaciones en las mismas l\u00edneas en los mismos archivos puede producirse un conflicto.</p> <p>En este caso, el archivo <code>README.md</code> posee una l\u00ednea con el nombre del autor, pero con l\u00edneas distintas en las ramas <code>master</code> y <code>autor</code> (todo en may\u00fasculas). </p> <p>Para realizar la fusi\u00f3n:</p> Bash<pre><code>git merge autor\n</code></pre> <p>Cuando aparezca el editor con el mensaje asociado, aceptaremos el mensaje o lo editaremos a nuestro gusto.</p> <p>En este caso no lleg\u00f3 a producirse el conflicto. Se resolvi\u00f3 autom\u00e1ticamente a favor del contenido de la rama <code>autor</code>. Por tanto el autor en el archivo <code>README.md</code> aparecer\u00e1 todo en may\u00fasculas.</p> <p>F\u00edjate como se ha creado un nuevo commit resultado de unir la rama <code>autor</code> y la rama <code>master</code>.  Esto siempre sucede en la fusi\u00f3n de 3 v\u00edas.</p>"},{"location":"ud00/ud00ac/#fusionamos-rama-rama1","title":"Fusionamos rama rama1","text":"<p>Por \u00faltimo, integraremos en master los cambios realizados en la <code>rama1</code>. </p> <p>Es un tipo de fusi\u00f3n de 3 v\u00edas, al igual que el anterior.</p> <p>En este caso, no se producir\u00e1 ning\u00fan conflicto, puesto que en est\u00e1 rama s\u00f3lo hemos realizados cambios sobre el archivo <code>rama1.txt</code>, el cual no existe en la rama <code>master</code>.</p> <p>Para realizar la fusi\u00f3n:</p> Bash<pre><code>git merge rama1\n</code></pre> <p>Cuando aparezca el editor con el mensaje asociado, aceptaremos el mensaje o lo editaremos a nuestro gusto.</p>"},{"location":"ud00/ud00ac/#subiendo-cambios-a-repositorio-remoto","title":"Subiendo cambios a repositorio remoto","text":"<p>Para subir al repositorio remoto todos los cambios realizados en nuestro repositorio local, ejecutamos</p> Text Only<pre><code>git push origin --all\n</code></pre>"},{"location":"ud00/ud00ac/#eliminando-apuntadores-a-ramas-locales","title":"Eliminando apuntadores a ramas locales","text":"<p>Para eliminar los apuntadores locales:</p> Bash<pre><code>git branch -d rama1\n</code></pre> <p>Los apuntadores a <code>licencia</code> y <code>autor</code> no los eliminaremos, por si en el futuro deseamos seguir trabajando en dichas ramas.</p>"},{"location":"ud00/ud00ac/#eliminando-apuntadores-a-ramas-remotas","title":"Eliminando apuntadores a ramas remotas","text":"<p>Para eliminar los apuntadores en el repositorio remoto:</p> Bash<pre><code>git push origin --delete rama1\ngit push origin --delete rama2\n</code></pre> <p>Los apuntadores a <code>origin/licencia</code> y <code>origin/autor</code> no los eliminaremos, por si en el futuro deseamos seguir trabajando en dichas ramas.</p> <p>Para ver el estado ejecutamos <code>git log ...</code> Observa como las ramas est\u00e1n actualizadas y sincronizadas con el repositorio remoto.</p>"},{"location":"ud00/ud00ac/#comprobando-cambios-en-repositorio-remoto","title":"Comprobando cambios en repositorio remoto","text":"<p>Para ver un gr\u00e1fico de las ramas en el repositorio remoto pulsamos en Insights, Network.</p> <p>area propuesta para el alumno/a</p> <p>Subir a la plataforma AULES un documento PDF de nombre tarea12tunombre con las capturas de pantalla y explicaciones pertinentes.**</p> <p>Como tarea, se propone</p> <ul> <li>volver a la rama <code>licencia</code>, a\u00f1adir contenido al archivo <code>LICENSE</code> y hacer commit.</li> <li>volver a la rama <code>autor</code>, a\u00f1adir contenido al archivo <code>AUTHOR</code> y hacer commit.</li> <li>integrar los cambios de ambas ramas en la rama <code>master</code>.</li> </ul> <p> </p> <p>No borrar los repositorio local ni repositorio remoto. Los volveremos a utilizar en la siguiente actividad.*</p>"},{"location":"ud00/ud00ac/#pull-request","title":"Pull-request","text":"<p>Subir a la plataforma AULES un documento PDF de nombre tarea13tunombre con las capturas de pantalla y explicaciones pertinentes.**</p>"},{"location":"ud00/ud00ac/#pull-request_1","title":"pull-request","text":"<p>Sigue los pasos de esta pr\u00e1ctica guiada para sugerir una modificaci\u00f3n de cualquiera de los archivos de los repositorios del profesor arturoblasco. </p> <ol> <li>Adjunta la captura de pantalla similar a esta donde se v\u00e9 que has solicitado el pull request y que est\u00e1s esperando a que se integre en el repositorio original. </li> <li>Explica qu\u00e9 significan cada uno de los 5 apartados se\u00f1alados en la captura:</li></ol>"},{"location":"ud00/ud00ac/#pull-request-2","title":"pull-request 2","text":"<p>Siguiendo los pasos de la pr\u00e1ctica anterior:</p> <ol><li>crearemos un repositorio en el que un compa\u00f1ero propondr\u00e1 un pull-request que nosotros deberemos integrar en nuestro repositorio original y viceversa. </li> <li>deberemos realizar un pull-request a nuestro compa\u00f1ero y que \u00e9l lo acepte.</li></ol> <p>Debes adjuntar a la tarea los pasos a seguir una vez recibido el pull-request para aceptarlo y que se integre en nuestro repositorio, y mostrar adem\u00e1s donde aparece el nombre del usuario que ha colaborado con nostros en el repositorio.</p>"},{"location":"ud00/ud00ac/#repositorio-local-vscode-repositorio-remoto","title":"Repositorio Local + VsCode + Repositorio remoto","text":"<p>En la siguiente pr\u00e1ctica guiada vamos a configurar el espaci\u00f3 de trabajo en el que trabajaremos a lo largo de este curso/m\u00f3dulo de Programaci\u00f3n.</p> <p>La idea va a consistir en:</p> <ul> <li>En local:</li> <li>en VS Code crear un proyecto Java, </li> <li> <p>en el que crearemos un repositorio local.</p> </li> <li> <p>En remoto: </p> </li> <li> <p>crearemos un repositorio remoto en GitHub (ser\u00e1 privado y daremos acceso al profesor/a).</p> </li> <li> <p>enlazaremos nuestro Git local con nuestro Git remoto (en GitHub); as\u00ed, podremos ir subiendo todos nuestros programas.</p> </li> <li>poner a nuestr@ profesor@ del m\u00f3dulo como colaborador@ de nuestro repositorio remoto.</li> </ul> <p>Empecemos:</p> <ol> <li>Abrimos VS Code. Accedemos a la pesta\u00f1a de JAVA PROJECTS, pulsamos el icono de <code>+</code> y elegimos la primera opci\u00f3n <code>No build tools</code>.</li> </ol> <p>Se abre otra ventana flotante en la que elegimos el lugar donde va a estar alojado nuestro proyecto; para ello, crearemos en nuestra ra\u00edz <code>~</code> la carpeta <code>pr</code> y pulsamos bot\u00f3n  <code>Select the project location</code>.</p> <p>Escribimos el nombre del proyecto <code>exercicisJava</code>.</p> <p> </p> <p>Podemos observar la estructura de nuestro primer proyecto Java con su primer programa (sabes cu\u00e1l puede ser?? s\u00ed, es nuestro querido Hola Mundo :smile: ).  Observamos en primer lugar la carpeta <code>src</code> que ser\u00e1 la que contenga todos nuestros ficheros fuente <code>.java</code>. A la derecha podemos observar el contenido del fichero <code>App.java</code>.  La carpeta <code>bin</code> contendr\u00e1 los ficheros ejecutables <code>.class</code> que se generen de la compilaci\u00f3n de nuestros ficheros <code>.java</code>.   </p> <ol> <li>Des de un terminal, accedemos dentro de la carpeta de nuestro reci\u00e9n creado proyecto <code>~\\pr\\exercicisJava</code>. </li> </ol> Bash<pre><code>cd ~\\pr\\exercicisJava\n</code></pre> <p>Inicializamos ah\u00ed dentro, con la orden <code>git init</code>, nuestro repositorio local Git.</p> Bash<pre><code>git init\n</code></pre> <p>Si observamos la estructura de la carpeta del proyecto vemos una carpeta oculta <code>.git</code>.</p> <p>Si realizamos un <code>git status</code> se observa que todav\u00eda no hemos introducido las carpetas contenidas en el proyecto en nuestro repositorio. </p> Bash<pre><code>git status\n</code></pre> <p>Para ello: <code>git add .</code> y a continuaci\u00f3n <code>git commit -m \"1) cargar proyecto inicial\"</code>.</p> Bash<pre><code>git add .\n</code></pre> Bash<pre><code>git commit -m \"1) carga proyecto inicial\"\n</code></pre> <p>Se puede comprobar con <code>git status</code> que, en este momento, no existe ninguna modificaci\u00f3n en el \u00e1rea de trabajo que no se encuentre en el repositorio.</p> <p>Se puede observar este primer commit con <code>git log</code>.</p> Bash<pre><code>git log\n</code></pre> <ol> <li>Es hora de crear nuestro repositorio remoto en GitHub:</li> </ol> <p>El nombre de nuestro repositorio <code>exercicisJava</code>; descripci\u00f3n <code>1\u00ba CFGS DAW - Programaci\u00f3n - Ejercicios de Java</code>, por ejemplo, acceso <code>Private</code> y, por el momento, NO crearemos el fichero README y .gitignore ni elegimos ning\u00fan tipo de licencia.</p> <p>\u200b        Despu\u00e9s de crear el anterior repositorio, entre otras opciones de terminar, encontramos:    </p> <p>\u200b        Vamos a terminar ejecutando esta orden en nuestro terminal (DENTRO de nuestra carpeta de proyecto Java / repositorio local Git) en la que copiamos el repositorio remoto en local:</p> Bash<pre><code>git remote add origin git@github.com:arturoblasco/exercicisJava.git\n</code></pre> <ol> <li>Para terminar, enlazamos el repositorio local de Git con el repositorio remoto en GitHub para \"subir\" nuestro proyecto local al repositorio remoto:</li> </ol> Bash<pre><code>git push origin master\n</code></pre> <p>\u200b   Si vemos en nuestro repositorio de GitHub la sincronizaci\u00f3n ha sido realizada:</p> <ol> <li>Para terminar, ponemos al profesor/a del m\u00f3dulo de Programaci\u00f3n como colaborador de nuestro repositorio:</li> </ol>"},{"location":"ud00/ud00re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Code&amp;Coke (Fernando Valde\u00f3n)</p> </li> <li> <p>Apuntes IES El Grao (M\u00aa Isabel Barquilla?)</p> </li> <li> <p>Apuntes IOC (Marcel Garc\u00eda)</p> </li> <li> <p>Apuntes Jos\u00e9 Luis Comesa\u00f1a</p> </li> <li> <p>Apuntes IES Luis V\u00e9lez de Guevara 17-18 (Jos\u00e9 Antonio Mu\u00f1oz Jim\u00e9nez)</p> </li> <li> <p>Introducci\u00f3n a Git (Alfredo S\u00e1nchez)</p> </li> </ul>"},{"location":"ud01/ud0101/","title":"1.1 Piensa como un programador","text":""},{"location":"ud01/ud0101/#piensa-como-un-programador","title":"Piensa como un programador","text":"<p>Una de las acepciones que trae el Diccionario de Real Academia de la Lengua Espa\u00f1ola (RAE) respecto a la palabra Problema es \u201cPlanteamiento de una situaci\u00f3n cuya respuesta desconocida debe obtenerse a trav\u00e9s de m\u00e9todos cient\u00edficos\u201d. Con miras a lograr esa respuesta, un problema se puede definir como una situaci\u00f3n en la cual se trata de alcanzar una meta y para lograrlo se deben hallar y utilizar unos medios y unas estrategias.</p> <p>La mayor\u00eda de problemas tienen algunos elementos en com\u00fan: un estado inicial; una meta, lo que se pretende lograr; un conjunto de recursos, lo que est\u00e1 permitido hacer y/o utilizar; y un dominio, el estado actual de conocimientos, habilidades y energ\u00eda de quien va a resolverlo (Moursund, 1999).</p> <p>Casi todos los problemas requieren, que quien los resuelve, los divida en submetas que, cuando son dominadas (por lo regular en orden), llevan a alcanzar el objetivo. La soluci\u00f3n de problemas tambi\u00e9n requiere que se realicen operaciones durante el estado inicial y las submetas, actividades (conductuales, cognoscitivas) que alteran la naturaleza de tales estados (Schunk, 1997).</p> <p>Cada disciplina dispone de estrategias espec\u00edficas para resolver problemas de su \u00e1mbito; por ejemplo, resolver problemas matem\u00e1ticos implica utilizar estrategias propias de las matem\u00e1ticas. Sin embargo, algunos psic\u00f3logos opinan que es posible utilizar con \u00e9xito estrategias generales, \u00fatiles para resolver problemas en muchas \u00e1reas. A trav\u00e9s del tiempo, la humanidad ha utilizado diversas estrategias generales para resolver problemas. Schunk (1997), Woolfolk (1999) y otros, destacan los siguientes m\u00e9todos o estrategias de tipo general:</p> <ul> <li>Ensayo y error: Consiste en actuar hasta que algo funcione. Puede tomar mucho tiempo y no es seguro que se llegue a una soluci\u00f3n. Es una estrategia apropiada cuando las soluciones posibles son pocas y se pueden probar todas, empezando por la que ofrece mayor probabilidad de resolver el problema.</li> </ul> <p>Ejemplo</p> <p>Una bombilla que no prende: revisar la bombilla, verificar la corriente el\u00e9ctrica, verificar el interruptor.</p> <ul> <li>Iluminaci\u00f3n: Implica la s\u00fabita conciencia de una soluci\u00f3n que sea viable. Es muy utilizado el modelo de cuatro pasos formulado por Wallas (1921): preparaci\u00f3n, incubaci\u00f3n, iluminaci\u00f3n y verificaci\u00f3n.</li> </ul> <p>Estos cuatro momentos tambi\u00e9n se conocen como proceso creativo. Algunas investigaciones han determinado que cuando en el periodo de incubaci\u00f3n se incluye una interrupci\u00f3n en el trabajo sobre un problema se logran mejores resultados desde el punto de vista de la creatividad. La incubaci\u00f3n ayuda a \"olvidar\" falsas pistas, mientras que no hacer interrupciones o descansos puede hacer que la persona que trata de encontrar una soluci\u00f3n creativa se estanque en estrategias inapropiadas.</p> <p>Ejemplos</p> <p> - Dispones de 6 l\u00e1pices/palillos/cerillas igual de largos, \u00bfcomo puedes formar 4 tri\u00e1ngulos? - Mueve 2 cerillas para seguir teniendo una copa pero con la cereza fuera.</p> <ul> <li>Heur\u00edstica: Se basa en la utilizaci\u00f3n de reglas emp\u00edricas para llegar a una soluci\u00f3n. El m\u00e9todo heur\u00edstico conocido como \u201cIDEAL\u201d, formulado por Bransford y Stein (1984), incluye cinco pasos: </li> </ul> <p>Identificar el problema, definir y presentar el problema, explorar las estrategias viables, avanzar en las estrategias y lograr la soluci\u00f3n y volver para evaluar los efectos de las actividades (Bransford &amp; Stein, 1984). El matem\u00e1tico Polya (1957) tambi\u00e9n formul\u00f3 un m\u00e9todo heur\u00edstico para resolver problemas que se aproxima mucho al ciclo utilizado para programar computadores. A lo largo de esta Gu\u00eda se utilizar\u00e1 este m\u00e9todo propuesto por Polya.</p> <ul> <li> <p>Algoritmos: Consiste en aplicar adecuadamente una serie de pasos detallados que aseguran una soluci\u00f3n correcta. Por lo general, cada algoritmo es espec\u00edfico de un dominio del conocimiento. La programaci\u00f3n de computadores se apoya en este m\u00e9todo.</p> </li> <li> <p>Modelo de procesamiento de informaci\u00f3n: El modelo propuesto por Newell y Simon (1972) se basa en plantear varios momentos para un problema (estado inicial, estado final y v\u00edas de soluci\u00f3n). Las posibles soluciones avanzan por subtemas y requieren que se realicen operaciones en cada uno de ellos.</p> </li> <li> <p>An\u00e1lisis de medios y fines: Se funda en la comparaci\u00f3n del estado inicial con la meta que se pretende alcanzar para identificar las diferencias.</p> </li> </ul> <p>Luego se establecen submetas y se aplican las operaciones necesarias para alcanzar cada submeta hasta que se alcance la meta global. Con este m\u00e9todo se puede proceder en retrospectiva (desde la meta hacia el estado inicial) o en prospectiva (desde el estado inicial hacia la meta).</p> <ul> <li> <p>Razonamiento anal\u00f3gico: Se apoya en el establecimiento de una analog\u00eda entre una situaci\u00f3n que resulte familiar y la situaci\u00f3n problema. Requiere conocimientos suficientes de ambas situaciones.</p> </li> <li> <p>Lluvia de ideas: Consiste en formular soluciones viables a un problema. El modelo propuesto por Mayer (1992) plantea: definir el problema; generar muchas soluciones (sin evaluarlas); decidir los criterios para estimar las soluciones generadas; y emplear esos criterios para seleccionar la mejor soluci\u00f3n. Requiere que los estudiantes no emitan juicios con respecto a las posibles soluciones hasta que terminen de formularlas.</p> </li> <li> <p>Sistemas de producci\u00f3n: Se basa en la aplicaci\u00f3n de una red de secuencias de condici\u00f3n y acci\u00f3n (Anderson, 1990). </p> </li> <li> <p>Pensamiento lateral: Se apoya en el pensamiento creativo, formulado por Edwar de Bono (1970), el cual difiere completamente del pensamiento lineal (l\u00f3gico). El pensamiento lateral requiere que se exploren y consideren la mayor cantidad posible de alternativas para solucionar un problema. Su importancia para la educaci\u00f3n radica en permitir que el estudiante: explore (escuche y acepte puntos de vista diferentes, busque alternativas); avive (promueva el uso de la fantas\u00eda y del humor); libere (use la discontinuidad y escape de ideas preestablecidas); y contrarreste la rigidez (vea las cosas desde diferentes \u00e1ngulos y evite dogmatismos). Este es un m\u00e9todo adecuado cuando el problema que se desea resolver no requiere informaci\u00f3n adicional, sino un reordenamiento de la informaci\u00f3n disponible; cuando hay ausencia del problema y es necesario apercibirse de que hay un problema; o cuando se debe reconocer la posibilidad de perfeccionamiento y redefinir esa posibilidad como un problema (De Bono, 1970).</p> </li> </ul> <p>Ejemplo 1: El dilema del n\u00e1ufrago</p> <p>Un n\u00e1ufrago necesita trasladar a su isla de residencia algunos restos del naufragio de su barco, que afloraron en la orilla de la isla de enfrente. All\u00ed tiene un zorro, un conejo y un racimo de zanahorias, que en su bote puede llevar a raz\u00f3n de uno por viaje. \u00bfC\u00f3mo puede llevarlo todo a su isla, sin que el zorro se coma al conejo, ni \u00e9ste a las zanahorias?.</p> <p>Respuesta: Deber\u00e1 llevar primero al conejo y dejar al zorro con las zanahorias. Luego volver y llevarse al zorro, que dejar\u00e1 a solas en su isla, tomar al conejo y llevarlo de vuelta a la de enfrente. Despu\u00e9s llevar\u00e1 las zanahorias, dejando al conejo solo y deposit\u00e1ndolas junto al zorro. Finalmente regresar\u00e1 para hacer un \u00faltimo viaje con el conejo.</p> <p>Ejemplo 2: El dilema del ascensor</p> <p>Un hombre que vive en el d\u00e9cimo piso de un edificio, toma todos los d\u00edas el ascensor hasta la planta baja, para ir a trabajar. En la tarde, sin embargo, toma de nuevo el mismo ascensor, pero si no hay nadie con \u00e9l, baja en el s\u00e9ptimo piso y sube el resto de los pisos por la escalera. \u00bfPor qu\u00e9?.</p> <p>Respuesta: El hombre es enano y no logra presionar el bot\u00f3n del d\u00e9cimo piso.</p> <p>Ejemplo 3: La paradoja del globo</p> <p>\u00bfDe qu\u00e9 manera podemos pinchar un globo con una aguja, sin que se fugue el aire y sin que el globo estalle?</p> <p>Respuesta: Debemos pinchar el globo estando desinflado.</p> <p>Ejemplo 4: El dilema del bar</p> <p>Un hombre entra a un bar y le pide al barman un vaso de agua. El barman busca debajo de la barra y de golpe apunta al hombre con un arma. Este \u00faltimo da las gracias y se marcha. \u00bfQu\u00e9 acaba de ocurrir?</p> <p>Respuesta: El barman se percat\u00f3 de que el hombre ten\u00eda hipo, y decide cur\u00e1rselo d\u00e1ndole un buen susto.</p> <p>Como se puede apreciar, hay muchas estrategias para solucionar problemas; sin embargo, esta Gu\u00eda se enfoca principalmente en dos de estas estrategias: Heur\u00edstica y Algor\u00edtmica.</p> <p>Seg\u00fan Polya (1957), cuando se resuelven problemas, intervienen cuatro operaciones mentales:</p> <ol> <li>Entender el problema.</li> <li>Trazar un plan.</li> <li> <p>Ejecutar el plan (resolver).</p> </li> <li> <p>Revisar.</p> </li> </ol> <p>Es importante notar que estas son flexibles y no una simple lista de pasos como a menudo se plantea en muchos de esos textos (Wilson, Fern\u00e1ndez &amp; Hadaway, 1993). Cuando estas etapas se siguen como un modelo lineal, resulta contraproducente para cualquier actividad encaminada a resolver problemas. Es necesario hacer \u00e9nfasis en la naturaleza din\u00e1mica y c\u00edclica de la soluci\u00f3n de problemas. En el intento de trazar un plan, los estudiantes pueden concluir que necesitan entender mejor el problema y deben regresar a la etapa anterior; o cuando han trazado un plan y tratan de ejecutarlo, no encuentran c\u00f3mo hacerlo; entonces, la actividad siguiente puede ser intentar con un nuevo plan o regresar y desarrollar una nueva comprensi\u00f3n del problema (Wilson, Fern\u00e1ndez &amp; Hadaway, 1993; Guzdial, 2000).</p> <p> </p> <p>La mayor\u00eda de los textos escolares de matem\u00e1ticas abordan la Soluci\u00f3n de Problemas bajo el enfoque planteado por Polya. Por ejemplo, en \u201cRecreo Matem\u00e1tico 5\u201d (D\u00edaz, 1993) y en \u201cDominios 5\u201d (Melo, 2001) se pueden identificar las siguientes sugerencias propuestas a los estudiantes para llegar a la soluci\u00f3n de un problema matem\u00e1tico:</p> <ol> <li> <p>COMPRENDER EL PROBLEMA.</p> <ul> <li>Leer el problema varias veces.</li> <li>Establecer los datos del problema (\u00bfmarcarlos de alguna manera?).</li> <li>Aclarar lo que se va a resolver (\u00bfCu\u00e1l es la pregunta?).</li> <li>Precisar el resultado que se desea lograr.</li> <li>Determinar la inc\u00f3gnita del problema.</li> <li>Organizar la informaci\u00f3n.</li> <li>Agrupar los datos en categor\u00edas.</li> <li>Trazar una figura o diagrama.</li> </ul> </li> <li> <p>HACER EL PLAN.</p> <ul> <li>Escoger y decidir las operaciones a efectuar.</li> <li>Eliminar los datos in\u00fatiles.</li> <li>Descomponer el problema en otros m\u00e1s peque\u00f1os.</li> </ul> </li> <li> <p>EJECUTAR EL PLAN (Resolver).</p> <ul> <li>Ejecutar en detalle cada operaci\u00f3n.</li> <li>Simplificar antes de calcular.</li> <li>Realizar un dibujo o diagrama.</li> </ul> </li> <li> <p>ANALIZAR LA SOLUCI\u00d3N (Revisar).</p> <ul> <li>Dar una respuesta completa.</li> <li>Hallar el mismo resultado de otra manera.</li> <li>Verificar por apreciaci\u00f3n que la respuesta es adecuada.</li> </ul> </li> </ol> <p>Numerosos autores de libros sobre programaci\u00f3n, plantean cuatro fases para elaborar un procedimiento que realice una tarea espec\u00edfica. Estas fases concuerdan con las operaciones mentales descritas por Polya para resolver problemas:</p> <ol> <li>Analizar el problema (Entender el problema).</li> <li>Dise\u00f1ar un algoritmo (Trazar un plan).</li> <li>Traducir el algoritmo a un lenguaje de programaci\u00f3n (Ejecutar el plan).</li> <li>Depurar el programa (Revisar).</li> </ol> <p>Como se puede apreciar, hay una similitud entre las metodolog\u00edas propuestas para solucionar problemas matem\u00e1ticos (Clements &amp; Meredith, 1992; D\u00edaz, 1993; Melo, 2001; NAP, y las cuatro fases para solucionar problemas espec\u00edficos de \u00e1reas diversas, mediante la programaci\u00f3n de computadores.</p>"},{"location":"ud01/ud0102/","title":"1.2 Problemas, algoritmos y programas","text":""},{"location":"ud01/ud0102/#problemas","title":"Problemas","text":"<p>Podr\u00edamos decir que la programaci\u00f3n es una forma de resoluci\u00f3n de problemas.</p> <p>Para que un problema pueda resolverse utilizando un programa inform\u00e1tico, \u00e9ste tiene que poder resolverse de forma mec\u00e1nica; es decir, mediante una secuencia de instrucciones u operaciones que se puedan llevar a cabo de manera autom\u00e1tica por un ordenador.</p> <p>Ejemplos de problemas resolubles mediante un ordenador</p> <ul> <li>Determinar el producto de dos n\u00fameros a y b.<ul> <li>Determinar la ra\u00edz cuadrada positiva del n\u00famero 2.</li> <li>Determinar la ra\u00edz cuadrada positiva de un n\u00famero n cualquiera.</li> <li>Determinar si el n\u00famero n, entero mayor que uno, es primo.</li> <li>Dada la lista de palabras, determinar las palabras repetidas.</li> <li>Determinar si la palabra p es del idioma castellano.</li> <li>Ordenar y listar alfab\u00e9ticamente todas las palabras del castellano.</li> <li>Dibujar en pantalla un c\u00edrculo de radio r.</li> <li>Separar las silabas de una palabra p.</li> <li>A partir de la fotograf\u00eda de un veh\u00edculo, reconocer y leer su matr\u00edcula.</li> <li>Traducir un texto de castellano a ingl\u00e9s.</li> <li>Detectar posibles tumores a partir de im\u00e1genes radiogr\u00e1ficas.</li> </ul> </li> </ul> <p>Por otra parte, el cient\u00edfico Alan Turing, demostr\u00f3 que existen problemas irresolubles, de los que ning\u00fan ordenador ser\u00e1 capaz de obtener nunca su soluci\u00f3n.</p> <p>Los problemas deben definirse de forma general y precisa, evitando ambig\u00fcedades.</p> <p>Ejemplo: Ra\u00edz cuadrada</p> <ul> <li>Determinar la ra\u00edz cuadrada de un n\u00famero n.</li> <li>Determinar la ra\u00edz cuadrada de un n\u00famero n, entero no negativo, cualquiera.</li> </ul> <p>Ejemplo: Dividir</p> <ul> <li>Calcular la divisi\u00f3n de dos n\u00fameros de dos n\u00fameros a y b.</li> <li>Calcular el cociente entero de la divisi\u00f3n a/b, donde a y b son n\u00fameros enteros y b es distinto de cero. (5/2 = 2).</li> <li>Calcular el cociente real de la divisi\u00f3n a/b, donde a y b son n\u00fameros reales y b es distinto de cero (5/2 = 2.5).</li> </ul>"},{"location":"ud01/ud0102/#algoritmos","title":"Algoritmos","text":"<p>Dado un problema P, un algoritmo es un conjunto de reglas o pasos que indican c\u00f3mo resolver P en un tiempo finito.</p> <p>Secuencias de reglas b\u00e1sicas que utilizamos para realizar operaciones aritm\u00e9ticas: sumas, restas, productos y divisiones.</p> <p>Ejemplo: Algoritmo para desayunar</p> Text Only<pre><code>Inicio\n    Sentarse\n    Servirse caf\u00e9 con leche\n    Servirse azucar\n    Si tengo tiempo\n        Mientras tenga apetito\n            Untar mantequilla en una tostada\n            A\u00f1adir mermelada\n            Comer la tostada\n        Fin Mientras\n    Fin Si\n    Beberse el caf\u00e9 con leche\n    Levantarse\nFin\n</code></pre> <p>Un algoritmo, por tanto, no es m\u00e1s que la secuencia de pasos que se deben seguir para solucionar un problema espec\u00edfico. La descripci\u00f3n o nivel de detalle de la soluci\u00f3n de un problema en t\u00e9rminos algor\u00edtmicos depende de qu\u00e9 o qui\u00e9n debe entenderlo, interpretarlo y resolverlo.</p> <p>Los algoritmos son independientes de los lenguajes de programaci\u00f3n y de las computadoras donde se ejecutan. Un mismo algoritmo puede ser expresado en diferentes lenguajes de programaci\u00f3n y podr\u00eda ser ejecutado en diferentes dispositivos. Piensa en una receta de cocina, \u00e9sta puede ser expresada en castellano, ingl\u00e9s o franc\u00e9s, podr\u00eda ser cocinada en fog\u00f3n o vitrocer\u00e1mica, por un cocinero o m\u00e1s, etc. Pero independientemente de todas estas circunstancias, el plato se preparar\u00e1 siguiendo los mismos pasos.</p>"},{"location":"ud01/ud0102/#caracteristicas-de-los-algoritmos","title":"Caracter\u00edsticas de los algoritmos","text":"<p>Un algoritmo, para que sea v\u00e1lido, tiene que tener ciertas caracter\u00edsticas fundamentales:</p> <ul> <li>Generalidad: han de definirse de forma general, utilizando identificadores o par\u00e1metros. Un algoritmo debe resolver toda una clase de problemas y no un problema aislado particular.</li> <li>Finitud: han de llevarse a cabo en un tiempo finito, es decir, el algoritmo ha de acabar necesariamente tras un n\u00famero finito de pasos.</li> <li>Definibilidad: han de estar definidos de forma exacta y precisa, sin ambig\u00fcedades.</li> <li>Eficiencia: han de resolver el problema de forma r\u00e1pida y eficiente.</li> </ul>"},{"location":"ud01/ud0102/#representacion-de-algoritmos","title":"Representaci\u00f3n de algoritmos","text":"<p>Los m\u00e9todos m\u00e1s usuales para representar algoritmos son los diagramas de flujo y el pseudoc\u00f3digo. Ambos son sistemas de representaci\u00f3n independientes de cualquier lenguaje de programaci\u00f3n. Hay que tener en cuenta que el dise\u00f1o de un algoritmo constituye un paso previo a la codificaci\u00f3n de un programa en un lenguaje de programaci\u00f3n determinado (C, C++, Java, Pascal). La independencia del algoritmo del lenguaje de programaci\u00f3n facilita, precisamente, la posterior codificaci\u00f3n en el lenguaje elegido.</p> <p>Diagrama de flujo (Flowchart) es una de las t\u00e9cnicas de representaci\u00f3n de algoritmos m\u00e1s antiguas y m\u00e1s utilizadas, aunque su empleo disminuy\u00f3 considerablemente con los lenguajes de programaci\u00f3n estructurados. Un diagrama de flujo utiliza s\u00edmbolos est\u00e1ndar que contienen los pasos del algoritmo escritos en esos s\u00edmbolos, unidos por flechas denominadas l\u00edneas de flujo que indican la secuencia en que deben ejecutarse.</p> <p>Los s\u00edmbolos m\u00e1s utilizados son:</p> <p>Ejemplo: Mostrar dos n\u00fameros ordenados de menor a mayor</p> <p> </p> <p>Pseudoc\u00f3digo es un lenguaje de descripci\u00f3n de algoritmos que est\u00e1 muy pr\u00f3ximo a la sintaxis que utilizan los lenguajes de programaci\u00f3n. Nace como medio para representar las estructuras de control de programaci\u00f3n estructurada.</p> <p>El pseudoc\u00f3digo no se puede ejecutar nunca en el ordenador, sino que tiene que traducirse a un lenguaje de programaci\u00f3n (codificaci\u00f3n). La ventaja del pseudoc\u00f3digo, frente a los diagramas de flujo, es que se puede modificar m\u00e1s f\u00e1cilmente si detecta un error en la l\u00f3gica del algoritmo, y puede ser traducido f\u00e1cilmente a los lenguajes estructurados como Pascal, C, fortran, Java, etc.</p> <p>El Pseudoc\u00f3digo utiliza palabras reservadas (en sus or\u00edgenes se escrib\u00edan en ingl\u00e9s) para representar las sucesivas acciones. Para mayor legibilidad utiliza la identaci\u00f3n -sangr\u00eda en el margen izquierdo- de sus l\u00edneas.</p> <p>Ejemplo: Mostrar dos n\u00fameros ordenados de menor a mayor\"*.</p> Text Only<pre><code>Inicio\n    Leer (A, B)\n    Si (A&gt;B) Entonces\n        Escribir (B, A)\n    SiNo\n        Escribir (A, B)\n    FinSi\nFin\n</code></pre> <p>Ejemplo: Mostrar la potencia de un n\u00famero elevado a otro n\u00famero</p> Text Only<pre><code>Inicio\n    Leer (A, B)\n    RESULTADO&lt;-1\n    Desde contador&lt;-1 hasta B con Paso 1 Hacer\n        RESULTADO&lt;-RESULTADO*B\n    FinDesde\n    Escribir (RESULTADO)\nFin\n</code></pre>"},{"location":"ud01/ud0102/#programas","title":"Programas","text":"<p>Algoritmo vs Programa</p> <p>La diferencia fundamental entre algoritmo y programa es que, en el segundo, los pasos que permiten resolver el problema, deben escribirse en un determinado lenguaje de programaci\u00f3n para que puedan ser ejecutados en el ordenador y as\u00ed obtener la soluci\u00f3n.</p> <p>Los lenguajes de programaci\u00f3n son s\u00f3lo un medio para expresar el algoritmo y el ordenador un procesador para ejecutarlo. El dise\u00f1o de los algoritmos ser\u00e1 una tarea que necesitar\u00e1 de la creatividad y conocimientos de las t\u00e9cnicas de programaci\u00f3n. Estilos distintos, de distintos programadores a la hora de obtener la soluci\u00f3n del problema, dar\u00e1n lugar a programas diferentes, igualmente v\u00e1lidos.</p> <p>Pero cuando los problemas son complejos, es necesario descomponer \u00e9stos en subproblemas m\u00e1s simples y, a su vez, en otros m\u00e1s peque\u00f1os. Estas estrategias reciben el nombre de dise\u00f1o descendente (Metodolog\u00eda de dise\u00f1o de programas, consistente en la descomposici\u00f3n del problema en problemas m\u00e1s sencillos de resolver) o dise\u00f1o modular (top\u2010down design) (Metodolog\u00eda de dise\u00f1o de programas, que consiste en dividir la soluci\u00f3n a un problema en m\u00f3dulos m\u00e1s peque\u00f1os o subprogramas; las soluciones de los m\u00f3dulos se unir\u00e1n para obtener la soluci\u00f3n general del problema). Este sistema se basa en el lema divide y vencer\u00e1s.</p>"},{"location":"ud01/ud0102/#estructura-y-bloques-fundamentales-de-un-programa","title":"Estructura y Bloques Fundamentales de un programa","text":"Java<pre><code>public class holaMundo {\n    // programa Hola Mundo\n    public static void main(String[] args) {\n        /* lo \u00fanico que hace este programa es mostrar\n           la cadena \"Hola Mundo!\" por pantalla */\n        System.out.println(\"Hola Mundo!\");\n    }\n}\n</code></pre> <p>Desglosemos el ejemplo anterior:</p> <p>En Java, generalmente, una clase lleva el identificador public y corresponde con un fichero. El nombre de la clase coincide con el del fichero <code>.java</code> respetando may\u00fasculas y min\u00fasculas.</p> Java<pre><code>public class holaMundo {\n    [...]\n}\n</code></pre> <p>El c\u00f3digo java en las clases se agrupa en funciones o m\u00e9todos. Cuando java ejecuta el c\u00f3digo de una clase busca la funci\u00f3n o m\u00e9todo <code>main()</code> para ejecutarla. Es p\u00fablico (<code>public</code>) est\u00e1tico (<code>static</code>) para llamarlo sin instanciar la clase. No devuelve ning\u00fan valor (<code>void</code>) y admite par\u00e1metros (<code>Strings [] args</code>) que en este caso no se han utilizado.</p> Java<pre><code>[...]\n    public static void main (Strings [] args)\n    {\n        [...]\n    }\n[...]\n</code></pre> <p>El c\u00f3digo de la funci\u00f3n <code>main</code> se escribe entre las llaves. Por ejemplo:</p> Java<pre><code>[...]\n        System.out.println(\"Hola Mundo\");\n[...]\n</code></pre> <p>Muestra por pantalla el mensaje <code>Hola Mundo</code>, ya que la clase <code>System</code> tiene un atributo <code>out</code> con dos m\u00e9todos: <code>print()</code> y <code>println()</code>. La diferencia es que <code>println</code> muestra mensaje e introduce un retorno de carro.</p> <p>Todas las instrucciones menos las llaves <code>{</code> <code>}</code> terminan con punto y coma ( <code>;</code> ) .</p>"},{"location":"ud01/ud0102/#sangrado-o-indentacion","title":"Sangrado o Indentaci\u00f3n","text":"<p>El sangrado (tambi\u00e9n conocido como indentaci\u00f3n) deber\u00e1 aplicarse a toda estructura que est\u00e9 l\u00f3gicamente contenida dentro de otra. El sangrado ser\u00e1 de un tabulador. Es suficiente entre 2 y 4 espacios. Para alguien que empieza a programar suele ser preferible unos 4 espacios, ya que se ve todo m\u00e1s claro.</p> <p>Las l\u00edneas no tendr\u00e1n, en ning\u00fan caso, demasiados caracteres que impidan que se pueda leer en una pantalla. Un n\u00famero m\u00e1ximo recomendable suele estar entre unos 70 y 90 caracteres, incluyendo los espacios de sangrado. Si una l\u00ednea debe ocupar m\u00e1s caracteres, tiene que dividirse en dos o m\u00e1s l\u00edneas, para ello utiliza los siguientes principios para realizar la divisi\u00f3n:</p> <ul> <li>Tras una coma.</li> <li>Antes de un operador, que pasar\u00e1 a la l\u00ednea siguiente.</li> <li>Una construcci\u00f3n de alto nivel (por ejemplo, una expresi\u00f3n con par\u00e9ntesis).</li> <li>La nueva l\u00ednea deber\u00e1 alinearse con un sangrado l\u00f3gico, respecto al punto de ruptura.</li> </ul> <p>Unos ejemplos, para comprender mejor:</p> <p>Dividir tras una coma:</p> Java<pre><code>funcion(expresionMuuuuyLarga1,\n         expresionMuuuyyyyLarga2, \n         expresionMuuuyyyLarga3);\n</code></pre> <p>Mantener la expresi\u00f3n entre par\u00e9ntesis en la misma l\u00ednea:</p> Java<pre><code>nombreLargo = nombreLargo2*\n              (nombreLargo3 + nombreLArgo4)+\n              4*nombreLargo5;\n</code></pre> <p>Siempre hay excepciones. Puede resultar que al aplicar estas reglas, en operaciones muy largas, o expresiones l\u00f3gicas enormes, el sangrado sea ilegible. En estos casos, el convenio se puede relajar.</p>"},{"location":"ud01/ud0103/","title":"1.3 Java","text":""},{"location":"ud01/ud0103/#que-y-como-es-java","title":"\u00bfQu\u00e9 y c\u00f3mo es Java?","text":"<p>Java es un lenguaje sencillo de aprender, con una sintaxis parecida a la de C++, pero en la que se han eliminado elementos complicados y que pueden originar errores. Java es un lenguaje orientado a objetos, con lo que elimina muchas preocupaciones al programador y permite la utilizaci\u00f3n de gran cantidad de bibliotecas ya definidas, evitando reescribir c\u00f3digo que ya existe. Es un lenguaje de programaci\u00f3n creado para satisfacer nuevas necesidades que los lenguajes existentes hasta el momento no eran capaces de solventar.</p> <p>Una de las principales virtudes de Java es su independencia del hardware, ya que el c\u00f3digo que se genera es v\u00e1lido para cualquier plataforma. Este c\u00f3digo ser\u00e1 ejecutado sobre una m\u00e1quina virtual denominada Maquina Virtual Java (MVJ o JVM \u2013 Java Virtual Machine), que interpretar\u00e1 el c\u00f3digo convirti\u00e9ndolo a c\u00f3digo espec\u00edfico de la plataforma que lo soporta. De este modo el programa se escribe una \u00fanica vez y puede hacerse funcionar en cualquier lugar. Lema del lenguaje: \"Write once, run everywhere\".</p> <p>Antes de que apareciera Java, el lenguaje C era uno de los m\u00e1s extendidos por su versatilidad. Pero cuando los programas escritos en C aumentaban de volumen, su manejo comenzaba a complicarse. Mediante las t\u00e9cnicas de programaci\u00f3n estructurada y programaci\u00f3n modular se consegu\u00edan reducir estas complicaciones, pero no era suficiente.</p> <p>Fue entonces cuando la Programaci\u00f3n Orientada a Objetos (POO) entra en escena, aproximando notablemente la construcci\u00f3n de programas al pensamiento humano y haciendo m\u00e1s sencillo todo el proceso. Los problemas se dividen en objetos que tienen propiedades e interact\u00faan con otros objetos, de este modo, el programador puede centrarse en cada objeto para programar internamente los elementos y funciones que lo componen.</p> <p>Las caracter\u00edsticas principales de lenguaje Java se resumen a continuaci\u00f3n:</p> <ul> <li> <p>El c\u00f3digo generado por el compilador Java es independiente de la arquitectura.</p> </li> <li> <p>Est\u00e1 totalmente orientado a objetos.</p> </li> <li> <p>Su sintaxis es similar a C y C++.</p> </li> <li> <p>Es distribuido, preparado para aplicaciones TCP/IP.</p> </li> <li> <p>Dispone de un amplio conjunto de bibliotecas.</p> </li> <li> <p>Es robusto, realizando comprobaciones del c\u00f3digo en tiempo de compilaci\u00f3n y de ejecuci\u00f3n.</p> </li> <li> <p>La seguridad est\u00e1 garantizada, ya que las aplicaciones Java no acceden a zonas delicadas de memoria o de sistema. (ejem, ejem!).</p> </li> </ul>"},{"location":"ud01/ud0103/#breve-historia","title":"Breve historia","text":"<p>Java surgi\u00f3 en 1991 cuando un grupo de ingenieros de Sun Microsystems trataron de dise\u00f1ar un nuevo lenguaje de programaci\u00f3n destinado a programar peque\u00f1os dispositivos electr\u00f3nicos. La dificultad de estos dispositivos es que cambian continuamente y para que un programa funcione en el siguiente dispositivo aparecido, hay que reescribir el c\u00f3digo. Por eso la empresa Sun quer\u00eda crear un lenguaje independiente del dispositivo.</p> <p>Pero no fue hasta 1995 cuando pas\u00f3 a llamarse Java, d\u00e1ndose a conocer al p\u00fablico como lenguaje de programaci\u00f3n para computadores. Java pasa a ser un lenguaje totalmente independiente de la plataforma y a la vez potente y orientado a objetos. Esa filosof\u00eda y su facilidad para crear aplicaciones para redes TCP/IP ha hecho que sea uno de los lenguajes m\u00e1s utilizados en la actualidad.</p> <p>El factor determinante para su expansi\u00f3n fue la incorporaci\u00f3n de un int\u00e9rprete Java en la versi\u00f3n 2.0 del navegador Web Netscape Navigator, lo que supuso una gran revuelo en Internet. A principios de 1997 apareci\u00f3 Java 1.1 que proporcion\u00f3 sustanciales mejoras al lenguaje. Java 1.2, m\u00e1s tarde rebautizado como Java 2, naci\u00f3 a finales de 1998.</p> <p>Para el desarrollo de programas en lenguaje Java es necesario utilizar un entorno de desarrollo denominado JDK (Java Development Kit), que provee de un compilador y un entorno de ejecuci\u00f3n (JRE \u2013 Java RunEnvironment) para los bytecodes generados a partir del c\u00f3digo fuente. Al igual que las diferentes versiones del lenguaje han incorporado mejoras, el entorno de desarrollo y ejecuci\u00f3n tambi\u00e9n ha sido mejorado sucesivamente.</p> <p>Java 2 es la tercera versi\u00f3n del lenguaje, pero es algo m\u00e1s que un lenguaje de programaci\u00f3n, incluye los siguientes elementos:</p> <ul> <li> <p>Un lenguaje de programaci\u00f3n: Java.</p> </li> <li> <p>Un conjunto de bibliotecas est\u00e1ndar que vienen incluidas en la plataforma y que son necesarias en todo entorno Java. Es el Java Core.</p> </li> <li> <p>Un conjunto de herramientas para el desarrollo de programas, como es el compilador de bytecodes, el generador de documentaci\u00f3n, un depurador, etc.</p> </li> <li> <p>Un entorno de ejecuci\u00f3n que en definitiva es una m\u00e1quina virtual que ejecuta los programas traducidos a bytecodes.</p> </li> </ul>"},{"location":"ud01/ud0103/#compilar-y-ejecutar-un-programa-java-uso-de-la-consola","title":"Compilar y ejecutar un programa Java. Uso de la consola.","text":"<p>Veamos los pasos para compilar e interpretar nuestro primer programa escrito en lenguaje Java: Paso 1. Creaci\u00f3n del c\u00f3digo fuente   --&gt;   Paso 2. Compilaci\u00f3n del programa   --&gt;   Paso 3. Ejecuci\u00f3n del programa.</p>"},{"location":"ud01/ud0103/#paso-1-creacion-del-codigo-fuente","title":"Paso 1: Creaci\u00f3n del c\u00f3digo fuente","text":"<p>Abrimos un editor de texto (da igual cual sea, siempre que sea capaz de almacenar \u201ctexto sin formato\u201d en c\u00f3digo ASCII). Una vez abierto escribiremos nuestro primer programa, que mostrar\u00e1 un texto \u201cHola Mundo\u201d en la consola. De momento no te preocupes si no entiendes lo que escribes, m\u00e1s adelante le daremos sentido. Ahora solo queremos ver si podemos ejecutar java en nuestro equipo.</p> <p>El c\u00f3digo de nuestro programa en Java ser\u00e1 el siguiente:</p> Java<pre><code>/* Ejemplo Hola Mundo */\npublic class Ejemplo {\n    public static void main(String[ ] arg) {\n        System.out.println(\"Hola Mundo\");\n    }\n}\n</code></pre> <p>A continuaci\u00f3n guardamos nuestro archivo y le ponemos como nombre <code>Ejemplo.java</code>. Debemos seguir una norma dictada por Java, hemos de hacer coincidir nombre del archivo y nombre del programa, tanto en may\u00fasculas como en min\u00fasculas, y la extensi\u00f3n del archivo habr\u00e1 de ser siempre <code>.java</code>.</p> <p> </p> <p>Debemos recordar exactamente la ruta donde guardamos el archivo de ejemplo <code>Ejemplo.java</code>.</p>"},{"location":"ud01/ud0103/#paso-2-compilacion-del-programa","title":"Paso 2: Compilaci\u00f3n del programa","text":"<p>Vamos a proceder a compilar e interpretar este peque\u00f1o programa Java (no te preocupes si todav\u00eda no entiendes el significado de las palabras compilar e interpretar, lo ver\u00e1s en el m\u00f3dulo de Entornos de Desarrollo). Para ello usaremos la consola. Una vez en la consola debemos colocarnos en la ruta donde previamente guardamos el archivo <code>Ejemplo.java</code>.</p> <p>A continuaci\u00f3n daremos la instrucci\u00f3n para que se realice el proceso de compilaci\u00f3n del programa, para lo que escribiremos <code>javac Ejemplo.java</code>, donde <code>javac</code> es el nombre del compilador (java compiler) que transformar\u00e1 el programa que hemos escrito nosotros en lenguaje Java al lenguaje de la m\u00e1quina virtual Java (<code>bytecode</code>), dando como resultado un nuevo archivo <code>Ejemplo.class</code> que se crear\u00e1 en este mismo directorio. Comprueba que no aparezca ning\u00fan error y que javac est\u00e9 instalado en tu sistema (desde la consola lo puedes comprobar con el comando <code>javac --version</code> y deber\u00eda aparece el n\u00famero de versi\u00f3n que tienes instalada). Si aparecen los dos archivos tanto <code>Ejemplo.java</code> (c\u00f3digo fuente) como <code>Ejemplo.class</code> (bytecode creado por el compilador) puedes continuar.</p> Bash<pre><code>$ javac Ejemplo.java\n</code></pre>"},{"location":"ud01/ud0103/#paso-3-ejecucion-del-programa","title":"Paso 3: Ejecuci\u00f3n del programa","text":"<p>Finalmente, vamos a pedirle al int\u00e9rprete que ejecute el programa, es decir, que transforme el c\u00f3digo de la m\u00e1quina virtual Java en c\u00f3digo m\u00e1quina interpretable por nuestro ordenador y lo ejecute. Para ello escribiremos en la ventana consola:  <code>java Ejemplo</code>.</p> <p>El resultado ser\u00e1 que se nos muestra la cadena <code>Hola Mundo</code>. Si logramos visualizar este texto en pantalla, ya hemos desarrollado nuestro primer programa en Java.</p> Bash<pre><code>$ java Ejemplo\nHola Mundo\n</code></pre>"},{"location":"ud01/ud0104/","title":"1.4 Variables, identificadores, convenciones","text":""},{"location":"ud01/ud0104/#variables","title":"Variables","text":"<p>Una variable es una zona en la memoria del computador con un valor que puede ser almacenado para ser usado m\u00e1s tarde en el programa. Las variables vienen determinadas por:</p> <ul> <li>un nombre, que permite al programa acceder al valor que contiene en memoria. Debe ser un identificador v\u00e1lido.</li> <li> <p>un tipo de dato, que especifica qu\u00e9 clase de informaci\u00f3n guarda la variable en esa zona de memoria</p> </li> <li> <p>un rango de valores que puede admitir dicha variable.</p> </li> </ul> <p>Las variables declaradas dentro de un bloque <code>{ }</code> son accesibles solo dentro de ese bloque. Una variable local no puede ser declarada como <code>static</code>. Una variable no puede declararse fuera de la clase.</p> <p>Visibilidad, \u00e1mbito o scope de una variable es la parte de c\u00f3digo del programa donde la variable es accesible y utilizable. Las variables de un bloque son visibles y existen dentro de dicho bloque. Las funciones miembro de clase podr\u00e1n acceder a todas las variables miembro de dicha clase pero no a las variables locales de otra funci\u00f3n miembro.</p> <p>Al nombre que le damos a la variable se le llama identificador. Los identificadores permiten nombrar los elementos que se est\u00e1n manejando en un programa. Vamos a ver con m\u00e1s detalle ciertos aspectos sobre los identificadores que debemos tener en cuenta.</p>"},{"location":"ud01/ud0104/#identificadores","title":"Identificadores","text":"<p>Un identificador en Java es una secuencia ilimitada sin espacios de letras y d\u00edgitos Unicode, de forma que el primer s\u00edmbolo de la secuencia puede ser una letra, un s\u00edmbolo de subrayado (<code>_</code>) o el s\u00edmbolo d\u00f3lar (<code>$</code>). Por ejemplo, son v\u00e1lidos los siguientes identificadores:</p> <ul> <li>x5</li> <li>\u03b1\u03c4\u03b7</li> <li>NUM_MAX</li> <li>numCuenta</li> </ul> <p>Unicode es un c\u00f3digo de caracteres o sistema de codificaci\u00f3n, un alfabeto que recoge los caracteres de pr\u00e1cticamente todos los idiomas importantes del mundo. Adem\u00e1s, el c\u00f3digo Unicode es \u201ccompatible\u201d con el c\u00f3digo ASCII, ya que para los caracteres del c\u00f3digo ASCII, Unicode asigna como c\u00f3digo los mismos 8 bits, a los que les a\u00f1ade a la izquierda otros 8 bits todos a cero. La conversi\u00f3n de un car\u00e1cter ASCII a Unicode es inmediata.</p>"},{"location":"ud01/ud0104/#convenciones","title":"Convenciones","text":"<p>Normas de estilo para nombrar variables</p> <p>A la hora de nombrar un identificador existen una serie de normas de estilo de uso generalizado que, no siendo obligatorias, se usan en la mayor parte del c\u00f3digo Java. Estas reglas para la nomenclatura de variables son las siguientes:</p> <ul> <li>Java distingue las may\u00fasculas de las min\u00fasculas. Por ejemplo, <code>Alumno</code> y <code>alumno</code> son variables diferentes.</li> <li>No se suelen utilizar identificadores que comiencen con <code>$</code> o <code>_</code>, adem\u00e1s el s\u00edmbolo del d\u00f3lar, por convenio, no se utiliza nunca.</li> <li>No se puede utilizar el valor booleano (<code>true</code> o <code>false</code>) ni el valor nulo (<code>null</code>).</li> <li>Los identificadores deben ser lo m\u00e1s descriptivos posibles. Es mejor usar palabras completas en vez de abreviaturas cr\u00edpticas. As\u00ed nuestro c\u00f3digo ser\u00e1 m\u00e1s f\u00e1cil de leer y comprender. En muchos casos tambi\u00e9n har\u00e1 que nuestro c\u00f3digo se auto-documente. Por ejemplo, si tenemos que darle el nombre a una variable que almacena los datos de un cliente ser\u00eda recomendable que la misma se llamara algo as\u00ed como <code>FicheroClientes</code> o <code>ManejadorCliente</code>, y no algo poco descriptivo como <code>Cl33</code>.</li> </ul> <p>Adem\u00e1s de estas restricciones, en la siguiente tabla puedes ver otras convenciones, que no siendo obligatorias, s\u00ed son recomendables a la hora de crear identificadores en Java.</p> Identificador Convenci\u00f3n Ejemplo nombre de variable Comienza por letra min\u00fascula, y si tienen m\u00e1s de una palabra se colocan juntas y el resto comenzando por may\u00fasculas. A esto se le llama lowerCamelCase. numAlumnos, suma nombre de constante En letras may\u00fasculas, separando las palabras con el gui\u00f3n bajo, por convenio el gui\u00f3n bajo no se utiliza en ning\u00fan otro sitio TAM_MAX, PI nombre de una clase Comienza por letra may\u00fascula, y si tienen m\u00e1s de una palabra se colocan juntas y el resto comenzando por may\u00fasculas. A esto se le llama upperCamelCase. String, MiTipo nombre de funci\u00f3n Comienza por letra min\u00fascula, y si tienen m\u00e1s de una palabra se colocan juntas y el resto comenzando por may\u00fasculas. A esto se le llama lowerCamelCase. modificaValor, obtieneValor <p>Puedes consultar estas y otras convenciones sobre c\u00f3digo Java en este enlace.</p> <p>Palabras reservadas Las palabras reservadas, a veces tambi\u00e9n llamadas palabras clave o keywords, son secuencias de caracteres formadas con letras ASCII cuyo uso se reserva al lenguaje y, por tanto, no pueden utilizarse para crear identificadores.</p> <p>Las palabras reservadas en Java son:</p> Java<pre><code>abstract, continue, for, new, switch, assert, default, goto, package, synchronized, boolean, do, if, private, this, break, double, implements, protected, throw, byte, else, import, public, throws, case, enum, instanceof, return, transient, catch, extends, int, short, try, char, final, interface, static, void, class, finally, long, strictfp, volatile, const, float, native, super, while\n</code></pre>"},{"location":"ud01/ud0105/","title":"1.5 Tipos de datos","text":"<p>Los tipos de datos se utilizan para declarar variables y el compilador sepa de antemano que tipo de informaci\u00f3n contendr\u00e1 la variable.</p> <p>Java dispone de los siguientes tipos de datos simples:</p> Tipo de dato Representaci\u00f3n Tama\u00f1o (Bytes) Rango de Valores Valor por defecto Clase Asociada byte Num\u00e9rico  Entero con signo 1 -128 a 127 0 Byte short Num\u00e9rico  Entero con signo 2 -32768 a  32767 0 Short int Num\u00e9rico  Entero con signo 4 -2147483648 a 2147483647 0 Integer long Num\u00e9rico  Entero con signo 8 -9223372036854775808 a  9223372036854775807 0 Long float Num\u00e9rico  en Coma flotante de precisi\u00f3n  simple Norma IEEE 754 4 -3.4x10^-38^ a 3.4x10^38^ 0.0 Float double Num\u00e9rico  en Coma flotante de precisi\u00f3n doble Norma IEEE 754 8 -1.8x10^-308^ a 1.8x10 ^308^ 0.0 Double char Car\u00e1cter  Unicode 2 \\u0000  a \\uFFFF \\u0000 Character boolean Dato  l\u00f3gico - true \u00f3 false false Boolean void - - - - Void <p>Sobre valores por defecto e inicializaci\u00f3n de variables:</p> <p>https://stackoverflow.com/questions/19131336/default-values-and-initialization-in-java</p> <p>Ejemplos de declaraci\u00f3n y asignaci\u00f3n de valores a variables:</p> Tipo de datos c\u00f3digo byte <code>byte a;</code> short <code>short b, c=3;</code> int <code>int d=-30;</code><code>int e=0xC125; //la 0x significa Hexadecimal</code> long <code>long b=46240;</code><code>long b=5L; // La L en este caso indica Long</code> char <code>char car1='c'</code><code>char car2=99; //car1 y car2 son iguales, la c equivale al ascii 99</code><code>char letra = '\\u0063'; //c\u00f3digo unicode del car\u00e1cter \"c\"</code> float <code>float pi=3.1416;</code><code>float pi=3.1416F; //La F significa float</code><code>float medio=1/2; //0.5</code> double <code>double millon=1e6; // 1x10^6</code><code>double medio=1/2D; //0.5, la D significa double</code><code>double z=.123; //si la parte entera es 0 se puede omitir</code> boolean <code>boolean primero;</code><code>boolean par=false;</code>"},{"location":"ud01/ud0106/","title":"1.6 Tipos referenciados","text":"<p>A partir de los ocho tipos datos primitivos, se pueden construir otros tipos de datos. Estos tipos de datos se llaman tipos referenciados o referencias, porque se utilizan para almacenar la direcci\u00f3n de los datos en la memoria del ordenador.</p> Java<pre><code>int[] arrayDeEnteros;\nCuenta cuentaCliente;\n</code></pre> <p>En la primera instrucci\u00f3n declaramos una lista de n\u00fameros del mismo tipo, en este caso, enteros. En la segunda instrucci\u00f3n estamos declarando la variable u objeto <code>cuentaCliente</code> como una referencia de tipo <code>Cuenta</code>.</p> <p>Cualquier aplicaci\u00f3n de hoy en d\u00eda necesita no perder de vista una cierta cantidad de datos. Cuando el conjunto de datos utilizado tiene caracter\u00edsticas similares se suelen agrupar en estructuras para facilitar el acceso a los mismos, son los llamados datos estructurados.</p> <p>Son datos estructurados los <code>arrays</code>, <code>listas</code>, <code>\u00e1rboles</code>, etc. Pueden estar en la memoria del programa en ejecuci\u00f3n, guardados en el disco como ficheros, o almacenados en una base de datos.</p> <p>Adem\u00e1s de los ocho tipos de datos primitivos que ya hemos descrito, Java proporciona un tratamiento especial a los textos o cadenas de caracteres mediante el tipo de dato <code>String</code>. Java crea autom\u00e1ticamente un nuevo objeto de tipo <code>String</code> cuando se encuentra una cadena de caracteres encerrada entre comillas dobles. En realidad se trata de objetos, y por tanto son tipos referenciados, pero se pueden utilizar de forma sencilla como si fueran variables de tipos primitivos:</p> Java<pre><code>String mensaje;\nmensaje= \"El primer programa\";\n</code></pre> <p>Hemos visto qu\u00e9 son las variables, c\u00f3mo se declaran y los tipos de datos que pueden adoptar. Anteriormente hemos visto un ejemplo de creaci\u00f3n de variables, en esta ocasi\u00f3n vamos a crear m\u00e1s variables, pero de distintos tipos primitivos y los vamos a mostrar por pantalla. Los tipos referenciados los veremos en la siguiente unidad.</p> <p>Para mostrar por pantalla un mensaje utilizamos <code>System.out</code>, conocido como la salida est\u00e1ndar del programa. Este m\u00e9todo lo que hace es escribir un conjunto de caracteres a trav\u00e9s de la l\u00ednea de comandos. Podemos utilizar <code>System.out.print</code> o <code>System.out.println</code>. En el segundo caso lo que hace el m\u00e9todo es que justo despu\u00e9s de escribir el mensaje, sit\u00faa el cursor al principio de la l\u00ednea siguiente.</p> <p>El texto en color gris que aparece entre caracteres <code>//</code> son comentarios que permiten documentar el c\u00f3digo, pero no son tenidos en cuenta por el compilador y, por tanto, no afectan a la ejecuci\u00f3n del programa.</p>"},{"location":"ud01/ud0107/","title":"1.7 Tipos enumerados","text":"<p>Los tipos de datos enumerados son una forma de declarar una variable con un conjunto restringido de valores. Por ejemplo, los d\u00edas de la semana, las estaciones del a\u00f1o, los meses, etc. Es como si defini\u00e9ramos nuestro propio tipo de datos.</p> <p>La forma de declararlos es con la palabra reservada <code>enum</code>, seguida del nombre de la variable y la lista de valores que puede tomar entre llaves. A los valores que se colocan dentro de las llaves se les considera como constantes, van separados por comas y deben ser valores \u00fanicos.</p> <p>La lista de valores se coloca entre llaves, porque un tipo de datos <code>enum</code> no es otra cosa que una especie de clase en Java, y todas las clases llevan su contenido entre llaves.</p> <p>Al considerar Java este tipo de datos como si de una clase se tratara, no s\u00f3lo podemos definir los valores de un tipo enumerado, sino que tambi\u00e9n podemos definir operaciones a realizar con \u00e9l y otro tipo de elementos, lo que hace que este tipo de dato sea m\u00e1s vers\u00e1til y potente que en otros lenguajes de programaci\u00f3n.</p> <p>Ejemplo de uso de datos enumerados</p> <p>En el siguiente ejemplo puedes comprobar el uso que se hace de los tipos de datos enumerados.</p> Java<pre><code>public class tiposEnumerados {\n    public enum dias {Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Domingo};\n\n    public static void main(String[] args) {\n        dias diaActual = dias.Martes;\n        dias diaSiguiente = dias.Miercoles;\n\n        System.out.print(\"Hoy es: \");\n        System.out.println(diaActual);\n        System.out.println(\"Ma\u00f1ana es: \"+diaSiguiente);\n    }\n}\n</code></pre> <p>El resultado despu\u00e9s de la ejecuci\u00f3n ser\u00e1:</p> Java<pre><code>Hoy es: Martes\nY ma\u00f1ana es: Miercoles\n</code></pre> <p>Tenemos una variable <code>dias</code> que almacena los d\u00edas de la semana. Para acceder a cada elemento del tipo enumerado se utiliza el nombre de la variable seguido de un punto y el valor en la lista. M\u00e1s tarde veremos que podemos a\u00f1adir m\u00e9todos y campos o variables en la declaraci\u00f3n del tipo enumerado, ya que como hemos comentado un tipo enumerado en Java tiene el mismo tratamiento que las clases.</p> <p>En este ejemplo hemos utilizado el m\u00e9todo <code>System.out.print</code>. Como podr\u00e1s comprobar si lo ejecutas, la instrucci\u00f3n <code>print</code> escribe el texto que tiene entre comillas pero no salta a la siguiente l\u00ednea, por lo que la instrucci\u00f3n <code>println</code> escribe justo a continuaci\u00f3n.</p> <p>Sin embargo, tambi\u00e9n podemos escribir varias l\u00edneas usando una \u00fanica sentencia. As\u00ed lo hacemos en la instrucci\u00f3n <code>println</code>, la cual imprime como resultado tres l\u00edneas de texto. Para ello hemos utilizado un car\u00e1cter especial, llamado car\u00e1cter escape (<code>\\</code>). Este car\u00e1cter sirve para darle ciertas \u00f3rdenes al compilador, en lugar de que salga impreso en pantalla. Despu\u00e9s del car\u00e1cter de escape viene otro car\u00e1cter que indica la orden a realizar, juntos reciben el nombre de secuencia de escape. La secuencia de escape <code>\\n</code> recibe el nombre de car\u00e1cter de nueva l\u00ednea. Cada vez que el compilador se encuentra en un texto ese car\u00e1cter, el resultado es que mueve el cursor al principio de la l\u00ednea siguiente. En el pr\u00f3ximo apartado vamos a ver algunas de las secuencias de escape m\u00e1s utilizadas.</p>"},{"location":"ud01/ud0108/","title":"1.8 Constantes y literales","text":"<p>Las constantes se utilizan para almacenar datos que no var\u00edan nunca, asegur\u00e1ndonos que el valor no va a poder ser modificado.</p> <p>Podemos declarar una constante utilizando:</p> Java<pre><code>final &lt;tipo de datos&gt; &lt;nombre de la constante&gt; = &lt;valor&gt;;\n</code></pre> <p>El calificador final indica que es constante. A continuaci\u00f3n indicaremos el tipo de dato, el nombre de la constante y el valor que se le asigna.</p> Java<pre><code>final double IVA = 0.21;\n</code></pre> <p>Los literales pueden ser de tipo simple, null o string, como por ejemplo 230, null o \"Java\".</p> <p>Respecto a los literales existen unos caracteres especiales que se representan utilizando secuencias de escape:</p> Secuencia de escape Significado Secuencia de escape Significado \\b Retroceso \\r Retorno de carro \\t Tabulador \\\u2019\u2019 Car\u00e1cter comillas dobles \\n Salto de l\u00ednea \\\u2019 Car\u00e1cter comillas simples \\f Salto de p\u00e1gina \\ Barra diagonal"},{"location":"ud01/ud0109/","title":"1.9 Operadores y expresiones","text":""},{"location":"ud01/ud0109/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>Los Operadores Aritm\u00e9ticos permiten realizar operaciones matem\u00e1ticas:</p> Operador Uso Operaci\u00f3n + A + B Suma - A - B Resta * A * B Multiplicaci\u00f3n / A / B Divisi\u00f3n % A % B M\u00f3dulo o resto de una divisi\u00f3n entera <p>Ejemplo:</p> Java<pre><code>double num1, num2, suma, resta, producto, division, resto;\nnum1 =8;\nnum2 =5;\nsuma = num1 + num2;      // 13\nresta = num1 - num2;     // 3\nproducto = num1 * num2;  // 40\ndivision = num1 / num2;  // 1.6\nresto = num1 % num2;     // 3\n</code></pre>"},{"location":"ud01/ud0109/#operadores-relacionales","title":"Operadores Relacionales","text":"<p>Los Operadores Relacionales permiten evaluar (la respuesta es un booleano: s\u00ed o no) la igualdad de los operandos:</p> Operador Uso Operaci\u00f3n &lt; A &lt; B A menor que B &gt; A &gt; B A mayor que B &lt;= A &lt;= B A menor o igual que B &gt;= A &gt;= B A mayor o igual que B != A != B A distinto de B == A == B A igual a B <p>Por ejemplo:</p> Java<pre><code>int valor1 = 10;\nint valor2 = 3;\nboolean compara;\ncompara = valor1 &gt; valor2;  // true\ncompara = valor1 &lt; valor2;  // false\ncompara = valor1 &gt;= valor2; // true\ncompara = valor1 &lt;= valor2; // false\ncompara = valor1 == valor2; // false\ncompara = valor1 != valor2; // true\n</code></pre>"},{"location":"ud01/ud0109/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<p>Los Operadores L\u00f3gicos permiten realizar operaciones l\u00f3gicas:</p> Operador Manejo Operaci\u00f3n &amp;&amp;   o   &amp; A &amp;&amp; B\u00f3  A &amp; B A AND B.El resultado ser\u00e1 true si ambos operadores son true y false en caso contrario. ||   o   | A || B\u00f3  A | B A OR B.El resultado ser\u00e1 false si ambos operandos son false y true en caso contrario ! !A NOT A.Si el operando es true el resultado es false y si el operando es false el resultado es true. ^ A ^ B A XOR B.El resultado ser\u00e1 true si un operando es true y el otro false, y false en caso contrario. <p>Ejemplo:</p> Java<pre><code>double sueldo = 1400;\nint edad = 34;\nboolean logica;\n\nlogica = (sueldo&gt;1000 &amp; edad&lt;40);   //true\nlogica = (sueldo&gt;1000 &amp;&amp; edad&gt;40);  //false\nlogica = (sueldo&gt;1000 | edad&gt;40);   //true\nlogica = (sueldo&lt;1000 || edad&gt;40);  //false\nlogica = !(edad&lt;40);                //false\nlogica = (sueldo&gt;1000 ^ edad&gt;40);   //true\nlogica = (sueldo&lt;1000 ^ edad&gt;40);   //false\n</code></pre> <p>Para representar resultados de operadores L\u00f3gicos tambi\u00e9n se pueden usar tablas de verdad a las que conviene acostumbrarse:</p> A B A &amp;&amp; B A || B !A false false false false true true false false true false false true false true true true true true true false"},{"location":"ud01/ud0109/#operadores-unarios-o-unitarios","title":"Operadores Unarios o Unitarios","text":"<p>Los Operadores Unarios o Unitarios permiten realizar incrementos y decrementos:</p> Operador Uso Operaci\u00f3n ++ A++    o    ++A Incremento de A -- A--    o    --A Decremento de A <p>Ejemplo:</p> Java<pre><code>int m = 5, n = 3;\nm++; // 6\nn--; // 2\n</code></pre> <p>En el caso de utilizarlo como prefijo el valor de asignaci\u00f3n ser\u00e1 el valor del operando m\u00e1s el incremento de la unidad. Y si lo utilizamos como sufijo se asignar\u00e1 el valor del operador y luego se incrementar\u00e1 la unidad sobre el operando.</p> Java<pre><code>int A = 1, B;\nB = ++A; // A vale 2 y B vale 2\nB = A++; // A vale 3 y B vale 2\n</code></pre>"},{"location":"ud01/ud0109/#operadores-de-asignacion","title":"Operadores de Asignaci\u00f3n","text":"<p>Los Operadores de Asignaci\u00f3n permiten asignar valores:</p> Operador Uso Operaci\u00f3n = A = B Asignaci\u00f3n (como ya hemos visto) += A += B Suma y asignaci\u00f3n. La operaci\u00f3n  A+=B  equivale a  A=A+B -= A -= B Resta y asignaci\u00f3n. La operaci\u00f3n  A-=B  equivale a  A=A-B *= A *= B Multiplicaci\u00f3n y asignaci\u00f3n. La operaci\u00f3n  A*=B  equivale a A=A*B %= A %= B M\u00f3dulo y asignaci\u00f3n. La operaci\u00f3n  A%=B  equivale a  A=A%B /= A /= B Divisi\u00f3n y asignaci\u00f3n. La operaci\u00f3n  A/=B  equivale a  A=A/B <p>Ejemplo:</p> Java<pre><code>int dato1 = 10, dato2 = 2, dato;\ndato=dato1;   // dato vale 10\ndato2+=dato1; // dato2 vale 12\ndato2-=dato1; // dato2 vale 2\ndato2*=dato1; // dato2 vale 20\ndato2/=dato1; // datos2 vale 2\ndato1%=dato2; // dato1 vale0\n</code></pre> <p>Prioridad de operadores</p> <p>Los operadores tienen diferente Prioridad por lo que es interesante utilizar par\u00e9ntesis para controlar las operaciones sin necesidad de depender de la prioridad de los operadores.</p>"},{"location":"ud01/ud0109/#operadores-de-desplazamiento","title":"Operadores de desplazamiento","text":"<p>Los Operadores de desplazamiento permiten desplazar los bits de los valores:</p> Operador Utilizaci\u00f3n Resultado &lt;&lt; A &lt;&lt; B Desplazamiento de A a la izquierda en B posiciones. Multiplica por 2 el n\u00famero B de veces. &gt;&gt; A &gt;&gt; B Desplazamiento de A a la derecha en B posiciones, tiene en cuenta el signo. Divide por 2 el n\u00famero B de veces. &gt;&gt;&gt; A &gt;&gt;&gt; B Desplazamiento de A a la derecha en B posiciones, no tiene en cuenta el signo. (simplemente agrega ceros por la izquierda) &amp; A &amp; B Operaci\u00f3n AND a nivel de bits | A | B Operaci\u00f3n OR a nivel de bits ^ A ^ B Operaci\u00f3n XOR a nivel de bits ~ ~A Complemento de A a nivel de bits <p>Ejemplo:</p> Java<pre><code>int j = 33;\nint k = j &lt;&lt; 2;\n// 00000000000000000000000000100001 : j = 33\n// 00000000000000000000000010000100 : k = 33 &lt;&lt; 2 ; k = 132\n\nint o = 132;\nint p = o &gt;&gt; 2;\n// 00000000000000000000000010000100 : o = 132    \n// 00000000000000000000000000100001 : p = 132 &gt;&gt; 2 ; p = 33\n\nint x = -1;\nint y = x &gt;&gt;&gt; 2;\n// 11111111111111111111111111111111 : x = -1\n// 00111111111111111111111111111111 : y = x &gt;&gt;&gt; 2; y = 1073741823\n\nint q = 132;   // q: 00000000000000000000000010000100\nint r = 144;   // r: 00000000000000000000000010010000\n\nint s = q &amp; r; // s: 00000000000000000000000010000000 \n// El resultado da 128 \n\nint t = q | r; // t: 00000000000000000000000010010100 \n// El resultado da 148\n\nint u = q ^ r; // u: 00000000000000000000000000010100 \n// El resultado da 20 \n\nint v = ~q;    // v: 11111111111111111111111101111011 \n// El resultado da -133 \n</code></pre>"},{"location":"ud01/ud0109/#operador-condicional","title":"Operador condicional <code>?:</code>","text":"<p>El operador condicional <code>?:</code> sirve para evaluar una condici\u00f3n y devolver un resultado en funci\u00f3n de si es verdadera o falsa dicha condici\u00f3n. Es el \u00fanico operador ternario de Java, y como tal, necesita tres operandos para formar una expresi\u00f3n:</p> <ul> <li>El primer operando se sit\u00faa a la izquierda del s\u00edmbolo de interrogaci\u00f3n, y siempre ser\u00e1 una expresi\u00f3n booleana, tambi\u00e9n llamada condici\u00f3n. </li> <li>El siguiente operando se sit\u00faa a la derecha del s\u00edmbolo de interrogaci\u00f3n y antes de los dos puntos, y es el valor que devolver\u00e1 el operador condicional si la condici\u00f3n es verdadera. </li> <li>El \u00faltimo operando, que aparece despu\u00e9s de los dos puntos, es la expresi\u00f3n cuyo resultado se devolver\u00e1 si la condici\u00f3n evaluada es falsa.</li> </ul> Java<pre><code>condici\u00f3n ? exp1 : exp2\n</code></pre> <p>Ejemplo,  en la expresi\u00f3n:</p> Java<pre><code>(x&gt;y)?x:y;\n</code></pre> <p>Se eval\u00faa la condici\u00f3n de si x es mayor que y, en caso afirmativo se devuelve el valor de la variable x, y en caso contrario se devuelve el valor de y.</p> <p>Ejemplo para calcular qu\u00e9 n\u00famero es mayor:</p> Java<pre><code>int mayor, exp1 = 15, exp2 = 25;\nmayor=(exp1&gt;exp2)?exp1:exp2;\n// mayor valdr\u00e1 25\n</code></pre> <p>El operador condicional se puede sustituir por la sentencia <code>if...then...else</code> que veremos m\u00e1s adelante.</p>"},{"location":"ud01/ud0109/#prevalencia-de-operadores","title":"Prevalencia de operadores","text":"<p>Los operadores tienen diferente Prioridad por lo que es interesante utilizar par\u00e9ntesis para controlar las operaciones sin necesidad de depender de la prioridad de los operadores.</p> <p>Prevalencia de operadores, ordenados de arriba a abajo de m\u00e1s a menos prioridad:</p> Descripci\u00f3n Operadores operadores posfijos op++   op-- operadores unarios ++op   --op   +op   -op   ~   ! multiplicaci\u00f3n y divisi\u00f3n *   /   % suma y resta +   - desplazamiento &lt;&lt;   &gt;&gt;   &gt;&gt;&gt; operadores relacionales &lt;   &gt;   &lt;=   =&gt; equivalencia ==   != operador AND &amp; operador XOR ^ operador OR | AND booleano &amp;&amp; OR booleano || condicional ?: operadores de asignaci\u00f3n =   +=   -=   *=   /=   %=   &amp;=   ^=   |=   &lt;&lt;=   &gt;&gt;=   &gt;&gt;&gt;= <p>Ejemplo:</p> Java<pre><code>int x, y1 = 6, y2 = 2, y3 =8;\nx = y1 + y2 * y3;   // 22\nx = (y1 + y2) * y3; // 64\n</code></pre>"},{"location":"ud01/ud0110/","title":"1.10 Conversiones de tipo","text":"<p>Existen dos tipos de conversiones: Impl\u00edcitas y Explicitas. Debemos evitar las conversiones de tipos ya que pueden suponer perdidas de informaci\u00f3n.</p>"},{"location":"ud01/ud0110/#conversiones-implicitas","title":"Conversiones Impl\u00edcitas","text":"<p>Las Conversiones Impl\u00edcitas se realizan de forma autom\u00e1tica y requiere que la variable destino tenga m\u00e1s precisi\u00f3n que la variable origen para poder almacenar el valor.</p> <p>Ejemplo:</p> Java<pre><code>// Conversi\u00f3n Impl\u00edcita\nbyte origen = 5;\nshort destino;\ndestino=origen;  // 5\n</code></pre>"},{"location":"ud01/ud0110/#conversion-explicita","title":"Conversi\u00f3n Expl\u00edcita","text":"<p>En la Conversi\u00f3n Expl\u00edcita el programador fuerza la conversi\u00f3n con la operaci\u00f3n llamada \"cast\":</p> <p>Ejemplo1:</p> Java<pre><code>// Conversi\u00f3n Expl\u00edcita\nshort origen2 = 3;\nbyte destino2;\ndestino2=(byte)origen2; // 3\n</code></pre> <p>Ejemplo2:</p> Java<pre><code>// Conversi\u00f3n Expl\u00edcita\nint numero1 = 5, numero2 = 8;\ndouble division;\n\ndivision=(double)numero1 / (double)numero2; // Sin casting la expresi\u00f3n ser\u00eda int y el valor de division ser\u00eda 0\n</code></pre>"},{"location":"ud01/ud0111/","title":"1.11 Comentarios","text":"<p>Los comentarios son muy importantes a la hora de describir qu\u00e9 hace un determinado programa. A lo largo de la unidad los hemos utilizado para documentar los ejemplos y mejorar la comprensi\u00f3n del c\u00f3digo. Para lograr ese objetivo, es normal que cada programa comience con unas l\u00edneas de comentario que indiquen, al menos, una breve descripci\u00f3n del programa, el autor del mismo y la \u00faltima fecha en que se ha modificado.</p> <p>Todos los lenguajes de programaci\u00f3n disponen de alguna forma de introducir comentarios en el c\u00f3digo. En el caso de Java, nos podemos encontrar los siguientes tipos de comentarios:</p> <ul> <li>Comentarios de una sola l\u00ednea. Utilizaremos el delimitador <code>//</code> para introducir comentarios de s\u00f3lo una l\u00ednea.</li> </ul> Java<pre><code>// comentario de una sola l\u00ednea\n</code></pre> <ul> <li>Comentarios de m\u00faltiples l\u00edneas. Para introducir este tipo de comentarios, utilizaremos una barra inclinada y un asterisco (<code>/*</code>), al principio del p\u00e1rrafo y un asterisco seguido de una barra inclinada (<code>*/</code>) al final del mismo.</li> </ul> Java<pre><code>/* Esto es un comentario\nde varias l\u00edneas */\n</code></pre> <ul> <li>Comentarios Javadoc. Utilizaremos los delimitadores <code>/**</code> y <code>*/</code>. Al igual que con los comentarios tradicionales, el texto entre estos delimitadores ser\u00e1 ignorado por el compilador. Este tipo de comentarios se emplean para generar documentaci\u00f3n autom\u00e1tica del programa. A trav\u00e9s del programa javadoc, incluido en JavaSE, se recogen todos estos comentarios y se llevan a un documento en formato .html.</li> </ul> Java<pre><code>/** Comentario de documentaci\u00f3n.\nJavadoc extrae los comentarios del c\u00f3digo y\ngenera un archivo html a partir de este tipo de comentarios\n*/\n</code></pre>"},{"location":"ud01/ud0112/","title":"1.12 Herramientas \u00fatiles para empezar","text":""},{"location":"ud01/ud0112/#generar-numeros-aleatorios","title":"Generar n\u00fameros aleatorios.","text":"<p>Podemos generar n\u00fameros aleatorios entre 0 y 1 utilizando el m\u00e9todo random de la clase <code>Math</code>.</p> Java<pre><code>Math.random()\n</code></pre> <p>Ejemplo:</p> Java<pre><code>double numero;\nint entero;\nnumero = Math.random();\nSystem.out.println(\"El n\u00famero es: \"+numero);\nnumero = Math.random()*100;\nSystem.out.println(\"El n\u00famero es: \"+numero);\nentero = (int)(Math.random()*100);\nSystem.out.println(\"El n\u00famero sin decimales es: \"+entero);\n</code></pre>"},{"location":"ud01/ud0112/#introducir-un-texto-desde-el-teclado","title":"Introducir un texto desde el teclado.","text":"<p>Este m\u00e9todo de leer texto y n\u00fameros desde consola no nos servir\u00e1 cuando comencemos a usar IDE's.</p> <p>Podemos introducir texto desde el teclado utilizando <code>System.console().readLine();</code> </p> <p>Devuelve la cadena de caracteres introducida.</p> <p>Para otro tipo de dato hay que usar m\u00e9todos de conversi\u00f3n:</p> <ul> <li>Integer.parseInt(System.console().readLine())</li> <li>Double.parseDouble(System.console().readLine())</li> <li>\u2026</li> </ul> <p>Ejemplo 1: Introducci\u00f3n de texto</p> Java<pre><code>String texto;\nSystem.out.print(\"Introduce un texto: \");\ntexto = System.console().readLine();\nSystem.out.println(\"El texto introducido es: \"+ texto);\n</code></pre> <p>Ejemplo 2: Introducci\u00f3n de un n\u00famero entero</p> Java<pre><code>String texto2;\nint entero2;\nSystem.out.print(\"Introduce un n\u00famero: \");\ntexto2 = System.console().readLine();\nentero2 = Integer.parseInt(texto2);\nSystem.out.println(\"El n\u00famero introducido es: \"+entero2);\n</code></pre> <p>Ejemplo 2: Introducci\u00f3n de un n\u00famero decimal</p> Java<pre><code>String texto3;\ndouble doble3;\nSystem.out.print(\"Introduce un n\u00famero decimal: \");\ntexto3 = System.console().readLine();\ndoble3 = Double.parseDouble(texto3); // convertimos texto a doble\nSystem.out.println(\"N\u00famero decimal introducido es: \"+doble3);\n</code></pre>"},{"location":"ud01/ud0112/#entrada-y-salida-por-consola","title":"Entrada y Salida por consola","text":"<p>Podemos utilizar una variable de tipo Scanner para leer desde consola.</p> <p>(1) Para ello deberemos, primero, importar la librer\u00eda <code>util</code>:     Java<pre><code>import java.util.*;\n</code></pre></p> <p>(2) Despu\u00e9s inicializar una variable (en el ejemplo <code>sc</code>) de tipo Scanner:     Java<pre><code>Scanner sc = new Scanner (System.in);\n</code></pre></p> <p>(3) Para guardar en las variables correspondientes (entero, float, double, string, char...):     Java<pre><code>entero = sc.nextInt();\n\ndecimal = sc.nextFloat();\n\ncadena = sc.next();\n// o \ncadena = sc.nextLine();\n\nletra = sc.next().charAt(0);\n</code></pre></p> <p>En el siguiente ejemplo podemos observar mejor lo expuesto:</p> Java<pre><code>// importar libreria\nimport java.util.*;\n\npublic class Mostrarinformacion {\n    public static void main (String[] args){\n        Scanner sc = new Scanner (System.in);\n        int entero;\n        float decimal;\n        String cadena;\n        char letra;\n\n        // guardar cadena y convertir a valores y tipos correspondientes:\n        System.out.print(\"Muestra un n\u00famero entero: \");\n        entero = sc.nextInt();\n\n        System.out.print(\"Muestra un n\u00famero flotante: \");\n        decimal = sc.nextFloat(); //recordar poner coma para el decimal\n\n        System.out.print(\"Muestra un texto o cadena: \");\n        cadena = sc.next(); //solo mostrar\u00e1 la primera palabra\n        cadena = sc.nextLine(); //solo mostrar\u00e1 la primera palabra       \n\n        System.out.print(\"Muestra una sola letra: \");\n        letra = sc.next().charAt(0); //solo mostrar\u00e1 la primera letra\n\n        // mostrar en ventana los valores:\n        System.out.println(\"El n\u00famero entero guardado es: \"+entero);     \n        //el resto de variables se muestran igual que la l\u00ednia anterior\n    }\n}\n</code></pre>"},{"location":"ud01/ud0112/#entrada-y-salida-con-joptionpane","title":"Entrada y Salida con JOptionPane","text":"<p>Otra forma de introducir y mostrar informaci\u00f3n, m\u00e1s elegante que por consola, es utilizar ventanas.</p> <p>(1) Para ello deberemos, primero, importar la librer\u00eda <code>util</code>: Java<pre><code>import javax.swing.JOptionPane;\n</code></pre></p> <p>(2) Para guardar la informaci\u00f3n que introduciremos desde la ventana emergente:</p> Java<pre><code>variable_string = JOptionPane.showInputDialog (\"texto en descripci\u00f3n de ventana:\");\n</code></pre> <p> </p> <p>Debemos tener en cuenta que la informaci\u00f3n que se recoge en dicha ventana es SIEMPRE una cadena; por lo que, si queremos almacenar su valor con otro tipo de datos distinto, deberemos hacerlo expl\u00edcitamente mediante el tipo de datos en cuesti\u00f3n y m\u00e9todo parse.</p> Java<pre><code>entero = Integer.parseInt( JOptionPane.showInputDialog (\"inserta un n\u00famero entero:\"));\n\ndecimal= Double.parseDouble( JOptionPane.showInputDialog (\"inserta un n\u00famero decimal:\"));\n\nletra= JOptionPane.showInputDialog (\"inserta una letra:\").charAt(0);\n</code></pre> <p>(3) Para mostrar por ventana emergente alguna variable:</p> Java<pre><code>JOptionPane.showMessageDialog(null, \"la cadena es: \"+cadena);\n</code></pre> <p>En el siguiente ejemplo podemos observar mejor lo expuesto:</p> Java<pre><code>// importar libreria\nimport javax.swing.JOptionPane;\n\npublic class Mostrarinformacion {\n  public static void main (String[] args){\n    String cadena;\n    int entero;\n    char letra;\n    double decimal;\n\n    // guardar cadena y convertir a valores y tipos correspondientes:\n    cadena = JOptionPane.showInputDialog (\"texto en descripci\u00f3n de ventana:\");\n    entero = Integer.parseInt( JOptionPane.showInputDialog (\"inserta un n\u00famero entero:\")); // convertir la cadena a otro tipo; como entero\n    decimal= Double.parseDouble( JOptionPane.showInputDialog (\"inserta un n\u00famero decimal:\"));\n    letra= JOptionPane.showInputDialog (\"inserta una letra:\").charAt(0);\n\n    // mostrar en ventana los valores:\n    JOptionPane.showMessageDialog(null, \"la cadena es: \"+cadena);\n    JOptionPane.showMessageDialog(null, \"el n\u00famero entero es: \"+entero);\n    JOptionPane.showMessageDialog(null, \"la n\u00famero decimal es: \"+decimal);\n    JOptionPane.showMessageDialog(null, \"la letra es: \"+letra);       \n  }\n}\n</code></pre>"},{"location":"ud01/ud0113/","title":"1.13 Instalar Java en Linux","text":"<p>(1) Comprobamos la versi\u00f3n actual de Java:</p> Bash<pre><code>$ java -version\n</code></pre> <p>Si vemos que no tenemos ninguna versi\u00f3n, instalamos el JRE predeterminado:</p> Bash<pre><code>$ sudo apt install default-jre\n</code></pre> <p>(2) Para compilar y ejecutar Java necesitamos el programa javac (viene con JDK). </p> Bash<pre><code>$ javac -version\n</code></pre> <p>Si no tenemos salida, instalamos JDK predeterminado:</p> Bash<pre><code>$ sudo apt install default-jdk\n</code></pre>"},{"location":"ud01/ud0114/","title":"1.14 Instalar Java en Windows","text":""},{"location":"ud01/ud0114/#instalar-java","title":"Instalar Java","text":"<p>(1) Comprobamos la versi\u00f3n actual de Java:</p> Bash<pre><code>java -version\n</code></pre> <p>(2) Si el sistema nos responde con alg\u00fan mensaje de error, es que no tenemos instalado ni JRE ni JDK; deberemos comprobar si podemos ejecutar el compilador javac:</p> Bash<pre><code>javac -version\n</code></pre> <p>pues si no tenemos instalado este deberemos instalar JDK desde enlace a JDK de Oracle.</p> <p>(3) Despu\u00e9s de la instalar JDK deberemos a\u00f1adir, de forma manual, la ruta donde est\u00e1 instalado al conjunto de rutas de Windows donde se encuentran los programas ejecutables.</p> <p>Para ello:</p> <ul> <li> <p>Acceder a la ventana Sistema: <code>Panel de control -- Sistema y Seguridad  -- Sistema</code> y despu\u00e9s a <code>Cambiar configuraci\u00f3n</code>:</p> <p> </p> </li> <li> <p>En la pesta\u00f1a <code>Opciones avanzadas</code> pulsar el bot\u00f3n <code>Variables de entorno...</code>:</p> <p> </p> </li> <li> <p>Seleccionar la variable <code>Path</code> y pulsar <code>Editar</code>(o doble clic):</p> <p> </p> </li> <li> <p>A\u00f1adir a la ruta actual de Path: un punto y coma y la ruta donde se encuentran los ejecutable de JDK que acabamos de instalar (que por lo general ser\u00e1 c:\\Program Files\\Java\\jdk[VERSION_INSTALADA]\\bin):</p> Bash<pre><code>; C:\\Program Files\\Java\\jdk[VERSION_INSTALADA]\\bin\n</code></pre> <p> </p> </li> </ul>"},{"location":"ud01/ud0114/#visual-studio-code-instalar-extension-java-extension-pack","title":"Visual Studio Code. Instalar extensi\u00f3n Java Extension Pack","text":"<p>Abrimos Visual Studio Code y, en extensiones, instalamos la extensi\u00f3n Java Extension Pack:</p>"},{"location":"ud01/ud0114/#modificar-fichero-tasks-de-vscode-para-compilar-y-ejecutar","title":"Modificar fichero tasks de VSCode para compilar y ejecutar","text":"<p>Este punto es opcional.</p> <p>Tenemos que editar el fichero de tareas <code>tasks.json</code>, para crear un par de ellas: <code>JC</code>, para compilar el archhivo .java; y <code>JR</code>, para ejecutarlo:</p> <ul> <li>Abriremos <code>Terminal - Configurar tares de compilaci\u00f3n predeterminada...</code> y pulsamos <code>Intro</code>:</li> </ul> <p>Borramos el contenido del fichero e introducimos el siguiente c\u00f3digo:</p> Java<pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"JC\",\n      \"command\": \"java\",\n      \"windows\": {\n          \"command\": \"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_341\\\\bin\\\\javac.exe\"\n      },\n      \"args\": [\n          \"${file}\"\n      ],\n      \"problemMatcher\": [],\n      \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n      }\n    },\n    {\n      \"label\": \"JR\",\n      \"command\": \"java\",\n      \"windows\": {\n          \"command\": \"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_341\\\\bin\\\\java.exe\"\n      },\n      \"args\": [\n          \"${fileBasenameNoExtension}\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>Podemos observar que en \"command\" ponemos la ruta donde se encuentra instalado JDK <code>C:\\Program Files\\Java\\jdk1.8.0_341\\bin\\</code>.</p> <p>Quedar\u00eda de la siguiente manera:</p>"},{"location":"ud01/ud0114/#compilar-y-ejecutar-un-programa","title":"Compilar y ejecutar un programa","text":"<p>Una vez realizado los dos pasos anteriores ya podremos realizar las dos tareas (JC para compilar y JR para ejecutar).</p> <p>(1) Desde <code>Terminal - Ejecutar tarea ... </code> y elegir, primero, compilar (JC):</p> <p>(2) Desde <code>Terminal - Ejecutar tarea ... </code> y elegir, seguidamente, ejecutar (JR):</p>"},{"location":"ud01/ud0114/#otras-extensiones","title":"Otras extensiones","text":"<p>En Visual Studio Code existen numerosas extensiones que nos pueden ayudar en, dependiendo el lenguaje que utilicemos, muchos aspectos; como autorelleno, colores, idioma, etc.</p> <p>Aqu\u00ed van algunas extensiones que podremos tener:</p> <ul> <li> <p>Spanish Language Pack for Visual Studio</p> </li> <li> <p>Prettier - Code formatter</p> </li> <li> <p>Polacode</p> </li> <li> <p>Material Icon Theme</p> </li> <li> <p>Error Lens</p> </li> <li> <p>Atom One Dark Theme</p> </li> <li> <p>Debugger for Java</p> </li> <li> <p>Language Supoort for Java (TM)</p> </li> <li> <p>Project Manager for Java</p> </li> <li> <p>Test Runner for Java</p> </li> </ul>"},{"location":"ud01/ud0115/","title":"Ejemplos","text":"<p>Ejemplo unidad 01</p> Java<pre><code>public class EjemploUD01 {\n\n    // variable de clase precisa static para poder usarse dentro de la funcion main()\n    static double dto = 0.25;\n\n    public static void main(String[] args) {\n\n        // Declaraci\u00f3n y asignaci\u00f3n de valores a variables\n        byte a;\n        a = 127;\n        short c = 3;\n        int d = -30;\n        int e = 0xC125;\n        long l = 5L;\n        char car1 = 99; //car1 es la letra \"c\" equivale al ascii 99\n        char letra = '\\u0061'; //c\u00f3digo unicode del car\u00e1cter \"a\"\n        double b = 5F;\n        double f = 1e6;\n        float g = 1 / 2F;\n        boolean par = false;\n\n        // Declaraci\u00f3n y asignaci\u00f3n constantes y literales\n        final double IVA = 0.21;\n        System.out.println(\"1a linea\\n2a linea\\n3a \\\"linea\\\"\");\n\n        //Muestra por pantalla literales y contenidos de variables.\n        System.out.println(\"Hola Mundo\");\n        System.out.println(\"a vale \" + a);\n        System.out.println(\"b vale \" + b);\n        System.out.println(\"c vale \" + c);\n        System.out.println(\"d vale \" + d);\n        System.out.println(\"e vale \" + e);\n        System.out.println(\"f vale \" + f);\n        System.out.println(\"g vale \" + g);\n        System.out.println(\"g vale \" + l);\n        System.out.println(\"g vale \" + car1);\n        System.out.println(\"g vale \" + letra);\n        System.out.println(\"g vale \" + par);\n\n        // uso de la constante\n        double precio = 430;\n        double preciofinal = precio + ((precio - (precio * dto)) * IVA) - (precio * dto);\n        System.out.println(IVA);\n        System.out.println(preciofinal);\n\n        // Operadores aritm\u00e9ticos\n        double num1, num2, suma, resta, producto, division, resto;\n        num1 = 8;\n        num2 = 5;\n        suma = num1 + num2;     // 13\n        resta = num1 - num2;    // 3\n        producto = num1 * num2; // 40\n        division = num1 / num2; // 1.6\n        resto = num1 % num2;    // 3\n        System.out.println(\"Suma: \" + suma);\n        System.out.println(\"Resta: \" + resta);\n        System.out.println(\"Producto: \" + producto);\n        System.out.println(\"Divisi\u00f3n: \" + division);\n        System.out.println(\"Resto: \" + resto);\n\n        // Operadores Relacionales\n        int valor1 = 10;\n        int valor2 = 3;\n        boolean compara;\n        compara = valor1 &gt; valor2; // true\n        System.out.println(\"Mayor:\" + compara);\n        compara = valor1 &lt; valor2; // false\n        System.out.println(\"Menor:\" + compara);\n        compara = valor1 &gt;= valor2; // true\n        System.out.println(\"Mayor o igual: \" + compara);\n        compara = valor1 &lt;= valor2; // false\n        System.out.println(\"Menor o igual: \" + compara);\n        compara = valor1 == valor2; // false\n        System.out.println(\"Igual: \" + compara);\n        compara = valor1 != valor2; // true\n        System.out.println(\"Distinto: \" + compara);\n\n        //Operadores L\u00f3gicos\n        double sueldo = 1400;\n        int edad = 34;\n        boolean logica;\n        logica = (sueldo &gt; 1000 &amp; edad &lt; 40);  //true\n        System.out.println(\"AND: \" + logica);\n        logica = (sueldo &gt; 1000 &amp;&amp; edad &gt; 40); //false\n        System.out.println(\"AND: \" + logica);\n        logica = (sueldo &gt; 1000 | edad &gt; 40);  //true\n        System.out.println(\"OR: \" + logica);\n        logica = (sueldo &lt; 1000 || edad &gt; 40); //false\n        System.out.println(\"OR: \" + logica);\n        logica = !(edad &lt; 40);                 //false\n        System.out.println(\"NOT: \" + logica);\n        logica = (sueldo &gt; 1000 ^ edad &gt; 40);  //true\n        System.out.println(\"XOR: \" + logica);\n        logica = (sueldo &lt; 1000 ^ edad &gt; 40);  //false\n        System.out.println(\"XOR: \" + logica);\n\n        //Operadores Unarios o Unitarios\n        int m = 5, n = 3;\n        m++; // 6\n        n--; // 2\n        System.out.println(\"Incremento: \" + m);\n        System.out.println(\"Decremento: \" + n);\n\n        int A = 1, B;\n        B = ++A; // A vale 2 y B vale 2\n        System.out.println(\"A vale: \" + A + \" B vale: \" + B);\n        B = A++; // A vale 3 y B vale 2\n        System.out.println(\"A vale: \" + A + \" B vale: \" + B);\n\n        //Operadores de Asignaci\u00f3n\n        int dato1 = 10, dato2 = 2, dato;\n        dato = dato1;   // dato vale 10\n        System.out.println(\"= : \" + dato);\n        dato2 *= dato1; // dato2 vale20\n        System.out.println(\"*= : \" + dato2);\n        dato2 /= dato1; // datos2 vale 2\n        System.out.println(\"/= : \" + dato2);\n        dato2 += dato1; // dato2 vale 12\n        System.out.println(\"+= : \" + dato2);\n        dato2 -= dato1; // dato2 vale 2\n        System.out.println(\"-= : \" + dato2);\n        dato1 %= dato2; // dato1 vale 0\n        System.out.println(\"%= : \" + dato1);\n\n        // Operadores de desplazamiento\n        int j = 33;\n        int k = j &lt;&lt; 2;\n        // 00000000000000000000000000100001 : j = 33\n        // 00000000000000000000000010000100 : k = 33 &lt;&lt; 2 ; k = 132\n        System.out.println(\"k= : \" + k);\n        int o = 132;\n        int p = o &gt;&gt; 2;\n        // 00000000000000000000000010000100 : o = 132  \n        // 00000000000000000000000000100001 : p = 132 &gt;&gt; 2 ; p = 33\n        System.out.println(\"p= : \" + p);\n        int x = -1;\n        int y = x &gt;&gt;&gt; 2;\n        // 11111111111111111111111111111111 : x = -1\n        // 00111111111111111111111111111111 : y = x &gt;&gt;&gt; 2; y = 1073741823\n        System.out.println(\"y= : \" + y);\n        int q = 132;   // q: 00000000000000000000000010000100\n        int r = 144;   // r: 00000000000000000000000010010000\n        int s = q &amp; r; // s: 00000000000000000000000010000000 \n        // El resultado da 128\n        System.out.println(\"s= : \" + s);\n        int t = q | r; // t: 00000000000000000000000010010100 \n        // El resultado da 148\n        System.out.println(\"t= : \" + t);\n        int u = q ^ r; // u: 00000000000000000000000000010100 \n        // El resultado da 20 \n        System.out.println(\"u= : \" + u);\n        int v = ~q;    // v: 11111111111111111111111101111011 \n        // El resultado da -133 \n        System.out.println(\"v= : \" + v);\n\n        // Operador condicional\n        int mayor, exp1 = 15, exp2 = 25;\n        mayor=(exp1&gt;exp2)?exp1:exp2;\n        // mayor valdr\u00e1 25\n        System.out.println(\"mayor= : \" + mayor);\n\n        // Prioridad de los operadores\n        int x1, y1 = 6, y2 = 2, y3 = 8;\n        x1 = y1 + y2 * y3; //22\n        System.out.println(\"Sin par\u00e9ntesis: \" + x);\n        x1 = (y1 + y2) * y3; // 64\n        System.out.println(\"Con par\u00e9ntesis: \" + x);\n\n        // Conversi\u00f3n Impl\u00edcita\n        byte origen = 5;\n        short destino;\n        destino = origen; // 5\n        System.out.println(\"Impl\u00edcita: \" + destino);\n\n        // Conversi\u00f3n Expl\u00edcita\n        byte destino2;\n        short origen2 = 3;\n        destino2 = (byte) origen2; // 3\n        System.out.println(\"Expl\u00edcito: \" + destino2);\n\n        // comentario de una sola l\u00ednea\n\n        /* Esto es un comentario\n        de varias l\u00edneas */\n\n        /** Comentario de documentaci\u00f3n.\n        Javadoc extrae los comentarios del c\u00f3digo y\n        genera un archivo html a partir de este tipo de comentarios\n        */\n\n        //Generar n\u00famero aleatorios\n        double numero;\n        int entero;\n        numero = Math.random();\n        System.out.println(\"El n\u00famero es: \"+numero);\n        numero = Math.random()*100;\n        System.out.println(\"El n\u00famero es: \"+numero);\n        entero = (int)(Math.random()*100);\n        System.out.println(\"El n\u00famero sin decimales es: \"+entero);\n\n        //Introducir texto desde teclado\n        String texto;\n        System.out.print(\"Introduce un texto: \");\n        texto = System.console().readLine();\n        System.out.println(\"El texto introducido es: \"+ texto);\n\n        //Introducir un n\u00famero entero desde teclado\n        String texto2;\n        int entero2;\n        System.out.print(\"Introduce un n\u00famero: \");\n        texto2 = System.console().readLine();\n        entero2 = Integer.parseInt(texto2);\n        System.out.println(\"El n\u00famero introducido es:\"+entero2);\n\n        //Introducir un n\u00famero decimal desde teclado\n        String texto3;\n        double doble3;\n        System.out.print(\"Introduce un n\u00famero decimal: \");\n        texto3 = System.console().readLine();\n        doble3 = Double.parseDouble(texto3); // convertimos texto a doble\n        System.out.println(\"N\u00famero decimal introducido es: \"+doble3);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/","title":"Actividades","text":""},{"location":"ud01/ud01ac/#retos","title":"Retos","text":""},{"location":"ud01/ud01ac/#reto-01","title":"Reto 01","text":"<p>Realiza un programa que eval\u00fae una expresi\u00f3n que contenga literales de los cuatro tipos de datos (booleano, entero, real y car\u00e1cter) y la mu\u00e9stralo por pantalla.</p>"},{"location":"ud01/ud01ac/#reto-02","title":"Reto 02","text":"<p>En tu entorno de trabajo, crea el programa siguiente. Observa qu\u00e9 pasa exactamente. Entonces, intenta arreglar el problema.</p> Java<pre><code>// Un programa que usa un entero muuuuy grande\npublic class TresMilMilions {\n    public static void main (String [] args) {\n        System.out.println (3000000000);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/#reto-03","title":"Reto 03","text":"<p>Haz un programa con dos variables que, sin usar ning\u00fan literal en ninguna parte excepto para inicializar estas variables, ves estimando e imprimiendo sucesivamente los 5 primeros valores de la tabla de multiplicar del 4. Puedes usar operadores aritm\u00e9ticos y de asignaci\u00f3n, si deseas.</p>"},{"location":"ud01/ud01ac/#reto-04","title":"Reto 04","text":"<p>Haz dos programas, uno que muestre por pantalla la tabla de multiplicar del 3, y otro, la del 5. Los dos deben ser exactamente iguales, letra por letra, excepto en un \u00fanico literal dentro de todo el c\u00f3digo.</p>"},{"location":"ud01/ud01ac/#reto-05","title":"Reto 05","text":"<p>Experimenta qu\u00e9 pasa si en el siguiente programa inicializas la variable realLlarg con un valor con varios decimales. \u00bfEl programa contin\u00faa compilando?. \u00bfQu\u00e9 resultado da? Despu\u00e9s int\u00e9ntalo asignando un valor superior al rango de los enteros (por ejemplo, 3000000000.0).</p> Java<pre><code>public class ConversionExplicita {\n    public static void main (String [] args) {\n        double realLlarg = 300.0;\n        // Asignaci\u00f3n incorrecta. \u00bfUn real tiene decimales, no?\n        long enterLlarg = (long) realLlarg;\n        // Asignaci\u00f3n incorrecta. \u00bfUn entero largo tiene un rango mayor que un entero, no?\n        int enter = (int) enterLlarg;\n        System.out.println (enter);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/#reto-06","title":"Reto 06","text":"<p>Haz un programa que muestre en pantalla de forma tabulada la tabla de verdad de una expresi\u00f3n de disyunci\u00f3n entre dos variables booleanas.</p>"},{"location":"ud01/ud01ac/#reto-07","title":"Reto 07","text":"<p>Haz un programa que muestre por pantalla la multiplicaci\u00f3n de tres n\u00fameros reales entrados por teclado.</p>"},{"location":"ud01/ud01ac/#ejercicios","title":"Ejercicios","text":""},{"location":"ud01/ud01ac/#ejercicio-01","title":"Ejercicio 01","text":"<p>Probar la E/S elemental: Escribe el peque\u00f1o programa que aparece a continuaci\u00f3n.</p> Java<pre><code>public class EntradaSalida {\n    public static void main (String arg[]){\n        Scanner tec = new Scanner(System.in);\n        int a, b;\n        System.out.println(\"Introduce un n\u00famero entero\");\n        a = tec.nextInt();\n        System.out.println(\"Introduce otro n\u00famero entero\");\n        b = tec.nextInt();\n        System.out.println(\"Los n\u00fameros introducidos son \" + a + \" y \" + b);\n    }\n}\n</code></pre> <p>Ejec\u00fatalo para ver c\u00f3mo se comporta el programa.</p> <ul> <li> <p>\u00bfQu\u00e9 ocurre si cuando nos pide un n\u00famero entero le damos un n\u00famero real? \u00bfY si le damos un car\u00e1cter no num\u00e9rico?</p> </li> <li> <p>\u00bfQu\u00e9 ocurre si eliminamos la instrucci\u00f3n <code>import java.util.*</code>;</p> </li> </ul>"},{"location":"ud01/ud01ac/#ejercicio-02","title":"Ejercicio 02","text":"<p>Averigua mediante pruebas:</p> <ol> <li>\u00bfEs posible escribir dos instrucciones en la misma l\u00ednea de un programa?</li> <li>\u00bfSe puede \"romper\" una instrucci\u00f3n entre varias l\u00edneas?</li> <li>Algunos lenguajes de programaci\u00f3n dan un valor por defecto a las variables cuando las declaramos sin inicializarlas. Otros no permiten usar el contenido de una variable que no haya sido previamente inicializada. \u00bfCu\u00e1l es comportamiento de Java? </li> </ol>"},{"location":"ud01/ud01ac/#ejercicio-03","title":"Ejercicio 03","text":"<p>\u00bfCu\u00e1les de los siguientes identificadores son v\u00e1lidos y cuales no? Pru\u00e9balos cuando tengas duda:</p> <ol> <li><code>n</code></li> <li><code>MiProblema</code></li> <li><code>MiJuego</code></li> <li><code>Mi Juego</code></li> <li><code>Int</code></li> <li><code>Jose&amp;Co</code></li> <li><code>A b</code></li> <li><code>1rApellido</code></li> <li><code>aaaaaaaaaaaa</code></li> <li><code>Nombre_Apellidos</code></li> <li><code>Saldo-actual</code></li> <li><code>Universidad Alicante</code></li> <li><code>Juan=Rubio</code></li> <li><code>Edad5</code></li> <li><code>_5Java</code></li> </ol>"},{"location":"ud01/ud01ac/#ejercicio-04","title":"Ejercicio 04","text":"<p>Escribir un programa que lea un entero desde teclado, lo multiplique por 2, y a continuaci\u00f3n escribe el resultado en la pantalla:</p> <p>Ejemplo de ejecuci\u00f3n:</p> Bash<pre><code>Escribe un n\u00famero: \n3\nEl doble de 3 es 6\n</code></pre>"},{"location":"ud01/ud01ac/#ejercicio-05-intercambio","title":"Ejercicio 05 <code>Intercambio</code>","text":"<p>Escribir un programa que \u2026</p> <ol> <li>Lea desde teclado dos valores enteros. Llama a las variables v1 y v2.</li> <li>Muestra los valores introducidos por el usuario.</li> <li>Intercambia el valor de v1 y v2 (v1 pasa a  valer lo que val\u00eda v2 y viceversa).</li> <li>Muestra de nuevo los valores, ahora con su valor intercambiado.</li> </ol> <p>Ejemplo de ejecuci\u00f3n:</p> Bash<pre><code>Escribe un n\u00famero para v1: 2\nEscribe un n\u00famero para v2: 9\nAntes de intercambiar    v1: 2   y   v2: 9\nDespu\u00e9s de intercambiar  v1: 9   y   v2: 2\n</code></pre>"},{"location":"ud01/ud01ac/#ejercicio-06","title":"Ejercicio 06","text":"<p>Escribe las siguientes expresiones siguiendo la sintaxis de Java.</p> <p>\u200b   </p>"},{"location":"ud01/ud01ac/#ejercicio-07-superficie","title":"Ejercicio 07 <code>Superficie</code>","text":"<p>Escribe un programa que solicite al usuario la longitud y la anchura de una habitaci\u00f3n y a continuaci\u00f3n muestra su superficie (longitud por anchura).</p>"},{"location":"ud01/ud01ac/#ejercicio-08-medidas","title":"Ejercicio 08 <code>Medidas</code>","text":"<p>Escribir un programa que convierta una medida dada en pies a sus equivalentes en yardas, pulgadas, cent\u00edmetros  y metros, sabiendo que 1 pie = 12 pulgadas, 1 yarda = 3 pies, 1 pulgada = 2.54 cm, 1 m = 100 cm.</p>"},{"location":"ud01/ud01ac/#ejercicio-09-segundos","title":"Ejercicio 09 <code>Segundos</code>","text":"<p>Escribir un programa que, dada una cantidad de segundos, introducida por teclado, la desglose en d\u00edas, horas, minutos y segundos.  </p> <p>Ejemplo de ejecuci\u00f3n: </p> Bash<pre><code>Introduce cantidad de segundos: 3661\n3661 segundos son:\n0 dias\n1 horas\n1 minutos\n1 segundos\n</code></pre>"},{"location":"ud01/ud01ac/#ejercicio-10-fuerza","title":"Ejercicio 10 <code>Fuerza</code>","text":"<p>La fuerza de atracci\u00f3n entre dos masas m1 y m2 separadas por una distancia d, est\u00e1 dada por la f\u00f3rmula:</p> <p>donde G es la constante de gravitaci\u00f3n universal G= 6.693 \u00b7 10 ^(\u201311). </p> <p>Escribir un programa que lea la masa de dos cuerpos y la distancia entre ellos y a continuaci\u00f3n obtenga su fuerza de atracci\u00f3n.</p>"},{"location":"ud01/ud01ac/#ejercicio-11-circulo","title":"Ejercicio 11 <code>Circulo</code>","text":"<p>Escribir un programa que calcule la longitud de la circunferencia y el \u00e1rea del c\u00edrculo para un valor del radio introducido por teclado.</p>"},{"location":"ud01/ud01ac/#ejercicio-12-dados","title":"Ejercicio 12 <code>Dados</code>","text":"<p>Escribir un programa que simula el lanzamiento de dos dados.</p> Bash<pre><code>Dado 1 : 5\nDado 2: 4\nPuntuaci\u00f3n total: 9\n</code></pre>"},{"location":"ud01/ud01ac/#ejercicio-13-ultimacifra","title":"Ejercicio 13 <code>UltimaCifra</code>","text":"<p>Escribir un programa que muestre la \u00faltima cifra de un n\u00famero entero que introduce el usuario por teclado. Pista: \u00bfQu\u00e9 devuelve a%10 ?</p> Text Only<pre><code>Introduce un n\u00famero entero: 3761\nLa \u00faltima cifra de 3761 es 1\n</code></pre>"},{"location":"ud01/ud01ac/#ejercicio-14-penultimacifra","title":"Ejercicio 14 <code>PenultimaCifra</code>","text":"<p>Escribir un programa que muestre la pen\u00faltima cifra de un n\u00famero entero que introduce el usuario por teclado.</p> Text Only<pre><code>Introduce un n\u00famero entero: 3761\nLa \u00faltima cifra de 3761 es 6\n</code></pre> <p>Una vez hayas comprobado que el programa funciona correctamente, prueba qu\u00e9 ocurre si el usuario introduce un valor de una sola cifra (por ejemplo 4). Explica el resultado mostrado por el programa.</p>"},{"location":"ud01/ud01ac/#ejercicio-15-redondear1","title":"Ejercicio 15 <code>Redondear1</code>","text":"<p><code>Math.round(x)</code> redondea x de manera que este queda sin decimales. (<code>Math.round(35.5289)</code> da como resultado <code>36</code>)</p> <p>Trata de escribir un programa en el que el usuario introduzca un n\u00famero real y a continuaci\u00f3n se muestre redondeado a un solo decimal. Pista : combinar productos, divisiones y Math.round()</p> <p>Ejemplo de ejecuci\u00f3n:</p> Bash<pre><code>Introduce un n\u00famero real: 35.5289\nEl n\u00famero 35.5289, redondeado a un decimal es 35.5\n</code></pre>"},{"location":"ud01/ud01ac/#ejercicio-16","title":"Ejercicio 16","text":"<p>Cu\u00e1l es el valor resultante de dada una de las siguientes expresiones</p> <ol> <li><code>5 * 4 \u2013 3 * 6</code></li> <li><code>4 * 5 * 2</code></li> <li><code>(24 + 2 * 6) / 4</code></li> <li><code>8 / 2 / 2 * 5</code></li> <li><code>3 + 4 * (8  * (4 \u2013  (9 + 3) /  6 ))</code></li> <li><code>4 * 3 * 5 + 8 * 4 * 2</code></li> <li><code>4 \u2013 40 % 5</code></li> <li><code>4 * 3 / 2</code></li> <li><code>4 / 2 * 3</code></li> <li><code>213 /100</code></li> </ol>"},{"location":"ud01/ud01ac/#ejercicio-17","title":"Ejercicio 17","text":"<p>La famosa ecuaci\u00f3n de Einstein para la conversi\u00f3n de una masa m en energ\u00eda viene dada por la f\u00f3rmula E=mc^2^, donde c es la velocidad de la luz que vale 2.997925 \u00b7 10^8^ m/s. Escribir un programa que lea el valor de la masa y obtenga la energ\u00eda correspondiente seg\u00fan la anterior f\u00f3rmula.</p>"},{"location":"ud01/ud01ac/#ejercicio-18","title":"Ejercicio 18","text":"<p>Indica cuales ser\u00e1n los valores de las variables despu\u00e9s de ejecutar cada uno de los siguientes fragmentos de c\u00f3digo. Resuelve el ejercicio sin escribir los programas correspondientes y probarlos. </p> <p>prueba 1     Bash<pre><code>int a=3, b = 2;\na = b + b;\nb = a + a;\n</code></pre>     prueba 2     Bash<pre><code>int a=3,b=0;\nb = b - 1;\na = a + b;\n</code></pre> \u200b    prueba 3 \u200b   <code>sh \u200b    int a, b=5; \u200b    b++; \u200b    ++b; \u200b    a= b+1;     Text Only<pre><code>prueba 4\n```sh\nint a = 5,b;\nb = a++;\n</code></pre> \u200b    prueba 5 \u200b</code>sh \u200b    int a = 5,b; \u200b    b = ++a;     Text Only<pre><code>prueba 6\n```sh\nint a=2, b=3;\nb+=a;\n</code></pre> \u200b    prueba 7 \u200b   <code>sh \u200b    int a=2, b=3; \u200b    b-=a; \u200b    a=-b;     Text Only<pre><code>prueba 8\n```sh\nint a=2, b=3;\nb%=a;\n</code></pre> \u200b    prueba 9 \u200b</code>sh \u200b    int a=2,b=3,c=4; \u200b    a = --b + c++; \u200b    b+=a;     Text Only<pre><code>\n</code></pre></p>"},{"location":"ud01/ud01ac/#expresiones-logicas","title":"Expresiones l\u00f3gicas","text":"<p>Sean 4 variables enteras </p> Java<pre><code>int m, j, p, v ;\n</code></pre> <p>que contienen respectivamente la edad de Miguel, Julio, Pablo y Vicente. </p> <p>Expresar las siguientes afirmaciones utilizando operadores l\u00f3gicos y relacionales</p> <p>Ejemplo:    <code>Miguel es mayor de edad.</code></p> <p>Soluci\u00f3n: <code>m &gt;= 18</code></p> <ol> <li>Miguel es menor de edad.</li> <li>Miguel es mayor que Julio</li> <li>Miguel es el m\u00e1s viejo.</li> <li>Miguel es el m\u00e1s joven.</li> <li>Miguel  no es el m\u00e1s joven.</li> <li>Miguel no es el m\u00e1s viejo.</li> <li>Alguno de ellos es mayor de edad.</li> <li>Miguel y Julio son los m\u00e1s j\u00f3venes.</li> <li>Entre todos tienen m\u00e1s de 100 a\u00f1os.</li> <li>Entre Miguel y Julio suman m\u00e1s edad que Pablo.</li> <li>Entre Miguel y Julio suman m\u00e1s edad que Pablo y Vicente juntos.</li> <li>Si los ordenamos por edades de menor a mayor, Julio es el segundo.</li> <li>Si los ordenamos por edades de menor a mayor, Julio es el segundo y Pablo el tercero.</li> <li>Al menos uno de ellos es menor de edad.</li> <li>Al menos dos de ellos son menores de edad.</li> <li>Todos son menores de edad.</li> <li>Solo dos de ellos son menores de edad.</li> <li>Al menos dos de ellos nacieron el mismo a\u00f1o.</li> <li>Solo dos de ellos nacieron el mismo a\u00f1o.</li> <li>Al menos uno de ellos es menor que Julio</li> <li>Solo uno de ellos es menor que Julio</li> <li>Miguel es mayor de edad y alguno de los otros es menor de edad.</li> </ol>"},{"location":"ud01/ud01ac/#actividades","title":"Actividades","text":""},{"location":"ud01/ud01ac/#actividad-01","title":"Actividad 01","text":"<p>Realiza un conversor de euros a pesetas. La cantidad de euros que se quiere convertir debe ser introducida por teclado.</p>"},{"location":"ud01/ud01ac/#actividad-02","title":"Actividad 02","text":"<p>Realiza un conversor de pesetas a euros. La cantidad de pesetas que se quiere convertir debe ser introducida por teclado.</p>"},{"location":"ud01/ud01ac/#actividad-03","title":"Actividad 03","text":"<p>Escribe un programa que calcule el \u00e1rea de un rect\u00e1ngulo ( <code>area = base * altura</code> ).</p>"},{"location":"ud01/ud01ac/#actividad-04","title":"Actividad 04","text":"<p>Escribe un programa que calcule el \u00e1rea de un tri\u00e1ngulo ( <code>area = (base * altura) / 2</code> ).</p>"},{"location":"ud01/ud01ac/#actividad-05","title":"Actividad 05","text":"<p>Escribe un programa que calcule el salario semanal de un empleado en base a las horas trabajadas, a raz\u00f3n de 12 euros la hora.</p>"},{"location":"ud01/ud01ac/#actividad-06","title":"Actividad 06","text":"<p>Realiza un conversor de MiB a KiB ( Ayuda ).</p>"},{"location":"ud01/ud01ac/#actividad-07","title":"Actividad 07","text":"<p>Realiza un conversor de Kib a Mib ( Ayuda ).</p>"},{"location":"ud01/ud01ac/#actividad-08","title":"Actividad 08","text":"<p>Realiza un programa en Java que genere letras de forma aleatoria.</p>"},{"location":"ud01/ud01ac/#actividad-09","title":"Actividad 09","text":"<p>Realiza un programa en Java que genere el n\u00famero premiado del Cup\u00f3n de la ONCE.</p>"},{"location":"ud01/ud01ac/#actividad-10","title":"Actividad 10","text":"<p>Modificar el siguiente programa para que compile y funcione:</p> Java<pre><code>public class activ10 {\n    public static void main(String[] args) {\n        int n1 = 50, n2 = 30,\n        boolean suma = 0;\n        suma = n1 + n2;\n        System.out.println(\"LA SUMA ES: \" + suma);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/#actividad-11","title":"Actividad 11","text":"<p>Modificar el siguiente programa para que compile y funcione:</p> Java<pre><code>public class activ11 {\n    public static void main(String[] args) { \n        int numero = 2;\n        cuad = numero * n\u00famero;\n        System.out.println(\"EL CUADRADO DE \"+NUMERO+\" ES: \"+cuad);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/#actividad-12","title":"Actividad 12","text":"<p>Indicar qu\u00e9 valor devolver\u00e1 la ejecuci\u00f3n del siguiente programa:</p> Java<pre><code>public class activ12 {\n    public static void main(String[] args) {\n        int num = 5;\n        num += num - 1 * 4 + 1;\n        System.out.println(num);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/#actividad-13","title":"Actividad 13","text":"<p>Indicar qu\u00e9 valor devolver\u00e1 la ejecuci\u00f3n del siguiente programa:</p> Java<pre><code>public class activ13 {\n    public static void main(String[] args) {\n        int num = 4;\n        num %= 7 * num % 3 * 3;\n        System.out.println(num);\n    }\n}\n</code></pre>"},{"location":"ud01/ud01ac/#actividad-14","title":"Actividad 14","text":"<p>Realizar un programa que muestre por pantalla respetando los saltos de carro el siguiente texto (con un solo <code>println</code>):</p> Bash<pre><code>Me gusta la programaci\u00f3n\ncada d\u00eda m\u00e1s\n</code></pre>"},{"location":"ud01/ud01ac/#actividad-15","title":"Actividad 15","text":"<p>Realiza un programa en Java que tenga las variables edad, nivel de estudios e ingresos y almacene en una variable llamada jasp el valor verdadero si la edad es menor o igual a 28 y el nivel de estudios es mayor a 3, o bien la edad es menor de 30 y los ingresos superiores a 28000. En caso contrario almacenar el valor falso.</p>"},{"location":"ud01/ud01ac/#actividad-16","title":"Actividad 16","text":"<p>Realizar un programa que calcule el precio de un producto teniendo en cuenta que el producto vale 120 \u20ac, tiene un descuento del 15% y el IVA que se le aplica es del 21%.</p>"},{"location":"ud01/ud01ac/#actividad-17","title":"Actividad 17","text":"<p>Realiza un programa que calcule la nota que hace falta sacar en el segundo examen de la asignatura Programaci\u00f3n para obtener la media deseada. Hay que tener en cuenta que la nota del primer examen cuenta el 40% y la del segundo examen un 60%.</p> <p>Ejemplo 1:</p> Bash<pre><code>Realiza un programa que calcule la nota que hace falta sacar en el segundo examen de la asignatura Programaci\u00f3n para obtener la media deseada. Hay que tener en cuenta que la nota del primer examen cuenta el 40% y la del segundo examen un 60%.\nEjemplo 1:\n</code></pre> <p>Ejemplo 2:</p> Bash<pre><code>Introduce la nota del primer examen: 8\n\u00bfQu\u00e9 nota quieres sacar en el trimestre? 7\nPara tener un 7 en el trimestre necesitas sacar un 6.33 en el segundo examen.\n</code></pre>"},{"location":"ud01/ud01ac/#actividad-18","title":"Actividad 18","text":"<p>Realizar un programa que dado un importe en euros nos indique el m\u00ednimo n\u00famero de billetes y la cantidad sobrante de euros. Debes usar el operador condicional <code>?:</code></p> Bash<pre><code>\u00bfCu\u00e1ntos euros tienes?: 232\n1 billete de 200 \u20ac\n1 billete de 20 \u20ac\n1 billete de 10 \u20ac\nSobran 2 \u20ac\n</code></pre>"},{"location":"ud01/ud01pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li>Curso Java. Estructuras principales I. V\u00eddeo 4</li> <li>Curso Java. Estructuras principales II. V\u00eddeo 5</li> <li>Curso Java. Estructuras principales III. Declaraci\u00f3n variables Eclipse  V\u00eddeo 6</li> <li>Curso Java. Estructuras principales IV. Constantes y Operadores. V\u00eddeo 7</li> <li>Curso Java. Estructuras principales V. Constantes y Operadores II. V\u00eddeo 8</li> </ul>"},{"location":"ud01/ud01re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Apuntes m\u00f3dulo Programaci\u00f3n (David Mart\u00ednez Pe\u00f1a).</p> </li> <li> <p>Wikipedia</p> </li> <li> <p>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</p> </li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> </ul>"},{"location":"ud02/ud0201/","title":"2.1 Introducci\u00f3n a la POO","text":"<p>Orientado a objetos hace referencia a una forma diferente de acometer la tarea del desarrollo de software, frente a otros modelos como el de la programaci\u00f3n imperativa, la programaci\u00f3n funcional o la programaci\u00f3n l\u00f3gica. Supone una reconsideraci\u00f3n de los m\u00e9todos de programaci\u00f3n, de la forma de estructurar la informaci\u00f3n y, ante todo, de la forma de pensar en la resoluci\u00f3n de problemas.</p> <p>La programaci\u00f3n orientada a objetos (POO) es un modelo para la elaboraci\u00f3n de programas que se ha impuesto en los \u00faltimos a\u00f1os. Este auge se debe, en parte, a que esta forma de programar est\u00e1 fuertemente basada en la representaci\u00f3n de la realidad; pero tambi\u00e9n a que refuerza el uso de buenos criterios aplicables al desarrollo de programas.</p> <p> </p> <p>La orientaci\u00f3n a objetos no es un tipo de lenguaje de programaci\u00f3n. Es una metodolog\u00eda de trabajo para crear programas.</p> <p>En POO, un programa es una colecci\u00f3n de objetos que se relacionan entre s\u00ed de distintas formas.</p>"},{"location":"ud02/ud0202/","title":"2.2 Caracter\u00edsticas de la POO","text":"<p>Cuando hablamos de Programaci\u00f3n Orientada a Objetos, existen una serie de caracter\u00edsticas que se deben cumplir. Cualquier lenguaje de programaci\u00f3n orientado a objetos las debe contemplar. Las caracter\u00edsticas m\u00e1s importantes del paradigma de la programaci\u00f3n orientada a objetos son:</p> <ul> <li>Abstracci\u00f3n. Es el proceso por el cual definimos las caracter\u00edsticas m\u00e1s importantes de un objeto, sin preocuparnos de c\u00f3mo se escribir\u00e1n en el c\u00f3digo del programa, simplemente lo definimos de forma general. En la Programaci\u00f3n Orientada a Objetos la herramienta m\u00e1s importante para soportar la abstracci\u00f3n es la clase. B\u00e1sicamente, una clase es un tipo de dato que agrupa las caracter\u00edsticas comunes de un conjunto de objetos. </li> </ul> <p>Poder ver los objetos del mundo real que deseamos trasladar a nuestros programas, en t\u00e9rminos abstractos, resulta de gran utilidad para un buen dise\u00f1o del software, ya que nos ayuda a comprender mejor el problema y a tener una visi\u00f3n global de todo el conjunto. Por ejemplo, si pensamos en una clase Veh\u00edculo que agrupa las caracter\u00edsticas comunes de todos ellos, a partir de dicha clase podr\u00edamos crear objetos como Coche y Cami\u00f3n. Entonces se dice que Veh\u00edculo es una abstracci\u00f3n de Coche y de Cami\u00f3n.</p> <ul> <li> <p>Modularidad. Una vez que hemos representado el escenario del problema en nuestra aplicaci\u00f3n, tenemos como resultado un conjunto de objetos software a utilizar. Este conjunto de objetos se crean a partir de una o varias clases. Cada clase se encuentra en un archivo diferente, por lo que la modularidad nos permite modificar las caracter\u00edsticas de la clase que define un objeto, sin que esto afecte al resto de clases de la aplicaci\u00f3n.</p> </li> <li> <p>Encapsulaci\u00f3n. Tambi\u00e9n llamada \"ocultamiento de la informaci\u00f3n\". La encapsulaci\u00f3n o encapsulamiento es el mecanismo b\u00e1sico para ocultar la informaci\u00f3n de las partes internas de un objeto a los dem\u00e1s objetos de la aplicaci\u00f3n. Con la encapsulaci\u00f3n un objeto puede ocultar la informaci\u00f3n que contiene al mundo exterior, o bien restringir el acceso a la misma para evitar ser manipulado de forma inadecuada. </p> </li> </ul> <p>Por ejemplo, pensemos en un programa con dos objetos, un objeto Persona y otro Coche. Persona se comunica con el objeto Coche para llegar a su destino, utilizando para ello las acciones que Coche tenga definidas como por ejemplo conducir. Es decir, Persona utiliza Coche pero no sabe c\u00f3mo funciona internamente, s\u00f3lo sabe utilizar sus m\u00e9todos o acciones.</p> <ul> <li> <p>Jerarqu\u00eda. Mediante esta propiedad podemos definir relaciones de jerarqu\u00edas entre clases y objetos. Las dos jerarqu\u00edas m\u00e1s importantes son la jerarqu\u00eda \"es un\" llamada generalizaci\u00f3n o especializaci\u00f3n y la jerarqu\u00eda \"es parte de\", llamada agregaci\u00f3n. Conviene detallar algunos aspectos:</p> </li> <li> <p>La generalizaci\u00f3n o especializaci\u00f3n, tambi\u00e9n conocida como herencia, permite crear una clase nueva en t\u00e9rminos de una clase ya existente (herencia simple) o de varias clases ya existentes (herencia m\u00faltiple). </p> <p>Por ejemplo, podemos crear la clase CochedeCarreras a partir de la clase Coche, y as\u00ed s\u00f3lo tendremos que definir las nuevas caracter\u00edsticas que tenga.</p> </li> <li> <p>La agregaci\u00f3n, tambi\u00e9n conocida como inclusi\u00f3n, permite agrupar objetos relacionados entre s\u00ed dentro de una clase. As\u00ed, un Coche est\u00e1 formado por Motor, Ruedas, Frenos y Ventanas. Se dice que Coche es una agregaci\u00f3n y Motor, Ruedas, Frenos y Ventanas son agregados de Coche.</p> </li> <li> <p>Polimorfismo. Esta propiedad indica la capacidad de que varias clases creadas a partir de una antecesora realicen una misma acci\u00f3n de forma diferente. </p> </li> </ul> <p>Por ejemplo, pensemos en la clase Animal y la acci\u00f3n de expresarse. Nos encontramos que cada tipo de Animal puede hacerlo de manera distinta, los Perros ladran, los Gatos maullan, las Personas hablamos, etc. Dicho de otra manera, el polimorfismo indica la posibilidad de tomar un objeto (de tipo Animal, por ejemplo), e indicarle que realice la acci\u00f3n de expresarse, esta acci\u00f3n ser\u00e1 diferente seg\u00fan el tipo de mam\u00edfero del que se trate.</p>"},{"location":"ud02/ud0203/","title":"2.3 Objetos y Clases","text":""},{"location":"ud02/ud0203/#caracteristicas-de-los-objetos","title":"Caracter\u00edsticas de los objetos","text":"<p>En este contexto, un objeto de software es una representaci\u00f3n de un objeto del mundo real, compuesto de una serie de caracter\u00edsticas y un comportamiento espec\u00edfico. Pero \u00bfqu\u00e9 es m\u00e1s concretamente un objeto en Programaci\u00f3n Orientada a Objetos?</p> <p> </p> <p>Un objeto es un conjunto de datos con las operaciones definidas para ellos. Los objetos tienen un estado y un comportamiento.</p> <p>Por tanto, estudiando los objetos que est\u00e1n presentes en un problema podemos dar con la soluci\u00f3n a este. Los objetos tienen unas caracter\u00edsticas fundamentales que los distinguen:</p> <ul> <li>Identidad. Es la caracter\u00edstica que permite diferenciar un objeto de otro. De esta manera, aunque dos objetos sean exactamente iguales en sus atributos, son distintos entre s\u00ed. Puede ser una direcci\u00f3n de memoria, el nombre del objeto o cualquier otro elemento que utilice el lenguaje para distinguirlos. Por ejemplo, dos veh\u00edculos que hayan salido de la misma cadena de fabricaci\u00f3n y sean iguales aparentemente, son distintos porque tienen un c\u00f3digo que los identifica.</li> <li>Estado. El estado de un objeto viene determinado por una serie de par\u00e1metros o atributos que lo describen, y los valores de \u00e9stos. Por ejemplo, si tenemos un objeto Coche, el estado estar\u00eda definido por atributos como <code>Marca</code>, <code>Modelo</code>, <code>Color</code>, <code>Cilindrada</code>, etc.</li> <li>Comportamiento. Son las acciones que se pueden realizar sobre el objeto. En otras palabras, son los m\u00e9todos o procedimientos que realiza el objeto. Siguiendo con el ejemplo del objeto Coche, el el comportamiento ser\u00edan acciones como: <code>arrancar()</code>, <code>parar()</code>, <code>acelerar()</code>, <code>frenar()</code>, etc. </li> </ul>"},{"location":"ud02/ud0203/#propiedades-y-metodos-de-los-objetos","title":"Propiedades y m\u00e9todos de los objetos","text":"<p>Como acabamos de ver todo objeto tiene un estado y un comportamiento. Concretando un poco m\u00e1s, las partes de un objeto son:</p> <ul> <li>Campos, Atributos o Propiedades: Parte del objeto que almacena los datos. Tambi\u00e9n se les denomina Variables Miembro. Estos datos pueden ser de cualquier tipo primitivo (<code>boolean</code>, <code>char</code>, <code>int</code>, <code>double</code>, etc) o ser a su vez otro objeto. </li> </ul> <p>Por ejemplo, un objeto de la clase Coche puede tener un objeto de la clase Ruedas (o m\u00e1s concretamente cuatro).</p> <ul> <li>M\u00e9todos o Funciones Miembro: Parte del objeto que lleva a cabo las operaciones sobre los atributos definidos para ese objeto.</li> </ul> <p>La idea principal es que el objeto re\u00fane en una sola entidad los datos y las operaciones, y para acceder a los datos privados del objeto debemos utilizar los m\u00e9todos que hay definidos para ese objeto.</p> <p>Manipular los objetos mediante m\u00e9todos</p> <p>La \u00fanica forma de manipular la informaci\u00f3n del objeto es a trav\u00e9s de sus m\u00e9todos; si queremos saber el valor de alg\u00fan atributo, tenemos que utilizar el m\u00e9todo que nos muestre el valor de ese atributo. As\u00ed, evitamos que m\u00e9todos externos puedan alterar los datos del objeto de manera inadecuada. Se dice que los datos y los m\u00e9todos est\u00e1n encapsulados dentro del objeto.</p>"},{"location":"ud02/ud0203/#atributos","title":"Atributos","text":"<p>Los atributos representan la informaci\u00f3n que almacenan los objetos de la clase. Los atributos son declaraciones de variables dentro de la clase.</p> <p>Se sigue la siguiente sintaxis (los corchetes indican opcionalidad):</p> Java<pre><code>[\u00e1mbito] tipo nombreDelAtributo;\n[\u00e1mbito] tipo nombreDelAtributo1, nombreDelAtributo2, ...;\n</code></pre> <p>donde:</p> <ul> <li>\u00e1mbito permite indicar desde qu\u00e9 clases es accesible el atributo.</li> <li>tipo indica el tipo de dato del atributo.</li> <li>nombreDelAtributo es el identificador del atributo.</li> </ul>"},{"location":"ud02/ud0203/#metodos","title":"M\u00e9todos","text":"<p>Los m\u00e9todos determinan qu\u00e9 puede hacer un objeto de la clase, es decir, su comportamiento.</p> <p>Los m\u00e9todos realizan alg\u00fan tipo de acci\u00f3n o tarea y, en ocasiones, devuelven un resultado.</p> <p>Para realizar su trabajo puede ser necesario que pasemos al m\u00e9todo cierta informaci\u00f3n. Por ejemplo, cuando llamamos al m\u00e9todo <code>round</code> de la clase <code>Math</code>, para redondear un n\u00famero real, debemos indicar al m\u00e9todo cual es el n\u00famero que queremos redondear. A esa informaci\u00f3n que pasamos a los m\u00e9todos se le llama par\u00e1metros o argumentos.</p> Java<pre><code>//Al llamar a Math.round, pasamos al m\u00e9todo un par\u00e1metro \nint redondeado1 = Math.round(numero);\nint redondeado2 = Math.round(125.687);\n...\n//Al llamar a Math.pow, pasamos al m\u00e9todo dos par\u00e1metros\nint pot1 = Math.pow(a,b);\nint pot2 = Math.pow(a,6);\n...\n</code></pre> <p>En la definici\u00f3n de un m\u00e9todo se distinguen dos partes:</p> <ul> <li>La cabecera, en la cual se indica informaci\u00f3n relevante sobre el m\u00e9todo.</li> <li>El cuerpo, que contiene las instrucciones mediante las cuales el m\u00e9todo realiza su tarea.</li> </ul> <p>Para definirlos, se sigue la siguiente sintaxis (los corchetes indican opcionalidad):</p> Java<pre><code>[\u00e1mbito] [static] tipoDevuelto nombreDelMetodo ([par\u00e1metros])  //Cabecera del m\u00e9todo\n{\n    //Cuerpo del m\u00e9todo (instrucciones)\n    ...\n    ...\n    ...\n}\n</code></pre> <p>donde:</p> <ul> <li>\u00e1mbito permite indicar desde qu\u00e9 clases es accesible el m\u00e9todo.</li> <li>static, cuando aparece, indica que el m\u00e9todo es est\u00e1tico.</li> <li>tipoDevuelto indica el tipo de dato que devuelve el m\u00e9todo. La palabra reservada void (que no es ning\u00fan tipo de dato) indicar\u00eda que el m\u00e9todo no devuelve nada.</li> <li>nombreDelMetodo es el identificador del m\u00e9todo.</li> <li>par\u00e1metros es una lista, separada por comas, de los par\u00e1metros que recibe el m\u00e9todo. De cada par\u00e1metro se indica el tipo y un identificador.</li> </ul>"},{"location":"ud02/ud0203/#interaccion-entre-objetos","title":"Interacci\u00f3n entre objetos","text":"<p>Dentro de un programa los objetos se comunican llamando unos a otros a sus m\u00e9todos. Los m\u00e9todos est\u00e1n dentro de los objetos y describen el comportamiento de un objeto cuando recibe una llamada a uno de sus m\u00e9todos. En otras palabras, cuando un objeto, <code>objeto1</code>, quiere actuar sobre otro, <code>objeto2</code>, tiene que ejecutar uno de sus m\u00e9todos. Entonces se dice que el <code>objeto2</code> recibe un mensaje del <code>objeto1</code>.</p> <p>Un mensaje es la acci\u00f3n que realiza un objeto. Un m\u00e9todo es la funci\u00f3n o procedimiento al que se llama para actuar sobre un objeto.</p> <p>Los distintos mensajes que puede recibir un objeto o a los que puede responder reciben el nombre de protocolo de ese objeto.</p> <p>El proceso de interacci\u00f3n entre objetos se suele resumir diciendo que se ha \"enviado un mensaje\" (hecho una petici\u00f3n) a un objeto, y el objeto determina \"qu\u00e9 hacer con el mensaje\" (ejecuta el c\u00f3digo del m\u00e9todo). Cuando se ejecuta un programa se producen las siguientes acciones:</p> <ul> <li>Creaci\u00f3n de los objetos a medida que se necesitan.</li> <li>Comunicaci\u00f3n entre los objetos mediante el env\u00edo de mensajes unos a otros, o el usuario a los objetos.</li> <li>Eliminaci\u00f3n de los objetos cuando no son necesarios para dejar espacio libre en la memoria del computador.</li> </ul> <p> </p> <p>Los objetos se pueden comunicar entre ellos invocando a los m\u00e9todos de los otros objetos.</p>"},{"location":"ud02/ud0203/#clases","title":"Clases","text":"<p>Hasta ahora hemos visto lo que son los objetos. Un programa inform\u00e1tico se compone de muchos objetos, algunos de los cuales comparten la misma estructura y comportamiento. Si tuvi\u00e9ramos que definir su estructura y comportamiento del objeto cada vez que queremos crear un objeto, estar\u00edamos utilizando mucho c\u00f3digo redundante. Por ello lo que se hace es crear una clase, que es una descripci\u00f3n de un conjunto de objetos que comparten una estructura y un comportamiento com\u00fan. Y a partir de la clase, se crean tantas \"copias\" o \"instancias\" como necesitemos. Esas copias son los objetos de la clase.</p> <p>Una clase java se escribe en un fichero con extensi\u00f3n <code>.java</code> que tiene el mismo nombre que la clase. Por ejemplo la clase Veh\u00edculo se escribir\u00eda en el fichero <code>Vehiculo.java</code>.</p> <p>Cuando la clase se compila se obtiene un fichero con el mismo nombre que la clase y extensi\u00f3n <code>.class</code>. Ejemplo: <code>Vehiculo.class</code>.</p> <p> </p> <p>Los identificadores de clase siguen las mismas reglas que otros identificadores de Java (contienen car\u00e1cter alfanum\u00e9ricos y especiales, no pueden comenzar por un d\u00edgito, no pueden coincidir con una palabra reservada, etc.). Por convenio los identificadores de las clases comienzan por may\u00fasculas (UpperCamelCase).</p> <p> </p> <p>Las clases constan de datos y m\u00e9todos que resumen las caracter\u00edsticas comunes de un conjunto de objetos. Un programa inform\u00e1tico est\u00e1 compuesto por un conjunto de clases, a partir de las cuales se crean objetos que interact\u00faan entre s\u00ed.</p> <p>En otras palabras, una clase es una plantilla o prototipo donde se especifican:</p> <ul> <li>Los atributos comunes a todos los objetos de la clase.</li> <li>Los m\u00e9todos que pueden utilizarse para manejar esos objetos.</li> </ul> <p>Para declarar una clase en Java se utiliza la palabra reservada <code>class</code>. La declaraci\u00f3n de una clase est\u00e1 compuesta por:</p> <ul> <li>Cabecera de la clase. La cabecera es un poco m\u00e1s compleja que como la definimos aqu\u00ed, pero por ahora s\u00f3lo nos interesa saber que est\u00e1 compuesta por una serie de modificadores, en este caso hemos puesto public que indica que es una clase p\u00fablica a la que pueden acceder otras clases del programa, la palabra reservada class y el nombre de la clase.</li> <li>Cuerpo de la clase. En \u00e9l se especifican encerrados entre llaves los atributos y los m\u00e9todos que va a tener la clase.</li> </ul> <p>Ejemplo:</p> Java<pre><code>//Paquete al que pertenece la clase\npackage NombreDePaquete;\n\n//Paquetes que importa la clase\nimport ...\n\n...\n\npublic class NombreDeLaClase {\n    // Atributos de la clase\n    ...\n    ...\n    // M\u00e9todos de la clase\n    ...\n    ...\n}\n</code></pre> <p> </p> <ul> <li>En la unidad anterior ya hemos utilizado clases, aunque a\u00fan no sab\u00edamos su significado exacto. Por ejemplo, est\u00e1bamos utilizando clases; todas ellas eran clases principales, no ten\u00edan ning\u00fan atributo y el \u00fanico m\u00e9todo del que dispon\u00edan era el m\u00e9todo <code>main()</code>.</li> <li>Tambi\u00e9n es una clase <code>Math</code> y su m\u00e9todo era <code>random()</code>, el que nos permit\u00eda usar n\u00fameros aleatorios.</li> <li>El m\u00e9todo <code>main()</code> se utiliza para indicar que se trata de una clase principal, a partir de la cual va a empezar la ejecuci\u00f3n del programa. Este m\u00e9todo no aparece si la clase que estamos creando no va a ser la clase principal del programa.</li> </ul>"},{"location":"ud02/ud0203/#que-significa-public-class","title":"\u00bfQu\u00e9 significa <code>public class</code>?","text":"<p>Significa que la clase que se define es p\u00fablica. Una clase p\u00fablica es una clase accesible desde otras clases o, dicho de otra forma, que puede ser utilizada por otras clases. Ya hemos dicho que un programa, de alguna manera, consiste en la creaci\u00f3n de objetos de distintas clases, que se relacionan entre s\u00ed. Lo m\u00e1s com\u00fan es que las clases que definimos sean p\u00fablicas y que en cada fichero de extensi\u00f3n <code>.java</code> se defina una \u00fanica clase.</p> <p>Sin embargo, en ocasiones se definen clases (A) que solo van a ser utilizadas por una clase determinada (B). En ese caso, decimos que la clase A es una clase privada de la clase B. Las clases A y B se definen en el mismo fichero <code>.java</code>. En un fichero pueden definirse varias clases pero solo una de ellas puede ser p\u00fablica. De esta forma, si en un fichero se definen varias clases, una de ellas ser\u00eda p\u00fablica y el resto ser\u00edan clases privadas de la primera, a las que solo \u00e9sta tendr\u00eda acceso.</p>"},{"location":"ud02/ud0204/","title":"2.4 Utilizaci\u00f3n de objetos","text":"<p>Una vez que hemos creado una clase, podemos crear objetos en nuestro programa a partir de esas clases.</p> <p>Cuando creamos un objeto a partir de una clase se dice que hemos creado una \"instancia de la clase\". A efectos pr\u00e1cticos, \"objeto\" e \"instancia de clase\" son t\u00e9rminos similares. Es decir, nos referimos a objetos como instancias cuando queremos hacer hincapi\u00e9 que son de una clase particular.</p> <p>Los objetos se crean a partir de las clases, y representan casos individuales de \u00e9stas.</p> <p> </p> <p>Para entender mejor la relaci\u00f3n entre un objeto y su clase, piensa en un molde de galletas y las galletas. El molde ser\u00eda la clase, que define las caracter\u00edsticas del objeto, por ejemplo su forma y tama\u00f1o. Las galletas creadas a partir de ese molde son los objetos o instancias.</p> <p>Otro ejemplo, imagina una clase Persona que re\u00fana las caracter\u00edsticas comunes de las personas (<code>color de pelo</code>, <code>ojos</code>, <code>peso</code>, <code>altura</code>, etc.) y las acciones que pueden realizar (<code>crecer</code>, <code>dormir</code>, <code>comer</code>, etc.). Posteriormente dentro del programa podremos crear un objeto Trabajador que est\u00e9 basado en esa clase Persona. Entonces se dice que el objeto Trabajador es una instancia de la clase Persona, o que la clase Persona es una abstracci\u00f3n del objeto Trabajador.</p> <p>Cualquier objeto instanciado de una clase contiene una copia de todos los atributos definidos en la clase. En otras palabras, lo que estamos haciendo es reservar un espacio en la memoria del ordenador para guardar sus atributos y m\u00e9todos. Por tanto, cada objeto tiene una zona de almacenamiento propia donde se guarda toda su informaci\u00f3n, que ser\u00e1 distinta a la de cualquier otro objeto. A las variables miembro instanciadas tambi\u00e9n se les llama variables instancia. De igual forma, a los m\u00e9todos que manipulan esas variables se les llama m\u00e9todos instancia.</p> <p>En el ejemplo del objeto Trabajador, las variables instancia ser\u00edan <code>color_de_pelo</code>, <code>peso</code>, <code>altura</code>, etc. Y los m\u00e9todos instancia ser\u00edan <code>crecer()</code>, <code>dormir()</code>, <code>comer()</code>, etc.</p>"},{"location":"ud02/ud0204/#ciclo-de-vida-de-los-objetos","title":"Ciclo de vida de los objetos","text":"<p>Todo programa en Java parte de una \u00fanica clase, que como hemos comentado se trata de la clase principal.</p> <p>Esta clase ejecutar\u00e1 el contenido de su m\u00e9todo <code>main()</code>, el cual ser\u00e1 el que utilice las dem\u00e1s clases del programa, cree objetos y lance mensajes a otros objetos.</p> <p>Las instancias u objetos tienen un tiempo de vida determinado. Cuando un objeto no se va a utilizar m\u00e1s en el programa, es destruido por el recolector de basura para liberar recursos que pueden ser reutilizados por otros objetos.</p> <p>A la vista de lo anterior, podemos concluir que los objetos tienen un ciclo de vida, en el cual podemos distinguir las siguientes fases:</p> <ul> <li> <p>Creaci\u00f3n, donde se hace la reserva de memoria e inicializaci\u00f3n de atributos.</p> </li> <li> <p>Manipulaci\u00f3n, que se lleva a cabo cuando se hace uso de los atributos y m\u00e9todos del objeto.</p> </li> <li> <p>Destrucci\u00f3n, eliminaci\u00f3n del objeto y liberaci\u00f3n de recursos.</p> </li> </ul>"},{"location":"ud02/ud0204/#creacion","title":"Creaci\u00f3n","text":""},{"location":"ud02/ud0204/#declaracion","title":"Declaraci\u00f3n","text":"<p>Para la creaci\u00f3n de un objeto hay que seguir los siguientes pasos:</p> <ul> <li>Declaraci\u00f3n: Definir el tipo de objeto.</li> </ul> Java<pre><code>&lt;tipo&gt; nombre_objeto;\n</code></pre> <p>Donde:</p> <ul> <li>tipo es la case a partir de la cual se va a crear el objeto, y</li> <li> <p>nombre_objeto es el nombre de la variable referencia con la cual nos referiremos al objeto.</p> </li> <li> <p>Instanciaci\u00f3n: Creaci\u00f3n del objeto utilizando el operador <code>new</code>. Pero \u00bfen qu\u00e9 consisten estos pasos a nivel de programaci\u00f3n en Java? Veamos primero c\u00f3mo declarar un objeto. Para la definici\u00f3n del tipo de objeto debemos emplear la siguiente instrucci\u00f3n:</p> </li> </ul> <p>Los tipos referenciados o referencias se utilizan para guardar la direcci\u00f3n de los datos en la memoria del ordenador.</p> <p>Nada m\u00e1s crear una referencia, \u00e9sta se encuentra vac\u00eda. Cuando una referencia a un objeto no contiene ninguna instancia se dice que es una referencia nula, es decir, que contiene el valor <code>null</code>. Esto quiere decir que la referencia est\u00e1 creada pero que el objeto no est\u00e1 instanciado todav\u00eda, por eso la referencia apunta a un objeto inexistente llamado \"nulo\".</p> <p>Para entender mejor la declaraci\u00f3n de objetos veamos un ejemplo. Cuando ve\u00edamos los tipos de datos, dec\u00edamos que Java proporciona un tipo de dato especial para los textos o cadenas de caracteres que era el tipo de dato <code>String</code>. Ve\u00edamos que realmente este tipo de dato es un tipo referenciado y cre\u00e1bamos una variable mensaje de ese tipo de dato de la siguiente forma:</p> Java<pre><code>String mensaje;\n</code></pre> <p>Los nombres de la clase empiezan con may\u00fascula, como <code>String</code>, y los nombres de los objetos con min\u00fascula, como <code>mensaje</code>, as\u00ed sabemos qu\u00e9 tipo de elemento estamos utilizando.</p> <p><code>String</code> es realmente la clase a partir de la cual creamos nuestro objeto llamado mensaje ( :-o ).</p> <p>Si observas, poco se diferencia esta declaraci\u00f3n de las declaraciones de variables que hac\u00edamos para los tipos primitivos. Antes dec\u00edamos que <code>mensaje</code> era una variable del tipo de dato <code>String</code>. Ahora realmente vemos que <code>mensaje</code> es un objeto de la clase <code>String</code>. Pero mensaje a\u00fan no contiene el objeto porque no ha sido instanciado, veamos c\u00f3mo hacerlo.</p> <p>Por tanto, cuando creamos un objeto estamos haciendo uso de una variable que almacena la direcci\u00f3n de ese objeto en memoria. Esa variable es una referencia o un tipo de datos referenciado, porque no contiene el dato si no la posici\u00f3n del dato en la memoria del ordenador.</p> Java<pre><code>String saludo = new String (\"Bienvenido a Java\");\nString s;    //s vale null\ns = saludo;  //asignaci\u00f3n de referencias\n</code></pre> <p>En las instrucciones anteriores, las variables <code>s</code> y <code>saludo</code> apuntan al mismo objeto de la clase <code>String</code>. Esto implica que cualquier modificaci\u00f3n en el objeto saludo modifica tambi\u00e9n el objeto al que hace referencia la variable <code>s</code>, ya que realmente son el mismo.</p>"},{"location":"ud02/ud0204/#instanciacion","title":"Instanciaci\u00f3n","text":"<p>Una vez creada la referencia al objeto, debemos crear la instancia u objeto que se va a guardar en esa referencia. Para ello utilizamos la orden <code>new</code> con la siguiente sintaxis:</p> Java<pre><code>nombre_objeto = new &lt;Constructor_de_la_Clase&gt;([&lt;par1&gt;, &lt;par2&gt;, ..., &lt;parN&gt;]);\n</code></pre> <p>Donde:</p> <ul> <li>nombre_objeto es el nombre de la variable referencia con la cual nos referiremos al objeto.</li> <li>new es el operador para crear el objeto.</li> <li>Constructor_de_la_Clase es un m\u00e9todo especial de la clase, que se llama igual que ella, y se encarga de inicializar el objeto, es decir, de dar unos valores iniciales a sus atributos.</li> <li>par1-..-parN, son par\u00e1metros que puede o no necesitar el constructor para dar los valores iniciales a los atributos del objeto.</li> </ul> <p>Durante la instanciaci\u00f3n del objeto, se reserva memoria suficiente para el objeto. De esta tarea se encarga Java y juega un papel muy importante el <code>recolector de basura</code>, que se encarga de eliminar de la memoria los objetos no utilizados para que esta pueda volver a ser utilizada.</p> <p>De este modo, para instanciar un objeto <code>String</code>, har\u00edamos lo siguiente:</p> Java<pre><code>mensaje = new String;\n</code></pre> <p>As\u00ed declaramos el objeto mensaje. Para ello utilizar\u00edamos el operador <code>new</code> y el constructor de la clase <code>String</code> a la que pertenece el objeto seg\u00fan la declaraci\u00f3n que hemos hecho en el apartado anterior. A continuaci\u00f3n utilizamos el constructor, que se llama igual que la clase, <code>String</code>.</p> <p>En el ejemplo anterior el objeto se crear\u00eda con la cadena vac\u00eda (<code>\"\"</code>), si queremos que tenga un contenido debemos utilizar par\u00e1metros en el constructor, as\u00ed:</p> Java<pre><code>mensaje = new String (\"El primer programa\");\n</code></pre> <p>Java permite utilizar la clase <code>String</code> como si de un tipo de dato primitivo se tratara, por eso no hace falta  el operador <code>new</code> para instanciar un objeto de la clase <code>String</code> (pero no es lo habitual en el resto de clases).</p> Java<pre><code>mensaje = \"El primer programa\";\n</code></pre> <p>La declaraci\u00f3n e instanciaci\u00f3n de un objeto puede realizarse en la misma instrucci\u00f3n, as\u00ed:</p> Java<pre><code>String mensaje = new String (\"El primer programa\");\n</code></pre> <p>o para la clase <code>String</code>:</p> Java<pre><code>String mensaje = \"El primer programa\";\n</code></pre>"},{"location":"ud02/ud0204/#manipulacion","title":"Manipulaci\u00f3n","text":"<p>Una vez creado e instanciado el objeto \u00bfc\u00f3mo accedemos a su contenido? Para acceder a los atributos y m\u00e9todos del objeto utilizaremos el nombre del objeto seguido del operador punto (<code>.</code>) y el nombre del atributo o m\u00e9todo que queremos utilizar. Cuando utilizamos el operador <code>punto</code> se dice que estamos enviando un mensaje al objeto. </p> <p>La forma general de enviar un mensaje a un objeto es:</p> Java<pre><code>nombre_objeto.mensaje\n</code></pre> <p>Por ejemplo, para acceder a las variables instancia o atributos se utiliza la siguiente sintaxis:</p> Java<pre><code>nombre_objeto.atributo\n</code></pre> <p>Y para acceder a los m\u00e9todos o funciones miembro del objeto se utiliza la sintaxis es:</p> Java<pre><code>nombre_objeto.m\u00e9todo( [par1, par2, ..., parN] )\n</code></pre> <p>En la sentencia anterior <code>par1</code>, <code>par2</code>, etc. son los par\u00e1metros que utiliza el m\u00e9todo (aparece entre corchetes para indicar que son opcionales).</p> <p>Para entender mejor c\u00f3mo se manipulan objetos vamos a utilizar un ejemplo. Para ello necesitamos la Biblioteca de Clases Java o API (Application Programming Interface \u2010 Interfaz de programaci\u00f3n de aplicaciones). Uno de los paquetes de librer\u00edas o bibliotecas es <code>java.awt</code>. Este paquete contiene clases destinadas a la creaci\u00f3n de objetos gr\u00e1ficos e im\u00e1genes. Vemos por ejemplo c\u00f3mo crear un rect\u00e1ngulo.</p> <ol> <li>En primer lugar instanciamos el objeto utilizando el m\u00e9todo constructor, que se llama igual que el objeto, e indicando los par\u00e1metros correspondientes a las dimensiones (alto, ancho) y la posici\u00f3n (x, y) del rect\u00e1ngulo:</li> </ol> Java<pre><code>Rectangle rect = new Rectangle(50, 50, 150, 150);\n</code></pre> <ol> <li>Una vez instanciado el objeto rect\u00e1ngulo si queremos cambiar el valor de los atributos utilizamos el operador punto. Por ejemplo, para cambiar la dimensi\u00f3n del rect\u00e1ngulo:</li> </ol> Java<pre><code>rect.height=100;\nrect.width=100;\n</code></pre> <p>O bien podemos utilizar un m\u00e9todo para hacer lo anterior:</p> Java<pre><code>rect.setSize(200, 200);\n</code></pre> <p>A continuaci\u00f3n puedes acceder al c\u00f3digo del ejemplo:</p> Java<pre><code>/*\n * Muestra como se manipulan objetos en Java\n */\nimport java.awt.Rectangle;\n\npublic class Manipular {\n  public static void main(String[] args) {\n    // Instanciamos el objeto rect indicando posicion y dimensiones\n    Rectangle rect = new Rectangle( 50, 50, 150, 150 );\n    //Consultamos las coordenadas x e y del rectangulo\n    System.out.println( \"\\n-- Coordenadas esquina superior-izqda. --\");\n    System.out.println(\"\\tx = \" + rect.x + \"\\n\\ty = \" + rect.y);\n    // Consultamos las dimensiones (altura y anchura) del rectangulo\n    System.out.println( \"\\n------------- Dimensiones ---------------\");\n    System.out.println(\"\\tAlto = \" + rect.height );\n    System.out.println( \"\\tAncho = \" + rect.width);\n    //Cambiar dimensiones del rectangulo\n    rect.height=100;\n    rect.width=100;\n    rect.setSize(200, 200);\n    System.out.println( \"\\n-- Nuevos valores de los atributos --\");\n    System.out.println(\"\\tx = \" + rect.x + \"\\n\\ty = \" + rect.y);\n    System.out.println(\"\\tAlto = \" + rect.height );\n    System.out.println( \"\\tAncho = \" + rect.width);\n  }\n}\n</code></pre>"},{"location":"ud02/ud0204/#destruccion-de-objetos-y-liberacion-de-memoria","title":"Destrucci\u00f3n de objetos y liberaci\u00f3n de memoria","text":"<p>Cuando un objeto deja de ser utilizado, es necesario liberar el espacio de memoria y otros recursos que pose\u00eda para poder ser reutilizados por el programa. A esta acci\u00f3n se le denomina destrucci\u00f3n del objeto.</p> <p>En Java la destrucci\u00f3n de objetos corre a cargo del recolector de basura (garbage collector). Es un sistema de destrucci\u00f3n autom\u00e1tica de objetos que ya no son utilizados. Lo que se hace es liberar una zona de memoria que hab\u00eda sido reservada previamente mediante el operador <code>new</code>. Esto evita que los programadores tengan que preocuparse de realizar la liberaci\u00f3n de memoria.</p> <p>El recolector de basura se ejecuta en modo segundo plano y de manera muy eficiente para no afectar a la velocidad del programa que se est\u00e1 ejecutando. Lo que hace es que peri\u00f3dicamente va buscando objetos que ya no son referenciados, y cuando encuentra alguno lo marca para ser eliminado.</p> <p>Despu\u00e9s los elimina en el momento que considera oportuno.</p> <p>Justo antes de que un objeto sea eliminado por el recolector de basura, se ejecuta su m\u00e9todo <code>finalize()</code>. Si queremos forzar que se ejecute el proceso de finalizaci\u00f3n de todos los objetos del programa podemos utilizar el m\u00e9todo <code>runFinalization()</code> de la clase <code>System</code>. La clase <code>System</code> forma parte de la Biblioteca de Clases de Java y contiene diversos m\u00e9todos para la entrada/salida de informaci\u00f3n, acceso a variables de entorno del programa y otros m\u00e9todos de diversa utilidad. Para forzar el proceso de finalizaci\u00f3n ejecutar\u00edamos:</p> Java<pre><code>System.runFinalization();\n</code></pre>"},{"location":"ud02/ud0205/","title":"2.5 Utilizaci\u00f3n de m\u00e9todos","text":"<p>Los m\u00e9todos, junto con los atributos, forman parte de la estructura interna de un objeto. Los m\u00e9todos contienen la declaraci\u00f3n de variables locales y las operaciones que se pueden realizar para el objeto, y que son ejecutadas cuando el m\u00e9todo es invocado. Se definen en el cuerpo de la clase y posteriormente son instanciados para convertirse en m\u00e9todos instancia de un objeto.</p> <p>Para utilizar los m\u00e9todos adecuadamente es conveniente conocer la estructura b\u00e1sica de que disponen.</p> <p>Al igual que las clases, los m\u00e9todos est\u00e1n compuestos por una cabecera y un cuerpo. La cabecera tambi\u00e9n tiene modificadores, en este caso hemos estado utilizando <code>public</code> para indicar que el m\u00e9todo es p\u00fablico, lo cual quiere decir que le pueden enviar mensajes no s\u00f3lo los m\u00e9todos del objeto sino los m\u00e9todos de cualquier otro objeto externo.</p> <p>Dentro de un m\u00e9todo nos encontramos el cuerpo del m\u00e9todo que contiene el c\u00f3digo de la acci\u00f3n a realizar. Las acciones que un m\u00e9todo puede realizar son:</p> <ul> <li>Inicializar los atributos del objeto.</li> <li>Consultar los valores de los atributos.</li> <li>Modificar los valores de los atributos.</li> <li>Llamar a otros m\u00e9todos, del mismo objeto o de objetos externos.</li> </ul>"},{"location":"ud02/ud0205/#parametros-y-valores-devueltos","title":"Par\u00e1metros y valores devueltos","text":"<p>Los m\u00e9todos se pueden utilizar tanto para consultar informaci\u00f3n sobre el objeto como para modificar su estado. La informaci\u00f3n consultada del objeto se devuelve a trav\u00e9s de lo que se conoce como valor de retorno, y la modificaci\u00f3n del estado del objeto, o sea, de sus atributos, se hace mediante la lista de par\u00e1metros. En general, la lista de par\u00e1metros de un m\u00e9todo se puede declarar de dos formas diferentes:</p> <ul> <li>Por valor. El valor de los par\u00e1metros no se devuelve al finalizar el m\u00e9todo; es decir, cualquier modificaci\u00f3n que se haga en los par\u00e1metros no tendr\u00e1 efecto una vez se salga del m\u00e9todo. Esto es as\u00ed porque cuando se llama al m\u00e9todo desde cualquier parte del programa, dicho m\u00e9todo recibe una copia de los argumentos, por tanto cualquier modificaci\u00f3n que haga ser\u00e1 sobre la copia, no sobre las variables originales.</li> <li>Por referencia. La modificaci\u00f3n en los valores de los par\u00e1metros s\u00ed tienen efecto tras la finalizaci\u00f3n del m\u00e9todo. Cuando pasamos una variable a un m\u00e9todo por referencia lo que estamos haciendo es pasar la direcci\u00f3n del dato en memoria, por tanto cualquier cambio en el dato seguir\u00e1 modificado una vez que salgamos del m\u00e9todo.</li> </ul> <p>Paso de variables en los m\u00e9todos</p> <p>En el lenguaje Java, todas las variables se pasan por valor, excepto los objetos que se pasan por referencia.</p> <p>En Java, la declaraci\u00f3n de un m\u00e9todo tiene dos restricciones:</p> <ul> <li>Un m\u00e9todo siempre tiene que devolver un valor (no hay valor por defecto). Este valor de retorno es el valor que devuelve el m\u00e9todo cuando termina de ejecutarse, al m\u00e9todo o programa que lo llam\u00f3. Puede ser un tipo primitivo, un tipo referenciado o bien el tipo <code>void</code>, que indica que el m\u00e9todo no devuelve ning\u00fan valor.</li> <li>Un m\u00e9todo tiene un n\u00famero fijo de argumentos. Los argumentos son variables a trav\u00e9s de las cuales se pasa informaci\u00f3n al m\u00e9todo desde el lugar del que se llame, para que \u00e9ste pueda utilizar dichos valores durante su ejecuci\u00f3n. Los argumentos reciben el nombre de par\u00e1metros cuando aparecen en la declaraci\u00f3n del m\u00e9todo.</li> </ul> <p> </p> <p>El valor de retorno es la informaci\u00f3n que devuelve un m\u00e9todo tras su ejecuci\u00f3n.</p> <p>Seg\u00fan hemos visto en el apartado anterior, la cabecera de un m\u00e9todo se declara como sigue:</p> Java<pre><code>public tipo_de_dato_devuelto nombre_metodo (lista_de_parametros);\n</code></pre> <p>Como vemos, el tipo de dato devuelto aparece despu\u00e9s del modificador <code>public</code> y se corresponde con el valor de retorno.</p> <p>La lista de par\u00e1metros aparece al final de la cabecera del m\u00e9todo, justo despu\u00e9s del nombre, encerrados entre signos de par\u00e9ntesis y separados por comas. Se debe indicar el tipo de dato de cada par\u00e1metro as\u00ed:</p> Java<pre><code>(tipo_par\u00e1metro1 nombre_par\u00e1metro1, ..., tipo_par\u00e1metroN nombre_par\u00e1metroN)\n</code></pre> <p> </p> <p>Cuando se llame al m\u00e9todo, se deber\u00e1 utilizar el nombre del m\u00e9todo, seguido de los argumentos que deben coincidir, en n\u00famero y tipo, con la lista de par\u00e1metros, ya que de lo contrario se producir\u00eda un error de sintaxis.</p>"},{"location":"ud02/ud0205/#constructores","title":"Constructores","text":"<p>\u00bfRecuerdas cuando habl\u00e1bamos de la creaci\u00f3n (declaraci\u00f3n) e instanciaci\u00f3n de un objeto? Dec\u00edamos que utiliz\u00e1bamos el operador <code>new</code> seguido del nombre de la clase y una pareja de abrir\u2010cerrar par\u00e9ntesis. Adem\u00e1s, el nombre de la clase era realmente el constructor de la misma, y lo defin\u00edamos como un m\u00e9todo especial que sirve para inicializar valores. </p> <p>En este apartado vamos a ver un poco m\u00e1s sobre los constructores.</p> <p> </p> <p>Un constructor es un m\u00e9todo especial con el mismo nombre de la clase y que no devuelve ning\u00fan valor tras su ejecuci\u00f3n.</p> <p>Cuando creamos un objeto debemos instanciarlo utilizando el constructor de la clase. </p> <p>Veamos la clase <code>Date</code> proporcionada por la Biblioteca de Clases de Java. Si queremos instanciar un objeto a partir de la clase <code>Date</code> tan s\u00f3lo tendremos que utilizar el constructor seguido de una pareja de abrir\u2010cerrar par\u00e9ntesis:</p> Java<pre><code>Date fecha = new Date();\n</code></pre> <p>Con la anterior instrucci\u00f3n estamos creando un objeto fecha de tipo <code>Date</code>, que contendr\u00e1 la fecha y hora actual del sistema.</p> <p>La estructura de los constructores es similar a la de cualquier m\u00e9todo, salvo que no tiene tipo de dato devuelto porque no devuelve ning\u00fan valor. Est\u00e1 formada por una cabecera y un cuerpo, que contiene la inicializaci\u00f3n de atributos y resto de instrucciones del constructor.</p> <p>El m\u00e9todo constructor tiene las siguientes particularidades:</p> <ul> <li>El constructor es invocado autom\u00e1ticamente en la creaci\u00f3n de un objeto, y s\u00f3lo esa vez.</li> <li>Los constructores no empiezan con min\u00fascula, como el resto de los m\u00e9todos, ya que se llaman igual que la clase y las clases empiezan con letra may\u00fascula.</li> <li>Puede haber varios constructores para una clase.</li> <li>Como cualquier m\u00e9todo, el constructor puede tener par\u00e1metros para definir qu\u00e9 valores dar a los atributos del objeto.</li> <li>El constructor por defecto es aqu\u00e9l que no tiene argumentos o par\u00e1metros. Cuando creamos un objeto llamando al nombre de la clase sin argumentos, estamos utilizando el constructor por defecto.</li> <li>Es necesario que toda clase tenga al menos un constructor. Si no definimos constructores para una clase, y s\u00f3lo en ese caso, el compilador crea un constructor por defecto vac\u00edo, que inicializa los atributos a sus valores por defecto, seg\u00fan del tipo que sean: <code>0</code> para los tipos num\u00e9ricos, <code>false</code> para los <code>boolean</code> y <code>null</code> para los tipo car\u00e1cter y las referencias. Dicho constructor lo que hace es llamar al constructor sin argumentos de la superclase (clase de la cual hereda); si la superclase no tiene constructor sin argumentos se produce un error de compilaci\u00f3n.</li> </ul> <p> </p> <p>Cuando definimos constructores personalizados, el constructor por defecto deja de existir, y si no definimos nosotros un constructor sin argumentos cuando intentemos utilizar el constructor por defecto nos dar\u00e1 un error de compilaci\u00f3n.</p>"},{"location":"ud02/ud0205/#el-operador-this","title":"El operador <code>this</code>","text":"<p>Los constructores y m\u00e9todos de un objeto suelen utilizar el operador <code>this</code>. Este operador sirve para referirse a los atributos de un objeto cuando estamos dentro de \u00e9l. Sobre todo se utiliza cuando existe ambig\u00fcedad entre el nombre de un par\u00e1metro y el nombre de un atributo, entonces en lugar del nombre del atributo solamente escribiremos <code>this.nombre_atributo</code>, y as\u00ed no habr\u00e1 duda de a qu\u00e9 elemento nos estamos refiriendo.</p>"},{"location":"ud02/ud0205/#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":"<p>Cuando trabaj\u00e1bamos con cadenas de caracteres utilizando la clase <code>String</code>, ve\u00edamos las operaciones que pod\u00edamos hacer con ellas: obtener longitud, comparar dos cadenas de caracteres, cambiar a may\u00fasculas o min\u00fasculas, etc. Pues bien, sin saberlo est\u00e1bamos utilizando m\u00e9todos est\u00e1ticos definidos por Java para la clase <code>String</code>. Pero \u00bfqu\u00e9 son los m\u00e9todos est\u00e1ticos?</p> <p>Los m\u00e9todos est\u00e1ticos son aquellos m\u00e9todos definidos para una clase que se pueden usar directamente, sin necesidad de crear un objeto de dicha clase. Tambi\u00e9n se llaman m\u00e9todos de clase.</p> <p>Para llamar a un m\u00e9todo est\u00e1tico utilizaremos:</p> <ul> <li> <p>El nombre del m\u00e9todo, si lo llamamos desde la misma clase en la que se encuentra definido.</p> </li> <li> <p>El nombre de la clase, seguido por el operador punto (<code>.</code>) m\u00e1s el nombre del m\u00e9todo est\u00e1tico, si lo llamamos desde una clase distinta a la que se encuentra definido:</p> </li> </ul> Java<pre><code>nombre_clase.nombre_metodo_estatico\n</code></pre> <ul> <li>El nombre del objeto, seguido por el operador punto (<code>.</code>) m\u00e1s el nombre del m\u00e9todo est\u00e1tico. Utilizaremos esta forma cuando tengamos un objeto instanciado de la clase en la que se encuentra definido el m\u00e9todo est\u00e1tico, y no podamos utilizar la anterior:</li> </ul> Java<pre><code>nombre_objeto.nombre_metodo_estatico\n</code></pre> <p>Los m\u00e9todos est\u00e1ticos no afectan al estado de los objetos instanciados de la clase (variables instancia), y suelen utilizarse para realizar operaciones comunes a todos los objetos de la clase. Por ejemplo, si necesitamos contar el n\u00famero de objetos instanciados de una clase, podr\u00edamos utilizar un m\u00e9todo est\u00e1tico que fuera incrementando el valor de una variable entera de la clase conforme se van creando los objetos.</p> <p>En la Biblioteca de Clases de Java existen muchas clases que contienen m\u00e9todos est\u00e1ticos. Pensemos en las clases que ya hemos utilizado en unidades anteriores, como hemos comentado la clase <code>String</code> con todas las operaciones que pod\u00edamos hacer con ella y con los objetos instanciados a partir de ella. O bien la clase <code>Math</code> para la conversi\u00f3n de tipos de datos. Todos ellos son m\u00e9todos est\u00e1ticos que la API de Java define para esas clases. Lo importante es que tengamos en cuenta que al tratarse de m\u00e9todos est\u00e1ticos, para utilizarlos no necesitamos crear un objeto de dichas clases.</p> <p>Fij\u00e9monos en esta secuencia de instrucciones:</p> Java<pre><code>//Creamos dos c\u00edrculos de radio 100 en distintas posiciones\nCirculo c1 = new Circulo(50,50,100); \nCirculo c2 = new Circulo(80,80,100); \n...\n//Aumentamos el radio del primer c\u00edrculo a 200\nc1.setRadio(200);\n</code></pre> <p>y en esta otra:</p> Java<pre><code>System.out.println(Math.sqrt(4));\n</code></pre> <p>En el primer ejemplo, <code>.setRadio(200)</code> va precedido por un objeto. La variable <code>c1</code> es un objeto de la clase C\u00edrculo, por tanto, la instrucci\u00f3n est\u00e1 modificando el radio de un c\u00edrculo concreto, el que se encuentra en la posici\u00f3n (50,50) . El m\u00e9todo <code>setRadio</code> es un m\u00e9todo no est\u00e1tico. Los m\u00e9todos no est\u00e1ticos act\u00faan siempre sobre alg\u00fan objeto (el que figura a la izquierda del punto).</p> <p>En el segundo ejemplo, en cambio, a la izquierda de <code>.sqrt(4)</code> no se ha puesto el nombre de un objeto, sino el de una clase, la clase <code>Math</code>. El m\u00e9todo <code>sqrt</code> no est\u00e1 actuando sobre un objeto concreto: no tiene sentido hacerlo, solo pretendemos calcular la ra\u00edz cuadrada de <code>4</code>. <code>Sqrt</code> es un m\u00e9todo est\u00e1tico. Los m\u00e9todos est\u00e1ticos se usan poniendo delante del punto el nombre de la clase en que se encuentran definidos.</p>"},{"location":"ud02/ud0206/","title":"2.6 Librer\u00edas de objetos (paquetes)","text":"<p>Conforme nuestros programas se van haciendo m\u00e1s grandes, el n\u00famero de clases va creciendo. Introducir todas las clases en un \u00fanico directorio no ayuda a que est\u00e9n bien organizadas, lo mejor es hacer grupos de clases, de forma que todas las clases que est\u00e9n relacionadas o traten sobre un mismo tema est\u00e9n en el mismo grupo.</p> <p>Un paquete de clases es una agrupaci\u00f3n de clases que consideramos que est\u00e1n relacionadas entre s\u00ed o tratan de un tema com\u00fan.</p> <p>Acceso a m\u00e9todos de un mismo paquete</p> <p>Las clases de un mismo paquete tienen un acceso privilegiado a los atributos y m\u00e9todos de otras clases de dicho paquete. Es por ello por lo que se considera que los paquetes son tambi\u00e9n, en cierto modo, unidades de encapsulaci\u00f3n y ocultaci\u00f3n de informaci\u00f3n.</p> <p>Java nos ayuda a organizar las clases en paquetes. En cada fichero <code>.java</code> que hagamos, al principio, podemos indicar a qu\u00e9 paquete pertenece la clase que hagamos en ese fichero.</p> <p>Los paquetes se declaran utilizando la palabra clave <code>package</code> seguida del nombre del paquete.</p> <p>Para establecer el paquete al que pertenece una clase hay que poner una sentencia de declaraci\u00f3n como la siguiente al principio de la clase:</p> Java<pre><code>package Nombre_de_Paquete;\n</code></pre> <p>Por ejemplo, si decidimos agrupar en un paquete <code>ejemplos</code> un programa llamado <code>Bienvenida</code>, pondr\u00edamos en nuestro fichero <code>Bienvenida.java</code> lo siguiente:</p> Java<pre><code>package ejemplos;\n\npublic class Bienvenida {\n    [...]\n}\n</code></pre> <p>El c\u00f3digo es exactamente igual que como hemos venido haciendo hasta ahora, solamente hemos a\u00f1adido la l\u00ednea <code>package ejemplos;</code> al principio.</p>"},{"location":"ud02/ud0206/#sentencia-import","title":"Sentencia <code>import</code>","text":"<p>Cuando queremos utilizar una clase que est\u00e1 en un paquete distinto a la clase que estamos utilizando, se suele utilizar la sentencia <code>import</code>. Por ejemplo, si queremos utilizar la clase <code>Scanner</code> que est\u00e1 en el paquete <code>java.util</code> de la Biblioteca de Clases de Java, tendremos que utilizar esta sentencia:</p> Java<pre><code>import java.util.Scanner;\n</code></pre> <p>Se pueden importar todas las clases de un paquete, as\u00ed:</p> Java<pre><code>import java.awt.*;\n</code></pre> <p>Esta sentencia debe aparecer al principio de la clase, justo despu\u00e9s de la sentencia package, si \u00e9sta existiese.</p> <p>Tambi\u00e9n podemos utilizar la clase sin sentencia <code>import</code>, en cuyo caso cada vez que queramos usarla debemos indicar su ruta completa:</p> Java<pre><code>java.util.Scanner teclado = new java.util.Scanner (System.in);\n</code></pre> <p>Hasta aqu\u00ed todo correcto. Sin embargo, al trabajar con paquetes, Java nos obliga a organizar los directorios, compilar y ejecutar de cierta forma para que todo funcione adecuadamente.</p>"},{"location":"ud02/ud0206/#librerias-java","title":"Librer\u00edas Java","text":"<p>Cuando descargamos el entorno de compilaci\u00f3n y ejecuci\u00f3n de Java, obtenemos la API de Java. Como ya sabemos, se trata de un conjunto de bibliotecas que nos proporciona paquetes de clases \u00fatiles para nuestros programas. Utilizar las clases y m\u00e9todos de la Biblioteca de Java nos va ayudar a reducir el tiempo de desarrollo considerablemente, por lo que es importante que aprendamos a consultarla y conozcamos las clases m\u00e1s utilizadas. Ejemplo:</p> Java<pre><code>import java.lang.System; // Se importa la clase System.\nimport java.awt.*;       // Se importa todas las clases del paquete awt;\n</code></pre> <p>Los paquetes m\u00e1s importantes que ofrece el lenguaje Java son:</p> Paquete o librer\u00eda Descripci\u00f3n java.io Contiene las clases que gestionan la entrada y salida, ya sea para manipular ficheros, leer o escribir en pantalla, en memoria, etc. Este paquete contiene por ejemplo la clase BufferedReader que se utiliza para la entrada por teclado. java.lang Contiene las clases b\u00e1sicas del lenguaje. Este paquete no es necesario importarlo, ya que es importado autom\u00e1ticamente por el entorno de ejecuci\u00f3n. En este paquete se encuentra la clase Object, que sirve como ra\u00edz para la jerarqu\u00eda de clases de Java, o la clase System que ya hemos utilizado en algunos ejemplos y que representa al sistema en el que se est\u00e1 ejecutando la aplicaci\u00f3n. Tambi\u00e9n podemos encontrar en este paquete las clases que \"envuelven\" los tipos primitivos de datos. Lo que proporciona una serie de m\u00e9todos para cada tipo de dato de utilidad, como por ejemplo las conversiones de datos. java.util Biblioteca de clases de utilidad general para el programador. Este paquete contiene por ejemplo la clase Scanner utilizada para la entrada por teclado de diferentes tipos de datos, la clase Date, para el tratamiento de fechas, etc. java.math Contiene herramientas para manipulaciones matem\u00e1ticas. java.awt Incluye las clases relacionadas con la construcci\u00f3n de interfaces de usuario, es decir, las que nos permiten construir ventanas, cajas de texto, botones, etc. Algunas de las clases que podemos encontrar en este paquete son Button, TextField, Frame, Label, etc. java.swing Contiene otro conjunto de clases para la construcci\u00f3n de interfaces avanzadas de usuario. Los componentes que se engloban dentro de este paquete se denominan componentes Swing, y suponen una alternativa mucho m\u00e1s potente que AWT para construir interfaces de usuario. java.net Conjunto de clases para la programaci\u00f3n en la red local e Internet. java.sql Contiene las clases necesarias para programar en Java el acceso a las bases de datos. java.security Biblioteca de clases para implementar mecanismos de seguridad. <p>Como se puede comprobar Java ofrece una completa jerarqu\u00eda de clases organizadas a trav\u00e9s de paquetes.</p>"},{"location":"ud02/ud0207/","title":"2.7 Cadenas de caracteres. La clase String","text":""},{"location":"ud02/ud0207/#cadenas-de-caracteres","title":"Cadenas de caracteres","text":"<p>Hasta ahora hemos utilizado literales de cadenas de caracteres que, como sabemos, se ponen entre comillas dobles, como en la siguiente expresi\u00f3n</p> Java<pre><code>System.out.println(\"Hola\");\n</code></pre> <p>Para almacenar cadenas de caracteres en variables se utiliza la clase <code>String</code>. <code>String</code> se encuentra definida en el paquete <code>java.lang</code>. Recordemos que no es necesario importar este paquete para utilizar sus clases.</p> <p>La forma de <code>String</code> es la siguiente:</p> Java<pre><code>String variable = new String(\"texto\");\n</code></pre> <p>Ejemplo:</p> Java<pre><code>String nombre = new String(\"Javier\");\nSystem.out.println(\"Mi nombre es \" + nombre);\n</code></pre> <p>Sin embargo, debido a que es una clase que se utiliza ampliamente en los programas, Java permite una forma abreviada de crear objetos String:</p> Java<pre><code>String nombreVariable = \"texto\";    \n</code></pre> <p>Ejemplo:</p> Java<pre><code>String nombre = \"Javier\";\nSystem.out.println(\"Mi nombre es \" + nombre);\n</code></pre>"},{"location":"ud02/ud0207/#leer-cadenas-desde-teclado","title":"Leer cadenas desde teclado","text":""},{"location":"ud02/ud0207/#clase-scanner","title":"Clase <code>Scanner</code>","text":"<p>Para leer cadenas de caracteres desde teclado podemos utilizar la clase <code>Scanner</code>. \u00c9sta dispone de dos m\u00e9todos para leer cadenas:</p> <ul> <li><code>next()</code>: Lee desde la entrada est\u00e1ndar (teclado) una secuencia de caracteres hasta encontrar un delimitador (un espacio). Devuelve un <code>String</code>.</li> <li><code>nextLine()</code>: Lee desde la entrada est\u00e1ndar (teclado) una secuencia de caracteres hasta encontrar un salto de l\u00ednea. Devuelve un <code>String</code>.</li> </ul> <p>Ejemplo:</p> Java<pre><code>Scanner tec = new Scanner(System.in);\n//De lo que introduce el usuario, lee la 1\u00ba palabra.\nString nombre = tec.next();\n//Lee lo que introduce el usuario hasta que pulsa intro.\nString nombreCompleto = tec.nextLine(); \n</code></pre>"},{"location":"ud02/ud0207/#ejemplos-de-la-ud01-utilizando-scanner-compatible-con-los-ides","title":"Ejemplos de la UD01 utilizando <code>Scanner</code> (compatible con los IDE's)","text":"<p>A continuaci\u00f3n vamos a ver los mismos ejemplos de la UD01, pero utilizando la clase <code>Scanner</code> que s\u00ed es compatible con los IDE's. Para poder usar la clase <code>Scanner</code> necesitamos importar el paquete: <code>java.util.Scanner</code>.</p> Java<pre><code>import java.util.Scanner;\n\npublic class EjemploUD02 {\n\n    public static void main(String[] args) {\n\n        Scanner teclado = new Scanner(System.in);\n\n        //Introducir texto desde teclado\n        String texto;\n        System.out.print(\"Introduce un texto: \");\n        texto = teclado.nextLine(); \n        System.out.println(\"El texto introducido es: \"+texto);\n\n        //Introducir un n\u00famero entero desde teclado\n        String texto2;\n        int entero2;\n        System.out.print(\"Introduce un n\u00famero: \");\n        texto2 = teclado.nextLine(); \n        entero2 = Integer.parseInt(texto2);\n        System.out.println(\"El n\u00famero introducido es:\"+entero2);\n\n        //Introducir un n\u00famero decimal desde teclado\n        String texto3;\n        double doble3;\n        System.out.print(\"Introduce un n\u00famero decimal: \");\n        texto3 = teclado.nextLine(); \n        doble3 = Double.parseDouble(texto3); // convertimos texto a doble\n        System.out.println(\"N\u00famero decimal introducido es: \"+doble3);\n    }\n}\n</code></pre>"},{"location":"ud02/ud0207/#la-clase-string","title":"La clase <code>String</code>","text":"<p>Adem\u00e1s de permitir almacenar cadenas de caracteres, <code>String</code> tiene m\u00e9todos para realizar c\u00e1lculos u operaciones con ellas.</p> <p>As\u00ed por ejemplo, la clase tiene un m\u00e9todo <code>toUpperCase()</code> que devuelve el <code>String</code> convertido a may\u00fasculas. El siguiente ejemplo ilustra su uso:</p> Java<pre><code>String nombre = \"Javier\";\nSystem.out.println(nombre.toUpperCase()); // Se muestra JAVIER por pantalla\n</code></pre> <p>Accede a la documentaci\u00f3n en l\u00ednea de Java y estudia los siguientes m\u00e9todos de la clase:</p> <ul> <li><code>charAt</code></li> <li><code>indexOf</code></li> <li><code>subString</code></li> <li><code>toLowerCase</code></li> <li><code>trim</code></li> </ul>"},{"location":"ud02/ud0207/#printf-o-format","title":"<code>printf</code> o <code>format</code>","text":"<p>El m\u00e9todo <code>printf()</code> o <code>format()</code> (son sin\u00f3nimos) utilizan unos c\u00f3digos de conversi\u00f3n para indicar el contenido a mostrar de qu\u00e9 tipo es. Estos c\u00f3digos se caracterizan porque llevan delante el s\u00edmbolo %, algunos de ellos son:</p> <ul> <li><code>%c</code>: Escribe un car\u00e1cter.</li> <li><code>%s</code>: Escribe una cadena de texto.</li> <li><code>%d</code>: Escribe un entero.</li> <li><code>%f</code>: Escribe un n\u00famero en punto flotante.</li> <li><code>%e</code>: Escribe un n\u00famero en punto flotante en notaci\u00f3n cient\u00edfica.</li> </ul> <p>Por ejemplo, si queremos escribir el n\u00famero float <code>12345.1684</code> con el punto de los miles y s\u00f3lo dos cifras decimales la orden ser\u00eda:</p> Java<pre><code>System.out.printf(\"%,.2f\\n\", 12345.1684);\n</code></pre> <p>Esta orden mostrar\u00eda el n\u00famero <code>12.345,17</code> por pantalla.</p> <p>Otro ejemplo seria:</p> Java<pre><code>System.out.format(\"El valor de la variable float es\" +\n     \"%f, mientras que el valor del entero es %d\" +\n     \"y el string contiene %s\", variableFloat, variableInt, variableString); \n</code></pre> <p>Puedes investigar m\u00e1s sobre <code>printf</code> o <code>format</code> en este enlace</p>"},{"location":"ud02/ud0207/#salida-de-error","title":"Salida de error","text":"<p>La salida de error est\u00e1 representada por el objeto <code>System.err</code>. No parece muy \u00fatil utilizar <code>out</code> y <code>err</code> si su destino es la misma pantalla, o al menos en el caso de la consola del sistema donde las dos salidas son representadas con el mismo color y no notamos diferencia alguna. En cambio en la consola de varios entornos integrados de desarrollo como Visual Studio Code, NetBeans o Eclipse la salida de <code>err</code> se ve en un color diferente. Teniendo el siguiente c\u00f3digo:</p> Java<pre><code>System.out.println(\"Salida est\u00e1ndar por pantalla\");\nSystem.err.println(\"Salida de error por pantalla\");\n</code></pre> <p>Tanto NetBeans como Eclipse mostraran el mensaje <code>err</code> en color rojo.</p>"},{"location":"ud02/ud0208/","title":"Ejemplos","text":"Ejemplo de la unidad 02 Java<pre><code>import java.util.Scanner;\n\npublic class EjemploUD02 {\n\n    public static void main(String[] args) {\n\n        Scanner teclado = new Scanner(System.in);\n\n        //Introducir texto desde teclado\n        String texto;\n        System.out.print(\"Introduce un texto: \");\n        texto = teclado.nextLine();\n        System.out.println(\"El texto introducido es: \" + texto);\n\n        //Introducir un n\u00famero entero desde teclado\n        String texto2;\n        int entero2;\n        System.out.print(\"Introduce un n\u00famero: \");\n        texto2 = teclado.nextLine();\n        entero2 = Integer.parseInt(texto2);\n        System.out.println(\"El n\u00famero introducido es:\" + entero2);\n\n        //Introducir un n\u00famero decimal desde teclado\n        String texto3;\n        double doble3;\n        System.out.print(\"Introduce un n\u00famero decimal: \");\n        texto3 = teclado.nextLine();\n        doble3 = Double.parseDouble(texto3); // convertimos texto a doble\n        System.out.println(\"N\u00famero decimal introducido es: \" + doble3);\n\n        System.out.println(\"La clase String\");\n        String nombre = \"Javier \"; //Observa que hay un espacio final\n        System.out.println(nombre.toUpperCase()); //JAVIER \n        System.out.println(nombre.charAt(4)); //E\n        System.out.println(nombre.indexOf(\"i\"));//3\n        System.out.println(nombre.substring(0, 3));//JAVI\n        System.out.println(nombre.toLowerCase());//javier\n        System.out.println(nombre.trim());//Javier sin espacios finales\n        System.out.printf(\"%,.2f\\n\", 12345.1684);\n\n        System.out.format(\"El valor de la variable float es %f\"\n                + \", mientras que el valor del entero es %d\"\n                + \" y el string contiene %s\", doble3, entero2, texto);\n\n        System.err.println(\"Salida de error por pantalla\");\n    }\n}\n</code></pre> Clase <code>Pajaro</code> <p>Vamos a ilustrar mediante un ejemplo la utilizaci\u00f3n de objetos y m\u00e9todos, as\u00ed como el uso de par\u00e1metros y el operador <code>this</code>. Aunque la creaci\u00f3n de clases la veremos en las siguientes unidades, en este ejercicio creamos una peque\u00f1a clase para que podamos instanciar el objeto con el que vamos a trabajar.</p> <p>Las clases se suelen representar como un rect\u00e1ngulo, y dentro de \u00e9l se sit\u00faan los atributos y los m\u00e9todos de dicha clase.</p> <p> </p> <p>En la imagen anterior, la clase <code>Pajaro</code> est\u00e1 compuesta por tres atributos, uno de ellos el nombre y otros dos que indican la posici\u00f3n del ave, <code>posX</code> y <code>posY</code>. Tiene dos m\u00e9todos constructores y un m\u00e9todo <code>volar()</code>. Como sabemos, los m\u00e9todos constructores reciben el mismo nombre de la clase, y puede haber varios para una misma clase, dentro de ella se diferencian unos de otros por los par\u00e1metros que utilizan.</p> <p>ENUNCIADO Dada una clase principal llamada <code>Pajaro</code>, se definen los atributos y m\u00e9todos que aparecen en la imagen anterior. Los m\u00e9todos realizan las siguientes acciones:</p> <ul> <li> <p><code>Pajaro()</code>. Constructor por defecto. En este caso, el constructor por defecto no contiene ninguna instrucci\u00f3n, ya que Java inicializa de forma autom\u00e1tica las variables miembro, si no le damos ning\u00fan valor.</p> </li> <li> <p><code>Pajaro(String nombre, int posX, int posY)</code>. Constructor que recibe como argumentos una cadena de texto y dos enteros para inicializar el valor de los atributos.</p> </li> <li> <p><code>volar(int posX, int posY)</code>. M\u00e9todo que recibe como argumentos dos enteros: <code>posX</code> y <code>posY</code>, y devuelve un valor de tipo <code>double</code> como resultado, usando la palabra clave <code>return</code>. El valor devuelto es el resultado de aplicar un desplazamiento de acuerdo con la siguiente f\u00f3rmula:    </p> </li> </ul> <p>Dise\u00f1a un programa que utilice la clase <code>Pajaro</code>, crea una instancia de dicha clase y ejecute sus m\u00e9todos.</p> <p>SOLUCI\u00d3N Lo primero que debemos hacer es crear la clase <code>Pajaro</code>, con sus m\u00e9todos y atributos. De acuerdo con los datos que tenemos, el c\u00f3digo de la clase ser\u00eda el siguiente:</p> Java<pre><code>public class Pajaro {\n\n    String nombre;\n    int posX, posY;\n\n    public Pajaro() {\n    }\n\n    public Pajaro(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public Pajaro(String nombre, int posX, int posY) {\n        this.nombre = nombre;\n        this.posX = posX;\n        this.posY = posY;\n    }\n\n    double volar(int posX, int posY) {\n        double desplazamiento = Math.sqrt(posX * posX + posY * posY);\n        this.posX = posX;\n        this.posY = posY;\n        return desplazamiento;\n    }\n    //m\u00e9todo main()\n    [...] \n}\n</code></pre> <p>Debemos tener en cuenta que se trata de una clase principal, lo cual quiere decir que debe contener un m\u00e9todo main() dentro de ella. En el m\u00e9todo main() vamos a situar el c\u00f3digo de nuestro programa. El ejercicio dice que tenemos que crear una instancia de la clase y ejecutar sus m\u00e9todos, entre los que est\u00e1n el constructor y el m\u00e9todo volar().</p> <p>Tambi\u00e9n es conveniente imprimir el resultado de ejecutar el m\u00e9todo volar(). Por tanto, lo que har\u00eda el programa ser\u00eda:</p> <ul> <li> <p>Crear un objeto de la clase e inicializarlo.</p> </li> <li> <p>Invocar al m\u00e9todo volar.</p> </li> <li> <p>Imprimir por pantalla la distancia recorrida.</p> </li> </ul> <p>Para inicializar el objeto utilizaremos el constructor con par\u00e1metros, despu\u00e9s ejecutaremos el m\u00e9todo volar() del objeto creado y finalmente imprimiremos el valor que nos devuelve el m\u00e9todo.</p> <p>Luego crearemos otro pajaro2 usando el constructor por defecto (sin par\u00e1metros). Le asignaremos el nombre y la posici\u00f3n manualmente, y calcularemos su desplazamiento llamando al m\u00e9todo, pero usando los atributos del objeto (pajaro2.posX y pajaro2.posY) en lugar de constantes. El c\u00f3digo del m\u00e9todo main() quedar\u00eda como sigue:</p> Java<pre><code>public static void main(String[] args) {\n  //creamos el objeto con par\u00e1metros\n  Pajaro pajaro1 = new Pajaro(\"WoodPecker\", 50, 50);\n  double d1 = pajaro1.volar(50, 50);\n  System.out.printf(\"\\nEl desplazamiento de %s ha sido %.2f\",pajaro1.nombre,d1);\n\n  Pajaro pajaro2 = new Pajaro();\n  //damos nombre y cambiamos la posici\u00f3n de \"Piolin\" a mano\n  pajaro2.nombre=\"Piol\u00edn\";\n  pajaro2.posX=30;\n  pajaro2.posY=30;\n  double d2 = pajaro2.volar(pajaro2.posX, pajaro2.posY);\n  System.out.printf(\"\\nEl desplazamiento de %s ha sido %.2f\\n\",pajaro2.nombre,d2);\n}\n</code></pre> <p>Si ejecutamos nuestro programa el resultado ser\u00eda el siguiente:</p> Bash<pre><code>El desplazamiento de WoodPecker ha sido 70.71\nEl desplazamiento de Piol\u00edn ha sido 42.43\n</code></pre>"},{"location":"ud02/ud02ac/","title":"Actividades","text":""},{"location":"ud02/ud02ac/#actividad-01","title":"Actividad 01","text":"<p>Crear una clase llamada <code>Temperatura</code> con dos m\u00e9todos:</p> <ul> <li><code>celsiusToFarenheit</code>. Convierte grados Celsius a Farenheit.</li> </ul> <ul> <li><code>farenheitToCelsius</code>. Convierte grados Farenheit a Celsius.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-02","title":"Actividad 02","text":"<p>A partir de la siguiente clase <code>Moto</code>:</p> Java<pre><code>public class Moto {\n\n    private int velocidad;\n\n    Moto() {\n        velocidad=0;\n    }\n}\n</code></pre> <p>A\u00f1ade los siguientes m\u00e9todos:</p> <ul> <li><code>int getVelocidad</code>. Devuelve la velocidad del objeto moto.</li> <li> <p><code>void acelera(int mas)</code>. Permite aumentar la velocidad del objeto moto.</p> </li> <li> <p><code>void frena(int menos)</code>. Permite reducir la velocidad del objeto moto.</p> </li> </ul>"},{"location":"ud02/ud02ac/#actividad-03","title":"Actividad 03","text":"<p>Crea una clase <code>Rebajas</code> con un m\u00e9todo <code>descubrePorcentaje()</code> que descubra el descuento aplicado en un producto. El m\u00e9todo recibe el precio original del producto y el rebajado y devuelve el porcentaje aplicado. Podemos calcular el descuento realizando la operaci\u00f3n:</p>"},{"location":"ud02/ud02ac/#actividad-04","title":"Actividad 04","text":"<p>Realiza una clase <code>Finanzas</code> que convierta d\u00f3lares a euros y viceversa. Codifica los m\u00e9todos <code>dolaresToEuros</code> y <code>eurosToDolares</code>. Prueba que dicha clase funciona correctamente haciendo conversiones entre euros y d\u00f3lares. La clase tiene que tener:</p> <ul> <li>Un constructor <code>finanzas()</code> por defecto el cual establece el cambio D\u00f3lar-Euro en 1.02.</li> <li>Un constructor <code>finanzas(double cambio)</code>, el cual permitir\u00e1 configurar el cambio D\u00f3lar-euro a una cantidad personalizada.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-05","title":"Actividad 05","text":"<p>Realiza una clase <code>MiNumero</code> que proporcione el doble, triple y cu\u00e1druple de un n\u00famero proporcionado en su constructor (realiza un m\u00e9todo para <code>doble</code>, otro para <code>triple</code> y otro para <code>cu\u00e1druple</code>). Haz que la clase tenga un m\u00e9todo <code>main</code> y comprueba los distintos m\u00e9todos.</p>"},{"location":"ud02/ud02ac/#actividad-06","title":"Actividad 06","text":"<p>Realiza una clase <code>Numero</code> que almacene un n\u00famero entero y tenga las siguientes caracter\u00edsticas:</p> <ul> <li>Constructor por defecto que inicializa a 0 el n\u00famero interno.</li> <li>Constructor que inicializa el n\u00famero interno.</li> <li>M\u00e9todo <code>anade</code> que permite sumarle un n\u00famero al valor interno.</li> <li>M\u00e9todo <code>resta</code> que resta un n\u00famero al valor interno.</li> <li>M\u00e9todo <code>getValor</code>. Devuelve el valor interno.</li> <li>M\u00e9todo <code>getDoble</code>. Devuelve el doble del valor interno.</li> <li>M\u00e9todo <code>getTriple</code>. Devuelve el triple del valor interno.</li> <li>M\u00e9todo <code>setNumero</code>. Inicializa de nuevo el valor interno.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-07","title":"Actividad 07","text":"<p>Crea la clase <code>Peso</code>, la cual tendr\u00e1 las siguientes caracter\u00edsticas:</p> <ul> <li>Deber\u00e1 tener un atributo donde se almacene el peso de un objeto en kilogramos.    En el constructor se le pasar\u00e1 el peso y la medida en la que se ha tomado (\"Lb\" para libras, \"Li\" para lingotes, \"Oz\" para onzas, \"P\" para peniques, \"K\" para kilos, \"G\" para gramos y \"Q\" para quintales).</li> <li>Deber\u00e1 de tener los siguientes m\u00e9todos:</li> <li><code>getLibras</code>. Devuelve el peso en libras.</li> <li><code>getLingotes</code>. Devuelve el peso en lingotes.</li> <li><code>getPeso</code>. Devuelve el peso en la medida que se pase como par\u00e1metro (\"Lb\" para libras, \"Li\" para lingotes, \"Oz\" para onzas, \"P\" para peniques, \"K\" para kilos, \"G\" para gramos y \"Q\" para quintales).</li> <li>Para la realizaci\u00f3n del ejercicio toma como referencia los siguientes datos:</li> <li>1 Libra = 16 onzas = 453 gramos.</li> <li>1 Lingote = 32,17 libras = 14,59 kg.</li> <li>1 Onza = 0,0625 libras = 28,35 gramos.</li> <li>1 Penique = 0,05 onzas = 1,55 gramos.</li> <li>1 Quintal = 100 libras = 43,3 kg.</li> <li>Crea adem\u00e1s un m\u00e9todo <code>main</code> para testear y verificar los m\u00e9todos de esta clase.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-08","title":"Actividad 08","text":"<p>Crea una clase <code>ConversorMillas</code> con un m\u00e9todo <code>millasAMetros()</code> que toma como par\u00e1metro de entrada un valor en millas marinas y las convierte a metros. Una vez tengas este m\u00e9todo escribe otro <code>millasAKilometros()</code> que realice la misma conversi\u00f3n, pero esta vez exprese el resultado en kil\u00f3metros. Nota: 1 milla marina equivale a 1852 metros.</p>"},{"location":"ud02/ud02ac/#actividad-09","title":"Actividad 09","text":"<p>Crea la clase <code>Coche</code> con dos constructores. Uno no toma par\u00e1metros y el otro s\u00ed. Los dos constructores inicializar\u00e1n los atributos <code>marca</code> y <code>modelo</code> de la clase. Crea dos objetos (cada objeto llama a un constructor distinto) y verifica que todo funciona correctamente.</p>"},{"location":"ud02/ud02ac/#actividad-10","title":"Actividad 10","text":"<p>Implementa una clase <code>Consumo</code>, la cual forma parte del \"ordenador de a bordo\" de un coche y tiene las siguientes caracter\u00edsticas:</p> <ul> <li>Atributos:</li> <li>kilometros.</li> <li>litros. Litros de combustible consumido.</li> <li>vmed. Velocidad media.</li> <li>pgas. Precio de la gasolina.</li> <li>M\u00e9todos:</li> <li><code>getTiempo</code>. Indicar\u00e1 el tiempo empleado en realizar el viaje.</li> <li><code>consumoMedio</code>. Consumo medio del veh\u00edculo (en litros cada 100 kil\u00f3metros).</li> <li><code>consumoEuros</code>. Consumo medio del veh\u00edculo (en euros cada 100 kil\u00f3metros).</li> </ul> <p>No olvides crear un constructor para la clase que establezca el valor de los atributos. Elige el tipo de datos m\u00e1s apropiado para cada atributo.</p>"},{"location":"ud02/ud02ac/#actividad-11","title":"Actividad 11","text":"<p>Para la clase anterior implementa los siguientes m\u00e9todos, los cuales podr\u00e1n modificar los valores de los atributos de la clase:</p> <ul> <li><code>setKms</code></li> <li><code>setLitros</code></li> <li><code>setVmed</code></li> <li><code>setPgas</code></li> </ul>"},{"location":"ud02/ud02ac/#actividad-12","title":"Actividad 12","text":"<p><code>Restaurante</code> : Un restaurante cuya especialidad son las patatas con carne nos pide dise\u00f1ar un m\u00e9todo con el que se pueda saber cu\u00e1ntos clientes pueden atender con la materia prima que tienen en el almac\u00e9n. El m\u00e9todo recibe la cantidad de patatas y carne en kilos y devuelve el n\u00famero de clientes que puede atender el restaurante teniendo en cuenta que por cada tres personas, utilizan un dos kilos de patatas y un kilo de carne.</p>"},{"location":"ud02/ud02ac/#actividad-13","title":"Actividad 13","text":"<p>Modifica el programa anterior creando una clase que permita almacenar los kilos de patatas y carne del restaurante. Implementa los siguientes m\u00e9todos:</p> <ul> <li><code>public void addCarne(int x)</code>. A\u00f1ade x kilos de carne a los ya existentes.</li> <li><code>public void addPatatas(int x)</code>. A\u00f1ade x kilos de patatas a los ya existentes.</li> <li><code>public int getComensales()</code>. Devuelve el n\u00famero de clientes que puede atender el restaurante (este es el m\u00e9todo del ejercicio anterior).</li> <li><code>public double getCarne()</code>. Devuelve los kilos de carne que hay en el almac\u00e9n.</li> <li><code>public double getPatatas()</code>. Devuelve los kilos de patatas que hay en el almac\u00e9n.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-14","title":"Actividad 14","text":"<p>Crear un clase llamada <code>Proveedor</code> con las siguientes propiedades:</p> <ul> <li><code>CIF</code></li> <li><code>nombreEmpresa</code></li> <li><code>descripcion</code></li> <li><code>sector</code></li> <li><code>direccion</code></li> <li><code>telefono</code></li> <li><code>poblacion</code></li> <li><code>codPostal</code></li> <li><code>correo</code></li> </ul> <p>Crear para la clase <code>Proveedor</code> los m\u00e9todos:</p> <ul> <li>Constructor que permite crear una instancia con los datos de un proveedor.</li> <li>M\u00e9todos get (getters).</li> <li>M\u00e9todos set (setters).</li> <li>M\u00e9todo <code>verificaCorreo</code> que devuelve true si la direcci\u00f3n de correo contiene <code>@</code>.</li> <li>M\u00e9todo que muestre todos los datos del proveedor.</li> </ul> <p>Crear en esta clase un m\u00e9todo <code>main</code> ejecutable que:</p> <ul> <li>Cree una instancia del objeto <code>Proveedor</code> llamado <code>proveedor</code>.</li> <li>Cambie el sector del <code>proveedor</code>.</li> <li>Muestre el sector del <code>proveedor</code>.</li> <li>Verifique si el correo es v\u00e1lido.</li> <li>Muestre todos los datos del <code>proveedor</code>.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-15","title":"Actividad 15","text":"<p>Crear una clase llamada <code>Producto</code> con las siguientes propiedades:</p> <ul> <li><code>codProducto</code></li> <li><code>nombreProducto</code></li> <li><code>descripcion</code></li> <li><code>categoria</code></li> <li><code>peso</code></li> <li><code>precio</code></li> <li><code>stock</code></li> </ul> <p>Crear para la clase <code>Producto</code> los siguiente m\u00e9todos:</p> <ul> <li><code>Producto</code>: Permite crear una instancia con los datos de un producto.</li> <li><code>aumentaStock</code>: Permite aumentar el stock de unidades del producto. Se le pasa el dato de unidades que aumentamos.</li> <li><code>disminuyeStock</code>: Permite disminuir el stock de unidades del producto. Se le pasa el dato de unidades que disminuimos.</li> <li><code>ivaProducto</code>: Permite calcular el IVA aplicado al precio del producto. Se le pasa el dato del porcentaje de IVA.</li> <li><code>mostrarDatos</code>: Muestra los datos del producto.</li> </ul> <p>Crear una clase principal <code>main</code> ejecutable que:</p> <ul> <li>Crear dos instancias de la clase <code>Producto</code> llamadas <code>productoHardware</code> y <code>productoSoftware</code>.</li> <li>Mostrar los datos de los dos objetos <code>Producto</code> que hemos creado.</li> <li>Aumenta el stock de unidades del <code>productoHardware</code> en 12 unidades.</li> <li>Disminuir el stock de unidades del <code>productoSoftware</code> en 5 unidades.</li> <li>Calcula el IVA de los dos objetos <code>Producto</code> que hemos creado.</li> <li>Mostrar los datos de los dos objetos <code>Producto</code>, as\u00ed como sus importes de IVA y los precios finales de cada una de las instancias.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-16","title":"Actividad 16","text":"<p>Crear una clase llamada <code>Password</code> con las siguientes caracter\u00edsticas:</p> <ul> <li>Propiedades: <code>clave</code>.</li> <li> <p>Los m\u00e9todos que implementa ser\u00e1n:</p> </li> <li> <p>Un constructor sin par\u00e1metros que generar\u00e1 una clave aleatoria con longitud 8.</p> </li> <li>Un constructor que recibir\u00e1 por par\u00e1metro un <code>int</code> que le indicar\u00e1 la longitud de la clave a generar.</li> <li><code>generarClave()</code>: genera la clave del objeto con la longitud que tenga.</li> <li>M\u00e9todo get para clave.</li> <li>M\u00e9todo set para clave.</li> <li>Crear una clase principal <code>main</code> que compruebe todos los m\u00e9todos creados.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-17","title":"Actividad 17","text":"<p>Crea una clase llamada <code>Cuenta</code> que tendr\u00e1 los siguientes atributos: <code>titular</code> y <code>cantidad</code> (puede tener decimales).</p> <p>Al crear una instancia del objeto Cuenta, el titular ser\u00e1 obligatorio y la cantidad es opcional. Crea dos constructores que cumplan lo anterior, es decir debemos crear dos m\u00e9todos constructores con el mismo nombre que ser\u00e1 el nombre del objeto.</p> <p>Crea sus m\u00e9todos get, set y el m\u00e9todo <code>mostrarDatos</code> que muestre los datos de la cuenta. Tendr\u00e1 dos m\u00e9todos especiales:</p> <ul> <li><code>ingresar(double cantidad)</code>: se ingresa una cantidad a la cuenta, si la cantidad introducida es negativa, no se har\u00e1 nada.</li> <li><code>retirar(double cantidad)</code>: se retira una cantidad a la cuenta, si restando la cantidad actual a la que nos pasan es negativa, la cantidad de la cuenta pasa a ser 0 retirando el importe m\u00e1ximo en funci\u00f3n de la cantidad disponible en el objeto.</li> </ul> <p>Crear una clase principal <code>main</code> ejecutable:</p> <ul> <li>Crear una instancia del objeto Cuenta llamada <code>cuentaParticular1</code> con el nombre del titular.</li> <li>Crear una instancia del objeto Cuenta llamada <code>cuentaEmpresa1</code> con el nombre del titular y una cantidad inicial de dinero.</li> <li>Mostrar el titular de la instancia <code>cuentaParticular1</code>.</li> <li>Mostrar el saldo de la instancia <code>cuentaEmpresa1</code>.</li> <li>Ingresar 1000 \u20ac en la instancia <code>cuentaParticular1</code>.</li> <li>Retirar 500 \u20ac en la instancia <code>cuentaEmpresa1</code>.</li> <li>Mostrar los datos de las dos instancias del objeto <code>Cuenta</code>.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-18","title":"Actividad 18","text":"<p>Crea una clase llamada <code>Libro</code> que guarde la informaci\u00f3n de cada uno de los libros de una biblioteca. La clase debe guardar las siguientes propiedades:</p> <ul> <li><code>t\u00edtulo</code></li> <li><code>autor</code></li> <li><code>editorial</code></li> <li><code>n\u00famero de ejemplares totales</code></li> <li><code>n\u00famero de prestados</code></li> </ul> <p>La clase contendr\u00e1 los siguientes m\u00e9todos:</p> <ul> <li>Constructor por defecto.</li> <li>Constructor con par\u00e1metros.</li> <li>M\u00e9todos Setters/getters.</li> <li>M\u00e9todo <code>prestamo</code> que incremente el atributo correspondiente cada vez que se realice un pr\u00e9stamo del libro. No se podr\u00e1n prestar libros de los que no queden ejemplares disponibles para prestar. Devuelve <code>true</code> si se ha podido realizar la operaci\u00f3n y <code>false</code> en caso contrario.</li> <li>M\u00e9todo <code>devolucion</code> que decremente el atributo correspondiente cuando se produzca la devoluci\u00f3n de un libro. No se podr\u00e1n devolver libros que no se hayan prestado. Devuelve <code>true</code> si se ha podido realizar la operaci\u00f3n y <code>false</code> en caso contrario.</li> <li>M\u00e9todo <code>perdido</code> que decremente el atributo n\u00famero de ejemplares por perdida de ejemplar. No se podr\u00e1n devolver libros que no tengan ejemplares. Devuelve <code>true</code> si se ha podido realizar la operaci\u00f3n y <code>false</code> en caso contrario.</li> <li>M\u00e9todo <code>mostrarDatos</code> para mostrar los datos de los libros.</li> </ul> <p>Crear en esta clase el m\u00e9todo principal <code>main</code> ejecutable:</p> <ul> <li>Crear una instancia del objeto libro <code>libroInformatica1</code> con los datos de un libro.</li> <li>Consultar el t\u00edtulo de la instancia <code>libroInformatica1</code>.</li> <li>Cambiar la editorial de la instancia <code>libroInformatica1</code> por Anaya.</li> <li>Realiza el pr\u00e9stamo de la instancia <code>libroInformatica1</code>.</li> <li>Realiza otro pr\u00e9stamo de la instancia <code>libroInformatica1</code>.</li> <li>Muestra los prestamos de la instancia <code>libroInformatica1</code>.</li> <li>Realiza la devoluci\u00f3n de la instancia <code>libroInformatica1</code>.</li> <li>Muestra los prestamos de la instancia <code>libroInformatica1</code>.</li> <li>Gestiona la p\u00e9rdida de un ejemplar de la instancia <code>libroInformatica1</code>.</li> <li>Muestra los ejemplares de la instancia <code>libroInformatica1</code>.</li> <li>Muestra todos los datos de la instancia <code>libroInformatica1</code>.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-19","title":"Actividad 19","text":"<p>Crear una clase llamada <code>Hospital</code> con las siguientes propiedades y m\u00e9todos: </p> <ul> <li>Propiedades:</li> <li><code>codHospital</code></li> <li><code>nombreHospital</code></li> <li><code>direccion</code></li> <li><code>telefono</code></li> <li><code>poblacion</code></li> <li><code>codPostal</code></li> <li><code>habitacionesTotales</code></li> <li><code>habitacionesOcupadas</code></li> <li>M\u00e9todos:</li> <li>Hospital: Permite crear una instancia con los datos de un hospital.</li> <li>M\u00e9todos get.</li> <li>M\u00e9todos set.</li> <li>M\u00e9todo <code>ingreso</code> que incrementa las habitaciones ocupadas. No puede realizarse el ingreso si las habitaciones ocupadas son iguales a las habitaciones totales del hospital. Devuelve <code>true</code> si se ha podido realizar el ingreso.</li> <li>M\u00e9todo <code>alta</code> que decrementa las habitaciones ocupadas. No puede realizarse el alta las habitaciones ocupadas son 0. Devuelve <code>true</code> si se ha podido realizar el alta.</li> <li>M\u00e9todo que muestre todos los datos del hospital.</li> <li>Crear en esta clase un m\u00e9todo principal <code>main</code> ejecutable que:</li> <li>Cree una instancia de la clase <code>Hospital</code> llamada <code>hospitalRibera</code>.</li> <li>Cambie el n\u00famero de habitaciones de la instancia <code>hospitalRibera</code>.</li> <li>Muestre el n\u00famero de habitaciones de la instancia <code>hospitalRibera</code>.</li> <li>Realiza un ingreso de la instancia <code>hospitalRibera</code>.</li> <li>Muestra las habitaciones ocupadas de la instancia <code>hospitalRibera</code>.</li> <li>Realiza un alta de la instancia <code>hospitalRibera</code>.</li> <li>Muestra las habitaciones ocupadas de la instancia <code>hospitalRibera</code>.</li> <li>Muestre todos los datos de la instancia <code>hospitalRibera</code>.</li> </ul>"},{"location":"ud02/ud02ac/#actividad-20","title":"Actividad 20","text":"<p>Crear un clase llamada <code>Medico</code> con las siguientes propiedades y m\u00e9todos:</p> <ul> <li>Propiedades:</li> <li><code>codMedico</code></li> <li><code>nombre</code></li> <li><code>apellidos</code></li> <li><code>dni</code></li> <li><code>direccion</code></li> <li><code>telefono</code></li> <li><code>poblacion</code></li> <li><code>codPostal</code></li> <li><code>fechaNacimiento</code></li> <li><code>especialidad</code></li> <li><code>sueldo</code></li> <li>M\u00e9todos:</li> <li><code>Medico</code>: Permite crear una instancia con los datos de un m\u00e9dico.</li> <li>M\u00e9todos get. Recuperan datos de la instancia del objeto.</li> <li>M\u00e9todos set. Asignan datos a la instancia del objeto.</li> <li><code>retencionMedico</code>: Permite calcular la retenci\u00f3n aplicada al sueldo del m\u00e9dico. Se le pasa el dato del porcentaje de retenci\u00f3n.</li> <li><code>mostrarDatos</code>: Muestra los datos del m\u00e9dico.</li> <li>Crear una clase principal <code>main</code> ejecutable que:</li> <li>Crear dos instancias de la clase <code>Medico</code>llamados <code>medicoDigestivo</code> y <code>medicoTraumatologo</code>.</li> <li>Cambia el sueldo del <code>medicoTraumatologo</code>.</li> <li>Muestra el sueldo del <code>medicoTraumatologo</code>.</li> <li>Cambia el dni del <code>medicoDigestivo</code>.</li> <li>Muestra el dni del <code>medicoDigestivo</code>.</li> <li>Calcula la retenci\u00f3n de las dos instancias de la clase <code>Medico</code> que hemos creado.</li> <li>Mostrar los datos de las dos instancias de la clase <code>Medico</code> que hemos creado, as\u00ed como las retenciones y los sueldos finales de cada una.</li> </ul>"},{"location":"ud02/ud02ac/#ejercicios","title":"Ejercicios","text":"<p>Estos ejercicios utilizan la interfaz gr\u00e1fica a la que dedicaremos m\u00e1s tiempo hacia finales de curso. De momento con entender algunos conceptos muy b\u00e1sicos de c\u00f3mo dibujar elementos gr\u00e1ficos en una ventana podemos intentar resolverlos usando los conceptos de objetos, clases, herencia, m\u00e9todos, etc\u00e9tera que hemos visto en teor\u00eda.</p>"},{"location":"ud02/ud02ac/#ejercicio-01","title":"Ejercicio 01","text":"<p>El primero de estos ejercicios est\u00e1 resuelto y comentado para que te ayude a resolver el resto por tu cuenta o con la ayuda del docente. <code>LlenarConCirculo</code> : Crear una pizarra cuadrada y dibujar en ella un c\u00edrculo que la ocupe por completo. SOLUCI\u00d3N Java<pre><code>//importaciones necesarias para los ejercicios, no necesitas m\u00e1s.\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport java.awt.Color;\nimport java.awt.Graphics;\n\n/*\n  Necesitamos que nuestra clase LlenarConCirculo herede de JPanel para poder\n  pintar en su interior.\n*/\npublic class LlenarConCirculo extends JPanel {\n\n  @Override\n  public void paint(Graphics g) {\n    //Fijamos el color que tendr\u00e1 la figura\n    g.setColor(Color.RED);\n\n    /*\n      Dibujamos un ovalo relleno fijando las 4 esquinas que lo delimitan:\n      - x1, y1, x2, y2\n      En nuestro caso adem\u00e1s hacemos uso de la funci\u00f3n reflexiva\n      this.getWidth() y this.getHeight() para conocer la anchura y altura\n      (respectivamente) de nuestra ventana.\n    */        \n    g.fillOval(0, 0, this.getWidth(), this.getHeight());\n\n    /* \n      Otras funciones disponibles para dibujar son:\n      - fill3DRect(int x, int y, int width, int height, boolean raised)\n        Paints a 3-D highlighted rectangle filled with the current color.\n      - fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)\n        Fills a circular or elliptical arc covering the specified rectangle.\n      - fillOval(int x, int y, int width, int height)\n        Fills an oval bounded by the specified rectangle with the current color.\n      - fillPolygon(int[] xPoints, int[] yPoints, int nPoints)\n        Fills a closed polygon defined by arrays of x and y coordinates.\n      - fillPolygon(Polygon p)\n        Fills the polygon defined by the specified Polygon object with the graphics \n        context's current color.\n      - fillRect(int x, int y, int width, int height)\n        Fills the specified rectangle.\n      - fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)\n        Fills the specified rounded corner rectangle with the current color.                \n      - fill3DRect(int x, int y, int width, int height, boolean raised)\n        Paints a 3-D highlighted rectangle filled with the current color.\n      - fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)\n        Fills a circular or elliptical arc covering the specified rectangle.\n      - fillOval(int x, int y, int width, int height)\n        Fills an oval bounded by the specified rectangle with the current color.\n      - fillPolygon(int[] xPoints, int[] yPoints, int nPoints)\n        Fills a closed polygon defined by arrays of x and y coordinates.\n      - fillPolygon(Polygon p)\n        Fills the polygon defined by the specified Polygon object with the graphics \n        context's current color.\n      - fillRect(int x, int y, int width, int height)\n        Fills the specified rectangle.\n      - fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)\n        Fills the specified rounded corner rectangle with the current color.            - \n      */\n  }\n\n  public static void main(String[] args) {\n    //Creamos una nueva ventana\n    JFrame MainFrame = new JFrame();\n\n    //Fijamos su tama\u00f1o en 300px de ancho por 300px de alto\n    MainFrame.setSize(300, 300);\n\n    //Creamos el objeto que vamos a dibujar con el m\u00e9todo paint()\n    LlenarConCirculo circlePanel = new LlenarConCirculo();\n\n    //A\u00f1adimos el objeto recien creado a la ventana\n    MainFrame.add(circlePanel);\n\n    //Hacemos visible la ventana (con el dibujo)\n    MainFrame.setVisible(true);\n  }\n}\n</code></pre></p> <p>Este es el esquema b\u00e1sico que necesitas para resolver todos los ejercicios planteados:</p> Java<pre><code>//importaciones necesarias para los ejercicios, no necesitas m\u00e1s.\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport java.awt.Color;\nimport java.awt.Graphics;\n\n/*\n  Necesitamos que nuestra clase herede de JPanel para poder\n  pintar en su interior.\n*/\npublic class TuClaseEjercicio extends JPanel {\n\n  @Override\n  public void paint(Graphics g) {\n    // INSERTA TU C\u00d3DIGO AQU\u00cd!!! &lt;&lt;--\n    //Fijamos el color que tendr\u00e1 la figura\n    //Dibuja la/s figura/s que te pide el ejercicio\n  }\n\n  public static void main(String[] args) {\n    //Creamos una nueva ventana\n    JFrame MainFrame = new JFrame();\n\n    //Fijamos su tama\u00f1o en 300px de ancho por 300px de alto\n    MainFrame.setSize(300, 300);\n\n    //Creamos el objeto que vamos a dibujar con el m\u00e9todo paint()\n    LlenarConCirculo tuDibujo = new LlenarConCirculo();\n\n    //A\u00f1adimos el objeto recien creado a la ventana\n    MainFrame.add(tuDibujo);\n\n    //Hacemos visible la ventana (con el dibujo)\n    MainFrame.setVisible(true);\n  }\n}\n</code></pre>"},{"location":"ud02/ud02ac/#ejercicio-02","title":"Ejercicio 02","text":"<p><code>LlenarConRectangulo</code> : Crear una pizarra de tama\u00f1o aleatorio y dibujar en ella un rect\u00e1ngulo que la ocupe por completo. </p>"},{"location":"ud02/ud02ac/#ejercicio-03","title":"Ejercicio 03","text":"<p><code>MitadYMitad</code> : Crear una pizarra de tama\u00f1o aleatorio y dibujar un rect\u00e1ngulo ROJO que ocupe la mitad izquierda y uno VERDE que ocupe la mitad derecha.</p>"},{"location":"ud02/ud02ac/#ejercicio-04","title":"Ejercicio 04","text":"<p><code>Dos partes</code> : Crear una pizarra de tama\u00f1o aleatorio y dibujar un rect\u00e1ngulo ROJO que ocupe la parte superior (25% de la altura) y uno VERDE que ocupe la parte inferior (75% restante).</p>"},{"location":"ud02/ud02ac/#ejercicio-05","title":"Ejercicio 05","text":"<p><code>CentrarFiguras</code> : Crear una pizarra de tama\u00f1o aleatorio. Dibujar en el centro un cuadrado de lado 100 y  un circulo de radio 25.</p>"},{"location":"ud02/ud02ac/#ejercicio-06","title":"Ejercicio 06","text":"<p><code>RadioAleatorioCentrado</code> : Crear una pizarra de tama\u00f1o aleatorio. Dibujar en centro de la pizarra un c\u00edrculo de radio aleatorio (entre 50 y 200 pixels de radio).</p>"},{"location":"ud02/ud02ac/#ejercicio-071","title":"Ejercicio 071","text":"<p><code>RadioAleatorio</code> : Crear una pizarra de tama\u00f1o aleatorio. Dibujar en la esquina superior izquierda un c\u00edrculo de radio aleatorio (entre 50 y 200).</p>"},{"location":"ud02/ud02pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li> <p>Curso Java. Manipulaci\u00f3n de cadenas. Clase String I. V\u00eddeo 11</p> </li> <li> <p>Curso Java. Manipulaci\u00f3n de cadenas. Clase String II. V\u00eddeo 12</p> </li> <li>Curso Java. Entrada Salida datos I. V\u00eddeo 14</li> <li>Curso Java. Entrada Salida datos II. V\u00eddeo 15</li> <li>Curso Java. POO I. V\u00eddeo 27</li> <li>Curso Java. POO II. V\u00eddeo 28</li> <li>Curso Java. POO III. V\u00eddeo 29</li> <li>Curso Java POO VI. Construcci\u00f3n objetos. V\u00eddeo 32</li> <li>Curso Java POO VII. Construcci\u00f3n objetos II. V\u00eddeo 33</li> <li>Curso Java POO VIII. Construcci\u00f3n objetos III. V\u00eddeo 34</li> <li>Curso Java POO IX. Construcci\u00f3n objetos IV. V\u00eddeo 35</li> <li>Curso Java. M\u00e9todos static. V\u00eddeo 38</li> <li>Curso Java. Sobrecarga de constructores. V\u00eddeo 39</li> </ul>"},{"location":"ud02/ud02re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</p> </li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> </ul>"},{"location":"ud03/ud0301/","title":"3.1 Introducci\u00f3n","text":"<p>En unidades anteriores has podido aprender cuestiones b\u00e1sicas sobre el lenguaje JAVA: definici\u00f3n de variables, tipos de datos, asignaci\u00f3n de valores, uso de literales, diferentes operadores que se pueden aplicar, conversiones de tipos, inserci\u00f3n de comentarios, etc. Posteriormente, nos sumergimos de lleno en el mundo de los objetos. Primero hemos conocido su filosof\u00eda, para m\u00e1s tarde ir recorriendo los conceptos y t\u00e9cnicas m\u00e1s importantes relacionadas con ellos: Propiedades, m\u00e9todos, clases, declaraci\u00f3n y uso de objetos, librer\u00edas, etc.</p> <p>Vale, parece ser que tenemos los elementos suficientes para comenzar a generar programas escritos en JAVA, \u00bfSeguro?</p> <p>Como habr\u00e1s deducido, con lo que sabemos hasta ahora no es suficiente. Existen m\u00faltiples situaciones que nuestros programas deben representar y que requieren tomar ciertas decisiones, ofrecer diferentes alternativas o llevar a cabo determinadas operaciones repetitivamente para conseguir sus objetivos.</p> <p>Si has programado alguna vez o tienes ciertos conocimientos b\u00e1sicos sobre lenguajes de programaci\u00f3n, sabes que la gran mayor\u00eda de lenguajes poseen estructuras que permiten a los programadores controlar el flujo de la informaci\u00f3n de sus programas. Esto realmente es una ventaja para la persona que est\u00e1 aprendiendo un nuevo lenguaje, o tiene previsto aprender m\u00e1s de uno, ya que estas estructuras suelen ser comunes a todos (con algunos cambios de sintaxis o conjunto de reglas que definen las secuencias correctas de los elementos de un lenguaje de programaci\u00f3n.). Es decir, si conoc\u00edas sentencias de control de flujo en otros lenguajes, lo que vamos a ver a lo largo de esta unidad te va a sonar bastante.</p> <p>Para alguien que no ha programado nunca, un ejemplo sencillo le va a permitir entender qu\u00e9 es eso de las sentencias de control de flujo. Piensa en un fontanero (programador), principalmente trabaja con agua (datos) y se encarga de hacer que \u00e9sta fluya por donde \u00e9l quiere (programa) a trav\u00e9s de un conjunto de tuber\u00edas, codos, latiguillos, llaves de paso, etc. (sentencias de control de flujo).</p> <p>Pues esas estructuras de control de flujo son las que estudiaremos, conoceremos su estructura, funcionamiento, c\u00f3mo utilizarlas y d\u00f3nde. A trav\u00e9s de ellas, al construir nuestros programas podremos hacer que los datos (agua) fluyan por los caminos adecuados para representar la realidad del problema y obtener un resultado adecuado.</p> <p>Los tipos de estructuras de programaci\u00f3n que se emplean para el control del flujo de los datos son los siguientes:</p> <ul> <li>Secuencia: compuestas por 0, 1 o N sentencias que se ejecutan en el orden en que han sido escritas. Es la estructura m\u00e1s sencilla y sobre la que se construir\u00e1n el resto de estructuras. </li> <li>Selecci\u00f3n: es un tipo de sentencia especial de decisi\u00f3n y de un conjunto de secuencias de instrucciones asociadas a ella. Seg\u00fan la evaluaci\u00f3n de la sentencia de decisi\u00f3n se generar\u00e1 un resultado (que suele ser verdadero o falso) y en funci\u00f3n de \u00e9ste, se ejecutar\u00e1n una secuencia de instrucciones u otra. Las estructuras de selecci\u00f3n podr\u00e1n ser simples, compuestas y m\u00faltiples.</li> <li>Iteraci\u00f3n: es un tipo de sentencia especial de decisi\u00f3n y una secuencia de instrucciones que pueden ser repetidas seg\u00fan el resultado de la evaluaci\u00f3n de la sentencia de decisi\u00f3n. Es decir, la secuencia de instrucciones se ejecutar\u00e1 repetidamente si la sentencia de decisi\u00f3n arroja un valor correcto, en otro la estructura de repetici\u00f3n se detendr\u00e1.</li> </ul> <p>Adem\u00e1s de las sentencias t\u00edpicas de control de flujo, en esta unidad haremos una revisi\u00f3n de las sentencias de salto, que aunque no son demasiado recomendables, es necesario conocerlas. Como nuestros programas podr\u00e1n generar errores y situaciones especiales, echaremos un vistazo al manejo de excepciones en JAVA. Posteriormente, analizaremos la mejor manera de llevar a cabo las pruebas de nuestros programas y la depuraci\u00f3n de los mismos. Y finalmente, aprenderemos a valorar y utilizar las herramientas de documentaci\u00f3n de programas.</p>"},{"location":"ud03/ud0302/","title":"3.2 Sentencias y bloques","text":"<p>Este ep\u00edgrafe lo utilizaremos para reafirmar cuestiones que son obvias y que en el transcurso de anteriores unidades se han dado por sabidas. Aunque, a veces, es conveniente recordar. Lo haremos como un conjunto de FAQs:</p> <ul> <li> <p>\u00bfC\u00f3mo se escribe un programa sencillo? Si queremos que un programa sencillo realice instrucciones o sentencias para obtener un determinado resultado, es necesario colocar \u00e9stas una detr\u00e1s de la otra, exactamente en el orden en que deben ejecutarse.</p> </li> <li> <p>\u00bfPodr\u00edan colocarse todas las sentencias una detr\u00e1s de otra, separadas por puntos y comas en una misma l\u00ednea? Claro que s\u00ed, pero no es muy recomendable. Cada sentencia debe estar escrita en una l\u00ednea, de esta manera tu c\u00f3digo ser\u00e1 mucho m\u00e1s legible y la localizaci\u00f3n de errores en tus programas ser\u00e1 m\u00e1s sencilla y r\u00e1pida. De hecho, cuando se utilizan herramientas de programaci\u00f3n, los errores suelen asociarse a un n\u00famero o n\u00fameros de l\u00ednea.</p> </li> <li> <p>\u00bfPuede una misma sentencia ocupar varias l\u00edneas en el programa? S\u00ed. Existen sentencias que, por su tama\u00f1o, pueden generar varias l\u00edneas. Pero siempre finalizar\u00e1n con un punto y coma.</p> </li> <li> <p>\u00bfEn Java todas las sentencias se terminan con punto y coma? S\u00ed. Si detr\u00e1s de una sentencia ha de venir otra, pondremos un punto y coma. Escribiendo la siguiente sentencia en una nueva l\u00ednea. Pero en algunas ocasiones, sobre todo cuando utilizamos estructuras de control de flujo, detr\u00e1s de la cabecera de una estructura de este tipo no debe colocarse punto y coma. No te preocupes, lo entender\u00e1s cuando analicemos cada una de ellas.</p> </li> <li> <p>\u00bfQu\u00e9 es la sentencia nula en Java? La sentencia nula es una l\u00ednea que no contiene ninguna instrucci\u00f3n y en la que s\u00f3lo existe un punto y coma. Como su nombre indica, esta sentencia no hace nada.</p> </li> <li> <p>\u00bfQu\u00e9 es un bloque de sentencias? Es un conjunto de sentencias que se encierra entre llaves y que se ejecutar\u00eda como si fuera una \u00fanica orden. Sirve para agrupar sentencias y para clarificar el c\u00f3digo. Los bloques de sentencias son utilizados en Java en la pr\u00e1ctica totalidad de estructuras de control de flujo, clases, m\u00e9todos, etc. La siguiente tabla muestra dos formas de construir un bloque de sentencias.</p> </li> </ul> Bloque de sentencias 1 Bloque de sentencias 2 <code>{sentencia1; sentencia2; ...; sentenciaN;}</code> <code>{</code> <code>sentencia1;</code> <code>sentencia2;</code> <code>...;</code> <code>sentenciaN;</code>} <ul> <li>\u00bfEn un bloque de sentencias, \u00e9stas deben estar colocadas con un orden exacto? En ciertos casos s\u00ed, aunque si al final de su ejecuci\u00f3n se obtiene el mismo resultado, podr\u00edan ocupar diferentes posiciones en nuestro programa.</li> </ul> <p>DEBES CONOCER Observa los tres archivos que te ofrecemos a continuaci\u00f3n y compara su c\u00f3digo fuente. Ver\u00e1s que los tres obtienen el mismo resultado, pero la organizaci\u00f3n de las sentencias que los componen es diferente entre ellos.</p> Ejemplo 1 <p>En este primer archivo, las sentencias est\u00e1n colocadas en orden secuencial.</p> Java<pre><code>package organizacion_sentencias1;\n/**\n*\n* Organizaci\u00f3n de sentencias secuencial\n*/\npublic class Organizacion_sentencias_1 {\n  public static void main(String[] args) {\n    System.out.println (\"Organizaci\u00f3n secuencial de sentencias\");\n    int dia=12;\n    System.out.println (\"El d\u00eda es: \" + dia);\n    int mes=11;\n    System.out.println (\"El mes es: \" + mes);\n    int anio=2011;\n     System.out.println (\"El anio es: \" + anio);\n  }\n}\n</code></pre> Ejemplo 2 <p>En este segundo archivo, se declaran al principio las variables necesarias. En Java no es imprescindible hacerlo as\u00ed, pero s\u00ed que antes de utilizar cualquier variable \u00e9sta debe estar previamente declarada. Aunque la declaraci\u00f3n de dicha variable puede hacerse en cualquier lugar de nuestro programa.</p> Java<pre><code>package organizacion_sentencias2;\n/**\n* Organizaci\u00f3n de sentencias con declaraci\u00f3n previa de variables\n*/\npublic class Organizacion_sentencias_2 {\n  public static void main(String[] args) {\n    // Zona de declaraci\u00f3n de variables\n    int dia=10;\n    int mes=11;\n    int anio=2011;\n    System.out.println (\"Organizaci\u00f3n con declaraci\u00f3n previa de variables\");\n    System.out.println (\"El d\u00eda es: \" + dia);\n    System.out.println (\"El mes es: \" + mes);\n    System.out.println (\"El anio es: \" + anio);\n  }\n}\n</code></pre> Ejemplo 3 <p>En este tercer archivo, podr\u00e1s apreciar que se ha organizado el c\u00f3digo en las siguientes partes: declaraci\u00f3n de variables, petici\u00f3n de datos de entrada, procesamiento de dichos datos y obtenci\u00f3n de la salida. Este tipo de organizaci\u00f3n est\u00e1 m\u00e1s estandarizada y hace que nuestros programas ganen en legibilidad.</p> Java<pre><code>package organizacion_sentencias3;\n/**\n* Organizaci\u00f3n de sentencias en zonas diferenciadas\n* seg\u00fan las operaciones que se realicen en el c\u00f3digo\n*/\npublic class Organizacion_sentencias_3 {\n  public static void main(String[] args) {\n    // Zona de declaraci\u00f3n de variables\n    int dia;\n    int mes;\n    int anio;\n    String fecha;\n    //Zona de inicializaci\u00f3n o entrada de datos\n    dia=10;\n    mes=11;\n    anio=2011;\n    fecha=\"\";\n    //Zona de procesamiento\n    fecha=dia+\"/\"+mes+\"/\"+anio;\n    //Zona de salida\n    System.out.println (\"Organizaci\u00f3n con zonas diferenciadas en el c\u00f3digo\");\n    System.out.println (\"La fecha es: \" + fecha);\n  }\n}\n</code></pre> <p> </p> <p>Construyas de una forma o de otra tus programas, debes tener en cuenta siempre en Java las siguientes premisas: - Declara cada variable antes de utilizarla. - Inicializa con un valor cada variable la primera vez que la utilices. - No es recomendable usar variables no inicializadas en nuestros programas, pueden provocar errores o resultados imprevistos.</p>"},{"location":"ud03/ud0303/","title":"3.3 Sentencias de selecci\u00f3n","text":"<p>\u00bfC\u00f3mo conseguimos que nuestros programas puedan tomar decisiones? Para comenzar, lo haremos a trav\u00e9s de las estructuras de selecci\u00f3n. Estas estructuras constan de una sentencia especial de decisi\u00f3n y de un conjunto de secuencias de instrucciones.</p> <p>El funcionamiento es sencillo, la sentencia de decisi\u00f3n ser\u00e1 evaluada y \u00e9sta devolver\u00e1 un valor (verdadero o falso), en funci\u00f3n del valor devuelto se ejecutar\u00e1 una secuencia de instrucciones u otra.</p> <p>Por ejemplo, si el valor de una variable es mayor o igual que 5 se imprime por pantalla la palabra APROBADO y si es menor, se imprime SUSPENSO. Para este ejemplo, la comprobaci\u00f3n del valor de la variable ser\u00e1 la sentencia especial de decisi\u00f3n. La impresi\u00f3n de la palabra APROBADO ser\u00e1 una secuencia de instrucciones y la impresi\u00f3n de la palabra SUSPENSO ser\u00e1 otra. Cada secuencia estar\u00e1 asociada a cada uno de los resultados que puede arrojar la evaluaci\u00f3n de la sentencia especial de decisi\u00f3n.</p> <p>Las estructuras de selecci\u00f3n se dividen en:</p> <ul> <li> <p>Estructuras de selecci\u00f3n simples o estructura if.</p> </li> <li> <p>Estructuras de selecci\u00f3n compuesta o estructura if\u00adelse.</p> </li> <li> <p>Estructuras de selecci\u00f3n basadas en el operador condicional.</p> </li> <li> <p>Estructuras de selecci\u00f3n m\u00faltiples o estructura switch.</p> </li> </ul> <p>A continuaci\u00f3n, detallaremos las caracter\u00edsticas y funcionamiento de cada una de ellas. Es importante que a trav\u00e9s de los ejemplos que vamos a ver, puedas determinar en qu\u00e9 circunstancias utilizar cada una de estas estructuras. Aunque un mismo problema puede ser resuelto con diferentes estructuras e incluso, con diferentes combinaciones de \u00e9stas.</p>"},{"location":"ud03/ud0303/#estructura-if-if-else-if-else-if","title":"Estructura <code>if</code>, <code>if \u00adelse</code>, <code>if else if</code>","text":"<p>La estructura <code>if</code> es una estructura de selecci\u00f3n o estructura condicional, en la que se eval\u00faa una expresi\u00f3n l\u00f3gica o sentencia de decisi\u00f3n y en funci\u00f3n del resultado, se ejecuta una sentencia o un bloque de \u00e9stas. La estructura <code>if</code> puede presentarse de las siguientes formas:</p> <p>Estructura <code>if</code> simple:</p> Java<pre><code>if (expresi\u00f3n-l\u00f3gica)\n    sentencia1;\n</code></pre> Java<pre><code>if (expresi\u00f3n-l\u00f3gica)\n{\n    sentencia1;\n    sentencia2;\n    ...;\n    sentenciaN;\n}\n</code></pre> <p>Si la evaluaci\u00f3n de la expresi\u00f3n\u2010l\u00f3gica ofrece un resultado verdadero, se ejecuta la sentencia1 o bien el bloque de sentencias asociado. Si el resultado de dicha evaluaci\u00f3n es falso, no se ejecutar\u00e1 ninguna instrucci\u00f3n asociada a la estructura condicional.</p> Ejemplo Java<pre><code>int edad = 22;\nif (edad &gt; 18) {\n    System.out.printf(\"%d es mayor que 18\", edad);\n}\n</code></pre> <p>Estructura <code>if</code> de doble alternativa.</p> Java<pre><code>if (expresi\u00f3n-l\u00f3gica)\n    sentencia1;\nelse\n    sentencia2;\n</code></pre> Java<pre><code>if (expresi\u00f3n-l\u00f3gica){\n    sentencia1;\n    ...;\n    sentenciaN;\n} else {\n    sentencia1;\n    ...;\n    sentenciaN;\n}\n</code></pre> <p>Si la evaluaci\u00f3n de la expresi\u00f3n\u2010l\u00f3gica ofrece un resultado verdadero, se ejecutar\u00e1 la primera sentencia o el primer bloque de sentencias. Si, por el contrario, la evaluaci\u00f3n de la expresi\u00f3n\u2010l\u00f3gica ofrece un resultado falso, no se ejecutar\u00e1 la primera sentencia o el primer bloque y s\u00ed se ejecutar\u00e1 la segunda sentencia o el segundo bloque.</p> <p> </p> <p>Haciendo una interpretaci\u00f3n cercana al pseudoc\u00f3digo tendr\u00edamos que si se cumple la condici\u00f3n (expresi\u00f3n l\u00f3gica), se ejecutar\u00e1 un conjunto de instrucciones y si no se cumple, se ejecutar\u00e1 otro conjunto de instrucciones. </p> Ejemplo Text Only<pre><code>if (temperatura &gt; 25) {\n    System.out.println(\"Debemos abrigarnos!\");\n} else {\n    System.out.println(\"Voy a ponerme pantal\u00f3n corto.\");\n}\n</code></pre> <p>Hay que tener en cuenta que la cl\u00e1usula <code>else</code> de la sentencia <code>if</code> no es obligatoria. En algunos casos no necesitaremos utilizarla, pero s\u00ed se recomienda cuando es necesario llevar a cabo alguna acci\u00f3n en el caso de que la expresi\u00f3n l\u00f3gica no se cumpla.</p> <p>En aquellos casos en los que no existe cl\u00e1usula <code>else</code>, si la expresi\u00f3n l\u00f3gica es falsa, simplemente se continuar\u00e1n ejecutando las siguientes sentencias que aparezcan bajo la estructura condicional <code>if</code>.</p> <p>Los condicionales <code>if</code> e <code>if-else</code> pueden anidarse, de tal forma que dentro de un bloque de sentencias puede incluirse otro <code>if</code> o <code>if-else</code>. El nivel de anidamiento queda a criterio del programador, pero si \u00e9ste es demasiado profundo podr\u00eda provocar problemas de eficiencia y legibilidad en el c\u00f3digo. En otras ocasiones, un nivel de anidamiento excesivo puede denotar la necesidad de utilizaci\u00f3n de otras estructuras de selecci\u00f3n m\u00e1s adecuadas.</p> <p>Cuando se utiliza anidamiento de este tipo de estructuras, es necesario poner especial atenci\u00f3n en saber a qu\u00e9 <code>if</code> est\u00e1 asociada una cl\u00e1usula <code>else</code>. Normalmente, un <code>else</code> estar\u00e1 asociado con el <code>if</code> inmediatamente superior o m\u00e1s cercano que exista dentro del mismo bloque y que no se encuentre ya asociado a otro <code>else</code>.</p> <p>Estructura <code>if else if</code>.</p> <p>Esta estructura es una alternativa a la anidaci\u00f3n de sentencias <code>if else</code> funciona de modo que si se cumple una condici\u00f3n ejecuta unas sentencias y el caso contrario comprueba otra condici\u00f3n ejecutando unas sentencias si se cumple y as\u00ed sucesivamente. Veamos un ejemplo con <code>if</code> anidados:</p> Java<pre><code>if (condicion1) {\n    sentencias1;\n} else {\n    if (condicion2) {\n        sentencias2;\n    } else {\n        if (condicion3) {\n            sentencias3;\n        } else {\n            sentencias4;\n        }\n    }\n}\n</code></pre> <p>El mismo ejemplo usando <code>if else if</code> quedar\u00eda de este modo:</p> Java<pre><code>if (condicion1) {\n    sentencias1;\n} else if (condicion2) {\n    sentencias2;\n} else if (condicion3) {\n    sentencias3;\n} else {\n    sentencias4;\n}\n</code></pre> Ejemplo Java<pre><code>if (temperatura &gt; 25) {\n    // Si la temperatura es mayor que 25 ...\n    System.out.println(\"A la playa!!!\");\n} else if (temperatura &gt; 15) {\n    // si es mayor que 15 y no es mayor que 25 ..\n    System.out.println(\"A la monta\u00f1a!!!\");\n} else if (temperatura &lt; 5 &amp;&amp; nevando) {\n    // si es menor que 5 y esta nevando y no es mayor que 15 ni mayor que 25\n    System.out.println(\"A esquiar!!!\");\n} else {\n    // si la tempera  no es mayor que 25 ni que 15 ni menor que 5 si esta nevando\n    System.out.println(\"A descansar... zZz\");\n}\n</code></pre> Ejemplo completo <code>if</code> e <code>if-else</code> <p>Para completar la informaci\u00f3n que debes saber sobre las estructuras <code>if</code> e <code>if\u2010else</code>, observa el siguiente c\u00f3digo. En \u00e9l podr\u00e1s analizar el programa que realiza el c\u00e1lculo de la nota de un examen de tipo test. Adem\u00e1s de calcular el valor de la nota, se ofrece como salida la calificaci\u00f3n no num\u00e9rica de dicho examen. Para obtenerla, se combinar\u00e1n las diferentes estructuras condicionales aprendidas hasta ahora. Presta especial atenci\u00f3n a los comentarios incorporados en el c\u00f3digo fuente, as\u00ed como a la forma de combinar las estructuras condicionales y a las expresiones l\u00f3gicas utilizadas en ellas. Java<pre><code>public class Sentencias_Condicionales {\n    /*Vamos a realizar el c\u00e1lculo de la nota de un examen\n     * de tipo test. Para ello, tendremos en cuenta el n\u00famero\n     * total de pregunta, los aciertos y los errores. Dos errores\n     * anulan una respuesta correcta.\n     *\n     * Finalmente, se muestra por pantalla la nota obtenida, as\u00ed\n     * como su calificaci\u00f3n no num\u00e9rica.\n     *\n     * La obtenci\u00f3n de la calificaci\u00f3n no num\u00e9rica se ha realizado\n     * combinando varias estructuras condicionales, mostrando expresiones\n     * l\u00f3gicas compuestas, as\u00ed como anidamiento.\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int num_aciertos = 12;\n        int num_errores = 3;\n        int num_preguntas = 20;\n        float nota = 0;\n        String calificacion = \"\";\n        //Procesamiento de datos\n        nota = ((num_aciertos - (num_errores / 2)) * 10) / num_preguntas;\n\n        if (nota &lt; 5) {\n            calificacion = \"INSUFICIENTE\";\n        } else {\n            /* Cada expresi\u00f3n l\u00f3gica de estos if est\u00e1 compuesta por dos\n             * expresiones l\u00f3gicas combinadas a trav\u00e9s del operador Y o AND\n             * que se representa con el s\u00edmbolo &amp;&amp;. De tal manera, que para\n             * que la expresi\u00f3n l\u00f3gica se cumpla (sea verdadera) la variable\n             * nota debe satisfacer ambas condiciones simult\u00e1neamente\n             */\n            if (nota &gt;= 5 &amp;&amp; nota &lt; 6) {\n                calificacion = \"SUFICIENTE\";\n            }\n            if (nota &gt;= 6 &amp;&amp; nota &lt; 7) {\n                calificacion = \"BIEN\";\n            }\n            if (nota &gt;= 7 &amp;&amp; nota &lt; 9) {\n                calificacion = \"NOTABLE\";\n            }\n            if (nota &gt;= 9 &amp;&amp; nota &lt;= 10) {\n                calificacion = \"SOBRESALIENTE\";\n            }\n        }\n        //Salida de informaci\u00f3n\n        System.out.println(\"La nota obtenida es: \" + nota);\n        System.out.println(\"y la calificaci\u00f3n obtenida es: \" + calificacion);\n    }\n}\n</code></pre></p>"},{"location":"ud03/ud0303/#estructura-switch","title":"Estructura <code>switch</code>","text":"<p>\u00bfQu\u00e9 podemos hacer cuando nuestro programa debe elegir entre m\u00e1s de dos alternativas? Una posible soluci\u00f3n podr\u00eda ser emplear estructuras if anidadas, aunque no siempre esta soluci\u00f3n es la m\u00e1s eficiente. Cuando estamos ante estas situaciones podemos utilizar la estructura de selecci\u00f3n m\u00faltiple <code>switch</code>. En la siguiente tabla se muestra tanto la sintaxis, como el funcionamiento de esta estructura.</p> <p>Sintaxis:</p> Java<pre><code>switch (expresion) {\n    case valor1:\n        sentencia1_1;\n        sentencia1_2;\n        ....\n        break;\n    case valor2:\n    ....\n        case valorN:\n        sentenciaN_1;\n        sentenciaN_2;\n        ....\n        break;\n    default:\n        sentencias-default;\n}\n</code></pre> <p>Condiciones:</p> <ul> <li>Donde expresi\u00f3n debe ser del tipo <code>char</code>, <code>byte</code>, <code>short</code> o <code>int</code>, y las constantes de cada <code>case</code> deben ser de este tipo o de un tipo compatible.</li> <li>La <code>expresion</code> debe ir entre par\u00e9ntesis.</li> <li>Cada <code>case</code> llevar\u00e1 asociado un <code>valor</code> y se finalizar\u00e1 con dos puntos (<code>:</code>).</li> <li>El bloque de sentencias asociado a la cl\u00e1usula <code>default</code> puede finalizar con una sentencia de ruptura <code>break</code> o no.</li> </ul> <p>Funcionamiento:</p> <ul> <li>Las diferentes alternativas de esta estructura estar\u00e1n precedidas de la cl\u00e1usula case que se ejecutar\u00e1 cuando el valor asociado al case coincida con el valor obtenido al evaluar la expresi\u00f3n del switch.</li> <li>En las cl\u00e1usulas case, no pueden indicarse expresiones condicionales, rangos de valores o listas de valores (otros lenguajes de programaci\u00f3n s\u00ed lo permiten). Habr\u00e1 que asociar una cl\u00e1usula case a cada uno de los valores que deban ser tenidos en cuenta.</li> <li>La cl\u00e1usula default ser\u00e1 utilizada para indicar un caso por defecto, las sentencias asociadas a la cl\u00e1usula default se ejecutar\u00e1n si ninguno de los valores indicados en las cl\u00e1usulas case coincide con el resultado de la evaluaci\u00f3n de la expresi\u00f3n de la estructura switch.</li> <li>La cl\u00e1usula default puede no existir, y por tanto, si ning\u00fan case ha sido activado finalizar\u00eda el switch.</li> <li>Cada cl\u00e1usula case puede llevar asociadas una o varias sentencias, sin necesidad de delimitar dichos bloques por medio de llaves.</li> <li>En el momento en el que el resultado de la evaluaci\u00f3n de la expresi\u00f3n coincide con alguno de los valores asociados a las cl\u00e1usulas case, se ejecutar\u00e1n todas las instrucciones asociadas hasta la aparici\u00f3n de una sentencia break de ruptura (la sentencia break se analizar\u00e1 en ep\u00edgrafes posteriores).</li> </ul> Ejemplo Java<pre><code>int numeroMes = 4;\nString estacion = \"\", mes = \"\";\n\nswitch (numeroMes) {\n    case 12:\n        mes = \"Diciembre\";\n    case 1:\n        mes = \"Enero\";\n    case 2:\n        mes = \"Febrero\";\n        estacion = \"Invierno\";\n        break;\n    case 3:\n        mes = \"Marzo\";\n    case 4:\n        mes = \"Abril\";\n    case 5:\n        mes = \"Mayo\";\n        estacion = \"Primavera\";\n        break;\n    case 6:\n        mes = \"Junio\";\n    case 7:\n        mes = \"Julio\";\n    case 8:\n        mes = \"Agosto\";\n        estacion = \"Verano\";\n        break;\n    case 9:\n        mes = \"Septiembre\";\n    case 10:\n        mes = \"Octubre\";\n    case 11:\n        mes = \"Noviembre\";\n        estacion = \"Oto\u00f1o\";\n    break;\n}\n\nSystem.out.printf(\"El mes de %s se encuentra en la estaci\u00f3n %s.\", mes, estacion);\n</code></pre> Ejemplo completo <code>switch</code> <p>Comprueba el siguiente fragmento de c\u00f3digo en el que se resuelve el c\u00e1lculo de un examen de tipo test, utilizando la estructura <code>switch</code>. Java<pre><code>public class P3_2_condicional_switch {\n\n    /*\n     * Vamos a realizar el c\u00e1lculo de la nota de un examen de tipo test. Para\n     * ello, tendremos en cuenta el n\u00famero total de preguntas, los aciertos y\n     * los errores. Dos errores anulan una respuesta correcta.\n     *\n     * La nota que vamos a obtener ser\u00e1 un n\u00famero entero.\n     *\n     * Finalmente, se muestra por pantalla la nota obtenida, as\u00ed como su\n     * calificaci\u00f3n no num\u00e9rica.\n     *\n     * La obtenci\u00f3n de la calificaci\u00f3n no num\u00e9rica se ha realizado utilizando la\n     * estructura condicional m\u00faltiple o switch.\n     *\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int num_aciertos = 17;\n        int num_errores = 3;\n        int num_preguntas = 20;\n        int nota = 0;\n        String calificacion = \"\";\n        //Procesamiento de datos\n        nota = ((num_aciertos - (num_errores / 2)) * 10) / num_preguntas;\n        switch (nota) {\n            case 5:\n                calificacion = \"SUFICIENTE\";\n                break;\n            case 6:\n                calificacion = \"BIEN\";\n                break;\n            case 7:\n                calificacion = \"NOTABLE\";\n                break;\n            case 8:\n                calificacion = \"NOTABLE\";\n                break;\n            case 9:\n                calificacion = \"SOBRESALIENTE\";\n                break;\n            case 10:\n                calificacion = \"SOBRESALIENTE\";\n                break;\n            default:\n                calificacion = \"INSUFICIENTE\";\n        }\n        //Salida de informaci\u00f3n\n        System.out.println(\"La nota obtenida es: \" + nota);\n        System.out.println(\"y la calificaci\u00f3n obtenida es: \" + calificacion);\n\n        //Expresiones switch mejoradas JAVA 12\n        int entero = 5;\n\n        String numericString = switch (entero) {\n            case 0 -&gt; \"cero\";\n            case 1, 3, 5, 7, 9 -&gt; \"impar\";\n            case 2, 4, 6, 8, 10 -&gt; \"par\";\n            default -&gt; \"error\";\n        };\n        System.out.println(numericString); //impar\n\n        //Expresiones switch mejoradas JAVA 13\n\n        int entero2 = 4;\n\n        String numericString2 = switch (entero2) {\n            case 0 -&gt; {\n                String value = calculaCero();\n                yield value;\n            }\n            case 1, 3, 5, 7, 9 -&gt; {\n                String value = calculaImpar();\n                yield value;\n            }\n\n            case 2, 4, 6, 8, 10 -&gt; {\n                String value = calculaPar();\n                yield value;\n            }\n\n            default -&gt; {\n                String value = calculaDefecto();\n                yield value;\n            }\n        };\n        System.out.println(numericString); //calculaPar()\n    }\n    static String calculaCero() {return \"\";};\n    static String calculaImpar() {return \"\";};\n    static String calculaPar() {return \"\";};\n    static String calculaDefecto() {return \"\";};\n}\n</code></pre></p>"},{"location":"ud03/ud0303/#expresiones-switch-mejoradas","title":"Expresiones switch mejoradas","text":"<p>En las novedades de Java 12 se a\u00f1adi\u00f3 la posibilidad de los switch fueran expresiones que retornan un valor en vez de sentencias y se evita el uso de la palabra reservada break.</p> Java<pre><code>int entero = 5;\n\nString numericString = switch (entero) {\n    case 0 -&gt; \"cero\";\n    case 1, 3, 5, 7, 9 -&gt; \"impar\";\n    case 2, 4, 6, 8, 10 -&gt; \"par\";\n    default -&gt; \"error\";\n};\nSystem.out.println(numericString); //impar\n</code></pre> <p>En Java 13 en vez de \u00fanicamente el valor a retornar se permite crear bloques de sentencias para cada rama case y retornar el valor con la palabra reservada <code>yield</code>. En los bloques de sentencias puede haber alg\u00fan c\u00e1lculo m\u00e1s complejo que directamente retornar el valor deseado.</p> Java<pre><code>int entero2 = 4;\n\nString numericString2 = switch (entero2) {\n    case 0 -&gt; {\n        String value = calculaCero();\n        yield value;\n    }\n    case 1, 3, 5, 7, 9 -&gt; {\n        String value = calculaImpar();\n        yield value;\n    }\n\n    case 2, 4, 6, 8, 10 -&gt; {\n        String value = calculaPar();\n        yield value;\n    }\n\n    default -&gt; {\n        String value = calculaDefecto();\n        yield value;\n    }\n};\nSystem.out.println(numericString); //calculaPar()\n</code></pre> <p>En resumen, se ha de comparar el valor de una expresi\u00f3n con un conjunto de constantes, si el valor de la expresi\u00f3n coincide con alg\u00fan valor de dichas constantes, se ejecutar\u00e1n los bloques de instrucciones asociados a cada una de ellas. Si no existiese coincidencia, se ejecutar\u00edan una serie de instrucciones por defecto.</p>"},{"location":"ud03/ud0304/","title":"3.4 Estructuras de repetici\u00f3n","text":"<p>Nuestros programas ya son capaces de controlar su ejecuci\u00f3n teniendo en cuenta determinadas condiciones, pero a\u00fan hemos de aprender un conjunto de estructuras que nos permita repetir una secuencia de instrucciones determinada. La funci\u00f3n de estas estructuras es repetir la ejecuci\u00f3n de una serie de instrucciones teniendo en cuenta una condici\u00f3n. A este tipo de estructuras se las denomina estructuras de repetici\u00f3n, estructuras repetitivas, bucles o estructuras iterativas. En Java existen cuatro clases de bucles:</p> <ul> <li>Bucle <code>for</code> (repite para).</li> <li>Bucle <code>for/in</code> (repite para cada).</li> <li>Bucle <code>while</code> (repite mientras).</li> <li>Bucle <code>do while</code> (repite hasta).</li> </ul> <p>Los bucles <code>for</code> y <code>for/in</code> se consideran bucles controlados por contador. Por el contrario, los bucles <code>while</code> y <code>do...while</code> se consideran bucles controlados por sucesos.</p> <p>La utilizaci\u00f3n de unos bucles u otros para solucionar un problema depender\u00e1 en gran medida de las siguientes preguntas:</p> <ul> <li>\u00bfSabemos a priori cu\u00e1ntas veces necesitamos repetir un conjunto de instrucciones?</li> <li>\u00bfSabemos si hemos de repetir un conjunto de instrucciones si una condici\u00f3n satisface un conjunto de valores?</li> <li>\u00bfSabemos hasta cu\u00e1ndo debemos estar repitiendo un conjunto de instrucciones?</li> <li>\u00bfSabemos si hemos de estar repitiendo un conjunto de instrucciones mientras se cumpla una condici\u00f3n?</li> </ul> <p>Estas y otras preguntas tendr\u00e1n su respuesta en cuanto analicemos cada una de estructuras repetitivas en detalle.</p> <p> </p> <p>Estudia cada tipo de estructura repetitiva, conoce su funcionamiento y podr\u00e1s llegar a la conclusi\u00f3n de que algunos de estos bucles son equivalentes entre s\u00ed. Un mismo problema, podr\u00e1 ser resuelto empleando diferentes tipos de bucles y obtener los mismos resultados. </p>"},{"location":"ud03/ud0304/#estructura-for","title":"Estructura <code>for</code>","text":"<p>Hemos indicado anteriormente que el bucle <code>for</code> es un bucle controlado por contador. Este tipo de bucle tiene las siguientes caracter\u00edsticas:</p> <ul> <li>Se ejecuta un n\u00famero determinado de veces.</li> <li>Utiliza una variable contadora que controla las iteraciones del bucle.</li> </ul> <p>En general, existen tres operaciones que se llevan a cabo en este tipo de bucles:</p> <ul> <li>Se inicializa la variable contadora.</li> <li>Se eval\u00faa el valor de la variable contador, por medio de una comparaci\u00f3n de su valor con el n\u00famero de iteraciones especificado.</li> <li>Se modifica o actualiza el valor del contador a trav\u00e9s de incrementos o decrementos de \u00e9ste, en cada una de las iteraciones.</li> </ul> <p> </p> <p>La inicializaci\u00f3n de la variable contadora debe realizase correctamente para garantizar que el bucle lleve a cabo, al menos, la primera repetici\u00f3n de su c\u00f3digo interno. La condici\u00f3n de terminaci\u00f3n del bucle debe variar en el interior del mismo, de no ser as\u00ed, podemos caer en la creaci\u00f3n de un bucle infinito. Cuesti\u00f3n que se debe evitar por todos los medios. Es necesario estudiar el n\u00famero de veces que se repite el bucle, pues debe ajustarse al n\u00famero de veces estipulado.</p> <p>Sintaxis estructura <code>for</code> con una \u00fanica sentencia:</p> Java<pre><code>for (inicializaci\u00f3n; condici\u00f3n; iteraci\u00f3n)\n    sentencia;\n</code></pre> <p>Sintaxis estructura <code>for</code> con un bloque de sentencias:</p> Java<pre><code>for (inicializaci\u00f3n; condici\u00f3n; iteraci\u00f3n) {\n    sentencia1;\n    sentencia2;\n    ...\n    sentenciaN;\n}\n</code></pre> <p>Donde...:</p> <ul> <li><code>inicializaci\u00f3n</code> es una expresi\u00f3n en la que se inicializa una variable de control, que ser\u00e1 la encargada de controlar el final del bucle.</li> <li><code>condici\u00f3n</code> es una expresi\u00f3n que evaluar\u00e1 la variable de control. Mientras la condici\u00f3n sea falsa, el cuerpo del bucle estar\u00e1 repiti\u00e9ndose. Cuando la condici\u00f3n se cumpla, terminar\u00e1 la ejecuci\u00f3n del bucle.</li> <li><code>iteraci\u00f3n</code> indica la manera en la que la variable de control va cambiando en cada iteraci\u00f3n del bucle. Podr\u00e1 ser mediante incremento o decremento, y no solo de uno en uno.</li> </ul> <p>Ejemplo</p> Java<pre><code>for(int i=1;i&lt;=1000;i++)\n    System.out.printf(\"\\n%d)\\t No comer\u00e9, beber\u00e9 ni escribir\u00e9 mensajes por m\u00f3vil en clase.\", i);\n</code></pre> Ejemplo repetici\u00f3n <code>for</code> para realizar la tabla de multiplicar <p>Observa el siguiente archivo Java y podr\u00e1s analizar un ejemplo de utilizaci\u00f3n del bucle for para la impresi\u00f3n por pantalla de la tabla de multiplicar del siete. Lee atentamente los comentarios incluidos en el c\u00f3digo, pues aclaran algunas cuestiones interesantes sobre este bucle. Java<pre><code>public class Repetitiva_For {\n    /* En este ejemplo se utiliza la estructura repetitiva for\n     * para representar en pantalla la tabla de multiplicar del siete\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int numero = 7;\n        int contador;\n        int resultado = 0;\n        //Salida de informaci\u00f3n\n        System.out.println(\"Tabla de multiplicar del \" + numero);\n        System.out.println(\".............................. \");\n        //Utilizamos ahora el bucle for\n        for (contador = 1; contador &lt;= 10; contador++) {\n            /* La cabecera del bucle incorpora la inicializaci\u00f3n de la variable\n             * de control, la condici\u00f3n de multiplicaci\u00f3n hasta el 10 y el\n             * incremento de dicha variable de uno en uno en cada iteraci\u00f3n del\n             * bucle.\n             * En este caso contador++ incrementar\u00e1 en una unidad el valor de\n             * dicha variable.\n             */\n            resultado = contador * numero;\n            System.out.println(numero + \" x \" + contador + \" = \" + resultado);\n            /* A trav\u00e9s del operador + aplicado a cadenas de caracteres,\n             * concatenamos los valores de las variables con las cadenas de\n             * caracteres que necesitamos para representar correctamente la\n             * salida de cada multiplicaci\u00f3n.\n             */\n        }\n    }\n}\n</code></pre></p>"},{"location":"ud03/ud0304/#estructura-forin","title":"Estructura <code>for</code>/<code>in</code>","text":"<p>Junto a la estructura <code>for</code>, <code>for</code>/<code>in</code> tambi\u00e9n se considera un bucle controlado por contador. Este bucle es una mejora incorporada en la versi\u00f3n 5.0. de Java. </p> <p>Este tipo de bucles permite realizar recorridos sobre arrays y colecciones de objetos. Los arrays son colecciones de variables que tienen el mismo tipo y se referencian por un nombre com\u00fan. As\u00ed mismo, las colecciones de objetos son objetos que se dice son iterables, o que se puede iterar sobre ellos. Este bucle es nombrado tambi\u00e9n como bucle <code>for</code> mejorado, o bucle <code>foreach</code>. En otros lenguajes de programaci\u00f3n existen bucles muy parecidos a este.</p> <p>La sintaxis es la siguiente:</p> Java<pre><code>for (declaraci\u00f3n: expresi\u00f3n) {\n    sentencia1;\n    ...\n    sentenciaN;\n}\n</code></pre> <p>Donde...:</p> <ul> <li><code>expresion</code> es un array o una colecci\u00f3n de objetos.</li> <li><code>declaraci\u00f3n</code> es la declaraci\u00f3n de una variable cuyo tipo sea compatible con expresi\u00f3n. Normalmente, ser\u00e1 el tipo y el nombre de la variable a declarar.</li> </ul> <p>Ejemplo</p> Java<pre><code>for (int i : Arrays.asList(0, 1, 2, 3, 4)) {\n    System.out.println(i);\n}\n</code></pre> <p>El funcionamiento consiste en que para cada elemento de la expresi\u00f3n, guarda el elemento en la variable declarada y haz las instrucciones contenidas en el bucle. Despu\u00e9s, en cada una de las iteraciones del bucle tendremos en la variable declarada el elemento actual de la expresi\u00f3n. Por tanto, para el caso de los arrays y de las colecciones de objetos, se recorrer\u00e1 desde el primer elemento que los forma hasta el \u00faltimo.</p> <p>Observa el contenido del c\u00f3digo representado en la siguiente imagen, puedes apreciar c\u00f3mo se construye un bucle de este tipo y su utilizaci\u00f3n sobre un array.</p> <p>Los bucles <code>for</code>/<code>in</code> permitir\u00e1n al programador despreocuparse del n\u00famero de veces que se ha de iterar, pero no sabremos en qu\u00e9 iteraci\u00f3n nos encontramos salvo que se a\u00f1ada artificialmente alguna variable contadora que nos pueda ofrecer esta informaci\u00f3n.</p> <p> </p> <p>Esta estructura tomar\u00e1 sentido cuando avancemos en el curso y veamos los Arrays y las colecciones de Objetos.</p>"},{"location":"ud03/ud0304/#estructura-while","title":"Estructura <code>while</code>","text":"<p>El bucle <code>while</code> es la primera de las estructuras de repetici\u00f3n controladas por sucesos que vamos a estudiar. La utilizaci\u00f3n de este bucle responde al planteamiento de la siguiente pregunta: \u00bfQu\u00e9 podemos hacer si lo \u00fanico que sabemos es que se han de repetir un conjunto de instrucciones mientras se cumpla una determinada condici\u00f3n?.</p> <p>La caracter\u00edstica fundamental de este tipo de estructura repetitiva estriba en ser \u00fatil en aquellos casos en los que las instrucciones que forman el cuerpo del bucle podr\u00eda ser necesario ejecutarlas o no. Es decir, en el bucle <code>while</code> siempre se evaluar\u00e1 la condici\u00f3n que lo controla, y si dicha condici\u00f3n es cierta, el cuerpo del bucle se ejecutar\u00e1 una vez, y se seguir\u00e1 ejecutando mientras la condici\u00f3n sea cierta. Pero si en la evaluaci\u00f3n inicial de la condici\u00f3n \u00e9sta no es verdadera, el cuerpo del bucle no se ejecutar\u00e1.</p> <p>Es imprescindible que en el interior del bucle <code>while</code> se realice alguna acci\u00f3n que modifique la condici\u00f3n que controla la ejecuci\u00f3n del mismo, en caso contrario estar\u00edamos ante un bucle infinito.</p> <p>Sintaxis estructura <code>while</code> con una \u00fanica sentencia:</p> Java<pre><code>while (condici\u00f3n)\n    sentencia;\n</code></pre> <p>Sintaxis estructura <code>while</code> con un bloque de sentencias:</p> Java<pre><code>while (condici\u00f3n) {\n    sentencia1;\n    ...\n    sentenciaN;\n}\n</code></pre> <p>Funcionamiento: Mientras la condici\u00f3n sea cierta, el bucle se repetir\u00e1, ejecutando la/s instrucci\u00f3n/es de su interior.</p> <p>En el momento en el que la condici\u00f3n no se cumpla, el control del flujo del programa pasar\u00e1 a la siguiente instrucci\u00f3n que exista justo detr\u00e1s del bucle <code>while</code>.</p> <p>La condici\u00f3n se evaluar\u00e1 siempre al principio, y podr\u00e1 darse el caso de que las instrucciones contenidas en \u00e9l no lleguen a ejecutarse nunca si no se satisface la condici\u00f3n de partida.</p> <p>Ejemplo</p> Java<pre><code>Scanner sc = new Scanner(System.in);\nint numero = sc.nextInt();\n\nwhile(numero &lt;= 500) {\n    System.out.println(\"Ingresa otro n\u00famero:\");\n    numero = sc.nextInt();\n}\n</code></pre> Ejemplo repetici\u00f3n <code>while</code> para realizar la tabla de multiplicar Java<pre><code>public class Repetitiva_While {\n\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int numero = 7;\n        int contador;\n        int resultado = 0;\n        //Salida de informaci\u00f3n\n        System.out.println(\"Tabla de multiplicar del \" + numero);\n        System.out.println(\".............................. \");\n        //Utilizamos ahora el bucle while\n        contador = 1; //inicializamos la variable contadora\n        while (contador &lt;= 10) //Establecemos la condici\u00f3n del bucle\n        {\n            resultado = contador * numero;\n            System.out.println(numero + \" x \" + contador + \" = \" + resultado);\n            //Modificamos el valor de la variable contadora, para hacer que el\n            //bucle pueda seguir iterando hasta llegar a finalizar\n            contador++;\n        }\n    }\n}\n</code></pre>"},{"location":"ud03/ud0304/#estructura-do-while","title":"Estructura <code>do\u00ad while</code>","text":"<p>La segunda de las estructuras repetitivas controladas por sucesos es <code>do\u00ad while</code>. En este caso, la pregunta que nos planteamos es la siguiente: \u00bfQu\u00e9 podemos hacer si lo \u00fanico que sabemos es que se han de ejecutar, al menos una vez, un conjunto de instrucciones y seguir repiti\u00e9ndose hasta que se cumpla una determinada condici\u00f3n?.</p> <p>La caracter\u00edstica fundamental de este tipo de estructura repetitiva estriba en ser \u00fatil en aquellos casos en los que las instrucciones que forman el cuerpo del bucle necesitan ser ejecutadas, al menos, una vez y repetir su ejecuci\u00f3n hasta que la condici\u00f3n sea verdadera. Por tanto, en esta estructura repetitiva siempre se ejecuta el cuerpo del bucle una primera vez.</p> <p> </p> <p>Es imprescindible que en el interior del bucle se realice alguna acci\u00f3n que modifique la condici\u00f3n que controla la ejecuci\u00f3n del mismo, en caso contrario estar\u00edamos ante un bucle infinito.</p> <p>Sintaxis estructura <code>while</code> con una \u00fanica sentencia:</p> Java<pre><code>do\n    sentencia;\nwhile (condici\u00f3n);\n</code></pre> <p>Sintaxis estructura <code>while</code> con un bloque de sentencias:</p> Java<pre><code>do {\n    sentencia1;\n    ...\n    sentenciaN;\n} while (condici\u00f3n);\n</code></pre> <p>Funcionamiento:</p> <p>El cuerpo del bucle se ejecuta la primera vez, a continuaci\u00f3n se evaluar\u00e1 la condici\u00f3n y, si \u00e9sta es falsa, el cuerpo el bucle volver\u00e1 a repetirse. El bucle finalizar\u00e1 cuando la evaluaci\u00f3n de la condici\u00f3n sea verdadera. </p> <p>En ese momento el control del flujo del programa pasar\u00e1 a la siguiente instrucci\u00f3n que exista justo detr\u00e1s del bucle do\u2010while. La condici\u00f3n se evaluar\u00e1 siempre despu\u00e9s de una primera ejecuci\u00f3n del cuerpo del bucle, por lo que no se dar\u00e1 el caso de que las instrucciones contenidas en \u00e9l no lleguen a ejecutarse nunca.</p> <p>Ejemplo</p> Java<pre><code>Scanner sc = new Scanner(System.in);\nint numero;\n\ndo {\n    System.out.println(\"Ingresa un numero: \");\n    numero = sc.nextInt();\n}\nwhile(numero &lt;= 500);\n</code></pre> Ejemplo repetici\u00f3n <code>do-while</code> para realizar la tabla de multiplicar Java<pre><code>public class Repetitiva_DoWhile {\n\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int numero = 7;\n        int contador;\n        int resultado = 0;\n\n        //Salida de informaci\u00f3n\n        System.out.println(\"Tabla de multiplicar del \" + numero);\n        System.out.println(\".............................. \");\n        //Utilizamos ahora el bucle do-while\n        contador = 1; //inicializamos la variable contadora\n        do {\n            resultado = contador * numero;\n            System.out.println(numero + \" x \" + contador + \" = \" + resultado);\n            //Modificamos el valor de la variable contadora, para hacer que el\n            //bucle pueda seguir iterando hasta llegar a finalizar\n            contador++;\n        } while (contador &lt;= 10); //Establecemos la condici\u00f3n del bucle\n    }\n}\n</code></pre>"},{"location":"ud03/ud0304/#bucle-infinito","title":"Bucle infinito","text":"<p>Uno de los errores m\u00e1s comunes al implementar cualquier tipo de bucle es que nunca pueda salir, es decir, el bucle se ejecuta durante un n\u00famero infinito de veces. Esto sucede cuando la condici\u00f3n falla por alguna raz\u00f3n.</p> <p>Ejemplo 1</p> Java<pre><code>// bucle infinito porque la condici\u00f3n no es apta\n// la condici\u00f3n; deber\u00eda haber sido i&gt;0.\nfor (int i = 5; i != 0; i -= 2) {\n        System.out.println(i);\n}\n</code></pre> <p>Ejemplo 2</p> Java<pre><code>int x = 5; \n// bucle infinito porque la actualizaci\u00f3n\n// no se proporciona\nwhile (x == 5) {\n    System.out.println(\"En el bucle\");\n}\n</code></pre> <p>Otro inconveniente es que puede estar agregando algo en su objeto de colecci\u00f3n a trav\u00e9s de un bucle y puede quedarse sin memoria. Si intentas ejecutar el siguiente programa, despu\u00e9s de un tiempo, se producir\u00e1 una excepci\u00f3n de falta de memoria. </p> <p>Ejemplo 3</p> Java<pre><code>/* Se hace uso de la colecci\u00f3n ArrayList, pero de momento solo necesitamos saber que se comporta como un casillero al que vamos asignando elementos (que evidentemente ocupan memoria).*/\n// Programa Java para la excepci\u00f3n de falta de memoria.\nimport java.util.ArrayList;\npublic class HeapSpace {\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; ar = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; Integer.MAX_VALUE; i++) {\n            ar.add(i);\n        }\n    }\n}\n</code></pre> <p>Salida:</p> Bash<pre><code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.ArrayList.grow(Unknown Source)\nat java.util.ArrayList.ensureCapacityInternal(Unknown Source)\nat java.util.ArrayList.add(Unknown Source)\nat article.Integer1.main(Integer1.java:9)\n</code></pre>"},{"location":"ud03/ud0305/","title":"3.5 Estructuras de salto","text":"<p>\u00bfSaltar o no saltar? he ah\u00ed la cuesti\u00f3n. En la gran mayor\u00eda de libros de programaci\u00f3n y publicaciones de Internet, siempre se nos recomienda que prescindamos de sentencias de salto incondicional, es m\u00e1s, se desaconseja su uso por provocar una mala estructuraci\u00f3n del c\u00f3digo y un incremento en la dificultad para el mantenimiento de los mismos. Pero Java incorpora ciertas sentencias o estructuras de salto que es necesario conocer y que pueden sernos \u00fatiles en algunas partes de nuestros programas.</p> <p>Estas estructuras de salto corresponden a las sentencias <code>break</code>, <code>continue</code>, las etiquetas de salto y la sentencia <code>return</code>. Pasamos ahora a analizar su sintaxis y funcionamiento.</p>"},{"location":"ud03/ud0305/#sentencias-break-y-continue","title":"Sentencias <code>break</code> y <code>continue</code>","text":"<p>Se trata de dos instrucciones que permiten modificar el comportamiento de otras estructuras o sentencias de control, simplemente por el hecho de estar incluidas en alg\u00fan punto de su secuencia de instrucciones.</p> <p>La sentencia <code>break</code> incidir\u00e1 sobre las estructuras de control <code>switch</code>, <code>while</code>, <code>for</code> y <code>do\u00ad while</code> del siguiente modo:</p> <ul> <li> <p>Si aparece una sentencia <code>break</code> dentro de la secuencia de instrucciones de cualquiera de las estructuras mencionadas anteriormente, dicha estructura terminar\u00e1 inmediatamente. </p> </li> <li> <p>Si aparece una sentencia <code>break</code> dentro de un bucle anidado s\u00f3lo finalizar\u00e1 la sentencia de iteraci\u00f3n m\u00e1s interna, el resto se ejecuta de forma normal.</p> </li> </ul> <p>Es decir, que <code>break</code> sirve para romper el flujo de control de un bucle, aunque no se haya cumplido la condici\u00f3n del bucle. Si colocamos un <code>break</code> dentro del c\u00f3digo de un bucle, cuando se alcance el <code>break</code>, autom\u00e1ticamente se saldr\u00e1 del bucle pasando a ejecutarse la siguiente instrucci\u00f3n inmediatamente despu\u00e9s de \u00e9l.</p> <p>Ejemplo</p> Java<pre><code>public class EjemploBreak {\n    public static void main(String args[]){\n        for (int i = 0; i &lt; 10; i++) {\n            if(i == 6) {\n                break;\n            }\n            System.out.println(\"i: \" + i);\n        }\n    }\n}\n</code></pre> <p>Salida:</p> Java<pre><code>i: 0\ni: 1\ni: 2\ni: 3\ni: 4\ni: 5\n</code></pre> <p>La sentencia <code>continue</code> incidir\u00e1 sobre las sentencias o estructuras de control <code>while</code>, <code>for</code> y <code>do while</code> del siguiente modo:</p> <ul> <li> <p>Si aparece una sentencia <code>continue</code> dentro de la secuencia de instrucciones de cualquiera de las sentencias anteriormente indicadas, dicha sentencia dar\u00e1 por terminada la iteraci\u00f3n actual y se ejecuta una nueva iteraci\u00f3n, evaluando de nuevo la expresi\u00f3n condicional del bucle.</p> </li> <li> <p>Si aparece en el interior de un bucle anidado solo afectar\u00e1 a la sentencia de iteraci\u00f3n m\u00e1s interna, el resto se ejecutar\u00eda de forma normal.</p> </li> </ul> <p>Es decir, la sentencia <code>continue</code> forzar\u00e1 a que se ejecute la siguiente iteraci\u00f3n del bucle, sin tener en cuenta las instrucciones que pudiera haber despu\u00e9s del <code>continue</code>, y hasta el final del c\u00f3digo del bucle.</p> <p>Ejemplo</p> Java<pre><code>public class EjemploContinueFor {\n    public static void main(String args[]){\n\n        for (int i = 0; i &lt; 10; i++) {\n            if(i == 6) {\n                continue;\n            }\n            System.out.println(\"i: \" + i);\n        }\n    }\n}\n</code></pre> <p>Salida:</p> Java<pre><code>i: 0\ni: 1\ni: 2\ni: 3\ni: 4\ni: 5\ni: 7\ni: 8\ni: 9\n</code></pre>"},{"location":"ud03/ud0305/#etiquetas-de-salto","title":"Etiquetas de salto","text":"<p>Los saltos incondicionales y, en especial, saltos a una etiqueta, son totalmente desaconsejables.</p> <p>Java permite asociar etiquetas cuando se va a realizar un salto. De este modo puede conseguirse algo m\u00e1s de legibilidad en el c\u00f3digo.</p> <p>Las estructuras de salto <code>break</code> y <code>continue</code>, pueden tener asociadas etiquetas. Es a lo que se llama un <code>break</code> etiquetado o un <code>continue</code> etiquetado. Pero s\u00f3lo se recomienda su uso cuando se hace necesario salir de bucles anidados hacia diferentes niveles. </p> <p>\u00bfY c\u00f3mo se crea un salto a una etiqueta? En primer lugar, crearemos la etiqueta mediante un identificador seguido de dos puntos (<code>:</code>). A continuaci\u00f3n, se escriben las sentencias Java asociadas a dicha etiqueta encerradas entre llaves. Por as\u00ed decirlo, la creaci\u00f3n de una etiqueta es como fijar un punto de salto en el programa para poder saltar a \u00e9l desde otro lugar de dicho programa.</p> <p>\u00bfC\u00f3mo se lleva a cabo el salto? Es sencillo, en el lugar donde vayamos a colocar la sentencia <code>break</code> o <code>continue</code>, a\u00f1adiremos detr\u00e1s el identificador de la etiqueta. Con ello, conseguiremos que el salto se realice a un lugar determinado.</p> <p>La sintaxis ser\u00e1:</p> Java<pre><code>break etiqueta;\n</code></pre> <p>Un ejemplo ser\u00eda:</p> Java<pre><code>// BreakConEtiqueta.java\n// Ejemplo de uso de \"break\" con etiqueta de salto\nclass BreakConEtiqueta { \n    public static void main( String args[] ) {\n        int i; \n        bucleAInterrumpir:\n        for ( i=1 ; i&lt;=10 ; i++ ) {\n            System.out.println( \"Comenzada la vuelta\" );\n            System.out.println( i );\n            if (i==8) break bucleAInterrumpir;\n            System.out.println( \"Terminada esta vuelta\" );\n        }\n        System.out.println( \"Terminado\" );  \n    }\n}\n</code></pre>"},{"location":"ud03/ud0305/#return","title":"<code>return</code>","text":"<p>Ya sabemos c\u00f3mo modificar la ejecuci\u00f3n de bucles y estructuras condicionales m\u00faltiples, pero \u00bfPodr\u00edamos modificar la ejecuci\u00f3n de un m\u00e9todo? \u00bfEs posible hacer que \u00e9stos detengan su ejecuci\u00f3n antes de que finalice el c\u00f3digo asociado a ellos? S\u00ed, es posible, a trav\u00e9s de la sentencia <code>return</code> podremos conseguirlo. La sentencia <code>return</code> puede utilizarse de dos formas:</p> <ul> <li>Para terminar la ejecuci\u00f3n del m\u00e9todo donde est\u00e9 escrita, con lo que transferir\u00e1 el control al punto desde el que se hizo la llamada al m\u00e9todo, continuando el programa por la sentencia inmediatamente posterior.</li> <li>Para devolver o retornar un valor, siempre que junto a <code>return</code> se incluya una expresi\u00f3n de un tipo determinado. Por tanto, en el lugar donde se invoc\u00f3 al m\u00e9todo se obtendr\u00e1 el valor resultante de la evaluaci\u00f3n de la expresi\u00f3n que acompa\u00f1aba al m\u00e9todo.</li> </ul> <p>En general, una sentencia <code>return</code> suele aparecer al final de un m\u00e9todo, de este modo el m\u00e9todo tendr\u00e1 una entrada y una salida. Tambi\u00e9n es posible utilizar una sentencia <code>return</code> en cualquier punto de un m\u00e9todo, con lo que \u00e9ste finalizar\u00e1 en el lugar donde se encuentre dicho <code>return</code>. </p> <p> </p> <p>No ser\u00e1 recomendable incluir m\u00e1s de un <code>return</code> en un m\u00e9todo y por regla general, deber\u00e1 ir al final del m\u00e9todo como hemos comentado.</p> <p>El valor de retorno es opcional, si lo hubiera deber\u00eda de ser del mismo tipo o de un tipo compatible al tipo del valor de retorno definido en la cabecera del m\u00e9todo, pudiendo ser desde un entero a un objeto creado por nosotros. Si no lo tuviera, el tipo de retorno ser\u00eda <code>void</code>, y <code>return</code> servir\u00eda para salir del m\u00e9todo sin necesidad de llegar a ejecutar todas las instrucciones que se encuentran despu\u00e9s del <code>return</code>.</p> Ejemplo <code>return</code> <p>En el siguiente archivo java encontrar\u00e1s el c\u00f3digo de un programa que obtiene la suma de dos n\u00fameros, empleando para ello un m\u00e9todo sencillo que retorna el valor de la suma de los n\u00fameros que se le han pasado como par\u00e1metros. Presta atenci\u00f3n a los comentarios y f\u00edjate en las conversiones a entero de la entrada de los operandos por consola. Java<pre><code>import java.io.*;\n\npublic class Sentencia_Return {\n\n    private static BufferedReader stdin = new BufferedReader(\n            new InputStreamReader(System.in));\n\n    public static int suma(int numero1, int numero2) {\n        int resultado;\n        resultado = numero1 + numero2;\n        return resultado; //Mediante return devolvemos el resultado de la suma\n    }\n\n    public static void main(String[] args) throws IOException {\n        //Declaraci\u00f3n de variables\n        String input; //Esta variable recibir\u00e1 la entrada de teclado\n        int primer_numero, segundo_numero; //Estas variables almacenar\u00e1n los operandos\n        // Solicitamos que el usuario introduzca dos n\u00fameros por consola\n        System.out.print(\"Introduce el primer operando:\");\n        input = stdin.readLine(); //Leemos la entrada como cadena de caracteres\n        primer_numero = Integer.parseInt(input); //Transformamos a entero lo introducido\n        System.out.print(\"Introduce el segundo operando: \");\n        input = stdin.readLine(); //Leemos la entrada como cadena de caracteres\n        segundo_numero = Integer.parseInt(input); //Transformamos a entero lo introducido\n        //Imprimimos los n\u00fameros introducidos\n        System.out.println(\"Los operandos son: \" + primer_numero + \" y \" + segundo_numero);\n        System.out.println(\"obteniendo su suma... \");\n        //Invocamos al m\u00e9todo que realiza la suma, pas\u00e1ndole los par\u00e1metros adecuados\n        System.out.println(\"La suma de ambos operandos es: \" + \n                suma(primer_numero, segundo_numero));\n    }\n}\n</code></pre></p>"},{"location":"ud03/ud0306/","title":"3.6 Excepciones","text":"<p>A lo largo de nuestro aprendizaje de Java nos hemos topado en alguna ocasi\u00f3n con errores, pero \u00e9stos suelen ser los que nos ha indicado el compilador. Un punto y coma por aqu\u00ed, un nombre de variable incorrecto por all\u00e1, pueden hacer que nuestro compilador nos avise de estos descuidos.</p> <p>Cuando los vemos, se corrigen y obtenemos nuestra clase compilada correctamente. </p> <p>Pero, \u00bfS\u00f3lo existen este tipo de errores? \u00bfPodr\u00edan existir errores no sint\u00e1cticos en nuestros programas? Est\u00e1 claro que s\u00ed. Un programa perfectamente compilado en el que no existen errores de sintaxis, puede generar otros tipos de errores que quiz\u00e1 aparezcan en tiempo de ejecuci\u00f3n. A estos errores se les conoce como excepciones.</p> <p>Aprenderemos a gestionar de manera adecuada estas excepciones y tendremos la oportunidad de utilizar el potente sistema de manejo de errores que Java incorpora. La potencia de este sistema de manejo de errores radica en:</p> <ol> <li>Que el c\u00f3digo que se encarga de manejar los errores, es perfectamente identificable en los programas. Este c\u00f3digo puede estar separado del c\u00f3digo que maneja la aplicaci\u00f3n.</li> <li>Que Java tiene una gran cantidad de errores est\u00e1ndar asociados a multitud de fallos comunes, como por ejemplo divisiones por cero, fallos de entrada de datos, etc. Al tener tantas excepciones localizadas, podemos gestionar de manera espec\u00edfica cada uno de los errores que se produzcan.</li> </ol> <p>En Java se pueden preparar los fragmentos de c\u00f3digo que pueden provocar errores de ejecuci\u00f3n para que si se produce una excepci\u00f3n, el flujo del programa es lanzado (<code>throw</code>) hacia ciertas zonas o rutinas que han sido creadas previamente por el programador y cuya finalidad ser\u00e1 el tratamiento efectivo de dichas excepciones. Si no se captura la excepci\u00f3n, el programa se detendr\u00e1 con toda probabilidad.</p> <p>En Java, las excepciones est\u00e1n representadas por clases. El paquete <code>java.lang.Exception</code> y sus subpaquetes contienen todos los tipos de excepciones. Todas las excepciones derivar\u00e1n de la clase <code>Throwable</code>, existiendo clases m\u00e1s espec\u00edficas. Por debajo de la clase <code>Throwable</code> existen las clases <code>Error</code> y <code>Exception</code>. </p> <p>Error es una clase que se encargar\u00e1 de los errores que se produzcan en la m\u00e1quina virtual, no en nuestros programas. </p> <p>La clase Exception ser\u00e1 la que a nosotros nos interese conocer, pues gestiona los errores provocados en los programas.</p> <p>Java lanzar\u00e1 una excepci\u00f3n en respuesta a una situaci\u00f3n poco usual. Cuando se produce un error se genera un objeto asociado a esa excepci\u00f3n. Este objeto es de la clase <code>Exception</code> o de alguna de sus herederas. Este objeto se pasa al c\u00f3digo que se ha definido para manejar la excepci\u00f3n. Dicho c\u00f3digo puede manipular las propiedades del objeto <code>Exception</code>.</p> <p>El programador tambi\u00e9n puede lanzar sus propias excepciones. Las excepciones en Java ser\u00e1n objetos de clases derivadas de la clase base <code>Exception</code>. Existe toda una jerarqu\u00eda de clases derivada de la clase base <code>Exception</code>. Estas clases derivadas se ubican en dos grupos principales:</p> <ul> <li>Las excepciones en tiempo de ejecuci\u00f3n, que ocurren cuando el programador no ha tenido cuidado al escribir su c\u00f3digo.</li> <li>Las excepciones que indican que ha sucedido algo inesperado o fuera de control.</li> </ul> <p>En la siguiente imagen te ofrecemos una aproximaci\u00f3n a la jerarqu\u00eda de las excepciones en Java.</p> <p>Y aqu\u00ed tenemos una lista de las m\u00e1s habituales con su explicaci\u00f3n:</p> NOMBRE DESCRIPCI\u00d3N FileNotFoundException Lanza una excepci\u00f3n cuando el fichero no se encuentra. ClassNotFoundException Lanza una excepci\u00f3n cuando no existe la clase. EOFException Lanza una excepci\u00f3n cuando llega al final del fichero. ArrayIndexOutOfBoundsException Lanza una excepci\u00f3n cuando se accede a una posici\u00f3n de un array que no exista. NumberFormatException Lanza una excepci\u00f3n cuando se procesa un numero pero este es un dato alfanum\u00e9rico. NullPointerException Lanza una excepci\u00f3n cuando intentando acceder a un miembro de un objeto para el que todav\u00eda no hemos reservado memoria. IOException Generaliza muchas excepciones anteriores. La ventaja es que no necesitamos controlar cada una de las excepciones. Excepcion Es la clase padre de IOException y de otras clases. Tiene la misma ventaja que IOException. ArithmeticException Se lanza por ejemplo, cuando intentamos dividir un n\u00famero entre cero."},{"location":"ud03/ud0306/#capturar-una-excepcion","title":"Capturar una excepci\u00f3n","text":"<p>Para poder capturar excepciones, emplearemos la estructura de captura de excepciones <code>try\u2010catch\u2010finally</code>.</p> <p>B\u00e1sicamente, para capturar una excepci\u00f3n lo que haremos ser\u00e1 declarar bloques de c\u00f3digo donde es posible que ocurra una excepci\u00f3n. Esto lo haremos mediante un bloque try (intentar). Si ocurre una excepci\u00f3n dentro de estos bloques, se lanza una excepci\u00f3n. Estas excepciones lanzadas se pueden capturar por medio de bloques catch. Ser\u00e1 dentro de este tipo de bloques donde se har\u00e1 el manejo de las excepciones.</p> <p>Su sintaxis es:</p> Java<pre><code>try {\n    c\u00f3digo que puede generar excepciones;\n} catch (Tipo_excepcion_1 objeto_excepcion) {\n    Manejo de excepci\u00f3n de Tipo_excepcion_1;\n} catch (Tipo_excepcion_2 objeto_excepcion) {\n    Manejo de excepci\u00f3n de Tipo_excepcion_2;\n}\n...\nfinally {\n    instrucciones que se ejecutan siempre\n}\n</code></pre> <p>En esta estructura, la parte <code>catch</code> puede repetirse tantas veces como excepciones diferentes se deseen capturar. La parte <code>finally</code> es opcional y, si aparece, solo podr\u00e1 hacerlo una sola vez.</p> <p> </p> <p>Cada <code>catch</code> maneja un tipo de excepci\u00f3n. Cuando se produce una excepci\u00f3n, se busca el <code>catch</code> que posea el manejador de excepci\u00f3n adecuado, ser\u00e1 el que utilice el mismo tipo de excepci\u00f3n que se ha producido. Esto puede causar problemas si no se tiene cuidado, ya que la clase <code>Exception</code> es la superclase de todas las dem\u00e1s. Por lo que si se produjo, por ejemplo, una excepci\u00f3n de tipo <code>Aritmethic Exception</code> y el primer <code>catch</code> captura el tipo gen\u00e9rico <code>Exception</code>, ser\u00e1 ese <code>catch</code> el que se ejecute y no los dem\u00e1s. Por eso el \u00faltimo <code>catch</code> debe ser el que capture excepciones gen\u00e9ricas y los primeros deben ser los m\u00e1s espec\u00edficos. L\u00f3gicamente si vamos a tratar a todas las excepciones (sean del tipo que sean) igual, entonces basta con un solo <code>catch</code> que capture objetos <code>Exception</code>.</p>"},{"location":"ud03/ud0306/#el-manejo-de-excepciones","title":"El manejo de excepciones","text":"<p>Como hemos comentado, siempre debemos controlar las excepciones que se puedan producir o de lo contrario nuestro software quedar\u00e1 expuesto a fallos. Las excepciones pueden tratarse de dos formas:</p> <ul> <li>Interrupci\u00f3n. En este caso se asume que el programa ha encontrado un error irrecuperable. La operaci\u00f3n que dio lugar a la excepci\u00f3n se anula y se entiende que no hay manera de regresar al c\u00f3digo que provoc\u00f3 la excepci\u00f3n. Es decir, la operaci\u00f3n que dio origin\u00f3 el error, se anula.</li> <li>Reanudaci\u00f3n. Se puede manejar el error y regresar de nuevo al c\u00f3digo que provoc\u00f3 el error.</li> </ul> <p>Java emplea la primera forma, pero puede simularse la segunda mediante la utilizaci\u00f3n de un bloque <code>try</code> en el interior de un <code>while</code>, que se repetir\u00e1 hasta que el error deje de existir. En la secci\u00f3n de ejemplos al final de este documento puedes ver c\u00f3mo poner el <code>try-catch</code> dentro de un <code>do while</code>.</p>"},{"location":"ud03/ud0306/#delegacion-de-excepciones-con-throws","title":"Delegaci\u00f3n de excepciones con <code>throws</code>","text":"<p>\u00bfPuede haber problemas con las excepciones al usar llamadas a m\u00e9todos en nuestros programas? Efectivamente, si se produjese una excepci\u00f3n es necesario saber qui\u00e9n ser\u00e1 el encargado de solucionarla. Puede ser que sea el propio m\u00e9todo llamado o el c\u00f3digo que hizo la llamada a dicho m\u00e9todo.</p> <p>Quiz\u00e1 pudi\u00e9ramos pensar que deber\u00eda ser el propio m\u00e9todo el que se encargue de sus excepciones, aunque es posible hacer que la excepci\u00f3n sea resuelta por el c\u00f3digo que hizo la llamada. Cuando un m\u00e9todo utiliza una sentencia que puede generar una excepci\u00f3n, pero dicha excepci\u00f3n no es capturada y tratada por \u00e9l, sino que se encarga su gesti\u00f3n a qui\u00e9n llam\u00f3 al m\u00e9todo, decimos que se ha producido delegaci\u00f3n de excepciones.</p> <p>Para establecer esta delegaci\u00f3n, en la cabecera del m\u00e9todo se declara el tipo de excepciones que puede generar y que deber\u00e1n ser gestionadas por quien invoque a dicho m\u00e9todo. Utilizaremos para ello la sentencia <code>throws</code> y tras esa palabra se indica qu\u00e9 excepciones puede provocar el c\u00f3digo del m\u00e9todo. Si ocurre una excepci\u00f3n en el m\u00e9todo, el c\u00f3digo abandona ese m\u00e9todo y regresa al c\u00f3digo desde el que se llam\u00f3 al m\u00e9todo. All\u00ed se buscar\u00e1 el <code>catch</code> apropiado para esa excepci\u00f3n. Su sintaxis es la siguiente:</p> Java<pre><code>public class Delegacion_Excepciones {\n    ...\n    public int leeAnio(BufferedReader lector) throws IOException, NumberFormatException {\n        String linea = teclado.readLine();\n        return Integer.parseInt(linea);\n    }\n    ...\n}\n</code></pre> <p>Donde <code>IOException</code> y <code>NumberFormatException</code>, ser\u00edan dos posibles excepciones que el m\u00e9todo <code>leeAnio</code> podr\u00eda generar, pero que no gestiona. Por tanto, un m\u00e9todo puede incluir en su cabecera un listado de excepciones que puede lanzar, separadas por comas.</p>"},{"location":"ud03/ud0306/#excepciones-comprobadas-y-no-comprobadas","title":"Excepciones comprobadas y no comprobadas","text":"<p>Existen dos grupos de excepciones: comprobadas y no comprobadas (observa la figura del apartado \u201cJerarqu\u00eda de excepciones\u201d).</p> <ul> <li> <p>Excepciones comprobadas, verificadas ( o <code>checked</code>):</p> </li> <li> <p>Su tratamiento es obligatorio y el compilador comprueba que se haga. Es necesario capturarlas (con <code>try-catch</code>) o propagarlas (con <code>throws</code>), de lo contrario se produce error de compilaci\u00f3n.</p> </li> <li> <p>Son excepciones que un programa bien escrito deber\u00eda prever, tratar y recuperarse de ellas.</p> <p>Ejemplo: Nuestro programa va a leer y mostrar por pantalla el contenido de un fichero cuyo nombre indica el usuario. En la mayor\u00eda de ocasiones el usuario indicar\u00e1 el nombre de un fichero existente y v\u00e1lido y el programa lo mostrar\u00e1, pero es posible que en alguna ocasi\u00f3n el usuario se equivoque e indique el nombre de un fichero que no existe. En tal caso se producir\u00e1 una excepci\u00f3n <code>FileNotFoundException</code>. El programa deber\u00eda ser capaz de manejar la situaci\u00f3n, informar al usuario y permitirle, si se estima oportuno, que introduzca un nombre de fichero v\u00e1lido.</p> </li> <li> <p>Son comprobadas las derivadas de <code>java.lang.IOException</code> y las excepciones de usuario (que trataremos m\u00e1s adelante).</p> </li> <li> <p>Excepciones no comprobadas, no verificadas ( o <code>unchecked</code>):</p> </li> <li> <p>Su tratamiento no es obligatorio y el compilador obliga a que se utilice un bloque <code>try-catch</code> o a que se anuncie su propagaci\u00f3n usando <code>throws</code>. Aunque no es obligatorio, puede hacerse si se estima conveniente.</p> </li> <li> <p>Son excepciones que suelen producirse porque nuestro programa contiene alg\u00fan error. Es por eso que no se comprueban, pues el objetivo no es recuperarse de ellas, sino avisarnos de que estamos tratando de realizar alguna operaci\u00f3n no posible. La soluci\u00f3n no pasa por capturarlas, sino por modificar el programa.</p> <p>Siguiendo con el ejemplo anterior, supongamos que el usuario introduce un nombre de fichero correcto pero, por alg\u00fan error en nuestro programa, al m\u00e9todo encargado de leer el fichero en lugar de llegarle el nombre le llega el valor <code>null</code>. En ese caso se producir\u00e1 un <code>NullPointerException</code>.</p> <p>No tiene demasiado sentido capturar la excepci\u00f3n, puesto que se produce porque el programa contiene alg\u00fan error que hay que subsanar.</p> </li> <li> <p>Son no comprobadas las clases derivadas de <code>java.lang.Error</code> y de <code>java.lang.RuntimeException</code> </p> </li> </ul>"},{"location":"ud03/ud0306/#crear-y-lanzar-excepciones-de-usuario","title":"Crear y lanzar excepciones de usuario:","text":"<p>Las excepciones de usuario son subclases de la clase <code>Exception</code> que podemos crear y lanzar en nuestros programas para avisar sobre determinadas situaciones.</p>"},{"location":"ud03/ud0306/#crear-una-nueva-excepcion","title":"Crear una nueva excepci\u00f3n","text":"<p>Para crear una nueva excepci\u00f3n tenemos que crear una clase derivada (subclase) de la clase <code>Exception</code>. </p> <p>La clase <code>Exception</code> tiene dos constructores, uno sin par\u00e1metros y otro que acepta un <code>String</code> con un texto descriptivo de la excepci\u00f3n. Todas las excepciones de usuario las crearemos de la siguiente forma:</p> Java<pre><code>class NombreExcepcion extends Exception {\n    public NombreExcepcion(){\n        super();\n    }\n    public NombreExcepcion(String msg){\n        super(msg);\n    }\n}\n</code></pre>"},{"location":"ud03/ud0306/#lanzar-una-excepcion","title":"Lanzar una excepci\u00f3n","text":"<p>Las excepciones se lanzan mediante la instrucci\u00f3n <code>throw</code>. La sintaxis es:</p> Java<pre><code>throw new NombreExcepcion(\"Mensaje descriptivo de la situaci\u00f3n inesperada\");\n</code></pre> <p>Ya que se tratar\u00e1 de una excepci\u00f3n comprobada, en la cabecera del m\u00e9todo que lanza la excepci\u00f3n habr\u00e1 que propagarla. </p> <p>En Visual Studio Code</p> <p>El IDE nos ayudar\u00e1 a gestionar las excepciones. Por ejemplo, en la siguiente linea de c\u00f3digo en la l\u00ednea 8 aparece un mensaje (Unhandled exception type FileNotFoundException) en el que nos indica que no hemos tratado este tipo de excepci\u00f3n, del tipo FileNotFoundException que hereda de IOException:   Si, en Visual Studio Code, pulsamos en el icono azul (en otros IDEs como Eclipse tambi\u00e9n aparecen este tipo de advertencias) nos ofrece dos tipos de opciones para manejar el error/excepci\u00f3n:</p> <ul> <li> <p><code>Add throws declaration</code> , en la que se declara la excepci\u00f3n en la misma declaraci\u00f3n del m\u00e9todo y se importa la clase java.io.FileNotFoundException, o</p> </li> <li> <p><code>Surround with try/catch</code>, en la que introduce un bloque de c\u00f3digo que va a contener la excepci\u00f3n.</p> </li> </ul> Ejemplo de excepciones <p>Vamos a realizar un programa en Java en el que se solicite al usuario la introducci\u00f3n de un n\u00famero por teclado comprendido entre el 0 y el 100. Utilizando manejo de excepciones, controlaremos la entrada de dicho n\u00famero y volver a solicitarlo en caso de que \u00e9sta sea incorrecta. Java<pre><code>import java.io.*;\n\npublic class Excepciones {\n\n    public static void main(String[] args) {\n        int numero = -1;\n        int intentos = 0;\n        String linea;\n        BufferedReader teclado = new BufferedReader(new InputStreamReader(System.in));\n        do {\n            try {\n                System.out.print(\"Introduzca un n\u00famero entre 0 y 100: \");\n                linea = teclado.readLine();\n                numero = Integer.parseInt(linea);\n            } catch (IOException e) {\n                System.out.println(\"Error al leer del teclado.\");\n            } catch (NumberFormatException e) {\n                System.out.println(\"Debe introducir un n\u00famero entre 0 y 100.\");\n            } finally {\n                intentos++;\n            }\n        } while (numero &lt; 0 || numero &gt; 100);\n        System.out.println(\"El n\u00famero introducido es: \" + numero);\n        System.out.println(\"N\u00famero de intentos: \" + intentos);\n    }\n}\n</code></pre> En este programa se solicita repetidamente un n\u00famero utilizando una estructura <code>do\u00ad while</code>, mientras el n\u00famero introducido sea menor que 0 y mayor que 100. Como al solicitar el n\u00famero pueden producirse los errores siguientes:</p> <ul> <li>De entrada de informaci\u00f3n a trav\u00e9s de la excepci\u00f3n <code>IOException</code> generada por el m\u00e9todo <code>readLine()</code> de la clase <code>BufferedReader</code>.</li> <li>De conversi\u00f3n de tipos a trav\u00e9s de la excepci\u00f3n <code>NumberFormatException</code> generada por el m\u00e9todo <code>parseInt()</code>.</li> </ul> <p>Entonces se hace necesaria la utilizaci\u00f3n de bloques <code>catch</code> que gestionen cada una de las excepciones que puedan producirse. Cuando se produce una excepci\u00f3n, se compara si coincide con la excepci\u00f3n del primer <code>catch</code>. Si no coincide, se compara con la del segundo <code>catch</code> y as\u00ed sucesivamente. Si se encuentra un <code>catch</code> que coincide con la excepci\u00f3n a gestionar, se ejecutar\u00e1 el bloque de sentencias asociado a \u00e9ste.</p> <p>Si ning\u00fan bloque <code>catch</code> coincide con la excepci\u00f3n lanzada, dicha excepci\u00f3n se lanzar\u00e1 fuera de la estructura <code>try\u2010catch\u2010finally</code>.</p> <p>El bloque <code>finally</code>, se ejecutar\u00e1 tanto si <code>try</code> termin\u00f3 correctamente, como si se captur\u00f3 una excepci\u00f3n en alg\u00fan bloque <code>catch</code>. Por tanto, si existe bloque <code>finally</code> \u00e9ste se ejecutar\u00e1 siempre.</p>"},{"location":"ud03/ud03ac/","title":"Actividades","text":""},{"location":"ud03/ud03ac/#retos","title":"Retos","text":""},{"location":"ud03/ud03ac/#reto-01","title":"Reto 01","text":"<p>Modificad el programa para que, en lugar de hacer un descuento del 8% si la compra es de 100 \u20ac o m\u00e1s, aplique una penalizaci\u00f3n de 2 \u20ac si el precio es inferior a 30 \u20ac.</p> Java<pre><code>import java.util.Scanner;\n//Un programa que calcula descuento.\n\npublic class Descuento {\n  public static final float DESCOMPTE = 8;\n  public static final float COMPRA_MIN = 100;\n\n  public static void main(String[] args) {\n    Scanner lector = new Scanner(System.in);\n    System.out.print(\"Cu\u00e1l es el precio del producto, en euros? \");\n    float preu = lector.nextFloat();\n    lector.nextLine();\n    if (preu &gt;= COMPRA_MIN) {\n      float descompteFet = preu * DESCOMPTE / 100;\n      preu = preu - descompteFet;\n      }\n    System.out.println(\"El precio final para pagar es de \" + preu + \" euros.\");\n  }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#reto-02","title":"Reto 02","text":"<p>Modificad el programa para que, en lugar de un \u00fanico valor secreto, haya dos. Para ganar, solo hay que acertar uno de los dos. La condici\u00f3n l\u00f3gica que os har\u00e1 falta ya no se puede resolver con una expresi\u00f3n compuesta por una \u00fanica comparaci\u00f3n. Ser\u00e1 m\u00e1s compleja.</p> Java<pre><code>import java.util.Scanner;\n\npublic class Adivina {\n\n  public static final int VALOR_SECRET = 4;\n\n  public static void main(String[] args) {\n    Scanner lector = new Scanner(System.in);\n    System.out.println(\"Comencemos el juego.\");\n    System.out.print(\"Adivina el valor entero, entre 0 y 10: \");\n    int valorUsuari = lector.nextInt();\n    lector.nextLine();\n    if (VALOR_SECRET == valorUsuari) {\n      System.out.println(\"Exacto! Era \" + VALOR_SECRET + \".\");\n    } else {\n      System.out.println(\"Te has equivocado!\");\n    }\n    System.out.println(\"Hemos terminado el juego.\");\n  }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#reto-03","title":"Reto 03","text":"<p>Modificad el ejemplo anterior (Adivina) para que  compruebe que el valor que ha introducido el usuario se encuentra dentro del rango de valores correcto (entre 0 y 10).</p>"},{"location":"ud03/ud03ac/#reto-04","title":"Reto 04","text":"<p>Aplicad el mismo tipo de control sobre los datos de la entrada del ejemplo siguiente al ejercicio del reto 1.</p> Java<pre><code>import java.util.Scanner;\n\npublic class AdivinaControlErrorsEntrada {\n\n  public static final int VALOR_SECRET = 4;\n\n  public static void main(String[] args) {\n    Scanner lector = new Scanner(System.in);\n    System.out.println(\"Comencemos el juego.\");\n    System.out.print(\"Adivina el valor entero, entre 0 y 10: \");\n    boolean tipusCorrecte = lector.hasNextInt();\n    if (tipusCorrecte) {\n       //Se ha escrito un entero correctamente. Ya se puede leer.\n       int valorUsuari = lector.nextInt();\n       lector.nextLine();\n       if (VALOR_SECRET == valorUsuari) {\n           System.out.println(\"Exacto! Era \" + VALOR_SECRET + \".\");\n       } else {\n           System.out.println(\"Te has equivocado!\");\n       }\n       System.out.println(\"Hemos terminado el juego.\");\n    } else {\n       //No se ha escrito un entero.\n       System.out.println(\"El valor introducido no es un entero.\");\n    }\n  }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#reto-05","title":"Reto 05","text":"<p>Modificad el ejemplo para que primero pregunte al usuario cu\u00e1ntos caracteres \"-\" quiere escribir por pantalla, y entonces los escriba. Cuando prob\u00e9is el programa, no introducid un n\u00famero muy alto!</p> Java<pre><code>//Un programa que escribe una l\u00ednea con 100 caracteres \u2019 \u2212 \u2019.\n\npublic class Linea {\n\n  public static void main(String[] args) {\n    //Inicializamos un contador\n    int i = 0;\n    //Ja hemos hecho esto 100 veces\n    while (i &lt; 100) {\n      System.out.print(\"\u2212\");\n      //Lo hemos hecho una vez, sumamos 1 al contador\n      i = i + 1;\n    }\n    //Forzamos un salto de l\u00ednea\n    System.out.println();\n  }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#reto-06","title":"Reto 06","text":"<p>Un contador tanto puede empezar a contar desde 0 e ir subiendo, como desde el final e ir disminuyendo como una cuenta atr\u00e1s. Modificad este programa para que la tabla de multiplicar empiece mostrando el valor para 10 y vaya bajando hasta el 1.</p> Java<pre><code>import java.util.Scanner;\npublic class TablaMultiplicar {\n\n  public static void main(String[] args) {\n    Scanner lector = new Scanner(System.in);\n    System.out.print(\"Qu\u00e9 tabla de multiplicar quieres? \");\n    int taula = lector.nextInt();\n    lector.nextLine();\n    int i = 1;\n    while (i &lt;= 10) {\n       int resultat = taula * i;\n       System.out.println(taula + \" * \" + i + \" = \" + resultat);\n       i = i + 1;\n    }\n    System.out.println(\"Esta ha estado la tabla del \" + taula);\n  }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#reto-07","title":"Reto 07","text":"<p>El uso de contadores y acumuladores no es excluyente, sino que puede ser complementario. Pensad c\u00f3mo se podr\u00eda modificar el programa para calcular el resultado del m\u00f3dulo y la divisi\u00f3n entera a la vez. Recordad que la divisi\u00f3n entera simplemente ser\u00eda contar cu\u00e1ntas veces se ha podido restar el divisor.</p> Java<pre><code>import java.util.Scanner;\n\npublic class Modulo {\n\n  public static void main(String[] args) {\n     Scanner lector = new Scanner(System.in);\n     System.out.print(\"Cu\u00e1l es el dividendo? \");\n     int dividend = lector.nextInt();\n     lector.nextLine();\n     System.out.print(\"Cual es el divisor? \");\n     int divisor = lector.nextInt();\n     lector.nextLine();\n     while (dividend &gt;= divisor) {\n        dividend = dividend - divisor;\n         System.out.println(\"Bucle: por ahora el dividendo vale \" + dividend + \".\");\n     }\n     System.out.println(\"El resultado final es \" + dividend + \".\");\n  }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicios-if-else","title":"Ejercicios <code>if else</code>","text":""},{"location":"ud03/ud03ac/#ejercicio-01-menordedos","title":"Ejercicio 01 <code>MenorDeDos</code>","text":"<p>Escribir un programa que muestre el menor de dos n\u00fameros enteros introducidos por teclado.</p>"},{"location":"ud03/ud03ac/#ejercicio-02-menordetres","title":"Ejercicio 02 <code>MenorDeTres</code>","text":"<p>Escribir un programa que muestre el menor de tres n\u00fameros enteros introducidos por teclado. Haz dos versiones: una utilizando los operadores l\u00f3gicos necesarios (&amp;&amp;,||, ...) y otra sin utilizar ninguno (habr\u00e1 que usar sentencias if else anidadas)</p>"},{"location":"ud03/ud03ac/#ejercicio-03-intermediodetres","title":"Ejercicio 03 <code>IntermedioDeTres</code>","text":"<p>Escribir un programa que muestre el intermedio de tres n\u00fameros introducidos por teclado.</p>"},{"location":"ud03/ud03ac/#ejercicio-04-notastexto","title":"Ejercicio 04 <code>NotasTexto</code>","text":"<p>Escribir un programa que acepte del usuario la nota de un examen (valor num\u00e9rico entre 1 y 10) y muestre el literal correspondiente a dicha nota seg\u00fan (insuficiente, suficiente, bien, notable, sobresaliente).</p>"},{"location":"ud03/ud03ac/#ejercicio-05-letranif","title":"Ejercicio 05 <code>LetraNif</code>","text":"<p>Escribir un programa que lea de teclado un nif (sin guiones ni puntos). Si el nif introducido lleva la letra, se comprobar\u00e1 si \u00e9sta es correcta y se le indicar\u00e1 al usuario si lo es o no. Si el nif no lleva letra, se calcular\u00e1 la que le corresponde y se mostrar\u00e1 al usuario. Te aconsejo que dividas el problema en partes: tieneLetra(), extraerUltimoChar(),  extraeNumero(), validarLetra(), calcularLetra()...</p>"},{"location":"ud03/ud03ac/#ejercicio-06-division","title":"Ejercicio 06 <code>Divisi\u00f3n</code>","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros enteros y le muestre el resultado de la divisi\u00f3n. Tener en cuenta que si dividimos un n\u00famero por cero se producir\u00e1 un error de ejecuci\u00f3n y debemos evitarlo.</p>"},{"location":"ud03/ud03ac/#ejercicio-07-raiz","title":"Ejercicio 07 <code>Raiz</code>","text":"<p>Se desea calcular la ra\u00edz cuadrada real de un n\u00famero real cualquiera pedido inicialmente al usuario. Como dicha operaci\u00f3n no est\u00e1 definida para los n\u00fameros negativos es necesario tratar, de alg\u00fan modo, dicho posible error sin que el programa detenga su ejecuci\u00f3n.</p>"},{"location":"ud03/ud03ac/#ejercicio-08-hora12","title":"Ejercicio 08 <code>Hora12</code>","text":"<p>Escribir un programa que lea la hora de un dia en notaci\u00f3n de 24 horas y la exprese en notaci\u00f3n de 12 horas. Por ejemplo, si la entrada es 13 horas 45 minutos, la salida ser\u00e1 1:45 PM. La hora y los minutos se leer\u00e1n de teclado de forma separada, primero la hora y luego los minutos.</p>"},{"location":"ud03/ud03ac/#ejercicio-09-bisiesto","title":"Ejercicio 09 <code>Bisiesto</code>","text":"<p>Escribir un programa que determine si un a\u00f1o introducido por teclado es o no bisiesto. Un a\u00f1o es bisiesto si es m\u00faltiplo de 4 (por ejemplo 1984). Sin embargo, los a\u00f1os m\u00faltiplos de 100 no son bisiestos, salvo que sean m\u00faltiplos de 400, en cuyo caso si lo son (por ejemplo 1800 no es bisiesto y 2000 si lo es). Para hacer el programa, implementa un m\u00e9todo dentro de la clase que reciba un a\u00f1o y devuelva true si el a\u00f1o es bisiesto y false en caso de que no los sea.</p>"},{"location":"ud03/ud03ac/#ejercicio-10-fechas","title":"Ejercicio 10 <code>Fechas</code>","text":"<p>Escribir un programa que pida al usuario dos fechas (dia, mes y a\u00f1o), que se suponen correctas, y le muestre la menor de ellas. La fecha se mostrar\u00e1 en formato dd/mm/a\u00f1o. Utiliza un m\u00e9todo mostrarFecha, para mostrar la fecha por pantalla. La fecha se mostrar\u00e1 siempre con dos d\u00edgitos para el dia, dos para el mes y cuatro para el a\u00f1o.</p>"},{"location":"ud03/ud03ac/#ejercicio-11-diasdelmes","title":"Ejercicio 11 <code>DiasDelMes</code>","text":"<p>Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el n\u00famero de d\u00edas que tiene el mes. Hacerlo utilizando sentencias <code>if else</code>. Para hacer el programa, implementa un m\u00e9todo en la clase que reciba un n\u00famero de mes y devuelva el n\u00famero de d\u00edas que tiene el mes</p>"},{"location":"ud03/ud03ac/#ejercicio-12-nombredelmes","title":"Ejercicio 12 <code>NombreDelMes</code>","text":"<p>Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el nombre del m\u00e9s (enero, febrero, etc). Hacerlo utilizando sentencias <code>if else</code>. Para hacer un programa, implementa un m\u00e9todo en la clase que reciba un n\u00famero de mes y devuelva el nombre del mes</p>"},{"location":"ud03/ud03ac/#ejercicio-13-salario","title":"Ejercicio 13 <code>Salario</code>","text":"<p>Escribir un programa que lea de teclado las horas trabajadas por un empleado en una semana y calcule su salario neto semanal, sabiendo que:</p> Text Only<pre><code>   - Las horas ordinarias se pagan a 6 \u20ac.\n   - Las horas extraordinarias se pagan a 10 \u20ac.\n   - Los impuestos a deducir son:\n     - Un 2 % si el salario bruto semanal es menor o igual a 350 \u20ac\n     - Un 10 % si el salario bruto semanal es superior a 350 \u20ac\n   - La jornada semanal ordinaria son 40 horas. El resto de horas trabajadas se considerar\u00e1n horas extra.\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-14-signo","title":"Ejercicio 14 <code>Signo</code>","text":"<p>Dados dos n\u00fameros enteros, num1 y num2, realizar un programa que escriba uno de los dos mensajes:</p> Text Only<pre><code>- \"el producto de los dos n\u00fameros es positivo o nulo\" o bien\n- \"el producto de los dos n\u00fameros es negativo\".\n\nResolverlo sin calcular el producto, sino teniendo en cuenta \u00fanicamente el signo de los n\u00fameros a multiplicar.\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-15-calculadora","title":"Ejercicio 15 <code>Calculadora</code>","text":"<p>Escribir un programa para simular una calculadora. Considera que los c\u00e1lculos posibles son del tipo num1 operado num2, donde num1 y num2 son dos n\u00fameros reales cualesquiera y operador es una de entre: +, -, * y /. El programa pedir\u00e1 al usuario en primer lugar el valor num1, a continuaci\u00f3n el operador y finalmente el valor num2. Resolver utilizando instrucciones <code>if else</code></p>"},{"location":"ud03/ud03ac/#ejercicio-16-comercio","title":"Ejercicio 16 <code>Comercio</code>","text":"<p>Un comercio aplica un descuento del 8% por compras superiores a 40 euros. El descuento m\u00e1ximo ser\u00e1 de 12 euros. Escribir un programa que solicite al usuario el importe de la compra y muestre un mensaje similar al siguiente:</p> Text Only<pre><code>- Importe de la compra 100 \u20ac\n- Porcentaje de descuento aplicado: 8%\n- Descuento aplicado: 8 \u20ac\n- Cantidad a pagar: 92 \u20ac\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-17-editorial","title":"Ejercicio 17 <code>Editorial</code>","text":"<p>Una compa\u00f1\u00eda editorial dispone de 2 tipos de publicaciones: libros y revistas. El precio de cada pedido depende del n\u00famero de elementos solicitados al cual se le aplica un determinado descuento, que es diferente para libros y para revistas. La siguiente tabla muestra los descuentos a aplicar en funci\u00f3n del n\u00famero de unidades y del tipo de producto:</p> Text Only<pre><code>| Cantidad pedida         | Libros            | Revistas          |\n| ----------------------- | ----------------- | ----------------- |\n| Hasta 5 unidades        | 0 % de descuento  | 0 % de descuento  |\n| De 6 a 10 unidades      | 10 % de descuento | 15 % de descuento |\n| De 11 a 20 unidades     | 15 % de descuento | 20 % de descuento |\n| A partir de 20 unidades | 20 % de descuento | 25 % de descuento |\n\nEscribe un m\u00e9todo `calcularCoste` que, recibiendo el tipo de publicaci\u00f3n (`String`), que puede ser \"libro\" o \"revista\", el precio individual (`double`) y el n\u00famero de unidades solicitado (`int`), devuelva el coste del pedido (aplicando el descuento correspondiente).\nEscribe un programa en el que el usuario indique cantidad y precio de revistas y cantidad y precio de libros que incluye un pedido, y muestre el coste del pedido\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-18-taxi","title":"Ejercicio 18 <code>Taxi</code>","text":"<p>Se desea calcular el coste del trayecto realizado en taxi en funci\u00f3n de los kil\u00f3metros recorridos en las carreras metropolitanas de Valencia. Seg\u00fan las tarifas vigentes para el 2012, el coste se calcula de la siguiente manera:</p> Text Only<pre><code>- D\u00edas laborables en horario diurno (de 6:00 a 22:00h): 0.73 \u20ac/km.\n- D\u00edas laborables en horario nocturno: 0.84 \u20ac/km.\n- S\u00e1bados y domingos: 0.93 \u20ac/km.\n- Adem\u00e1s, la tarifa m\u00ednima diurna es de 2.95\u20ac y la m\u00ednima nocturna de 4\u20ac.\n\nEscribir un programa que solicite al usuario:\n\n- La hora (hora y minutos) en que se realiz\u00f3 el trayecto.\n- El d\u00eda de la semana (se supone que el usuario introduce un valor entre 1 para lunes y 7 para domingo)\n- Los quil\u00f3metros recorridos.\n\nY muestre el coste del trayecto\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-19-nombre","title":"Ejercicio 19 <code>Nombre</code>","text":"<p>Escribir un programa en el que el usuario pueda escribir su nombre. El programa le dir\u00e1 si la primera y la \u00faltima letra del nombre coinciden o no. Pru\u00e9balo con \"Ana\", \"ana\", \"Angel\", \"Amanda\" y \"David\"</p>"},{"location":"ud03/ud03ac/#ejercicio-20-validar","title":"Ejercicio 20 <code>Validar</code>","text":"<p>Se desea implementar un programa que determine si dos datos <code>x</code> e <code>y</code> de entrada son v\u00e1lidos. Un par de datos es v\u00e1lido si es uno de los que aparecen en la siguiente tabla:</p> Text Only<pre><code>| x :  | a    | a    | a    | a    | a    | b    | b    | b    | b    | b    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| y :  | 1    | 3    | 5    | 7    | 9    | 2    | 4    | 6    | 8    | 10   |\n\nSe pide implementar un programa que lea de teclado el valor de `x` y el valor de `y`, e indique por pantalla \"VALIDOS\" o \"NO VALIDOS\". Se pide hacerlo de forma que no se utilice ninguna estructura condicional (if, switch,...), es decir, se calcular\u00e1 una expresi\u00f3n booleana que determine si x e y son v\u00e1lidos. Se procurar\u00e1 que la expresi\u00f3n booleana propuesta sea breve y concisa.\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicios-bucles-simples","title":"Ejercicios <code>bucles simples</code>","text":""},{"location":"ud03/ud03ac/#ejercicio-21-sencilloswhile","title":"Ejercicio 21 <code>SencillosWhile</code>","text":"<p>Crear una clase llamada <code>SencillosWhile</code> y crear en \u00e9l m\u00e9todos que realicen las siguientes tareas.</p> <ol> <li>(imparesHastaN) Dado un n\u00ba entero <code>n</code> introducido por el usuario, mostrar los n\u00fameros impares que hay entre 1 y <code>n</code>. Por ejemplo, si n es 8 mostrar\u00e1 1 3 5 7</li> <li>(nImpares) Dado un n\u00ba entero <code>n</code> introducido por el usuario, mostrar los <code>n</code> primeros n\u00fameros impares. Por ejemplo, si <code>n</code> es 3 mostrar\u00e1 1 3 5 (3 primeros impares)</li> <li>(cuentaAtras) Dado un entero <code>n</code> introducido por el usuario, mostrar una cuenta atr\u00e1s partiendo de <code>n</code>: <code>n</code>, <code>n-1</code>, \u2026. 5, 4, 3, 2, 1, 0</li> <li>(sumaNPrimeros) Dado un entero <code>n</code> introducido por el usuario, mostrar la suma de los n\u00fameros entre 1 y <code>n</code>.</li> <li>(mostrarDivisoresN) Dado un entero <code>n</code> introducido por el usuario, mostrar todos sus divisores, incluidos el 1 y el mismo <code>n</code>. Por ejemplo, si <code>n</code> es 12 mostrar\u00eda 1, 2, 3, 4, 6 y 12</li> <li>(sumaDivisoresN) Dado un entero <code>n</code> introducido por el usuario, mostrar la suma de todos sus divisores, sin incluir al propio <code>n</code>. Por ejemplo, si <code>n</code> es 12 sumar\u00e1 1, 2, 3, 4 y 6 = 16</li> </ol>"},{"location":"ud03/ud03ac/#ejercicio-22-sencillosfor","title":"Ejercicio 22 <code>SencillosFor</code>","text":"<p>Crear una clase llamada \"SencillosFor\" y crear en \u00e9l los mismos m\u00e9todos que en el ejercicio anterior, pero utilizando la sentencia <code>for</code> en lugar de <code>while</code></p>"},{"location":"ud03/ud03ac/#ejercicio-23-potenciasde2","title":"Ejercicio 23 <code>PotenciasDe2</code>","text":"<p>Dado un entero <code>n</code> introducido por el usuario, mostrar las <code>n</code> primeras potencias de 2. Es decir, 2^0^, 2^1^, 2^2^, 2^3^, \u2026, 2^n^. Soluciona el ejercicio sin utilizar <code>Math.pow</code>. Ten en cuenta que, por ejemplo, 2^3^ = 1 2 * 2 * 2 o que 2^4^ = 1 2 * 2 * 2 * 2</p>"},{"location":"ud03/ud03ac/#ejercicio-24-etapas","title":"Ejercicio 24 <code>Etapas</code>","text":"<p>El ser humano pasa por una serie de etapas en su vida que, con car\u00e1cter general se asocian a las edades que aparecen en la tabla siguiente.  </p> Infancia Hasta los 10 a\u00f1os Pubertad De 11 a 14 a\u00f1os Adolescencia De 15 a 21 a\u00f1os Adultez De 22 a 55 a\u00f1os Vejez De 55 a 70 a\u00f1os Ancianidad A partir de los 71 a\u00f1os <p>Escribe un programa en el que el usuario introduzca las edades de una serie de personas y calcule y muestre que porcentaje de personas que se encuentran en cada etapa. En primer lugar el programa pedir\u00e1 el n\u00famero de personas que participan en la muestra y a continuaci\u00f3n solicitar\u00e1 la edad de cada una de ellas. El resultado ser\u00e1 similar al siguiente:</p> Bash<pre><code>Infancia: 5.3 %\nPubertad: 10.7 %\nAdolescencia: 21.2 %\n...\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-25-primo","title":"Ejercicio 25 <code>Primo</code>","text":"<p>Escribir un programa en el que el usuario escriba un n\u00famero entero y se le diga si se trata o no de un n\u00famero primo. Recuerda que un n\u00ba primo es aquel que solo es divisible por 1 y por s\u00ed mismo. </p>"},{"location":"ud03/ud03ac/#ejercicio-26-primos","title":"Ejercicio 26 <code>Primos</code>","text":"<p>Escribir un programa en el que el usuario escriba un n\u00famero entero y se le diga todos los n\u00fameros primos entre 1 y el n\u00famero introducido.</p>"},{"location":"ud03/ud03ac/#ejercicio-27-esprimomejorada","title":"Ejercicio 27 <code>esPrimoMejorada</code>","text":"<p>Haz una nueva versi\u00f3n del programa del ejercicio anterior teniendo en cuenta lo siguiente:  </p> <ul> <li>El \u00fanico n\u00famero par que es primo es el 2.</li> <li>Un n\u00famero n no puede tener divisores mayores que n/2</li> </ul>"},{"location":"ud03/ud03ac/#ejercicio-28-divisores","title":"Ejercicio 28 <code>Divisores</code>","text":"<p>Escribir un programa que muestre los tres primeros divisores de un n\u00famero n introducido por el usuario. Por ejemplo, si el usuario introduce el n\u00famero 45, el programa mostrar\u00e1 los divisores 1, 3 y 5. Ten en cuenta que la posibilidad de que el n\u00famero n tenga menos de 3 divisores. Prueba qu\u00e9 pasa si el usuario pide, por ejemplo, los tres primeros divisores de 7.  </p>"},{"location":"ud03/ud03ac/#ejercicio-29-sumaserie","title":"Ejercicio 29 <code>SumaSerie</code>","text":"<p>Dado un n\u00famero <code>n</code>, introducido por el usuario, calcula y muestra por pantalla la siguiente suma 1/1+1/2+1/3+ \u00b7\u00b7\u00b7 + 1/<code>n</code> </p>"},{"location":"ud03/ud03ac/#ejercicio-30-numerocifras","title":"Ejercicio 30 <code>numeroCifras</code>","text":"<p>Escribir un programa en el que el usuario introduzca un n\u00famero entero cualquiera (positivo, negativo o cero) y se le diga cuantas cifras tiene.  Pistas: \u00bfCuantas cifras tiene el n\u00ba 25688? \u00bfCu\u00e1ntas veces podemos dividir el n\u00ba 25688 por 10 hasta que se hace cero? Cuidado, el n\u00ba 0 tiene una cifra.</p>"},{"location":"ud03/ud03ac/#ejercicio-31-transportes","title":"Ejercicio 31 <code>Transportes</code>","text":"<p>Una empresa de transportes cobra 30\u20ac por cada bulto que transporta. Adem\u00e1s, si el peso total de todos los bultos supera los 300 kilos, cobra 0.9\u20ac por cada kg extra. Por \u00faltimo si el trasporte debe realizarse en s\u00e1bado, cobra un plus de 60\u20ac. La empresa no realiza el pedido si hay que transportar m\u00e1s de 30 bultos, si el peso total supera los 1000 kg o si se solicita hacerlo en domingo. Realizar un programa que solicite el n\u00famero de bultos, el d\u00eda de la semana (valor entre 1 y 7) y el peso de cada uno de los bultos y muestre el coste del transporte en caso de que pueda realizarse o un mensaje adecuado en caso contrario</p>"},{"location":"ud03/ud03ac/#ejercicio-32-containers","title":"Ejercicio 32 <code>Containers</code>","text":"<p>La capacidad de un buque que transporta containers est\u00e1 limitada tanto por la cantidad de containers como por el peso, pudiendo transportar un m\u00e1ximo de 100 containers y un m\u00e1ximo de 700 toneladas. Hacer un programa en el que se vaya introduciendo el peso de los containers (en toneladas) a medida que se cargan en el barco, hasta que se llegue al m\u00e1ximo de capacidad. Mostrar al final la cantidad de containers cargados y el peso total. En el momento en que se desee cargar un container que haga que la carga total supere las 700 toneladas, se dar\u00e1 por finalizada la carga, aunque pudieran existir containers menos pesados con posibilidad de ser cargados.</p>"},{"location":"ud03/ud03ac/#ejercicio-33-notas","title":"Ejercicio 33 <code>Notas</code>","text":"<p>Realizar un programa que permita introducir las notas de un examen de los alumnos de un curso. El usuario ir\u00e1 introduciendo las notas una tras otra. Se considerar\u00e1 finalizado el proceso de introducci\u00f3n de notas cuando el usuario introduzca una nota negativa. Al final, el programa le dir\u00e1:</p> <ul> <li>El n\u00famero de notas introducidas.</li> <li>El n\u00famero de aprobados (mayor o igual a 5 puntos)</li> <li>La nota media</li> </ul>"},{"location":"ud03/ud03ac/#ejercicio-34-notasextremas","title":"Ejercicio 34 <code>NotasExtremas</code>","text":"<p>Modificar el ejercicio anterior para que adem\u00e1s calcule la nota m\u00e1xima y la nota m\u00ednima.</p>"},{"location":"ud03/ud03ac/#ejercicios-bucles-anidados","title":"Ejercicios <code>bucles anidados</code>","text":""},{"location":"ud03/ud03ac/#ejercicio-35-edades","title":"Ejercicio 35 <code>Edades</code>","text":"<p>Programa que pida al usuario la edad de cinco personas. Si la suma de las edades es inferior a 200, el programa volver\u00e1 a solicitar las 5 edades.</p>"},{"location":"ud03/ud03ac/#ejercicio-36-notasporalumno","title":"Ejercicio 36 <code>NotasPorAlumno</code>","text":"<p>Programa que pida al usuario las notas de <code>A</code> alumnos en <code>S</code> asignaturas, alumno por alumno. <code>A</code> y <code>S</code> se definir\u00e1n en el programa como <code>CONSTANTES</code>.</p> Bash<pre><code>Alumno 1\nIntroduce nota de asignatura 1: 8\nIntroduce nota de asignatura 2:\n...\nAlumno 2\nIntroduce nota de asignatura 1:\n...\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-37-notasporasignatura","title":"Ejercicio 37 <code>NotasPorAsignatura</code>","text":"<p>Programa que pida al usuario las notas de <code>A</code> alumnos en <code>S</code> asignaturas, asignatura por asignatura. <code>A</code> y <code>S</code> se definir\u00e1n en el programa como <code>CONSTANTES</code>. </p> Bash<pre><code>Asignatura 1\nIntroduce nota del alumno 1: \nIntroduce nota del alumno 2:\n...\nAsignatura 2\nIntroduce nota del alumno 1:\n...\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-38-mediasporasignatura","title":"Ejercicio 38 <code>MediasPorAsignatura</code>","text":"<p>Repite el ejercicio anterior haciendo que se muestre la media de cada asignatura</p> Bash<pre><code>Asignatura 1\nIntroduce nota del alumno 1: \nIntroduce nota del alumno 2:\n...\nMedia asignatura 1: 8.5 puntos\n\nAsignatura 2\nIntroduce nota del alumno 1:\n...\nMedia asignatura 2: 6.5 puntos\n...\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-39-tablamult","title":"Ejercicio 39 <code>TablaMult</code>","text":"<p>Escribir un programa que permita al usuario introducir un n\u00famero <code>N</code> e imprima la tabla de multiplicar (del 0 al 10) de todos los n\u00fameros entre 1 y <code>N</code>. Ejemplo: Si el usuario introduce en n\u00famero 5, el programa imprimiria</p> Text Only<pre><code>Tabla del 1:\n1 por 0, 0\n1 por 1, 1\n1 por 2, 2\n...\n1 por 10, 10\n\nTabla del 2:\n2 por 0, 0\n2 por 1, 2\n....\n2 por 10, 20\n\nTabla del 3:\n...\n\nTabla del 5:\n...\n5 por 10, 50\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-40-primoshastan","title":"Ejercicio 40 <code>PrimosHastaN</code>","text":"<p>Programa que solicite al usuario un numero <code>n</code> y muestre todos los n\u00fameros primos menores o iguales que <code>n</code>.</p>"},{"location":"ud03/ud03ac/#ejercicio-41-combinarletras2","title":"Ejercicio 41 <code>CombinarLetras2</code>","text":"<p>Escribir un programa que muestre todas las palabras de dos letras que se pueden formar con los cuatro primeros caracteres del alfabeto en min\u00fasculas ('a', 'b', 'c', 'd'):</p> Text Only<pre><code>```sh\naa\nab\nac\nad\nba\nbb\nbc\nbd\n...\nda\ndb\ndc\ndd\n```\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-42-combinarletras3","title":"Ejercicio 42 <code>CombinarLetras3</code>","text":"<p>Repite el ejercicio anterior mostrando palabras de tres letras</p> Text Only<pre><code>```sh\naaa\naab\n...\nddc\nddd\n```\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-43-letraaletra","title":"Ejercicio 43 <code>LetraALetra</code>","text":"<p>Escribe un programa en el que se solicite al usuario un texto de forma repetida hasta que el usuario introduzca la cadena vac\u00eda. Con cada texto que introduzca el usuario se le mostrar\u00e1 car\u00e1cter a car\u00e1cter, cada car\u00e1cter en una l\u00ednea</p> Bash<pre><code>Introduce texto: Hola\nH\no\nl\na\nIntroduce texto: Casa\nC\na\ns\na\nIntroduce texto: \nFin del programa\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-44-dibujarfiguras1","title":"Ejercicio 44 <code>DibujarFiguras1</code>","text":"<p>Escribe una clase que contenga los m\u00e9todos que se indican a continuaci\u00f3n. En el m\u00e9todo main solicita al usuario las dimensiones de las figuras necesarias en cada caso y llama al m\u00e9todo correspondiente para que se muestre por pantalla</p> <ol> <li>(<code>void dibRecAsteriscos (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>* * * * * * *\n* * * * * * *\n* * * * * * *\n</code></pre> <ol> <li>(<code>void dibRecNumeros1 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n</code></pre> <ol> <li>(<code>void dibRecNumeros2 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>7 6 5 4 3 2 1\n7 6 5 4 3 2 1\n7 6 5 4 3 2 1\n</code></pre> <ol> <li>(<code>void dibRecNumeros3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>01 02 03 04 05 06 07\n08 09 19 11 12 13 14\n15 16 17 18 19 20 21\n</code></pre> <ol> <li>(<code>void dibDiagonal (int ancho, int alto)</code> dibuja un rect\u00e1ngulo con ceros y unos. Los 1 est\u00e1n en las posiciones en las que fila y columna coinciden. En el ejemplo ancho es 7 y alto es 3</li> </ol> Java<pre><code>1 0 0 0 0 0 0\n0 1 0 0 0 0 0\n0 0 1 0 0 0 0\n</code></pre> <ol> <li>(<code>void dibRecLetras (int ancho, int alto)</code> dibuja un rect\u00e1ngulo letras sucesivas comenzando por la \"a\". En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>a a a a a a a\nb b b b b b b\nc c c c c c c\n</code></pre> <ol> <li>(<code>void dibRecLetras2 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo letras sucesivas terminando por la \"a\". En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>c c c c c c c\nb b b b b b b\na a a a a a a\n</code></pre> <ol> <li>(<code>void dibRecLetras3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo letras sucesivas comenzando por la \"a\". En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>a b c d e f g\nh i j k l m n\no p q r s t u\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-45-dibujarfiguras2","title":"Ejercicio 45 <code>dibujarFiguras2</code>","text":"<p>Escribe una clase que contenga los m\u00e9todos que se indican a continuaci\u00f3n. En el m\u00e9todo main solicita al usuario las dimensiones de las figuras necesarias en cada caso y llama al m\u00e9todo correspondiente para que se muestre por pantalla</p> <ol> <li><code>void dibRectNumeros3 (int ancho, int alto</code> dibuja un rect\u00e1ngulo     utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>1 2 3 4 5 6 7 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 7 6 5 4 3 2 1\n</code></pre> <ol> <li><code>void dibRectAsteriscos1 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>* * * * * * *\n* * * * * * *\n* * * * * * *\n</code></pre> <ol> <li><code>void dibRectAsteriscos2 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos (*), espacios en blanco y el car\u00e1cter \u2018+\u2019, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>* + * + * + *\n* + * + * + *\n* + * + * + *\n</code></pre> <ol> <li><code>void dibRectAsteriscos3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> Bash<pre><code>* * * * * * *\n*           *\n* * * * * * *\n</code></pre> <ol> <li><code>void dibTriangulo1 (int base)</code> dibuja un tri\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo base es 5</li> </ol> Bash<pre><code>*\n* *\n* * * \n* * * * \n* * * * *\n</code></pre> <ol> <li><code>void dibTriangulo2 (int altura)</code> dibuja un tri\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo altura es 5</li> </ol> Bash<pre><code>           *\n         * *\n       * * * \n     * * * * \n   * * * * *\n</code></pre> <ol> <li><code>void dibTriangulo3 (int altura)</code> dibuja un tri\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo altura es 5</li> </ol> Bash<pre><code>        *\n      * * *\n    * * * * *\n  * * * * * * *\n* * * * * * * * *\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicios-switch","title":"Ejercicios <code>switch</code>","text":""},{"location":"ud03/ud03ac/#ejercicio-46-notastexto2","title":"Ejercicio 46 <code>NotasTexto2</code>","text":"<p>Escribir un programa que acepte del usuario la nota de un examen (valor num\u00e9rico entre 1 y 10) y muestre el literal correspondiente a dicha nota seg\u00fan (insuficiente, suficiente, bien, notable, sobresaliente). Hacerlo utilizando la sentencias switch. La nota que introduce el usuario tendr\u00e1 que ser un valor entero.</p>"},{"location":"ud03/ud03ac/#ejercicio-47-diasdelmes2","title":"Ejercicio 47 <code>DiasDelMes2</code>","text":"<p>Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el n\u00famero de d\u00edas que tiene el mes. Resolver utilizando la sentencias switch.</p>"},{"location":"ud03/ud03ac/#ejercicio-48-nombredelmes2","title":"Ejercicio 48 <code>NombreDelMes2</code>","text":"<p>Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el nombre del m\u00e9s (enero, febrero, etc). Resolver utilizando la sentencias switch.</p>"},{"location":"ud03/ud03ac/#ejercicio-49-calculadora2","title":"Ejercicio 49 <code>Calculadora2</code>","text":"<p>Escribir un programa para simular una calculadora. Considera que los c\u00e1lculos posibles son del tipo num1 operado num2, donde num1 y num2 son dos n\u00fameros reales cualesquiera y operador es una de entre: +, -, * y /. El programa pedir\u00e1 al usuario en primer lugar el valor num1, a continuaci\u00f3n el operador y finalmente el valor num2. Resolver utilizando la sentencias switch.</p>"},{"location":"ud03/ud03ac/#ejercicios-en-papel","title":"Ejercicios <code>en papel ...</code>","text":""},{"location":"ud03/ud03ac/#ejercicio-50-pregunta50","title":"Ejercicio 50 <code>Pregunta50</code>","text":"<p>Qu\u00e9 valor se asignar\u00e1 a consumo en la sentencia <code>if</code> siguiente si velocidad es 120?</p> Java<pre><code>if (velocidad &gt; 80)\n    consumo = 10;\nelse if (velocidad &gt; 100)\n    consumo = 12;\nelse if (velocidad &gt; 120)\n    consumo = 15;\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-51-pregunta51","title":"Ejercicio 51 <code>Pregunta51</code>","text":"<p>Encuentra y corrige los errores de los siguientes fragmentos de programa .</p> <ul> <li> <p>fragmento a</p> Java<pre><code>if x &gt; 25\n    y = x\nelse\n    y = z;\n</code></pre> </li> <li> <p>fragmento b</p> Java<pre><code>if (x&lt;0)\n    System.out.println(\"El valor de x es\" +x);\n    System.out.println (\"x es negativo\");\nelse\n    System.out.println (\"El valor de x es\"+x);\n    System.out.println (\"x es positivo\");\n</code></pre> </li> <li> <p>fragmento c</p> Java<pre><code>if (x = 0) System.out.println (\"x igual a cero\");\nelse System.out.println (\"x distinto de cero\");\n</code></pre> </li> </ul>"},{"location":"ud03/ud03ac/#ejercicio-52-pregunta52","title":"Ejercicio 52 <code>Pregunta52</code>","text":"<p>Cu\u00e1l es la salida exacta por pantalla del siguiente fragmento de programa</p> Java<pre><code>int x = 20;\nSystem.out.println(\"Comenzamos\");\nif (x&gt;= 20)\n    if (x&gt;50) System.out.println(\"Muy grande\");\n    else {\n        if (x%2 != 0) System.out.println(\"Impar\");\n    }\nelse if (x&lt;=20) System.out.println(\"Peque\u00f1o\");\nSystem.out.println(\"Terminamos\");\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-53-pregunta53","title":"Ejercicio 53 <code>Pregunta53</code>","text":"<p>En una tienda, por liquidaci\u00f3n, se aplican distintos descuentos en funci\u00f3n del total de las compras realizadas:</p> <ul> <li>Si total &lt; 500 \u20ac, no se aplica descuento.</li> <li>Si 500 \u20ac &lt;= total &lt;= 2000 \u20ac, se aplica un descuento del 30 %.</li> <li>Si total &gt; 2000e, entonces se aplica un descuento del 50 %</li> </ul> <p>\u00bfCual de los siguientes fragmentos de programa asigna a la variable desc el descuento correcto? Indica \"Si\" o \"NO\" al lado de cada fragmento</p> <ul> <li>fragmento a</li> </ul> Java<pre><code>double desc = 0.0;\nif (total &lt;= 500)\n if (total &gt;= 2000) desc = 30.0;\n else desc = 50.0;\ntotal = total * desc / 100.0;\n</code></pre> <ul> <li>fragmento b</li> </ul> Java<pre><code>double desc = 0.0;\nif (total &gt;= 500)\n if (total &lt;= 2000) desc = 30.0;\n else desc = 50.0;\ntotal = total * desc / 100.0;\n</code></pre> <ul> <li>fragmento c</li> </ul> Java<pre><code>double desc = 0.0;\nif (total &lt;= 2000){\n if (total &gt;= 500) desc = 30.0;\n } else desc = 50.0;\ntotal = total * desc / 100.0;\n</code></pre> <ul> <li>fragmento d</li> </ul> Java<pre><code>double desc = 0.0;\nif (total &gt; 500)\n if (total &lt; 2000) desc = 30.0;\n else desc = 50.0;\ntotal = total * desc /100.0;\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-54-pregunta54","title":"Ejercicio 54 <code>Pregunta54</code>","text":"<p>\u00bfQu\u00e9 salida producir\u00e1 el siguiente fragmento de programa si la variable entera platos vale 1? \u00bfY si  vale 3? \u00bfY si vale 0?</p> Java<pre><code>switch (platos ) {\n    case 1: System.out.println(\"\\nPrimer plato\");\n    case 2: System.out.println (\"\\nSegundo plato\");\n    case 3: System.out.println (\"\\nBebida\");\n            System.out.println (\"\\nPostre\");\n            break;\n    default: System.out.println(\"\\nCaf\u00e9\");\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-55-pregunta55","title":"Ejercicio 55 <code>Pregunta55</code>","text":"<p>Dados tres enteros a, b y c, y un booleano p, el siguiente an\u00e1lisis por casos establece el valor de p en funci\u00f3n de los valores de a, b y c:</p> Java<pre><code>si a &gt; b entonces p = cierto;\nsi a &lt; b entonces p = falso;\nsi a = b entonces \n    si a &gt; c entonces p = cierto;\n    si a &lt; c entonces p = falso;\n    si a = c entonces p = falso;\n</code></pre> <p>Se pide la traducci\u00f3n de dicho an\u00e1lisis por casos a Java mediante:</p> <ul> <li>Una \u00fanica instrucci\u00f3n if sin anidamientos.</li> <li>Una \u00fanica instrucci\u00f3n, de la forma p = ... , sin sentencias if ni utilizar el operador ternario.</li> <li>Una \u00fanica instrucci\u00f3n, de la forma p = ..., que utilice el operador ternario.</li> </ul>"},{"location":"ud03/ud03ac/#trazas","title":"Trazas","text":"<p>Indica cual ser\u00e1 la salida producida por los siguientes programas, teniendo en cuenta los datos de entrada:</p>"},{"location":"ud03/ud03ac/#traza-01","title":"Traza 01","text":"<p>Datos de entrada: 2, 5</p> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,a;\n    x = tec.nextInt();\n    x = tec.nextInt();\n    a= x+x;\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    a = x*y;\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    System.out.println(a);\n    a = x*y;\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    a = a+x+y;\n    a = a+a;\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x;\n    a = doble(x);\n    System.out.format (\"%d%n%d%n%d\",x,y,a);\n}\npublic static int doble(int num){\n    return 2*num;\n}\n</code></pre> Java<pre><code>public static void main (String[] args) {\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x;\n    doble(a);\n    System.out.format(\"%d%n%d%n%d%n\",x,y,a);\n}\npublic static void doble(int x){\n    x = 2*x;\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = calcular(y,x);\n    System.out.format(\"%d%n%d%n%d%n\",x,y,a);\n}\npublic static int calcular (int x, int y){\n    return x-y;\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    y = calcular(x);\n    a = calcular(y);\n    System.out.format(\"%d%n%d%n%d%n\",x,y,a);\n}\npublic static int calcular (int x){\n    return x*x;\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-02","title":"Traza 02","text":"<p>Datos de entrada: 2, 5, 7</p> Java<pre><code>public static void main (String[] args){\n    int k,l,m,x,y,z;\n    k = tec.nextInt();\n    l = tec.nextInt();\n    m = tec.nextInt();\n    x = k+l;\n    if (x != m) {\n        y = k*l;\n        z = 0;\n    } else {\n        y = 0;\n        z = k-l;\n    }\n    if (z &lt; 0) z = -z;\n    System.out.format(\"%d%n%d%n%d%n\",x,y,z);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-03","title":"Traza 03","text":"<p>Datos de entrada: 2, 5, 7, 9, -9, -7, -5, -2</p> Java<pre><code>public static void main (String[] args){\n    int x,y;\n    x = 0;\n    y = tec.nextInt();\n    while(!(y&lt;0)) {\n        x+=-y;\n        y = tec.nextInt();\n        System.out.format(\"%d, %d\",x,y);\n    }\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    int x,y,z,a;\n    x = y = z = a = 0;\n    x = tec.nextInt();\n    while(x&gt;0) {\n        if (y &lt; z) y = tec.nextInt();\n        else z= tec.nextInt();\n        a = a-x+y*z;\n        x = tec.nextInt();\n        System.out.format(\"%d, %d, %d, %d\",a,x,y,z);\n    }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-04","title":"Traza 04","text":"<p>Datos de entrada: 5, 5, 7, -5, -4, 2</p> Java<pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0 &amp;&amp; y &gt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0 &amp;&amp; y &lt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0 || y &gt;= 0) {\n       x = tec.nextInt();\n       y = tec.nextInt();\n       a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-05","title":"Traza 05","text":"<p>Datos de entrada: 5, 5, 7, -5, -4, 2</p> Java<pre><code>public static void main(String[] args) {\n    int x, y;\n\n    x = 2;\n    y = 3;\n    while (x + y &gt; 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        x += y;\n        y = x - y;\n        System.out.format(\"%d, %d\", x, y);\n    }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-06","title":"Traza 06","text":"<p>Datos de entrada: 2, 4, 7, 5, -6, -3, 6, 6</p> Java<pre><code>public static void main (String[] args){\n    int a,b;\n    do{\n        a = tec.nextInt();\n        b = tec.nextInt();\n        for (int i=a ; i&lt;=b ; i++)\n            System.out.println(i);\n    } while (a!=b)\n}\n</code></pre> Java<pre><code>public static void main (String[] args){\n    int a,b;\n    a=5;\n    b=5;\n    do {\n        for (int i=a ; i&lt;=b ; i++)\n           System.out.println(i);\n        a = tec.nextInt();\n        b = tec.nextInt();\n    } while (a!=b);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-07","title":"Traza 07","text":"<p>Datos de entrada: 3, 3, 5, 5, -3, -7, 2, 2</p> Java<pre><code>public static void main (String[] args){\n    int x,y;\n    do {\n        x = tec.nextInt();\n        b = tec.nextInt();\n    } while (x==y);\n    if (x&gt;y) {\n        x=y;\n        y=x;\n    }\n    System.out.format(\"%d %d %n\",x,y);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-08","title":"Traza 08","text":"<p>Datos de entrada: 3, 2, 1, 4</p> Java<pre><code>public static void main (String[] args){\n    int a=0,b;\n    b = tec.nextInt();\n    for(int i=1;i&lt;=b,i++) a=(a+i)*i;\n    System.out.println(a);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-09","title":"Traza 09","text":"<p>Datos de entrada:</p> Java<pre><code>public static void main (String[] args){\n    int x,y;\n    for (x=3;x&gt;=1;x--){\n        for(y=1;y&lt;=x;y++) System.out.println(x);\n            System.out.println();\n    }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-10","title":"Traza 10","text":"<p>Datos de entrada:</p> Java<pre><code>public static void main (String[] args){\n    int x,y;\n    x=0;\n    y=0;\n    for (int i=1;i&lt;=2;i++) {\n        for (int j=1;j&lt;=3;j++) x=(x+i)*j;\n            y+=x;\n    }\n    System.out.println(\"%d %d %n\",x,y);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#traza-11","title":"Traza 11","text":"<p>Datos de entrada: 4, 5, 6, 7, 8, 9</p> Java<pre><code>public static void main (String[] args){\n   int x,y;\n   do x = tec.nextInt();\n\n   while (x&lt;=5);\n       y=0;\n\n   for (int i=12;i&gt;=x;i-=2) y+=(x*i);\n       System.out.println(y);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#excepciones","title":"Excepciones","text":""},{"location":"ud03/ud03ac/#ejercicio-57-_57edades","title":"Ejercicio 57 <code>_57Edades</code>","text":"<p>Escribe un programa que solicite al usuario la edad de cinco personas y calcule la media. La edad  de una persona debe ser un valor entero comprendido en el rango [0,110]. Realiza tres versiones:</p> Text Only<pre><code>1. Si se introduce mal la edad de una persona se vuelve a pedir la edad de esa persona.\n2. Si se introduce mal la edad de una persona, el programa muestra un mensaje de error, no calcula la media y termina.\n3. Si se introduce mal la edad de una persona, el programa vuelve a solicitar la edad de las cinco personas (comienza el proceso).\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-58-division","title":"Ejercicio 58 <code>Division</code>","text":"<p>Ejecuta este programa haciendo que la entrada del usuario provoque una excepci\u00f3n. Anota el nombre de la excepci\u00f3n que se produce y cu\u00e1l es la jerarqu\u00eda de objetos de la que desciende.</p> <p>Programa que solicita dos n\u00fameros enteros (a y b) y muestra el resultado de su divisi\u00f3n (a/b).</p> <ol> <li>El usuario introduce 0 como valor de b.</li> <li>El usuario introduce letras cuando el programa espera n\u00fameros enteros.</li> <li>El usuario introduce un n\u00famero real cuando el programa espera un entero.</li> </ol>"},{"location":"ud03/ud03ac/#ejercicio-59-posicion","title":"Ejercicio 59 <code>Posicion</code>","text":"<p>Ejecuta este programa haciendo que la entrada del usuario provoque una excepci\u00f3n. Anota el nombre de la excepci\u00f3n que se produce y cu\u00e1l es la jerarqu\u00eda de objetos de la que desciende.</p> <p>Programa que solicita al usuario su nombre y una posici\u00f3n dentro del nombre. Se muestra al usuario la letra del nombre cuya posici\u00f3n se ha indicado. Por ejemplo:</p> Bash<pre><code>Introduce nombre: Javi\nIntroduce posici\u00f3n: 2\nEn la posici\u00f3n 2 de Javi est\u00e1 la letra a\n</code></pre> <p>El usuario introduce una posici\u00f3n inv\u00e1lida.</p>"},{"location":"ud03/ud03ac/#ejercicio-60-dividir2","title":"Ejercicio 60 <code>Dividir2</code>","text":"<p>Repite el ejercicio anterior utilizando m\u00e9todos y llam\u00e1ndolos desde el m\u00e9todo <code>main</code>:</p> <p>Un m\u00e9todo <code>dividir</code> que devuelva el cociente de dos n\u00fameros que recibe como par\u00e1metro.</p> <p>Ejecuta los programas provocando errores (como en el ejercicio anterior) y observa los mensajes que se generan.</p>"},{"location":"ud03/ud03ac/#ejercicio-61-posicion2","title":"Ejercicio 61 <code>Posicion2</code>","text":"<p>Un m\u00e9todo <code>letraNombre</code> que, dados un String <code>nombre</code> y un entero <code>pos</code>, devuelva el car\u00e1cter del nombre que ocupa la posici\u00f3n indicada.</p> <p>Ejecuta los programas provocando errores (como en el ejercicio anterior) y observa los mensajes que se generan.</p>"},{"location":"ud03/ud03ac/#ejercicio-62-division3","title":"Ejercicio 62 <code>Division3</code>","text":"<p>Escribir un programa que divida dos n\u00fameros que se reciben en <code>main</code> en <code>args[0]</code> y <code>args[1]</code>. </p> <p>Ejemplo:</p> Bash<pre><code>$ java dividir 10 5\n10/5 es igual a 2\n</code></pre> <p>Donde 10 y 5 son <code>args[0]</code> y <code>args[1]</code> respectivamente, es decir los par\u00e1metros con que llamamos al programa dividir.</p>"},{"location":"ud03/ud03ac/#ejercicio-64-pregunta64","title":"Ejercicio 64 <code>Pregunta64</code>","text":"<p>Justifica por qu\u00e9 se produce error en el siguiente fragmento de c\u00f3digo</p> Java<pre><code>try {\n    System.out.println(\"Introduce edad: \");\n    int edad = tec.nextInt();\n    if (edad &gt;= 18) {\n        System.out.println(\"Mayor edad\");\n    } else {\n        System.out.println(\"Menor edad\");\n    }\n    System.out.println(\"Introduce nif\");\n    String nif = tec.next();\n    int numero = Integer.parseInt(nif.substring(0, nif.length() - 1));\n    char letra = nif.charAt(nif.length() - 1);\n    System.out.println(\"Numero: \" + numero);\n    System.out.println(\"Letra: \" + letra);\n} catch (Exception e){  \n    System.out.println(\"Deb\u00edas introducir un n\u00famero\");\n} catch (NumberFormatException e) {\n    System.out.println(\"El nif es incorrecto\");\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-65-pregunta65","title":"Ejercicio 65 <code>Pregunta65</code>","text":"<p>Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> Java<pre><code>public class Uno {\n      private static int metodo()  {\n            int valor=0;\n            try  {\n                  valor = valor + 1;\n                  valor = valor + Integer.parseInt(\"42\") ;\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final del try: \" + valor);\n            } catch(NumberFormatException e)  {\n                  valor = valor + Integer.parseInt (\"42\");\n                  System.out.println(\"Valor al final del catch: \" + valor) ;\n            }\n            finally  {\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final de finally: \" + valor) ;\n            }\n            valor = valor + 1;\n            System.out.println (\"Valor antes del return: \" + valor) ;\n            return valor;\n      }\n\n      public static void main(String[] args)  {\n            try {\n                  System.out.println (metodo());\n            }  catch (Exception e)  {\n                  System.err.println(\"Excepcion en metodo()\") ;\n                  e.printStackTrace();\n            }\n      }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-66-pregunta66","title":"Ejercicio 66 <code>Pregunta66</code>","text":"<p>Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> Java<pre><code>public class Dos {\n    private static int metodo()  {\n        int valor=0;\n        try {\n            valor = valor+1;\n            valor = valor + Integer.parseInt(\"W\");\n            valor = valor + 1;\n            System.out.println(\"Valor al final del try: \" + valor);\n        } catch(NumberFormatException e) {\n            valor = valor + Integer.parseInt(\"42\");\n            System.out.println(\"Valor al final del catch: \" + valor) ;\n        } finally {\n            valor = valor + 1;\n            System.out.println(\"Valor al final de finally: \" + valor) ;\n        }\n        valor = valor + 1;\n        System.out.println (\"Valor antes del return: \" + valor) ;\n        return valor ;\n    }\n\n    public static void main (String[] args)  {\n        try {\n            System .out.println(metodo());\n        } catch (Exception e) {\n            System.err.println(\"Excepcion en metodo() \");\n            e.printStackTrace();\n        }\n   }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-67-pregunta67","title":"Ejercicio 67 <code>Pregunta67</code>","text":"<p>Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> Java<pre><code>public class Tres {\n    private static int metodo()  {\n        int valor = 0;\n        try {\n             valor = valor +1;\n             valor = valor + Integer.parseInt(\"W\");\n             valor = valor + 1;\n             System.out.println(\"Valor al final del try : \" + valor);\n        } catch (NumberFormatException e) {\n             valor = valor + Integer.parseInt(\"W\");\n             System.out.println(\"Valor al final del catch : \" + valor);\n        } finally {\n             valor = valor + 1;\n             System.out.println(\"Valor al final de finally: \" + valor);\n        }\n        valor = valor + 1;\n        System.out.println (\"Valor antes del return: \" + valor);\n        return valor ;\n    }\n\n    public static void main (String[ ] args)\n    {\n        try {\n            System.out.println(metodo ());\n        } catch (Exception e) {\n            System.err.println(\"Excepcion en metodo()\") ;\n            e.printStackTrace();\n        }\n   }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-68-pregunta68","title":"Ejercicio 68 <code>Pregunta68</code>","text":"<p>Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> Java<pre><code>import java.io.*;\n\npublic class Cuatro\n{\n    private static int metodo()  {\n        int valor = 0;\n        try {\n            valor = valor+1;\n            valor = valor + Integer.parseInt(\"W\");\n            valor = valor + 1;\n            System.out.println(\"Valor al final del try : \" + valor) ;\n            throw new IOException();\n        } catch (IOException e)  {\n            valor = valor + Integer.parseInt(\"42\");\n            System.out.println(\"Valor al final del catch : \" + valor);\n        } finally {\n            valor = valor + 1;\n            System.out.println(\"Valor al final de finally: \" + valor);\n        }\n        valor = valor + 1;\n        System.out.println (\"Valor antes del return: \" + valor) ;\n        return valor ;\n   }\n\n   public static void main(String[] args)  {\n        try {\n            System.out.println(metodo());\n        } catch (Exception e) {\n            System.err.println(\"Excepcion en metodo()\");\n            e.printStackTrace();\n        }\n   }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-69-pregunta69","title":"Ejercicio 69 <code>Pregunta69</code>","text":"<p>Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase:</p> <ol> <li>Si se ejecuta con java Cinco casa</li> <li>Si se ejecuta con java Cinco 0</li> <li>Si se ejecuta con java Cinco 7</li> </ol> Java<pre><code>public class Cinco {\n   public static void main(String args[])  {\n      try  {\n            int a = Integer.parseInt(args[0]);\n            System.out.println(\"a = \" + a);\n            int b=42/a;\n            String c = \"hola\";\n            char d = c.charAt(50);\n      }  catch (ArithmeticException e) {\n         System.out.println(\"div por 0: \" + e);\n      }  catch (IndexOutOfBoundsException e) {\n         System.out.println(\"\u00cdndice del String fuera de l\u00edmites: \" + e);\n      }  finally {\n          System.out.println(\"Ejecuci\u00f3n de finally\");\n      }\n   }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-70-pregunta70","title":"Ejercicio 70 <code>Pregunta70</code>","text":"<p>Indica cu\u00e1l ser\u00e1 la salida del siguiente programa y por qu\u00e9</p> Java<pre><code>public class Seis {\n   public static void procA()  {\n       try {\n           System.out.println(\"dentro del procA\"); 2\n           throw new RuntimeException(\"demo\"); 3\n       } finally {\n           System.out.println(\"Finally del procA\"); 4\n       }\n    }\n\n   public static void procB() {\n       try  {\n           System.out.println(\"dentro del procB\"); 6\n           return; 7\n       } finally {\n           System.out.println(\"finally del procB\"); 8\n       }\n    }\n\n    public static void main(String args[])  {\n        try  {\n            procA(); 1\n        } catch(Exception e) {\n            procB(); 5\n        }\n     }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#ejercicio-71-pregunta71","title":"Ejercicio 71 <code>Pregunta71</code>","text":"<p>Indica cu\u00e1l ser\u00e1 la salida del siguiente programa y por qu\u00e9</p> Java<pre><code>public class Siete {\n   public static void metodo() {\n       try  {\n           throw new NullPointerException(\"demo\"); 2\n       } catch (NullPointerException e) {\n           System.out.println(\"capturada en m\u00e9todo\"); 3\n           throw e; 4\n       }\n    }\n\n    public static void main (String args[])  {\n        try   {\n            metodo(); 1\n        }  catch(NullPointerException e)  {\n           System.out.println(\"capturada en main \" + e); 5\n        }\n    }\n}\n</code></pre>"},{"location":"ud03/ud03ac/#actividades","title":"Actividades","text":""},{"location":"ud03/ud03ac/#actividad-01","title":"Actividad 01","text":"<p>Transforma el siguiente bucle for en un bucle while:</p> Java<pre><code>for (i=5; i&lt;15; i++) { \n    System.out.println(i);\n}\n</code></pre>"},{"location":"ud03/ud03ac/#actividad-02","title":"Actividad 02","text":"<p>Programa que muestre por pantalla los 5 primeros n\u00fameros pares. </p>"},{"location":"ud03/ud03ac/#actividad-03","title":"Actividad 03","text":"<p>Programa que muestre por pantalla del n\u00famero 200 al 300.</p>"},{"location":"ud03/ud03ac/#actividad-04","title":"Actividad 04","text":"<p>Programa que muestre en pantalla la tabla de multiplicar del 1 al 10 con el formato:</p> Bash<pre><code>...\nTabla del 2\n***********\n2 x 1 = 2\n2 x 2 = 4\n...\n2 x 10 = 20\n...\nTabla del 3\n***********\n...\n</code></pre>"},{"location":"ud03/ud03ac/#actividad-05","title":"Actividad 05","text":"<p>Programa que muestre los n\u00fameros del 1 al 100 sin mostrar los m\u00faltiplos de 5.</p>"},{"location":"ud03/ud03ac/#actividad-06","title":"Actividad 06","text":"<p>Leer un n\u00famero y mostrar su cuadrado, repetir el proceso hasta que se introduzca un n\u00famero negativo.</p>"},{"location":"ud03/ud03ac/#actividad-07","title":"Actividad 07","text":"<p>Leer un n\u00famero e indicar si es positivo o negativo. El proceso se repetir\u00e1 hasta que se introduzca un 0.</p>"},{"location":"ud03/ud03ac/#actividad-08","title":"Actividad 08","text":"<p>Leer n\u00fameros hasta que se introduzca un 0. Para cada uno indicar si es par o impar.</p>"},{"location":"ud03/ud03ac/#actividad-09","title":"Actividad 09","text":"<p>Pedir n\u00fameros hasta que se teclee uno negativo, y mostrar cu\u00e1ntos n\u00fameros se han introducido.</p>"},{"location":"ud03/ud03ac/#actividad-10","title":"Actividad 10","text":"<p>Realizar un juego para adivinar un n\u00famero <code>X</code>. Para ello pedir un n\u00famero <code>N</code>, y luego ir pidiendo n\u00fameros indiando \"mayor\" o \"menor\" seg\u00fan sea mayor o menor con respecto a <code>X</code>. El proceso termina cuando el usuario acierta.</p>"},{"location":"ud03/ud03ac/#actividad-11","title":"Actividad 11","text":"<p>Pedir n\u00fameros hasta que se teclee un 0, mostrar la suma de todos los n\u00fameros introducidos.</p>"},{"location":"ud03/ud03ac/#actividad-12","title":"Actividad 12","text":"<p>Pedir n\u00fameros hasta que se introduzca uno negativo, y calcular la media.</p>"},{"location":"ud03/ud03ac/#actividad-13","title":"Actividad 13","text":"<p>Pedir un n\u00famero <code>N</code>, y mostrar todos los n\u00fameros del 1 al <code>N</code>.</p>"},{"location":"ud03/ud03ac/#actividad-14","title":"Actividad 14","text":"<p>Escribir todos los n\u00fameros del 100 al 0 de 7 en 7. </p>"},{"location":"ud03/ud03ac/#actividad-15","title":"Actividad 15","text":"<p>Pedir 15 n\u00fameros y escribir la suma total.</p>"},{"location":"ud03/ud03ac/#actividad-16","title":"Actividad 16","text":"<p>Dise\u00f1ar un programa que muestre el producto de los 10 primeros n\u00fameros impares.</p>"},{"location":"ud03/ud03ac/#actividad-17","title":"Actividad 17","text":"<p>Pedir un n\u00famero y calcular su factorial (el factorial se representa con el simbolo  <code>!</code>).</p> <p>\u200b       Aqu\u00ed tienes el factorial de los 5 primeros n\u00fameros enteros:</p> Bash<pre><code>1! = 1\n2! = 2 * 1 = 2\n3! = 3 * 2 * 1 = 6\n4! = 4 * 3 * 2 * 1 = 24\n5! = 5 * 4 * 3 * 2 * 1 = 120\n</code></pre>"},{"location":"ud03/ud03ac/#actividad-18","title":"Actividad 18","text":"<p>Pedir 10 n\u00fameros. Mostrar la media de los n\u00fameros positivos, la media de los n\u00fameros negativos y la cantidad de ceros.</p>"},{"location":"ud03/ud03ac/#actividad-19","title":"Actividad 19","text":"<p>Pedir 10 sueldos. Mostrar su suma y cuantos hay mayores de 1000\u20ac.</p>"},{"location":"ud03/ud03ac/#actividad-20","title":"Actividad 20","text":"<p>Dadas las edades y alturas de 5 alumnos, mostrar la edad y la estatura media, la cantidad de alumnos mayores de 18 a\u00f1os, y la cantidad de alumnos que miden m\u00e1s de 1.75.</p>"},{"location":"ud03/ud03ac/#actividad-21","title":"Actividad 21","text":"<p>Pide un n\u00famero (que debe estar entre 0 y 10) y mostrar la tabla de multiplicar de dicho n\u00famero.</p>"},{"location":"ud03/ud03ac/#actividad-22","title":"Actividad 22","text":"<p>Dadas 6 notas, escribir la cantidad de alumnos aprobados y suspensos. </p>"},{"location":"ud03/ud03ac/#actividad-23","title":"Actividad 23","text":"<p>Pedir un n\u00famero <code>N</code>, introducir <code>N</code> sueldos, y mostrar el sueldo m\u00e1ximo. </p>"},{"location":"ud03/ud03ac/#actividad-24","title":"Actividad 24","text":"<p>Pedir 10 n\u00fameros, y mostrar al final si se ha introducido alguno negativo.</p>"},{"location":"ud03/ud03ac/#actividad-25","title":"Actividad 25","text":"<p>Pedir 5 calificaciones de alumnos y decir al final si hay alg\u00fan suspenso.</p>"},{"location":"ud03/ud03ac/#actividad-26","title":"Actividad 26","text":"<p>Pedir 5 n\u00fameros e indicar si alguno es m\u00faltiplo de 3.</p>"},{"location":"ud03/ud03ac/#actividad-27","title":"Actividad 27","text":"<p>Realiza un programa que pida una hora por teclado y que muestre luego buenos d\u00edas, buenas tardes o buenas noches seg\u00fan la hora. Se utilizar\u00e1n los tramos de 6 a 12, de 13 a 20 y de 21 a 5. respectivamente. S\u00f3lo se tienen en cuenta las horas, los minutos no se deben introducir por teclado.</p>"},{"location":"ud03/ud03ac/#actividad-28","title":"Actividad 28","text":"<p>Escribe un programa en que dado un n\u00famero del 1 a 7 escriba el correspondiente nombre del d\u00eda de la semana.</p>"},{"location":"ud03/ud03ac/#actividad-29","title":"Actividad 29","text":"<p>Escribe un programa que calcule el salario semanal de un trabajador teniendo en cuenta que las horas ordinarias (40 primeras horas de trabajo) se pagan a 12 euros la hora. A partir de la hora 41, se pagan a 16 euros la hora.</p>"},{"location":"ud03/ud03ac/#actividad-30","title":"Actividad 30","text":"<p>Realiza un programa que calcule la media de tres notas.</p>"},{"location":"ud03/ud03ac/#actividad-31","title":"Actividad 31","text":"<p>Ampl\u00eda el programa anterior para que diga la nota del bolet\u00edn (insuficiente, suficiente, bien, notable o sobresaliente).</p>"},{"location":"ud03/ud03ac/#actividad-32","title":"Actividad 32","text":"<p>Escribe un programa que nos diga el hor\u00f3scopo a partir del d\u00eda y el mes de nacimiento.</p>"},{"location":"ud03/ud03ac/#actividad-33","title":"Actividad 33","text":"<p>Realiza un minicuestionario con 4 preguntas tipo test sobre las asignaturas que se imparten en el curso. Cada pregunta acertada sumar\u00e1 un punto. El programa mostrar\u00e1 al final la calificaci\u00f3n obtenida.</p>"},{"location":"ud03/ud03ac/#actividad-34","title":"Actividad 34","text":"<p>Calcula la nota de un trimestre de la asignatura Programaci\u00f3n. El programa pedir\u00e1 las dos notas que ha sacado el alumno en los dos primeros controles. Si la media de los dos controles da un n\u00famero mayor o igual a 5, el alumno est\u00e1 aprobado y se mostrar\u00e1 la media. En caso de que la media sea un n\u00famero menor que 5, el alumno habr\u00e1 tenido que hacer el examen de recuperaci\u00f3n que se califica como apto o no apto, por tanto se debe preguntar al usuario \u00bfCu\u00e1l ha sido el resultado de la recuperaci\u00f3n? (apto/no apto). Si el resultado de la recuperaci\u00f3n es apto, la nota ser\u00e1 un 5; en caso contrario, la nota ser\u00e1 1.</p> <p>Ejemplo 1:</p> Bash<pre><code>Nota del primer control: 7 Nota del segundo control: 10\nTu nota de Programaci\u00f3n es 8.5\n</code></pre> <p>Ejemplo 2:</p> Bash<pre><code>Nota del primer control: 6 Nota del segundo control: 3\n\u00bfCu\u00e1l ha sido el resultado de la recuperaci\u00f3n? (apto/no apto): apto\nTu nota de Programaci\u00f3n es 5\n</code></pre> <p>Ejemplo 3:</p> Bash<pre><code>Nota del primer control: 6 Nota del segundo control: 3\n\u00bfCu\u00e1l ha sido el resultado de la recuperaci\u00f3n? (apto/no apto): no apto\nTu nota de Programaci\u00f3n es 1\n</code></pre>"},{"location":"ud03/ud03ac/#actividad-35","title":"Actividad 35","text":"<p>Muestra los n\u00fameros m\u00faltiplos de 5 entre el 0 y el 100 utilizando un bucle <code>for</code>. </p>"},{"location":"ud03/ud03ac/#actividad-36","title":"Actividad 36","text":"<p>Muestra los n\u00fameros m\u00faltiplos de 5 entre el 0 y el 100 utilizando un bucle <code>while</code>.</p>"},{"location":"ud03/ud03ac/#actividad-37","title":"Actividad 37","text":"<p>Muestra los n\u00fameros m\u00faltiplos de 5 entre el 0 y el 100 utilizando un bucle <code>do while</code>.</p>"},{"location":"ud03/ud03ac/#actividad-38","title":"Actividad 38","text":"<p>Muestra los n\u00fameros del 320 al 160, contando de 20 en 20 hacia atr\u00e1s utilizando un bucle <code>for</code>.</p>"},{"location":"ud03/ud03ac/#actividad-39","title":"Actividad 39","text":"<p>Muestra los n\u00fameros del 320 al 160, contando de 20 en 20 hacia atr\u00e1s utilizando un bucle <code>while</code></p>"},{"location":"ud03/ud03ac/#actividad-40","title":"Actividad 40","text":"<p>Muestra los n\u00fameros del 320 al 160, contando de 20 en 20 utilizando un bucle <code>do-while</code>.</p>"},{"location":"ud03/ud03ac/#actividad-41","title":"Actividad 41","text":"<p>Realiza el control de acceso a una caja fuerte. La combinaci\u00f3n ser\u00e1 un n\u00famero de 4 cifras. El programa nos pedir\u00e1 la combinaci\u00f3n para abrirla. Si no acertamos, se nos mostrar\u00e1 el mensaje \" Lo siento, esa no es la combinaci\u00f3n\" y si acertamos se nos dir\u00e1 \"La caja fuerte se ha abierto satisfactoriamente\" . Tendremos cuatro oportunidades para abrir la caja fuerte.</p>"},{"location":"ud03/ud03ac/#actividad-42","title":"Actividad 42","text":"<p>Escribe un programa que muestre en tres columnas, el cuadrado y el cubo de los 5 primeros n\u00fameros enteros a partir de uno que se introduce por teclado.</p>"},{"location":"ud03/ud03ac/#actividad-43","title":"Actividad 43","text":"<p>Escribe un programa que pida una base y un exponente (entero positivo) y que calcule la potencia. (sin usar <code>Math</code>)</p>"},{"location":"ud03/ud03ac/#actividad-44","title":"Actividad 44","text":"<p>Realiza un programa que sume los 100 n\u00fameros siguientes a un n\u00famero entero y positivo introducido por teclado. Se debe comprobar que el dato introducido es correcto (que es un n\u00famero positivo).</p>"},{"location":"ud03/ud03ac/#actividad-45","title":"Actividad 45","text":"<p>Escribe un programa que obtenga los n\u00fameros enteros comprendidos entre dos n\u00fameros introducidos por teclado y validados como distintos, el programa debe empezar por el menor de los enteros introducidos e ir incrementando de 7 en 7.</p>"},{"location":"ud03/ud03ac/#actividad-46","title":"Actividad 46","text":"<p>Realiza un programa que vaya pidiendo n\u00fameros hasta que se introduzca un numero negativo y nos diga cuantos n\u00fameros se han introducido, la media de los impares y el mayor de los pares. El n\u00famero negativo s\u00f3lo se utiliza para indicar el final de la introducci\u00f3n de datos pero no se incluye en el c\u00f3mputo.</p>"},{"location":"ud03/ud03ac/#actividad-47","title":"Actividad 47","text":"<p>Escribe un programa que permita ir introduciendo una serie indeterminada de n\u00fameros mientras su suma no supere el valor 10000. Cuando esto \u00faltimo ocurra, se debe mostrar el total acumulado, el contador de los n\u00fameros introducidos y la media.</p>"},{"location":"ud03/ud03ac/#actividad-48","title":"Actividad 48","text":"<p>Escribe un programa que muestre, cuente y sume los m\u00faltiplos de 3 que hay entre 1 y un n\u00famero le\u00eddo por teclado.</p>"},{"location":"ud03/ud03ac/#actividad-49","title":"Actividad 49","text":"<p>Escribe un programa que calcule el precio final de un producto seg\u00fan su base imponible (precio antes de impuestos), el tipo de IVA aplicado (general, reducido o superreducido) y el c\u00f3digo promocional. Los tipos de IVA general, reducido y superreducido son del 21%, 10% y 4% respectivamente. Los c\u00f3digos promocionales pueden ser nopro, mitad, meno5 o 5porc que significan respectivamente que no se aplica promoci\u00f3n, el precio se reduce a la mitad, se descuentan 5 euros o se descuenta el 5%.</p> <p>Ejemplo:</p> Bash<pre><code>Introduzca la base imponible: 25\nIntroduzca el tipo de IVA (general, reducido o superreducido): reducido\nIntroduzca el c\u00f3digo promocional (nopro, mitad, meno5 o 5porc): mitad\nBase imponible 25.00\nC\u00f3d. promo. (mitad): -12.50\nIVA (10%) 1.25\nPrecio con IVA 13.75\nTOTAL 13.75\n</code></pre>"},{"location":"ud03/ud03ac/#actividad-50","title":"Actividad 50","text":"<p>Pedir un a\u00f1o e indicar si es bisiesto, teniendo en cuenta que son bisiestos todos los a\u00f1os divisibles por 4, excluyendo los que sean divisibles por 100, pero no los que sean divisibles por 400.</p> <p>En pseudoc\u00f3digo se calcular\u00eda as\u00ed:</p> Text Only<pre><code>SI (a\u00f1o divisible por 4) Y (a\u00f1o no divisible por 100) O (a\u00f1o divisible por 400)))ENTONCES\n    es bisiesto\nSINO\n    no es bisiesto\nFIN_SI\n</code></pre>"},{"location":"ud03/ud03ac/#actividad-51","title":"Actividad 51","text":"<p>Pedir un n\u00famero de 20 a 99 y mostrarlo escrito. Por ejemplo, para 56 mostrar: cincuenta y seis.</p>"},{"location":"ud03/ud03ac/#actividad-52","title":"Actividad 52","text":"<p>Introducir datos de un veh\u00edculo (marca, modelo y precio). Devolver el precio con IVA del veh\u00edculo. Controlar con Excepciones que el precio del veh\u00edculo introducido son n\u00fameros y que el c\u00e1lculo de Precio Final con IVA no devuelva error.</p>"},{"location":"ud03/ud03ac/#actividad-53","title":"Actividad 53","text":"<p>Introducir c\u00f3digos de alumnos, nombre y nota hasta que se introduzca un c\u00f3digo de alumno negativo. Devolver la nota media de los alumnos la clase. Controlar con Excepciones que las notas introducidas son n\u00fameros y que si no se introducen alumnos el c\u00e1lculo de la media no devuelva error.</p>"},{"location":"ud03/ud03ac/#actividad-54","title":"Actividad 54","text":"<p>Crear una funci\u00f3n o m\u00e9todo llamado <code>impFinal</code>, que calcule el importe final de una compra. Los par\u00e1metros que se le pasar\u00e1n a la funci\u00f3n son el <code>precio</code> del producto, las <code>cantidad de unidades</code> compradas, el <code>porcentaje de iva</code> y el <code>porcentaje de descuento</code>. El m\u00e9todo principal debe pedir por teclado el precio del producto, las unidades adquiridas, el porcentaje de IVA y el porcentaje de descuento y devolver el <code>Importe final</code> de la Factura.</p>"},{"location":"ud03/ud03ac/#actividad-55","title":"Actividad 55","text":"<p>Crear una funci\u00f3n que calcule la capacidad de un disco. La capacidad se calcula multiplicando los Cabezales o pistas del disco por los Cilindros por los Sectores por Tama\u00f1o de Sector. El m\u00e9todo principal debe pedir por teclado los Cabezales o Pistas del disco, los Cilindros, Sectores y Tama\u00f1o de Sector y devolver la Capacidad del disco en Gigabytes.</p> <p>Por ejemplo: Calcular la capacidad de un disco teniendo en cuenta que dispone de 10 Cabezales o Pistas, 65535 Cilindros, 1024 Sectores/pista y              un Tama\u00f1o de 512 bytes/sector:</p> <p>\u200b       Capacidad del disco = 10 * 65535 * 1024 * 512 = 343597383680 bytes</p> <p>\u200b       343597383680 bytes / 1024 / 1024 / 1024 = 320 Gbytes</p>"},{"location":"ud03/ud03ac/#actividad-56","title":"Actividad 56","text":"<p>Funci\u00f3n que devuelva el mayor de tres n\u00fameros. El m\u00e9todo principal debe pedir por teclado los tres n\u00fameros introducidos por el teclado. La funci\u00f3n debe recibir como par\u00e1metros los tres n\u00fameros y devolver el mayor.</p>"},{"location":"ud03/ud03pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li> <p>Java course. Conditionals I. Video 16</p> </li> <li> <p>Java course. Conditional II. Video 17</p> </li> <li>Course Java Loops I Video 18</li> <li>Java course. Loops II. Video 19</li> <li>Java Course Loops III. Video 20</li> <li>Curso Java Bucles IV. V\u00eddeo 21</li> <li>Curso Java Bucles V. V\u00eddeo 22</li> <li>Curso Java. Excepciones I. V\u00eddeo 142</li> <li>Curso Java. Excepciones II. throws try catch. V\u00eddeo 143</li> </ul>"},{"location":"ud03/ud03re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</p> </li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> </ul>"},{"location":"ud04/ud0401/","title":"4.1 Introducci\u00f3n","text":"<p>A menudo, para resolver problemas de programaci\u00f3n, no basta con disponer de sentencias condicionales o iterativas como las que hemos visto (<code>if</code>, <code>switch</code>, <code>while</code>, <code>for</code>, ...).</p> <p>Tambi\u00e9n es necesario disponer de herramientas para organizar la informaci\u00f3n de forma adecuada: las estructuras de datos.</p> <p>Los arrays son una estructura de datos fundamental, que est\u00e1 disponible en la mayor\u00eda de lenguajes de programaci\u00f3n y que nos permitir\u00e1 resolver problemas que, sin ellos, resultar\u00edan dif\u00edciles o tediosos de solucionar.</p> <p>Imaginemos, por ejemplo, que queremos leer los datos de pluviosidad de cada uno de los 31 d\u00edas de un mes. Posteriormente se desea mostrar la pluviosidad media del mes y en cu\u00e1ntos d\u00edas las lluvias superaron la media.</p> <p>Con las herramientas de que disponemos hasta ahora, nos ver\u00edamos obligados a declarar 31 variables <code>double</code>, una para cada d\u00eda, y a elaborar un largo programa que leyera los datos y contara cuales superan la media. Con el uso de arrays, problemas como este tienen una soluci\u00f3n f\u00e1cil y corta.</p>"},{"location":"ud04/ud0402/","title":"4.2 Arrays","text":"<p>Un array es una colecci\u00f3n de elementos del mismo tipo, que tienen un nombre o identificador com\u00fan.</p> <ul> <li>Se puede acceder a cada componente del array de forma individual para consultar o modificar su valor. </li> <li>El acceso a los componentes se realiza mediante un sub\u00edndice, que viene dado por la posici\u00f3n que ocupa el elemento dentro del array.</li> </ul> <p>En la siguiente figura se muestra un array <code>c</code> de enteros:</p> <p>Se ordenan a partir del \u00edndice 0</p> <p>El primer sub\u00edndice de un array es el cero. El \u00faltimo sub\u00edndice es la longitud del array menos uno.</p> <p>El n\u00famero de componentes de un array se establece inicialmente al crearlo y no es posible cambiarlo de tama\u00f1o. Es por esto que reciben el nombre de estructuras de datos est\u00e1ticas.</p>"},{"location":"ud04/ud0402/#declaracion-y-creacion","title":"Declaraci\u00f3n y creaci\u00f3n","text":"<p>Para poder utilizar un array hay que declararlo y crearlo:</p> Java<pre><code>tipo nombreVariable[] = new tipo[numElementos];\n</code></pre> <p>\u00f3</p> Java<pre><code>tipo[] nombreVariable = new tipo[numElementos];\n</code></pre> <p>En la declaraci\u00f3n se establece el nombre de la variable y el tipo de los componentes. Por ejemplo:</p> Java<pre><code>double lluvia1[];   // lluvia1 es un array de double\ndouble[] lluvia2;   // lluvia2 es un array de double\n</code></pre> <p>En la declaraci\u00f3n anterior no se ha establecido el n\u00famero de componentes. El n\u00famero de componentes se indica en la creaci\u00f3n, que se hace utilizando el operador <code>new</code>:</p> Java<pre><code>lluvia1 = new double[31];\n</code></pre> <p>Con esta instrucci\u00f3n se establece que el n\u00famero de elementos del array <code>lluvia</code> son 31, reservando con ello el compilador espacio consecutivo para 31 componentes individuales de tipo <code>double</code>.</p> <p>Las dos instrucciones anteriores se pueden unir en una sola:</p> Java<pre><code>double[] lluvia2 = new double[31];\n</code></pre> <p>El valor mediante el cual se define el n\u00famero de elementos del array tiene que ser una expresi\u00f3n entera, pero no tiene por qu\u00e9 ser un literal como en el ejemplo anterior. El tama\u00f1o de un array se puede establecer durante la ejecuci\u00f3n, como en el siguiente ejemplo:</p> Java<pre><code>// usamos un array para almacenar las edades de un grupo de personas\n// la variable numPersonas contiene el n\u00famero de personas del grupo\n// y se asigna en tiempo de ejecuci\u00f3n\nScanner teclado = new Scanner(System.in);\nSystem.out.print(\"Introduce cuantos elementos debe tener el array edad[]:\");\nint numPersonas = teclado.nextInt();\nint[] edad = new int[numPersonas];\n</code></pre>"},{"location":"ud04/ud0402/#acceso-a-los-componentes","title":"Acceso a los componentes","text":"<p>Como ya hemos dicho, el acceso a los componentes del array se realiza mediante sub\u00edndices. La sintaxis para referirse a un componente del array es la siguiente:</p> Java<pre><code>nombreVariable [sub\u00edndice]\n</code></pre> <p>Tras declarar el array <code>lluvia</code>, se dispone de 31 componentes de tipo <code>double</code> numeradas desde la 0 a la 30 y accesibles mediante la notaci\u00f3n: <code>lluvia[0]</code> (componente primera), <code>lluvia[1]</code> (componente segunda) y as\u00ed sucesivamente hasta la \u00faltima componente <code>lluvia[30]</code>.</p> <p>Con cada una de las componentes del array de <code>double</code> lluvia es posible efectuar todas las operaciones que podr\u00edan realizarse con variables individuales de tipo <code>double</code>, por ejemplo, dadas las declaraciones anteriores, las siguientes instrucciones ser\u00edan v\u00e1lidas:</p> Java<pre><code>System.out.print(\"Introduce el dato para el componente 0: \");\nedad[0] = teclado.nextInt(); //25\nSystem.out.println(\"El componente [0] vale \" + edad[0]);\nedad[1] = edad[0] + 1;\nedad[2] = edad[0] + edad[1];\nedad[2]++;\nSystem.out.println(\"El componente [1] vale \" + edad[1]); //26\nSystem.out.println(\"El componente [2] vale \" + edad[2]); //52\n</code></pre> <p>Adem\u00e1s, hay que tener en cuenta que el sub\u00edndice ha de ser una expresi\u00f3n entera, por lo que tambi\u00e9n son v\u00e1lidas expresiones como las siguientes:</p> Java<pre><code>int i;\n...\nedad[i] = edad[i + 1];\nedad[i + 2] = edad[i];\n</code></pre>"},{"location":"ud04/ud0402/#inicializacion","title":"Inicializaci\u00f3n","text":"<p>Cuando creamos un array, Java inicializa autom\u00e1ticamente sus componentes:</p> <ul> <li>Con 0 cuando los componentes son de tipo num\u00e9rico.</li> <li>Con false cuando los componentes son <code>boolean</code>.</li> <li>Con el car\u00e1cter de ASCII 0, cuando los componentes son <code>char</code>.</li> <li>Con <code>null</code> cuando son objetos (<code>Strings</code>, etc)</li> </ul> <p>Aun as\u00ed, es probable que estos no sean los valores con los que queremos inicializar el array. Tenemos entonces dos posibilidades:</p> <ul> <li>Acceder individualmente a los componentes del array para darles valor:</li> </ul> Java<pre><code>int edad2[] = new int[10];\nedad2[0] = 25;\nedad2[1] = 10;\n...\nedad2[9] = 12;\n</code></pre> <ul> <li>O inicializar el array en la declaraci\u00f3n de la siguiente forma:</li> </ul> Java<pre><code>int edad3[] = {25,10,23,34,65,23,1,67,54,12};\n</code></pre> <p> </p> <p>Enumerando los valores con los que se quiere inicializar cada componente, encerrados entre llaves. De hacerlo as\u00ed, no hay que crear el array con el operador <code>new</code>. Java crea el array con tantos componentes como valores hemos puesto entre llaves.</p>"},{"location":"ud04/ud0402/#un-ejemplo-practico","title":"Un ejemplo pr\u00e1ctico","text":"<p>Ya hemos resuelto en temas anteriores el problema de devolver el nombre de un mes dado su n\u00famero. </p> <p>Vamos a resolverlo ahora ayud\u00e1ndonos de arrays:</p> Java<pre><code>public static String nombreMes(int mes){\n    String nombre[] = {\" \" ,\"enero\", \"febrero\", \"marzo\", \"abril\",\n                       \"mayo\", \"junio\", \"julio\",\"agosto\",\n                       \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"};\n    return nombre[mes];\n}\n</code></pre> <p>El m\u00e9todo define un array de <code>String</code> que se inicializa con los nombres de los doce meses. La primera componente del array (<code>nombre[0]</code>) se deja vac\u00eda, de forma que enero quede almacenado en <code>nombre[1]</code>. Devolver el nombre del mes indicado se reduce a devolver el componente del array cuyo n\u00famero indica el par\u00e1metro mes: <code>nombre[mes]</code></p>"},{"location":"ud04/ud0402/#arrays-como-parametros-paso-de-parametros-por-referencia","title":"Arrays como par\u00e1metros. Paso de par\u00e1metros por referencia","text":"<p>Hasta el momento s\u00f3lo se ha considerado el paso de par\u00e1metros por valor; de manera que cualquier cambio que el m\u00e9todo realice sobre los par\u00e1metros formales no modifica el valor que tiene el par\u00e1metro real con el que se llama al m\u00e9todo. En java, todos los par\u00e1metros de tipo simple (<code>byte</code>, <code>short</code>, <code>int</code>, ...) se pasan por valor.</p> <p>Por el contrario, los arrays no son variables de tipo primitivo, y como cualquier otro objeto, se pasa siempre por referencia.</p> <p>En el paso de par\u00e1metros por referencia lo que se pasa en realidad al m\u00e9todo es la direcci\u00f3n de la variable u objeto. Es por esto que el papel del par\u00e1metro formal es el de ser una referencia al par\u00e1metro real; la llamada al m\u00e9todo no provoca la creaci\u00f3n de una nueva variable. De esta forma, las modificaciones que el m\u00e9todo pueda realizar sobre estos par\u00e1metros se realizan efectivamente sobre los par\u00e1metros reales. En este caso, ambos par\u00e1metros (formal y real) se pueden considerar como la misma variable con dos nombres, uno en el m\u00e9todo llamante y otro en el llamado o invocado, pero hacen referencia a la misma posici\u00f3n de memoria.</p> <p>En el siguiente ejemplo, la variable <code>a</code>, de tipo primitivo, no cambia de valor tras la llamada al m\u00e9todo. Sin embargo la variable <code>v</code>, array de enteros, si se ve afectada por los cambios que se han realizado sobre ella en el m\u00e9todo:</p> Java<pre><code>public static void main(String[] args){\n    int p = 1;\n    int v[] = {1,1,1};\n    metodo(v,p);                //Pasar un array como par\u00e1metro\n    System.out.println(p);      // Muesta 1\n    System.out.println(v[0]);   // Muestra 2\n}\n\npublic static void metodo(int x[], int y){ //recibir un array como par\u00e1metro\n    x[0]++;\n    y++;\n}\n</code></pre> <p>Pasar un array como argumento en un m\u00e9todo</p> <p>Como podemos observar, para pasar un array a un m\u00e9todo, simplemente usamos el nombre de la variable en la llamada. En la cabecera del m\u00e9todo, sin embargo, tenemos que utilizar los corchetes <code>[]</code> para indicar que el par\u00e1metro es un array.</p>"},{"location":"ud04/ud0402/#el-atributo-length","title":"El atributo <code>length</code>","text":"<p>Todas las variables de tipo array tienen un atributo <code>length</code> que permite consultar el n\u00famero de componentes del array. Su uso se realiza posponiendo <code>.length</code> al nombre de la variable:</p> Java<pre><code>double estatura[] = new double[25];\n...\nSystem.out.println(estatura.length); // Mostrar\u00e1 por pantalla: 25\n</code></pre>"},{"location":"ud04/ud0402/#string-args-en-el-main","title":"<code>String[] args</code> en el <code>main</code>","text":"<p>El m\u00e9todo <code>main</code> puede recibir argumentos desde la l\u00ednea de comandos. Para ello, el m\u00e9todo <code>main</code> recibe un par\u00e1metro (<code>String args[]</code>). Vemos que se trata de un array de <code>Strings</code>. El uso del atributo <code>length</code> nos permite comprobar si se ha llamado al programa de forma correcta o no. Veamos un ejemplo para saber si es Navidad. Se habr\u00e1 llamado correctamente si el array <code>args</code> contiene dos componentes (d\u00eda, mes):</p> Java<pre><code>public class EsNavidad {\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            System.out.println(\"ERROR:\");\n            System.out.println(\"Llame al programa de la siguiente forma:\");\n            System.out.println(\"java EsNavidad dia mes\");\n        } else {\n            // args[0] es el d\u00eda\n            // args[1] es el mes\n            if ((Integer.valueOf(args[0]) == 25) &amp;&amp; (Integer.valueOf(args[1]) == 12)) {\n                    System.out.println(\"ES NAVIDAD!\");\n            } else {\n                System.out.println(\"No es navidad :(\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ud04/ud0403/","title":"4.3 Problemas de recorrido, b\u00fasqueda y ordenaci\u00f3n","text":"<p>Muchos de los problemas que se plantean cuando se utilizan arrays pueden clasificarse en tres grandes grupos de problemas gen\u00e9ricos: </p> <ol> <li>los que conllevan el recorrido de un array, </li> <li>los que suponen la b\u00fasqueda de un elemento que cumpla cierta caracter\u00edstica dentro del array, y </li> <li>los que implican la ordenaci\u00f3n de los elementos del array.</li> </ol> <p>La importancia de este tipo de problemas proviene de que surgen, no s\u00f3lo en el \u00e1mbito de los arrays, sino tambi\u00e9n en muchas otras organizaciones de datos de uso frecuente (como las listas, los ficheros, etc.). Las estrategias b\u00e1sicas de resoluci\u00f3n que se ver\u00e1n a continuaci\u00f3n son tambi\u00e9n extrapolables a esos otros \u00e1mbitos.</p>"},{"location":"ud04/ud0403/#problemas-de-recorrido","title":"Problemas de recorrido","text":"<p>Se clasifican como problemas de recorrido aquellos que para su resoluci\u00f3n exigen alg\u00fan tratamiento de todos elementos del array. El orden para el tratamiento de estos elementos puede organizarse de muchas maneras: ascendentemente, descendentemente, ascendente y descendente de forma simult\u00e1nea, etc.</p> <p>En el siguiente ejemplo se muestra un m\u00e9todo en java para devolver, a partir de un array que contiene la pluviosidad de cada uno de los d\u00edas de un mes, la pluviosidad media de dicho mes. Para ello se recorren ascendente los componentes del array para ir sum\u00e1ndolos:</p> Java<pre><code>public static double pluviosidadMediaAscendente(double lluvia[]){\n    double suma = 0;\n    //Recorremos el array\n    for (int i = 0; i&lt;lluvia.length; i++) {\n        suma += lluvia[i];\n    }\n    double media = suma / lluvia.length;\n    return media;\n}\n</code></pre> <p>La forma de recorrer el array ascendentemente es, como vemos, utilizar una variable entera (<code>i</code> en nuestro caso) que act\u00faa como sub\u00edndice del array. \u00c9ste sub\u00edndice va tomando los valores <code>0</code>, <code>1</code>, ..., <code>lluvia.length-1</code> en el seno de un bucle, de manera que se accede a todos los componentes del array para sumarlos.</p> <p>El mismo problema resuelto con un recorrido descendente ser\u00eda como sigue:</p> Java<pre><code>public static double pluviosidadMediaDescendente(double lluvia[]){\n    double suma = 0;\n    //Recorremos el array\n    for (int i = lluvia.length-1; i&gt;=0; i--) {\n        suma += lluvia[i];\n    }\n    double media = suma / lluvia.length;\n    return media;\n}\n</code></pre> <p>Tambi\u00e9n realizamos un recorrido para obtener la pluviosidad m\u00e1xima del mes (la cantidad de lluvia m\u00e1s grande ca\u00edda en un d\u00eda), es decir, el elemento m\u00e1s grande del array:</p> Java<pre><code>public static double pluviosidadMaxima(double[] lluvia){\n    // Suponemos el la pluviosidad m\u00e1xima se produjo el primer d\u00eda\n    double max = lluvia[0];\n    //Recorremos el array desde la posici\u00f3n 1, comprobando si hay una pluviosidad mayor\n    for (int i = 1; i&lt;lluvia.length; i++) {\n        if(lluvia[i] &gt; max) max = lluvia[i];\n    }\n    return max;\n}\n</code></pre>"},{"location":"ud04/ud0403/#problemas-de-busqueda","title":"Problemas de b\u00fasqueda","text":"<p>Se denominan problemas de b\u00fasqueda a aquellos que, de alguna manera, implican determinar si existe alg\u00fan elemento del array que cumpla una propiedad dada. Con respecto a los problemas de recorrido presentan la diferencia de que no es siempre necesario tratar todos los elementos del array: el elemento buscado puede encontrarse inmediatamente, encontrarse tras haber recorrido todo el array, o incluso no encontrarse.</p> <p>Consideremos, por ejemplo, el problema de encontrar cual fue el primer d\u00eda del mes en que no llovi\u00f3 nada, es decir, el primer elemento del array con valor cero:</p> Java<pre><code>//Devolveremos el sub\u00edndice del primer componente del array cuyo valor es cero.\n// Si no hay ning\u00fan d\u00eda sin lluvias devolveremos -1\npublic static int primerDiaSinLluvia1(double lluvia[]){\n    int i=0 ;\n    boolean encontrado = false ;\n\n    while (i&lt;lluvia.length &amp;&amp; !encontrado){\n        if (lluvia[i] == 0) {\n            encontrado = true ;\n        } else {\n            i++ ;\n        }\n    }\n    if (encontrado) {\n        return i ;\n    } else {\n        return -1 ;\n    }\n}\n</code></pre> <p>Hemos utilizado el esquema de b\u00fasqueda: Definimos una variable <code>boolean</code> que indica si hemos encontrado o no lo que buscamos. El bucle se repite mientras no lleguemos al final del array y no hayamos encontrado un d\u00eda sin lluvias.</p> <p>Tambi\u00e9n es posible una soluci\u00f3n sin utilizar la variable <code>boolean</code>:</p> Java<pre><code>public static int primerDiaSinLluvia2(double lluvia[]){\n    int i=0 ;\n    while (i&lt;lluvia.length &amp;&amp; lluvia[i] != 0){\n        i++;\n    }\n    if (i == lluvia.length) {\n        return -1 ;\n    } else {\n        return i;\n    }\n}\n</code></pre> <p>En este caso el sub\u00edndice <code>i</code> se incrementa mientras estemos dentro de los l\u00edmites del array y no encontremos un d\u00eda con lluvia <code>0</code>. Al finalizar el bucle hay que comprobar por cual de las dos razones finaliz\u00f3: \u00bfSe encontr\u00f3 un d\u00eda sin lluvias o se recorri\u00f3 todo el array sin encontrar ninguno? En esta comprobaci\u00f3n es importante no acceder al array si existe la posibilidad de que el sub\u00edndice est\u00e9 fuera de los l\u00edmites del array. La siguiente comprobaci\u00f3n ser\u00eda incorrecta:</p> <p>En este caso el sub\u00edndice <code>i</code> se incrementa mientras estemos dentro de los l\u00edmites del array y no encontremos un d\u00eda con lluvia <code>0</code>. Al finalizar el bucle hay que comprobar por cual de las dos razones finaliz\u00f3: \u00bfSe encontr\u00f3 un d\u00eda sin lluvias o se recorri\u00f3 todo el array sin encontrar ninguno? En esta comprobaci\u00f3n es importante no acceder al array si existe la posibilidad de que el sub\u00edndice est\u00e9 fuera de los l\u00edmites del array. </p> <p>La siguiente comprobaci\u00f3n ser\u00eda incorrecta:</p> Java<pre><code>if (lluvia[i] == 0) {\n    return i;\n} else {\n    return -1;\n}\n</code></pre> <p>ya que, si se ha finalizado el bucle sin encontrar ning\u00fan d\u00eda sin lluvia, <code>i</code> valdr\u00e1 <code>lluvia.length</code>, que no es una posici\u00f3n v\u00e1lida del array, y al acceder a <code>lluvia[i]</code> se producir\u00e1 la excepci\u00f3n <code>ArrayIndexOutOfBoundsException</code> (\u00edndice del array fuera de los l\u00edmites) </p> <p>Por otra parte, el mismo problema se puede resolver utilizando la sentencia <code>for</code>, como hemos hecho otras veces. Sin embargo la soluci\u00f3n parece menos intuitiva porque el cuerpo del <code>for</code> quedar\u00eda vac\u00edo:</p> Java<pre><code>public static int primerDiaSinLluvia3(double lluvia[]){\n    int i;\n\n    for (i=0; i&lt;lluvia.length &amp;&amp; lluvia[i] != 0; i++) /*Nada*/ ;\n\n    if (i == lluvia.length) {\n        return -1 ;\n    } else {\n        return i;\n    }\n}\n</code></pre>"},{"location":"ud04/ud0403/#busqueda-descendente","title":"B\u00fasqueda descendente","text":"<p>En los ejemplos de b\u00fasqueda anteriores hemos iniciado la b\u00fasqueda en el elemento cero y hemos ido ascendiendo hasta la \u00faltima posici\u00f3n del array. A esto se le llama b\u00fasqueda ascendente.</p> <p>Si queremos encontrar el \u00faltimo d\u00eda del mes en que no llovi\u00f3 podemos realizar una b\u00fasqueda descendente, es decir, partiendo del \u00faltimo componente del array y decrementando progresivamente el sub\u00edndice hasta llegar a la posici\u00f3n cero o hasta encontrar lo buscado:</p> Java<pre><code>public static int ultimoDiaSinLluvia(double lluvia[]){\n    int i=lluvia.length-1;\n    boolean encontrado = false ;\n\n    while (i&gt;=0 &amp;&amp; !encontrado){\n        if (lluvia[i] == 0) {\n            encontrado = true ;\n        } else {\n            i-- ;\n        }\n    }\n\n    if (encontrado) {\n        return i ;\n    } else {\n        return -1 ;\n    }\n}\n</code></pre>"},{"location":"ud04/ud0403/#busqueda-en-un-array-ordenado-busqueda-binaria","title":"B\u00fasqueda en un array ordenado: b\u00fasqueda binaria","text":"<p>Vamos a suponer que una amiga apunta un n\u00famero entre el 0 y el 99 en una hoja de papel y vosotros deb\u00e9is adivinarlo. Cada vez que conteste, le dir\u00e1 si el valor que ha dicho es mayor o menor que el que debemos de adivinar. \u00bfQu\u00e9 estrategia seguir\u00edas para lograrlo? Hay que pensar un algoritmo a seguir para resolver este problema.</p> <p>Una aproximaci\u00f3n muy ingenua podr\u00eda ser ir diciendo todos los valores uno por uno, empezando por 0. Est\u00e1 claro que cuando llegue al 99 lo habr\u00e9is adivinado. En el mejor caso, si hab\u00eda escrito el 0, acertar\u00e1 en la primera, mientras que en el peor caso, si hab\u00eda escrito el 99, necesitar\u00e9is 100 intentos. Si estaba por medio, tal vez con 40-70 basta. Este ser\u00eda un algoritmo eficaz (hace lo que tiene que hacer), pero no muy eficiente (lo hace de la mejor manera posible). Ir probando valores al azar en lugar de hacer esto tampoco mejora gran cosa el proceso, y viene a ser lo mismo.</p> <p>Una aproximaci\u00f3n muy ingenua podr\u00eda ser ir diciendo todos los valores uno por uno, empezando por 0. Est\u00e1 claro que cuando llegue al 99 lo habr\u00e9is adivinado. En el mejor caso, si hab\u00eda escrito el 0, acertar\u00e1 en la primera, mientras que en el peor caso, si hab\u00eda escrito el 99, necesitar\u00e9is 100 intentos. Si estaba por medio, tal vez con 40-70 basta. Este ser\u00eda un algoritmo eficaz (hace lo que tiene que hacer), pero no muy eficiente (lo hace de la mejor manera posible). Ir probando valores al azar en lugar de hacer esto tampoco mejora gran cosa el proceso, y viene a ser lo mismo.</p> <p>Si alguna vez hab\u00e9is jugado a este juego, lo que habr\u00e9is hecho es ser un poco m\u00e1s astutos y empezar por alg\u00fan valor del medio. En este caso, por ejemplo, podr\u00eda ser el 50. Entonces, en caso de fallar, una vez est\u00e1s seguro de si el valor secreto es mayor o menor que tu respuesta, en el intento siguiente probar un valor m\u00e1s alto o m\u00e1s bajo , e ir haciendo esto repetidas veces.</p> <p>Generalmente, la mejor estrategia para adivinar un n\u00famero secreto entre 0 y N ser\u00eda primer probar N/2. Si no se ha acertado, entonces si el n\u00famero secreto es m\u00e1s alto se intenta adivinar entre (N/2 + 1) y N. Si era m\u00e1s bajo, se intenta adivinar el valor entre 0 y N-1. Para cada caso, se vuelve a probar el valor que hay en el medio del nuevo intervalo. Y as\u00ed sucesivamente, haciendo cada vez m\u00e1s peque\u00f1o el intervalo de b\u00fasqueda, hasta adivinarlo. En el caso de 100 valores, esto garantiza que, en el peor de los casos, en 7 intentos seguro que se adivina. Esto es una mejora muy grande respecto al primer algoritmo, donde hac\u00edan falta 100 intentos, y por tanto, este ser\u00eda un algoritmo m\u00e1s eficiente. Concretamente, siempre se adivinar\u00e1 en log~2~ (N) intentos como m\u00e1ximo.</p> <p>Si os fij\u00e1is, el ejemplo que se acaba de explicar, en realidad, no es m\u00e1s que un esquema de b\u00fasqueda en una secuencia de valores, como puede ser dentro de un array, partiendo de la condici\u00f3n que todos los elementos est\u00e9n ordenados de menor a mayor. De hecho, hasta ahora, para hacer una b\u00fasqueda de un valor dentro de un array se ha usado el sistema \"ingenuo\", mirando una por una todas las posiciones. Pero si los elementos est\u00e1n ordenados previamente, se podr\u00eda usar el sistema \"astuto\" para dise\u00f1ar un algoritmo mucho m\u00e1s eficiente, y hasta cierto punto, m\u00e1s \"inteligente\".</p> <p>El algoritmo basado en esta estrategia se conoce como b\u00fasqueda binaria o dicot\u00f3mica.</p> <p>Para ello iniciaremos la b\u00fasqueda en la posici\u00f3n central del array.</p> <ul> <li>Si el elemento central es el buscado habremos finalizado la b\u00fasqueda.</li> <li>Si el elemento central es mayor que el buscado, tendremos que continuar la b\u00fasqueda en la mitad izquierda del array ya que, al estar \u00e9ste ordenado todos los elementos de la mitad derecha ser\u00e1n tambi\u00e9n mayores que el buscado.</li> <li>Si el elemento central es menor que el buscado, tendremos que continuar la b\u00fasqueda en la mitad derecha del array ya que, al estar \u00e9ste ordenado todos los elementos de la mitad izquierda ser\u00e1n tambi\u00e9n menores que el buscado.</li> </ul> <p>En un solo paso hemos descartado la mitad de los elementos del array. Para buscar en la mitad izquierda o en la mitad derecha utilizaremos el mismo criterio, es decir, iniciaremos la b\u00fasqueda en el elemento central de dicha mitad, y as\u00ed sucesivamente hasta encontrar lo buscado o hasta que descubramos que no est\u00e1.</p> <p>Supongamos por ejemplo que, dado un array que contiene edades de personas, ordenadas de menor a mayor queremos averiguar si hay alguna persona de 36 a\u00f1os o no.</p> <p>El siguiente m\u00e9todo soluciona este problema realizando una b\u00fasqueda binaria:</p> Java<pre><code>public static boolean hayAlguienDe36(int edad[]) {\n    // Las variables izq y der marcar\u00e1n el fragmento del array en el que\n    // realizamos la b\u00fasqueda. Inicialmente buscamos en todo el array.\n    int izq = 0;\n    int der = edad.length - 1;\n    boolean encontrado = false;\n    while (izq &lt;= der &amp;&amp; !encontrado) {\n        // Calculamos posici\u00f3n central del fragmento en el que buscamos\n        int m = (izq + der) / 2;\n        if (edad[m] == 36) // Hemos encontrado una persona de 36\n        {\n            encontrado = true;\n        } else if (edad[m] &gt; 36) {\n            // El elemento central tiene m\u00e1s de 36.\n            // Continuamos la b\u00fasqueda en la mitad izquierda. Es decir,\n            // entre las posici\u00f3nes izq y m-1\n            der = m - 1;\n        } else {\n            // El elemento central tiene menos de 36.\n            // Continuamos la b\u00fasqueda en la mitad derecha. Es decir,\n            // entre las posiciones m+1 y der\n            izq = m + 1;\n        } // del if\n    } // del while\n    return encontrado; // if (encontrado) return true; else return false;\n}\n</code></pre> <p>La b\u00fasqueda finaliza cuando encontramos una persona con 36 a\u00f1os (<code>encontrado==true</code>) o cuando ya no es posible encontrarla, circunstancia que se produce cuando <code>izq</code> y <code>der</code> se cruzan (izq&gt;der).</p>"},{"location":"ud04/ud0403/#problemas-de-ordenacion","title":"Problemas de ordenaci\u00f3n","text":"<p>Con frecuencia necesitamos que los elementos de un array est\u00e9n ordenados.</p> <p>Existen multitud de algoritmos que permiten ordenar los elementos de un array, entre los que hay soluciones iterativas y soluciones recursivas.</p> <p>Entre los algoritmos iterativos tenemos, por ejemplo, el m\u00e9todo de la burbuja, el m\u00e9todo de selecci\u00f3n directa y el m\u00e9todo de inserci\u00f3n directa.</p> <p>Entre los recursivos, son conocidos el algoritmo mergeSort y el quickSort, que realizan la ordenaci\u00f3n m\u00e1s r\u00e1pidamente que los algoritmos iterativos que hemos nombrado.</p> <p>Como ejemplo vamos a ver c\u00f3mo se realiza la ordenaci\u00f3n de un array de enteros utilizando el m\u00e9todo de selecci\u00f3n directa:</p> Java<pre><code>public static void seleccionDirecta(int v[]) {\n\n    for (int i = 0; i &lt; v.length-1; i++) {\n\n        // Localizamos elemento que tiene que ir en la posici\u00f3n i\n        int posMin = i;\n        // Buscar el menor a la derecha\n        for (int j = i + 1; j &lt; v.length; j++) {\n            if (v[j] &lt; v[posMin]) {\n                posMin = j;\n            }\n        }\n        // Al llegar aqu\u00ed posMin tendr\u00e1 la posici\u00f3n del elemento menor\n        // Intercambiamos los elementos de las posiciones i y posMin\n        // v[i]&lt;=&gt;v[posMin];\n        int aux = v[posMin];\n        v[posMin] = v[i];\n        v[i] = aux;\n    }\n}\n</code></pre> <p>El m\u00e9todo consiste en recorrer el array ascendentemente a partir de la posici\u00f3n cero.</p> <p>En cada posici\u00f3n (<code>i</code>) localizamos el elemento que tiene que ocupar dicha posici\u00f3n cuando el array est\u00e9 ordenado, es decir, el menor de los elementos que quedan a su derecha.</p> <p>Cuando se ha determinado el menor se coloca en su posici\u00f3n realizando un intercambio con el elemento de la posici\u00f3n <code>i</code>. Con ello, el array queda ordenado hasta la posici\u00f3n <code>i</code>.</p> <p>Ejemplos visuales de ordenaci\u00f3n</p> <p>Ejemplos visuales de distintos m\u00e9todos de ordenaci\u00f3n, con distintos tipos de entradas: https://www.toptal.com/developers/sorting-algorithms.</p>"},{"location":"ud04/ud0403/#bucle-for-each-for-loop","title":"Bucle for each (for-loop)","text":"<p>En el tema anterior vimos alg\u00fan tipo de bucles que explicar\u00edamos cuando los pudi\u00e9semos utilizar, en este grupo est\u00e1n los bucles <code>for each</code> o <code>for-loops</code>. Aqu\u00ed tenemos un ejemplo de recorrido de un array con la sintaxis que ya conocemos:</p> Java<pre><code>int array[] = { 1, 2, 3, 4, 5, 6, 7, 8 };\n\nfor (int i = 0; i &lt; array.length; i++) {\n    System.out.print(array[i] + \" \");\n}\n</code></pre> <p>el anterior fragmento genera la siguiente salida:</p> Bash<pre><code>1 2 3 4 5 6 7 8\n</code></pre> <p>Este mismo c\u00f3digo se puede escribir de la siguiente manera:</p> Java<pre><code>int array[] = { 1, 2, 3, 4, 5, 6, 7, 8 };\n\nfor (int i : array) { \n    //mentalmente podemos traducir por:\n    //\"para cada entero \"i\" que encontremos en el array\"\n    System.out.print(i + \" \");\n}\n</code></pre> <p>la salida seguir\u00e1 siendo la misma:</p> Bash<pre><code>1  2  3  4  5  6  7  8\n</code></pre> <p>Cuidado con el segundo m\u00e9todo</p> <p>Con el segundo m\u00e9todo no tenemos acceso a la posici\u00f3n o \u00edndice del array, este m\u00e9todo no servir\u00eda para m\u00e9todos en los que necesitamos conocer la posici\u00f3n o utilizarla de alguna manera.</p> <p>Ejemplo completo de m\u00e9todo de b\u00fasqueda binaria</p> <p>Enlace a ejercicio completo m\u00e9todo de b\u00fasqueda binaria.</p>"},{"location":"ud04/ud0404/","title":"4.4 Arrays bidimensionales","text":"<p>Los arrays bidimensionales, tambi\u00e9n llamados matrices, son muy similares a los arrays que hemos visto hasta ahora: Tambi\u00e9n son una colecci\u00f3n de elementos del mismo tipo que se agrupan bajo un mismo nombre de variable. Sin embargo:</p> <ul> <li> <p>Sus elementos est\u00e1n organizados en filas y columnas. Tienen, por tanto una altura y una anchura, y por ello se les llama bidimensionales.</p> </li> <li> <p>A cada componente de una matriz se accede mediante dos sub\u00edndices: el primero se refiere al n\u00famero de fila y el segundo al n\u00famero de columna. En la siguiente figura, <code>m[0][0]</code> es <code>2</code>, <code>m[0][3]</code> es <code>9</code>, <code>m[2][0]</code> es <code>57</code>.</p> </li> </ul> <ul> <li>Como vemos, filas y columnas se numeran a partir del <code>0</code>.</li> </ul> <p>Si se quisiera extender el tratamiento el estudio de la pluviosidad, para abarcar no solo los d\u00edas de un mes sino los de todo un a\u00f1o, se podr\u00eda definir, por ejemplo, un array de 366 elementos, que mantuviera de forma correlativa los datos de pluviosidad de una zona d\u00eda a d\u00eda. Con ello, por ejemplo, el dato correspondiente al d\u00eda 3 de febrero ocupar\u00eda la posici\u00f3n 34 del array, mientras que el correspondiente al 2 de julio ocupar\u00eda el 184.</p> <p>Una aproximaci\u00f3n m\u00e1s conveniente para la representaci\u00f3n de estos datos consistir\u00eda en utilizar una matriz con 12 filas (una por mes) y 31 columnas (una por cada d\u00eda del mes). Esto permitir\u00eda una descripci\u00f3n m\u00e1s ajustada a la realidad y, sobre todo, simplificar\u00eda los c\u00e1lculos de la posici\u00f3n real de cada d\u00eda en la estructura de datos. El elemento <code>[0][3]</code> corresponder\u00eda, por ejemplo, a las lluvias del 4 de enero.</p>"},{"location":"ud04/ud0404/#matrices-en-java","title":"Matrices en Java","text":"<p>Matriz \u00f3 Array?</p> <p>En Java, una matriz es, en realidad un array en el que cada componente es, a su vez, un array. Dicho de otra manera, una matriz de enteros es un array de arrays de enteros.</p> <p>Esto, que no es igual en otros lenguajes de programaci\u00f3n, tiene ciertas consecuencias en la declaraci\u00f3n, creaci\u00f3n y uso de las matrices en Java:</p> <ul> <li> <p>Una matriz, en Java, puede tener distinto n\u00famero de elementos en cada fila.</p> </li> <li> <p>La creaci\u00f3n de la matriz se puede hacer en un solo paso o fila por fila.</p> </li> <li> <p>Si <code>m</code> es una matriz de enteros...</p> </li> <li> <p><code>m[i][j]</code> es el entero de la fila <code>i</code>, columna <code>j</code></p> </li> <li><code>m[i]</code> es un array de enteros.</li> <li><code>m.length</code> es el n\u00famero de filas de <code>m</code>.</li> <li> <p><code>m[i].length</code> es el n\u00famero de columnas de la fila <code>i</code></p> </li> <li> <p>Podr\u00edamos dibujar la matriz <code>m</code> del ejemplo anterior de una forma m\u00e1s cercana a c\u00f3mo Java las representa internamente:</p> </li> </ul>"},{"location":"ud04/ud0404/#declaracion-de-matrices","title":"Declaraci\u00f3n de matrices","text":"<p>El c\u00f3digo siguiente declara una matriz (array bidimensional) de elementos de tipo <code>double</code>, y la crea para que tenga <code>5</code> filas y <code>4</code> columnas (matriz de 5x4):</p> Java<pre><code>double m1[][] = new double[5][4];\n</code></pre> <p>La siguiente declaraci\u00f3n es equivalente a la anterior aunque en la pr\u00e1ctica es menos utilizada a no ser que queramos que cada fila tenga un n\u00famero distinto de elementos:</p> Java<pre><code>double m2[][] = new double [5][];\nm2[0] = new double[4];\nm2[1] = new double[4];\nm2[2] = new double[4];\nm2[3] = new double[4];\nm2[4] = new double[4];\n</code></pre> <p>Es posible inicializar cada uno de los subarrays con un tama\u00f1o diferente (aunque el tipo base elemental debe ser siempre el mismo para todos los componentes). Por ejemplo:</p> Java<pre><code>double m3[][] = new double [5][];\nm3[0] = new double[3];\nm3[1] = new double[4];\nm3[2] = new double[14];\nm3[3] = new double[10];\nm3[4] = new double[9];\n</code></pre>"},{"location":"ud04/ud0404/#inicializacion","title":"Inicializaci\u00f3n","text":"<p>La forma de inicializar una matriz de enteros de, por ejemplo [4][3], ser\u00eda:</p> Java<pre><code>int m4 [][] = {\n                {7,2,4},\n                {8,2,5},\n                {9,4,3},\n                {1,2,4}\n              };\n</code></pre>"},{"location":"ud04/ud0404/#recorrido","title":"Recorrido","text":"<p>El recorrido se hace de forma similar al de un array aunque, dado que hay dos sub\u00edndices, ser\u00e1 necesario utilizar dos bucles anidados: uno que se ocupe de recorrer las filas y otro que se ocupe de recorrer las columnas.</p> <p>El siguiente fragmento de c\u00f3digo recorre una matriz <code>m4</code> para imprimir sus elementos uno a uno.</p> Java<pre><code>//recorrido por filas\nSystem.out.println(\"\\nRecorrido por filas: \");\nfor (int f = 0; f &lt; m4.length; f++) {\n    for (int c = 0; c &lt; m4[f].length; c++) {\n        System.out.print(m4[f][c] + \" \");\n    }\n    System.out.println(\"\");\n}\n//Recorrido por filas:\n//7 2 4 \n//8 2 5 \n//9 4 3 \n//1 2 4 \n</code></pre> <p>El recorrido se ha hecho por filas, es decir, se imprimen todos los elementos de una fila y luego se pasa a la siguiente. Como hab\u00edamos indicado anteriormente, <code>m.length</code> representa el n\u00famero de filas de <code>m</code>, mientras que <code>m[i].length</code> el n\u00famero de columnas de la fila <code>i</code>.</p> <p>Tambi\u00e9n es posible hacer el recorrido por columnas: imprimir la columna 0, luego la 1, etc:</p> Java<pre><code>System.out.println(\"\\nRecorrido por columnas: \");\nint numFilas = m4.length;\nint numColumnas = m4[0].length;\nfor (int c = 0; c &lt; numColumnas; c++) {\n    for (int f = 0; f &lt; numFilas; f++) {\n        System.out.print(m4[f][c] + \" \");\n    }\n    System.out.println(\"\");\n}\n//Recorrido por columnas: \n//7 8 9 1 \n//2 2 4 2 \n//4 5 3 4\n</code></pre> <p>o, directamente ...</p> Java<pre><code>System.out.println(\"\\nRecorrido por columnas versi\u00f3n 2: \");\nfor (int c = 0; c &lt; m4[0].length; c++) {\n    for (int f = 0; f &lt; m4.length; f++) {\n        System.out.print(m4[f][c] + \" \");\n    }\n    System.out.println(\"\");\n}\n//Recorrido por columnas versi\u00f3n 2: \n//7 8 9 1 \n//2 2 4 2 \n//4 5 3 4\n</code></pre> <p>En este caso, para un funcionamiento correcto del recorrido ser\u00eda necesario que todas las columnas tuvieran igual n\u00famero de elementos, pues en el bucle externo, se toma como referencia para el n\u00famero de columnas la longitud de m[0], es decir el n\u00famero de elementos de la primera fila.</p> <p>Ejemplo completo de Arrays y sus recorridos</p> <p>Enlace a ejercicio completo de Arrays y sus recorridos.</p>"},{"location":"ud04/ud0405/","title":"4.5 Arrays multidimensionales","text":"<p>En el punto anterior hemos visto que podemos definir arrays cuyos elementos son a la vez arrays, obteniendo una estructura de datos a la que se accede mediante dos sub\u00edndices, que hemos llamado arrays bidimensionales o matrices.</p> <p>Este anidamiento de estructuras se puede generalizar, de forma que podr\u00edamos construir arrays de m\u00e1s de dos dimensiones. En realidad Java no pone l\u00edmite al n\u00famero de sub\u00edndices de un array. Podr\u00edamos hacer declaraciones como las siguientes:</p> Java<pre><code>int notas[][][] = new int[10][5][3]; //Notas de 10 alum. en 5 asign. en 3 eval.\nnotas[2][3][1]=5;//El alumno 2, para la asignatura 3 de la primera evaluaci\u00f3n ha sacado un 5\ndouble w[][][][][] = new double [2][7][10][4][10];\n</code></pre> <p>Arrays con m\u00e1s de 3 dimensiones</p> <p>Sin embargo, encontrar ejemplos en los que sean necesarios arrays de m\u00e1s de tres dimensiones es bastante raro, y a\u00fan cuando los encontramos solemos utilizar arrays de uno o dos sub\u00edndices porque nos resulta menos complejo manejarlos.</p>"},{"location":"ud04/ud0406/","title":"4.6 Recursividad","text":"<p>A la hora de crear programas complejos, uno de los aspectos que diferencia el buen programador del aficionado es su capacidad de hacer algoritmos eficientes. O sea, que sean capaces de resolver el problema planteado en el m\u00ednimo de pasos. En el caso de un programa, esto significa la necesidad de ejecutar el m\u00ednimo n\u00famero de instrucciones posible. Ciertamente, si el resultado tiene que ser exactamente el mismo, siempre ser\u00e1 mejor hacer una tarea en 10 pasos que en 20, intentando evitar pasos que en realidad son innecesarios. Por lo tanto, la etapa de dise\u00f1o de un algoritmo es bastante importante y hay que pensar bien una estrategia eficiente. Ahora bien, normalmente, los algoritmos m\u00e1s eficientes tambi\u00e9n son m\u00e1s dif\u00edciles de pensar y codificar, ya que no siempre son evidentes.</p>"},{"location":"ud04/ud0406/#aplicacion-de-la-recursividad","title":"Aplicaci\u00f3n de la recursividad","text":"<p>A menudo encontrar\u00e9is que explicar de palabra la idea general de una estrategia puede ser sencillo, pero traducirla a instrucciones de Java ya no lo es tanto. Retomamos ahora el caso de la b\u00fasqueda dicot\u00f3mica o binaria, dado que hay que ir repitiendo unos pasos en sucesivas iteraciones, est\u00e1 m\u00e1s o menos claro que el problema planteado para realizar b\u00fasquedas eficientes se basa en una estructura de repetici\u00f3n. Pero no se recorren todos los elementos y el \u00edndice no se incrementa uno a uno, sino que se va cambiando a valores muy diferentes para cada iteraci\u00f3n. No es un caso evidente. Precisamente, este ejemplo no se ha elegido al azar, ya que es un caso en el que os puede ir bien aplicar un nuevo concepto que permite facilitar la definici\u00f3n de algoritmos complejos donde hay repeticiones.</p> <p> </p> <p>La recursividad es una forma de describir un proceso para resolver un problema de manera que, a lo largo de esta descripci\u00f3n, se usa el proceso mismo que se est\u00e1 describiendo, pero aplicado a un caso m\u00e1s simple.</p> <p>De hecho, tal vez sin darse cuenta de ello, ya se ha usado recursividad para describir c\u00f3mo resolver un problema. Para ver qu\u00e9 significa exactamente la definici\u00f3n formal apenas descrita, se repetir\u00e1 el texto en cuesti\u00f3n, pero remarcando el aspecto recursivo de la descripci\u00f3n:</p> <p>\"Generalmente, la mejor estrategia para adivinar un n\u00famero secreto entre 0 y N ser\u00eda primero probar N/2. Si no se ha acertado, entonces si el n\u00famero secreto es m\u00e1s alto se intenta adivinar entre (N/2 + 1) y N. Si era m\u00e1s bajo, se intenta adivinar el valor entre 0 y N-1. Para cada caso, se vuelve a probar el valor que hay en el centro del nuevo intervalo. Y as\u00ed sucesivamente, hasta adivinarlo.\"</p> <p>O sea, el proceso de adivinar un n\u00famero se basa en el proceso de intentar adivinar un n\u00famero! Esto parece hacer trampas, ya es como usar la misma palabra que se quiere definir a su propia definici\u00f3n. Pero f\u00edjate en un detalle muy importante; los nuevos usos del proceso de \"adivinar\" son casos m\u00e1s simples, ya que primero se adivina entre N valores posibles, luego entre N/2 valores, despu\u00e9s entre N/4, etc. Este hecho no es casual y de \u00e9l depende poder definir un proceso recursivo de manera correcta.</p> <p> </p> <p>Otro ejemplo de recursividad es la definici\u00f3n de las iniciales del sistema operativo GNU quieren decir \"GNU is Not Unix\"</p>"},{"location":"ud04/ud0406/#implementacion-de-la-recursividad","title":"Implementaci\u00f3n de la recursividad","text":"<p>La implementaci\u00f3n de la recursividad dentro del c\u00f3digo fuente de un programa se realiza a nivel de m\u00e9todo.</p> <p> </p> <p>Un m\u00e9todo recursivo es aquel que, dentro de su bloque de instrucciones, tiene alguna invocaci\u00f3n a \u00e9l mismo.</p> <p>El bloque de c\u00f3digo de un m\u00e9todo recursivo siempre se basa en una estructura de selecci\u00f3n m\u00faltiple, donde cada rama es de alguno de los dos casos posibles descritos a continuaci\u00f3n.</p> <ul> <li>Por un lado, en el caso base, que contiene un bloque instrucciones dentro de las cuales no hay ninguna llamada al m\u00e9todo mismo. Se ejecuta cuando se considera que, a partir de los par\u00e1metros de entrada, el problema ya es suficientemente simple como para ser resuelto directamente. </li> </ul> <p>En el caso de la b\u00fasqueda binaria, ser\u00eda cuando la posici\u00f3n intermedia es exactamente el valor que se est\u00e1 buscando, o bien cuando ya se puede decidir que el elemento a buscar no existe.</p> <ul> <li>Por otra parte, existe el caso recursivo, que contiene un bloque de instrucciones dentro de las cuales hay una llamada al m\u00e9todo mismo, dado que se considera que a\u00fan no se puede resolver el problema f\u00e1cilmente. Ahora bien, los valores usados como par\u00e1metros de esta nueva llamada deben ser diferentes a los originales. Concretamente, ser\u00e1n unos valores que tiendan a acercarse al caso base. </li> </ul> <p>En el caso de la b\u00fasqueda binaria, se corresponde a la b\u00fasqueda sobre la mitad de los valores originales, ya sea hacia la mitad inferior o superior. Este es un caso en el que el intervalo de posiciones donde se har\u00e1 la nueva b\u00fasqueda se va acercando al caso base, ya que tarde o temprano, llamada tras llamada, el espacio de b\u00fasqueda se ir\u00e1 reduciendo hasta que, o bien se encuentra el elemento, o queda claro que no est\u00e1.</p> <p> </p> <p>Dentro de la estructura de selecci\u00f3n siempre debe haber al menos un caso base y uno recursivo. Normalmente, los algoritmos recursivos m\u00e1s sencillos tienen uno de cada. Es imprescindible que los casos recursivos siempre garanticen que sucesivas llamadas van aproximando los valores de los par\u00e1metros de entrada a alg\u00fan caso base, ya que, de lo contrario, el programa nunca termina y se produce el mismo efecto que en un bucle infinito.</p>"},{"location":"ud04/ud0406/#calculo-recursivo-de-la-operacion-factorial","title":"C\u00e1lculo recursivo de la operaci\u00f3n factorial","text":"<p>Como ejemplo del funcionamiento de un m\u00e9todo recursivo, se empezar\u00e1 con un caso sencillo. Se trata del c\u00e1lculo de la llamada operaci\u00f3n factorial de un valor entero positivo. Esta es unaria y se expresa con el operador exclamaci\u00f3n (por ejemplo, 4!, 20!, 3!). El resultado de esta operaci\u00f3n es la multiplicaci\u00f3n de todos los valores desde el 1 hasta el indicado (7! = 1 * 2 * 3 * 4 * 5 * 6 * 7). Normalmente, la definici\u00f3n matem\u00e1tica de esta operaci\u00f3n se hace de manera recursiva:</p> <ul> <li><code>0! = 1</code> &lt;-- caso base</li> <li><code>n! = N * (n - 1)!</code> &lt;-- caso recursivo</li> </ul> <p>As\u00ed pues, tened en cuenta que el caso recursivo realiza un c\u00e1lculo que depende de usar la propia definici\u00f3n de la operaci\u00f3n, pero cuando lo hace es con un nuevo valor inferior al original, por lo que se garantiza que, en alg\u00fan momento, se har\u00e1 una llamada recursiva que desembocar\u00e1 en el caso base. Cuando esto ocurra, la cadena de llamadas recursivas acabar\u00e1. Una manera de ver esto es desarrollando paso a paso esta definici\u00f3n:</p> <p>1\u00aa llamada)  <code>4! = 4 * (4 - 1)! = 4 * (3)!</code> 2\u00aa llamada)  <code>4! * 3! = 4 * (3 * (3-1))! = 4 * 3 * (2)!</code> 3\u00aa llamada)  <code>4 * 3 * 2! = 4 * 3 * (2 * (2-1))! = 4 * 3 * 2 * (1)!</code> 4\u00aa llamada)  <code>4 * 3 * 2 * 1! = 4 * 3 * 2 * (1 * (1 - 1))! = 4 * 3 * 2 * 1 * (0)!</code> 5\u00aa  retorno)   <code>4 * 3 * 2 * 1 * 0! = 4 * 3 * 2 * 1 * (1) = 24</code></p> <p>Su implementaci\u00f3n en Java ser\u00eda la siguiente. Ahora bien, en este c\u00f3digo se han a\u00f1adido algunas sentencias para escribir informaci\u00f3n por pantalla, de forma que se vea con m\u00e1s detalle c\u00f3mo funciona un m\u00e9todo recursivo. Ver\u00e9is que, inicialmente, se llevan a cabo una serie de invocaciones del caso recursivo, uno tras otro, hasta que se llega a una llamada que ejecuta el caso base. Es a partir de entonces cuando, a medida que se van ejecutando las sentencias <code>return</code> del caso recursivo, realmente se va acumulando el c\u00e1lculo. Otra forma de verlo es depurando el programa.</p> Java<pre><code>package UD04;\n\npublic class Recursividad {\n\npublic static void main(String[] args) {\n    //factorial\n    System.out.println(\"FACTORIAL DE 4: \" + factorial(4));\n    [...]      \n}\n\n/**\n * M\u00e9todo recursivo que calcula el factorial\n */\npublic static int factorial(int n) {\n    if (n == 0) {\n        //Caso base: Se sabe el resultat directamente\n        System.out.println(\"Caso base: n es igual a 0\");\n        return 1;\n    } else {\n        //Caso recursivo: Para calcularlo hay que invocar al m\u00e9todo recursivo\n        //El valor del nuevo par\u00e1metro de entradad se ha de modificar, de\n        //manera que se vaya acercando al caso base\n        System.out.println(\"Caso recursivo \" + (n - 1)\n                + \": Se invoca al factorial(\" + (n - 1) + \")\");\n        int res = n * factorial(n - 1);\n        System.out.println(\"  cuyo resultado es: \" + res);\n        return res;\n    }\n}\n[...]\n</code></pre> <p>La ejecuci\u00f3n resultante es:</p> Java<pre><code>Caso recursivo 3: Se invoca al factorial(3)\nCaso recursivo 2: Se invoca al factorial(2)\nCaso recursivo 1: Se invoca al factorial(1)\nCaso recursivo 0: Se invoca al factorial(0)\nCaso base: n es igual a 0\n  cuyo resultado es: 1\n  cuyo resultado es: 2\n  cuyo resultado es: 6\n  cuyo resultado es: 24\nFACTORIAL DE 4: 24\n</code></pre>"},{"location":"ud04/ud0406/#calculo-recursivo-de-la-busqueda-dicotomica","title":"C\u00e1lculo recursivo de la b\u00fasqueda dicot\u00f3mica","text":"<p>A continuaci\u00f3n se muestra el c\u00f3digo del algoritmo recursivo de b\u00fasqueda dicot\u00f3mica o binaria sobre un array. Observad atentamente los comentarios, los cuales identifican los casos base y recursivos. En este caso, hay m\u00e1s de un caso base y recursivo.</p> Java<pre><code>package UD04;\n\npublic class Recursividad {\n\n    public static void main(String[] args) {\n        [...]\n        //busqueda binaria recursiva\n        int[] array = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n        int buscaDieciocho = BusquedaBinaria(array, 0, array.length - 1, 18);\n        int buscaCinco = BusquedaBinaria(array, 0, array.length - 1, 5);\n        System.out.println(\"Busqueda del 18: \" + buscaDieciocho);\n        System.out.println(\"Busqueda del 5: \" + buscaCinco);\n        [...]\n    }\n\n    [...]\n    public static int BusquedaBinaria(int[] array, int inicio, int fin, int valor) {\n        if (inicio &gt; fin) {\n            //Caso base: No se ha encontrado el valor\n            return -1;\n        }\n        //Se calcula la posici\u00f3n central entre los dos \u00edndices de b\u00fasqueda\n        int pos = inicio + (fin - inicio) / 2;\n        if (array[pos] &gt; valor) {\n            //Caso recursivo: Si el valor es menor que la posici\u00f3n que se ha \n            //consultado, entonces hay que seguir buscando por la parte \n            //\"derecha\" del array\n            return BusquedaBinaria(array, inicio, pos - 1, valor);\n        } else if (array[pos] &lt; valor) {\n            //Caso recursivo: Si el valor es mayor que la posici\u00f3n que se ha\n            //consultado, entonces hay que seguir buscando por la parte \n            //\"izquierda\" del array\n            return BusquedaBinaria(array, pos + 1, fin, valor);\n        } else {\n            //caso base: Es igual, por tanto, se ha encontrado\n            return pos;\n        }\n    }\n    [...]\n}\n</code></pre> <p>El resultado de la ejecuci\u00f3n es:</p> Java<pre><code>Busqueda del 18: 8\nBusqueda del 5: -1\n</code></pre> <p>Pr\u00e1cticamente cualquier problema que se puede resolver con un algoritmo recursivo tambi\u00e9n se puede resolver con sentencias de estructuras de repetici\u00f3n (de manera iterativa). Pero muy a menudo su implementaci\u00f3n ser\u00e1 mucho menos evidente y las interacciones entre instrucciones bastante m\u00e1s complejas que la opci\u00f3n recursiva (una vez se entiende este concepto, claro).</p>"},{"location":"ud04/ud0406/#algoritmo-ya-existente","title":"Algoritmo ya existente","text":"<p>M\u00e1s all\u00e1 de ser un ejercicio de algor\u00edtmica, resultar\u00eda mucho m\u00e1s adecuado utilizar la versi\u00f3n ya incorporada en la librer\u00eda est\u00e1ndar del lenguaje de programaci\u00f3n Java:</p> Java<pre><code>import java.util.Arrays;\n\n[...]\n\npublic int busquedaBinaria (int[] n\u00fameros, int n\u00famero) {\n    return Arrays.binarySearch(n\u00fameros, n\u00famero);\n}\n</code></pre>"},{"location":"ud04/ud0406/#desbordamiento-de-pila-stack-overflow","title":"Desbordamiento de pila (stack overflow)","text":"<p>Las versiones recursivas de muchas rutinas pueden ejecutarse un poco m\u00e1s lentamente que sus equivalentes iterativos debido a la sobrecarga adicional de las llamadas a m\u00e9todos adicionales. Demasiadas llamadas recursivas a un m\u00e9todo podr\u00edan causar un desbordamiento de la pila.</p> <p>Como el almacenamiento para los par\u00e1metros y las variables locales est\u00e1n en la pila y cada llamada nueva crea una nueva copia de estas variables, es posible que la pila se haya agotado. Si esto ocurre, el sistema de tiempo de ejecuci\u00f3n (run-time) de Java causar\u00e1 una excepci\u00f3n. Sin embargo, probablemente no tendr\u00e1s que preocuparte por esto a menos que una rutina recursiva se vuelva loca.</p> <p>La principal ventaja de la recursividad es que algunos tipos de algoritmos se pueden implementar de forma m\u00e1s clara y m\u00e1s recursiva de lo que pueden ser iterativamente. Por ejemplo, el algoritmo de clasificaci\u00f3n Quicksort es bastante dif\u00edcil de implementar de forma iterativa. Adem\u00e1s, algunos problemas, especialmente los relacionados con la IA, parecen prestarse a soluciones recursivas.</p> Java<pre><code>package UD04;\n\npublic class Recursividad {\n\n    public static void main(String[] args) {\n        [...]        \n        //desbordamiento de pila\n        desbordamientoPila(10);\n    }\n\n    [...]\n\n    public static int desbordamientoPila(int n) {\n        // condici\u00f3n base incorrecta (esto provoca un desbordamiento de la pila).\n        if (n == 100) {\n            return 1;\n        } else {\n            return n * desbordamientoPila(n - 1);\n        }\n    }\n}\n</code></pre> <p>En el ejemplo anterior si se llama a <code>desbordamientoPila(10)</code>, llamar\u00e1 a <code>desbordamientoPila (9)</code>, <code>desbordamientoPila(8)</code>, <code>desbordamientoPila(7)</code>, etc., pero el n\u00famero nunca llegar\u00e1 a 100. Por lo tanto, no se alcanza la condici\u00f3n base. Si la memoria se agota con estos m\u00e9todos en la pila, provocar\u00e1 un error de desbordamiento de pila (<code>java.lang.StackOverflowError</code>).</p> <p> </p> <p>Al escribir m\u00e9todos recursivos, debe tener una instrucci\u00f3n condicional, como un <code>if</code>, en alg\u00fan lugar para forzar el retorno del m\u00e9todo sin que se ejecute la llamada recursiva. Si no lo hace, una vez que llame al m\u00e9todo, nunca retornar\u00e1. Este tipo de error es muy com\u00fan cuando se trabaja con recursividad.</p> <p>Ejemplo completo de recursividad</p> <p>Enlace a ejercicio completo de recursividad.</p>"},{"location":"ud04/ud0407/","title":"4.7 Anexos","text":"<p>Desde el punto de vista de la programaci\u00f3n diaria, uno de los tipos de datos m\u00e1s importantes de Java es String. String define y admite cadenas de caracteres. En algunos otros lenguajes de  programaci\u00f3n, una cadena o string es una matriz o array de caracteres. Este no es el caso con Java. En Java, los String son objetos.</p> <p>En realidad, has estado usando la clase String desde el comienzo del curso, pero no lo sab\u00edas. Cuando crea un literal de cadena, en realidad est\u00e1 creando un objeto String. Por ejemplo, en la declaraci\u00f3n:</p> Java<pre><code>System.out.println(\"En Java, los String son objetos\");\n</code></pre> <p>La clase String es bastante grande, y solo veremos una peque\u00f1a parte aqu\u00ed.</p>"},{"location":"ud04/ud0407/#construyendo-string","title":"Construyendo <code>String</code>","text":"<p>Puede construir un <code>String</code> igual que construye cualquier otro tipo de objeto: utilizando new y llamando al constructor String. Por ejemplo:</p> Java<pre><code>String str = new String(\"Hola\");\n</code></pre> <p>Esto crea un objeto String llamado str que contiene la cadena de caracteres \u201cHola\u201d. Tambi\u00e9n puedes construir una String desde otro String. Por ejemplo:</p> Java<pre><code>String str = new String(\"Hola\");\nString str2 = new String(str);\n</code></pre> <p>Despu\u00e9s de que esta secuencia se ejecuta, str2 tambi\u00e9n contendr\u00e1 la cadena de caracteres \u201cHola\u201d. </p> <p>Otra forma f\u00e1cil de crear una cadena se muestra aqu\u00ed:</p> Java<pre><code>String str = \"Estoy aprendiendo sobre String en JavadesdeCero.\";\n</code></pre> <p>En este caso, str se inicializa en la secuencia de caracteres \u201cEstoy aprendiendo sobre String en JavadesdeCero.\u201d. </p> <p>Una vez que hayas creado un objeto String, puedes usarlo en cualquier lugar que permita una cadena entrecomillada. Por ejemplo, puedes usar un objeto String como argumento para println(), como se muestra en este ejemplo:</p> Java<pre><code>// Uso de String\nclass DemoString\n{\n    public static void main(String args[])\n    {\n        //Declaraci\u00f3n de String de diferentes maneras\n        String str1 = new String(\"En Java, los String son objetos\");\n\n\n        String str2 = new String(\"Se construyen de varias maneras\");\n        String str3 = new String(str2);\n\n        System.out.println(str1);\n        System.out.println(str2);\n        System.out.println(str3);\n    }\n}\n</code></pre> <p>La salida del programa se muestra a continuaci\u00f3n:</p> Bash<pre><code>En Java, los String son objetos\nSe construyen de varias maneras\nSe construyen de varias maneras\n</code></pre>"},{"location":"ud04/ud0407/#operando-con-metodos-de-la-clase-string","title":"Operando con M\u00e9todos de la clase <code>String</code>","text":"<p>La clase String contiene varios m\u00e9todos que operan en cadenas. Aqu\u00ed se detallan todos los m\u00e9todos:</p> <ul> <li><code>int length()</code>: Devuelve la cantidad de caracteres del String.</li> </ul> Java<pre><code>\"Javadesdecero.es\".length(); // retorna 16\n</code></pre> <ul> <li><code>Char charAt(int i)</code>: Devuelve el car\u00e1cter en el \u00edndice i.</li> </ul> Java<pre><code>System.out.println(\"Javadesdecero.es\".charAt(3)); // retorna 'a'\n</code></pre> <ul> <li><code>String substring(int i)</code>: Devuelve la subcadena del i-\u00e9simo car\u00e1cter de \u00edndice al final.</li> </ul> Java<pre><code>\"Javadesdecero.es\".substring(4); // retorna desdecero.es\n</code></pre> <ul> <li><code>String substring(int i, int j)</code>: Devuelve la subcadena del \u00edndice i a j-1.</li> </ul> Java<pre><code>\"Javadesdecero.es\".substring(4,9); // retorna desde\n</code></pre> <ul> <li><code>String concat(String str)</code>: Concatena la cadena especificada al final de esta cadena.</li> </ul> Java<pre><code>String s1 = \"Java\";\nString s2 = \"desdeCero;\nString salida = s1.concat(s2); // retorna \"JavadesdeCero\"\n</code></pre> <ul> <li><code>int indexOf(String s)</code>: Devuelve el \u00edndice dentro de la cadena de la primera aparici\u00f3n de la cadena especificada.</li> </ul> Java<pre><code>String s = \"Java desde Cero\";\nint salida = s.indexOf(\"Cero\"); // retorna 11\n</code></pre> <ul> <li><code>int indexOf(String s, int i)</code>: Devuelve el \u00edndice dentro de la cadena de la primera aparici\u00f3n de la cadena especificada, comenzando en el \u00edndice especificado.</li> </ul> Java<pre><code>String s = \"Java desde Cero\";\nint salida = s.indexOf('a',2); //retorna 3\n</code></pre> <ul> <li><code>int lastIndexOf(int ch)</code>: Devuelve el \u00edndice dentro de la cadena de la \u00faltima aparici\u00f3n de la cadena especificada.</li> </ul> Java<pre><code>String s = \"Java desde Cero\";\nint salida = s.lastIndexOf('a'); // retorna 3\n</code></pre> <ul> <li><code>boolean equals(Objeto otroObjeto)</code>: Compara este String con el objeto especificado.</li> </ul> Java<pre><code>Boolean salida = \"Java\".equals(\"Java\"); // retorna true\nBoolean salida = \"Java\".equals(\"java\"); // retorna false\n</code></pre> <ul> <li><code>boolean equalsIgnoreCase(String otroString)</code>: Compares string to another string, ignoring case considerations.</li> </ul> Java<pre><code>Boolean salida = \"Java\".equalsIgnoreCase(\"Java\"); // retorna true\nBoolean salida = \"Java\".equalsIgnoreCase(\"java\"); // retorna true\n</code></pre> <ul> <li><code>int compareTo(String otroString)</code>: Compara dos cadenas lexicogr\u00e1ficamente.</li> </ul> Java<pre><code>int salida = s1.compareTo(s2); // donde s1 y s2 son strings que se comparan\n/*\n Esto devuelve la diferencia s1-s2. Si:\n    salida &lt; 0 // s1 es menor que s2\n    salida = 0 // s1 y s2 son iguales\n    salida &gt; 0 // s1 es mayor que s2\n */\n</code></pre> <ul> <li><code>int compareToIgnoreCase(String otroString)</code>: Compara dos cadenas lexicogr\u00e1ficamente, ignorando las consideraciones case.</li> </ul> Java<pre><code>int salida = s1.compareToIgnoreCase(s2); // donde s1 y s2 son strings que se comparan\n/*\n Esto devuelve la diferencia s1-s2. Si:\n    salida &lt; 0 // s1 es menor que s2\n    salida = 0 // s1 y s2 son iguales\n    salida &gt; 0 // s1 es mayor que s2\n*/\n</code></pre> <p> </p> <p>En este caso, no considerar\u00e1 el case de una letra (ignorar\u00e1 si est\u00e1 en may\u00fascula o min\u00fascula). </p> <ul> <li><code>String toLowerCase()</code>: Convierte todos los caracteres de String a min\u00fasculas.</li> </ul> Java<pre><code>String palabra1 = \"HoLa\";\nString palabra2 = palabra1.toLowerCase(); // retorna \"hola\"\n</code></pre> <ul> <li><code>String toUpperCase()</code>: Convierte todos los caracteres de String a may\u00fasculas.</li> </ul> Java<pre><code>String palabra1 = \"HoLa\";\nString palabra2 = palabra1.toUpperCase(); // retorna \"HOLA\"\n</code></pre> <ul> <li><code>String trim()</code>: Devuelve la copia de la cadena, eliminando espacios en blanco en ambos extremos. No afecta los espacios en blanco en el medio.</li> </ul> Java<pre><code>String palabra1 = \" Java desde Cero \";\nString palabra2 = palabra1.trim(); // retorna \"Java desde Cero\"\n</code></pre> <ul> <li><code>String replace(char oldChar, char newChar)</code>: Devuelve una nueva cadena al reemplazar todas las ocurrencias de oldChar con newChar.</li> </ul> Java<pre><code>String palabra1 = \"javadesdecero\";\nString palabra2 = palabra1.replace('y' ,'j'); //retorna javadesdecero\n</code></pre> <p> </p> <p>s1 sigue siendo yavadesdecero y s2 javadesdecero. </p> <ul> <li><code>String replaceAll(String regex, String replacement)</code>: devuelve una cadena que reemplaza toda la secuencia de caracteres que coinciden con la expresi\u00f3n regular <code>regex</code> por la cadena de reemplazo <code>replacement</code>.</li> </ul> Java<pre><code>String str = \"Ejemplo con espaciones en blanco y tabs\";\nString str2 = str.replaceAll(\"\\\\s\", \"\"); //retorna Ejemploconespaciosenblancoytabs\n</code></pre> <p> </p> <p>Otras expresiones regulares (entre otras much\u00edsimas):</p> <ul> <li><code>\\w</code> Cualquier cosa que sea un car\u00e1cter de palabra.</li> <li><code>\\W</code> Cualquier cosa que no sea un car\u00e1cter de palabra (incluida la puntuaci\u00f3n, etc.).</li> <li><code>\\s</code> Cualquier cosa que sea un car\u00e1cter de espacio (incluido el espacio, los caracteres de tabulaci\u00f3n, etc.).</li> <li><code>\\S</code> Cualquier cosa que no sea un car\u00e1cter de espacio (incluidas letras y n\u00fameros, as\u00ed como puntuaci\u00f3n, etc.).</li> </ul> <p>Debes escapar de la barra invertida si deseas que <code>\\s</code> alcance el motor de expresiones regulares, lo que da como resultado <code>\\\\s</code>).</p> <p>M\u00e1s informaci\u00f3n</p> <p>M\u00e1s informaci\u00f3n sobre expresiones regulares en java: https://www.vogella.com/tutorials/JavaRegularExpressions/article.html</p> Ejemplo de todos los m\u00e9todos <code>String</code> Java<pre><code>// Ilustrar diferentes constructores y m\u00e9todos de la clase String.\n\nclass DemoMetodosString {\n  public static void main (String[] args) {\n    String s= \"JavadesdeCero\";\n    // o String s= new String (\"JavadesdeCero\");\n\n    // Devuelve la cantidad de caracteres en la Cadena.\n    System.out.println(\"String length = \" + s.length());\n\n    // Devuelve el car\u00e1cter en el \u00edndice i.\n    System.out.println(\"Character at 3rd position = \" + s.charAt(3));\n\n    // Devuelve la subcadena del car\u00e1cter \u00edndice i-\u00e9simo al final de la cadena\n    System.out.println(\"Substring \" + s.substring(3));\n\n    // Devuelve la subcadena del \u00edndice i a j-1.\n    System.out.println(\"Substring  = \" + s.substring(2,5));\n\n    // Concatena string2 hasta el final de string1.\n    String s1 = \"Java\";\n    String s2 = \"desdeCero\";\n    System.out.println(\"String concatenado  = \" + s1.concat(s2));\n\n    // Devuelve el \u00edndice dentro de la cadena de\n    // la primera aparici\u00f3n de la cadena especificada.\n    String s4 = \"Java desde Cero\";\n    System.out.println(\"\u00cdndice de Cero: \" + s4.indexOf(\"Cero\"));\n\n    // Devuelve el \u00edndice dentro de la cadena de\n    // la primera aparici\u00f3n de la cadena especificada,\n    // comenzando en el \u00edndice especificado.\n    System.out.println(\"\u00cdndice de a  = \" + s4.indexOf('a',3));\n\n    // Comprobando la igualdad de cadenas\n    Boolean out = \"Java\".equals(\"java\");\n    System.out.println(\"Comprobando la igualdad: \" + out);\n    out = \"Java\".equals(\"Java\");\n    System.out.println(\"Comprobando la igualdad: \" + out);\n\n    out = \"Java\".equalsIgnoreCase(\"jaVA \");\n    System.out.println(\"Comprobando la igualdad: \" + out);\n\n    int out1 = s1.compareTo(s2);\n    System.out.println(\"Si s1 = s2: \" + out1);\n\n    // Conversi\u00f3n de cases\n    String palabra1 = \"JavadesdeCero\";\n    System.out.println(\"Cambiando a min\u00fasculas: \" + palabra1.toLowerCase());\n\n    // Conversi\u00f3n de cases\n    String palabra2 = \"JavadesdeCero\";\n    System.out.println(\"Cambiando a MAY\u00daSCULAS: \" + palabra1.toUpperCase());\n\n    // Recortando la palabra\n    String word4 = \" JavadesdeCero \";\n    System.out.println(\"Recortando la palabra: \" + word4.trim());\n\n    // Reemplazar caracteres\n    String str1 = \"YavadesdeCero\";\n    System.out.println(\"String Original: \" + str1);\n    String str2 = \"YavadesdeCero\".replace('Y' ,'J') ;\n    System.out.println(\"Reemplazando Y por J -&gt; \" + str2);\n\n    // Reemplazar todos los car\u00e1cteres\n    String strAll = \"Guru99 is a site providing free tutorials\";\n    System.out.println(\"String Original: \" + strAll);\n    String strAll2 = strAll.replaceAll(\"\\\\s\", \"\");\n    System.out.println(\"Eliminando los espacios en blanco -&gt; \" + strAll2);\n  }\n}\n</code></pre> <p>Salida:</p> Bash<pre><code>String length = 13\nCharacter at 3rd position = a\nSubstring adesdeCero\nSubstring = vad\nString concatenado = JavadesdeCero\n\u00cdndice de Cero: 11\n\u00cdndice de a = 3\nComprobando la igualdad: false\nComprobando la igualdad: true\nComprobando la igualdad: false\nSi s1 = s2: -26\nCambiando a min\u00fasculas: javadesdecero\nCambiando a MAY\u00daSCULAS: JAVADESDECERO\nRecortando la palabra: JavadesdeCero\nString Original: YavadesdeCero\nReemplazando Y por J -&gt; JavadesdeCero\nString Original: Guru99 is a site providing free tutorials\nEliminando los espacios en blanco -&gt; Guru99issueproporcionarTutorialesfreet\n</code></pre>"},{"location":"ud04/ud0407/#arrays-de-string","title":"Arrays de <code>String</code>","text":"<p>Al igual que cualquier otro tipo de datos, los String se pueden ensamblar en arrays. Por ejemplo:</p> Java<pre><code>// Demostrando arrays de String\nclass StringArray {\n    public static void main (String[] args) {\n       String str[]={\"Java\", \"desde\", \"Cero\"};\n\n\n\n\n        System.out.println(\"Array Original: \");\n        for (String s : str)\n            System.out.print(s+ \"\");\n        System.out.println(\"\\n\");\n\n        //Cambiando un String\n        str[1]=\"Curso\";\n        str[2]=\"Online\";\n\n        System.out.println(\"Array Modificado: \");\n        for (String s : str)\n            System.out.print(s+ \"\");\n        System.out.println(\"\\n\");\n    }\n}\n</code></pre> <p>Se muestra el resultado de este programa:</p> Bash<pre><code>Array Original: \nJavadesdeCero\n\nArray Modificado: \nJavaCursoOnline\n</code></pre>"},{"location":"ud04/ud0407/#los-string-son-inmutables","title":"Los <code>String</code> son inmutables","text":"<p>El contenido de un objeto String es inmutable. Es decir, una vez creada, la secuencia de caracteres que compone la cadena no se puede modificar. Esta restricci\u00f3n permite a Java implementar cadenas de manera m\u00e1s eficiente. Aunque esto probablemente suene como un serio inconveniente, no lo es.</p> <p>Cuando necesites una cadena que sea una variaci\u00f3n de una que ya existe, simplemente crea una nueva cadena que contenga los cambios deseados. Como los objetos String no utilizados se recolectan de forma autom\u00e1tica, ni siquiera tienes que preocuparte por lo que sucede con las cadenas descartadas. Sin embargo, debe quedar claro que las variables de referencia de cadena pueden, por supuesto, cambiar el objeto al que hacen referencia. Es solo que el contenido de un objeto String espec\u00edfico no se puede cambiar despu\u00e9s de haber sido creado.</p> <p>Para comprender completamente por qu\u00e9 las cadenas inmutables no son un obst\u00e1culo, utilizaremos otro de los m\u00e9todos de String: <code>substring()</code>. El m\u00e9todo <code>substring()</code> devuelve una nueva cadena que contiene una parte especificada de la cadena invocadora. Como se fabrica un nuevo objeto String que contiene la subcadena, la cadena original no se altera y la regla de inmutabilidad permanece intacta. La forma de <code>substring( )</code> que vamos a utilizar se muestra aqu\u00ed:</p> Java<pre><code>String substring(int beginIndex, int endIndex)\n</code></pre> <p>Aqu\u00ed, <code>beginIndex</code> especifica el \u00edndice inicial, y <code>endIndex</code> especifica el punto final. Aqu\u00ed hay un programa que demuestra el uso de <code>substring( )</code> y el principio de cadenas inmutables:</p> Java<pre><code>// uso de substring()\nclass SubString {\n    public static void main (String[] args) {\n        String str=\"Java desde Cero\";\n\n        //Construyendo un substring\n        String substr=str.substring(5,15);\n\n        System.out.println(\"str: \"+str);\n        System.out.println(\"substr: \"+substr);\n    }\n}\n</code></pre> <p>Salida:</p> Bash<pre><code>str: Java desde Cero\nsubstr: desde Cero\n</code></pre> <p>Como puedes ver, la cadena original <code>str</code> no se modifica, y <code>substr</code> contiene la subcadena.</p>"},{"location":"ud04/ud0407/#string-en-argumentos-de-linea-de-comandos","title":"<code>String</code> en Argumentos de L\u00ednea de Comandos","text":"<p>Ahora que conoces la clase String, puedes comprender el par\u00e1metro args en main() que ha estado en cada programa mostrado hasta ahora. Muchos programas aceptan lo que se llaman argumentos de l\u00ednea de comandos. Un argumento de l\u00ednea de comandos es la informaci\u00f3n que sigue directamente el nombre del programa en la l\u00ednea de comando cuando se ejecuta.</p> <p>Para acceder a los argumentos de la l\u00ednea de comandos dentro de un programa Java es bastante f\u00e1cil: se almacenan como cadenas en la matriz String pasada a <code>main()</code>. Por ejemplo, el siguiente programa muestra todos los argumentos de l\u00ednea de comandos con los que se llama:</p> Java<pre><code>// Mostrando Informaci\u00f3n de L\u00ednea de Comando\nclass DemoLC{\n    public static void main (String[] args){\n        System.out.println(\"Aqu\u00ed se muestran \"+ args.length \n                           + \" argumentos de l\u00ednea de comando.\");\n        System.out.println(\"Estos son: \");\n        for (int i=0; i&lt;args.length; i++){\n            System.out.println(\"arg[\"+i+\"]: \"+args);\n        }\n    }\n}\n</code></pre> <p>Si <code>DemoLC</code> se ejecuta de esta manera,</p> Bash<pre><code>java DemoLC uno dos tres\n</code></pre> <p>ver\u00e1s la siguiente salida:</p> Bash<pre><code>Aqu\u00ed se muestran 3 argumentos de l\u00ednea de comando.\nEstos son:\narg[0]: uno\narg[1]: dos\narg[2]: tres\n</code></pre> <p>Observa que el primer argumento se almacena en el \u00edndice 0, el segundo argumento se almacena en el \u00edndice 1, y as\u00ed sucesivamente.</p> <p>Para tener una idea de la forma en que se pueden usar los argumentos de la l\u00ednea de comandos, considera el siguiente programa. Se necesita un argumento de l\u00ednea de comandos que especifique el nombre de una persona. Luego busca a trav\u00e9s de una matriz bidimensional de cadenas para ese nombre. Si encuentras una coincidencia, muestra el n\u00famero de tel\u00e9fono de esa persona.</p> Java<pre><code>class Telefono {\n    public static void main (String[] args){\n        String numeros[][]={{ \"Alex\", \"123-456\"},\n                            { \"Juan\", \"145-478\"},\n                            { \"Javier\", \"789-457\"},\n                            { \"Maria\", \"784-554\"}\n                            };\n        int i;\n        if (args.length != 1){\n            System.out.println(\"Ejecuta as\u00ed: java Telefono &lt;nombre&gt;\");\n        } else {\n            for (i = 0; i &lt; numeros.length; i++) {\n                System.out.println(numeros + \": \" + numeros);\n                break;\n            }\n            if (i == numeros.length){\n                System.out.println(\"Nombre no encontrado.\");\n            }\n        }\n    }\n}\n</code></pre> <p>Aqu\u00ed hay una muestra de ejecuci\u00f3n:</p> Bash<pre><code>java Telefono Alex\nAlex: 123-456\n</code></pre>"},{"location":"ud04/ud04ac/","title":"Actividades","text":""},{"location":"ud04/ud04ac/#arrays-ejercicios-de-recorrido","title":"Arrays. Ejercicios de recorrido","text":""},{"location":"ud04/ud04ac/#ejercicio-01-estaturas","title":"Ejercicio 01 <code>Estaturas</code>","text":"<p>Escribir un programa que lea de teclado la estatura de 10 personas y las almacene en un array. Al finalizar la introducci\u00f3n de datos, se mostrar\u00e1n al usuario los datos introducidos con el siguiente formato:</p> Bash<pre><code>Persona 1: 1.85 m.\nPersona 2: 1.53 m.\n...\nPersona 10: 1.23 m.\n</code></pre>"},{"location":"ud04/ud04ac/#ejercicio-02-lluvias","title":"Ejercicio 02 <code>Lluvias</code>","text":"<p>Se dispone de un fichero, de nombre lluviasEnero.txt, que contiene 31 datos correspondientes a las lluvias ca\u00eddas en el mes de enero del pasado a\u00f1o. Se desea analizar los datos del fichero para averiguar:</p> <ul> <li>La lluvia total ca\u00edda en el mes.</li> <li>La cantidad media de lluvias del mes.</li> <li>La cantidad m\u00e1s grande de lluvia ca\u00edda en un solo d\u00eda.</li> <li>Cual fue el d\u00eda que m\u00e1s llovi\u00f3.</li> <li>La cantidad m\u00e1s peque\u00f1a de lluvia ca\u00edda en un solo d\u00eda.</li> <li>Cual fue el d\u00eda que menos llovi\u00f3.</li> <li>En cuantos d\u00edas no llovi\u00f3 nada.</li> <li>En cuantos d\u00edas la lluvia super\u00f3 la media.</li> <li>Si en la primera quincena del mes llovi\u00f3 m\u00e1s o menos que en la segunda. </li> <li>En cuantos d\u00edas la lluvia fue menor que la del d\u00eda siguiente.</li> </ul> <p>Para resolver el problema se desarrollar\u00e1n los siguientes m\u00e9todos:</p> <ol> <li><code>public static void leerArray (double v[], String nombreFichero)</code>, que rellena el array v con datos que se encuentran en el fichero especificado. El n\u00famero de datos a leer vendr\u00e1 determinado por el tama\u00f1o del array y no por la cantidad de datos que hay en el fichero.</li> <li><code>public static double suma(double v[])</code>, que devuelve la suma de los elementos del array v</li> <li><code>public static double media(double v[])</code>, que devuelve la media de los elementos del array v. Se puede hacer uso del m\u00e9todo del apartado anterior.</li> <li><code>public static int contarMayorQueMedia(double v[])</code>, que devuelve la cantidad de elementos del array v que son mayores que la media. Se puede hacer uso del m\u00e9todo del apartado anterior.</li> <li><code>public static double maximo(double v[])</code>, que devuelve el valor m\u00e1s grande almacenado en el array v.</li> <li><code>public static double minimo(double v[])</code>, que devuelve el valor m\u00e1s peque\u00f1o almacenado en el array v.</li> <li><code>public static int posMaximo(double v[])</code>, que devuelve la posici\u00f3n del elemento m\u00e1s grande de v. Si \u00e9ste se repite en el array es suficiente devolver la posici\u00f3n en que aparece por primera vez.</li> <li><code>public static int posMinimo(double v[])</code>, que devuelve la posici\u00f3n del elemento m\u00e1s peque\u00f1o de v. Si \u00e9ste se repite en el array es suficiente devolver la posici\u00f3n en que aparece por primera vez.</li> <li><code>public static int contarApariciones(double v[], double x)</code>, que devuelve el n\u00famero de veces que el valor x aparece en el array v.</li> <li><code>public static double sumaParcial(double v[], int izq, int der)</code>, que devuelve la suma de los elementos del array v que est\u00e1n entre las posiciones izq y der.</li> <li><code>public static int menoresQueElSiguiente(double v[])</code>, que devuelve el n\u00famero de elementos de v que son menores que el elemento que tienen a continuaci\u00f3n. </li> </ol>"},{"location":"ud04/ud04ac/#ejercicio-03-dados","title":"Ejercicio 03 <code>Dados</code>","text":"<p>El lanzamiento de un dado es un experimento aleatorio en el que cada n\u00famero tiene las mismas probabilidades de salir. Seg\u00fan esto, cuantas m\u00e1s veces lancemos el dado, m\u00e1s se igualar\u00e1n las veces que aparece cada uno de los 6 n\u00fameros. Vamos a hacer un programa para comprobarlo.</p> <ul> <li> <p>Generaremos un n\u00famero aleatorio entre 1 y 6 un n\u00famero determinado de veces (por ejemplo 100.000). Para ello puedes usar la clase Random.</p> </li> <li> <p>Tras cada lanzamiento incrementaremos un contador correspondiente a la cifra que ha salido. Para ello crearemos un array <code>veces</code> de 7 componentes, en el que el <code>veces[1]</code> servir\u00e1 para contar las veces que sale un 1, <code>veces[2]</code> para contar las veces que sale un 2, etc. <code>veces[0]</code> no se usar\u00e1.</p> </li> <li> <p>Cada, por ejemplo, 1.000 lanzamientos mostraremos por pantalla las estad\u00edsticas que indican que porcentaje de veces ha aparecido cada n\u00famero en los lanzamientos hechos hasta ese momento. Por ejemplo:</p> </li> </ul> Bash<pre><code>N\u00famero de lanzamientos: 1000\n1: 18 %\n2: 14 %\n3: 21 %\n4: 10 %\n5: 18 %\n6: 19 %\n\nN\u00famero de lanzamientos: 2000\n...\n</code></pre> <ul> <li>Para el n\u00famero de lanzamientos (100.000 en el ejemplo) y para la frecuencia con que se muestran las estad\u00edsticas (1.000 en el ejemplo) utilizaremos dos constantes enteras, de nombre <code>LANZAMIENTOS</code> y <code>FRECUENCIA</code>, de esta forma podremos variar de forma c\u00f3moda el modo en que probamos el programa.</li> </ul>"},{"location":"ud04/ud04ac/#ejercicio-04-invertir","title":"Ejercicio 04 <code>Invertir</code>","text":"<p>Dise\u00f1ar un m\u00e9todo <code>public static int[] invertirArray(int[] v)</code>, que dado un array <code>v</code> devuelva otro con los elementos en orden inverso. Es decir, el \u00faltimo en primera posici\u00f3n, el pen\u00faltimo en segunda, etc.</p> <p>Desde el m\u00e9todo <code>main</code> crearemos e inicializaremos un array, llamaremos a <code>invertirArray</code> y mostraremos el array invertido.</p> <p>NOTA: Puede ser \u00fatil un m\u00e9todo que imprima por pantalla un Array <code>public static void imprimirArray(int[] v)</code>, y as\u00ed poder imprimir el Array i</p>"},{"location":"ud04/ud04ac/#ejercicio-05-sumasparciales","title":"Ejercicio 05 <code>SumasParciales</code>","text":"<p>Se quiere dise\u00f1ar un m\u00e9todo <code>public static int[] sumaParcial(int[] v)</code>, que dado un array de enteros <code>v</code>, devuelva otro array de enteros t de forma que <code>t[i] = v[0] + v[1] + ...+ v[i]</code>. Es decir:</p> Bash<pre><code>t[0] = v[0]\nt[1] = v[0] + v[1]\nt[2] = v[0] + v[1] + v[2]\n...\nt[10] = v[0] + v[1] + v[2] + ... + v[10]\n</code></pre> <p>Desde el m\u00e9todo main crearemos e inicializaremos un array, llamaremos a <code>sumaParcial</code> y mostraremos el array resultante.</p>"},{"location":"ud04/ud04ac/#ejercicio-06-rotaciones","title":"Ejercicio 06 <code>Rotaciones</code>","text":"<p>Rotar una posici\u00f3n a la derecha los elementos de un array consiste en mover cada elemento del array una posici\u00f3n a la derecha. El \u00faltimo elemento pasa a la posici\u00f3n 0 del array. Por ejemplo si rotamos a la derecha el array <code>{1,2,3,4}</code> obtendr\u00edamos <code>{4,1,2,3}</code>. </p> <ul> <li> <p>Dise\u00f1ar un m\u00e9todo <code>public static void rotarDerecha(int[] v)</code>, que dado un array de enteros rote sus elementos un posici\u00f3n a la derecha.</p> </li> <li> <p>En el m\u00e9todo <code>main</code> crearemos e inicializaremos un array y rotaremos sus elementos tantas veces como elementos tenga el array (mostrando cada vez su contenido), de forma que al final el array quedar\u00e1 en su estado original. Por ejemplo, si inicialmente el array contiene <code>{7,3,4,2}</code>, el programa mostrar\u00e1</p> </li> </ul> Bash<pre><code>Rotaci\u00f3n 1: 2 7 3 4\nRotaci\u00f3n 2: 4 2 7 3 \nRotaci\u00f3n 3: 3 4 2 7\nRotaci\u00f3n 4: 7 3 4 2\n</code></pre> <ul> <li>Dise\u00f1a tambi\u00e9n un m\u00e9todo para rotar a la izquierda y pru\u00e9balo de la misma forma.</li> </ul>"},{"location":"ud04/ud04ac/#ejercicio-07-dosarrays","title":"Ejercicio 07 <code>DosArrays</code>","text":"<p>Desarrolla los siguientes m\u00e9todos en los que intervienen dos arrays y pru\u00e9balos desde el m\u00e9todo <code>main</code></p> <ul> <li><code>public static double[] sumaArraysIguales (double[] a, double[] b)</code> que dados dos arrays de <code>double</code> <code>a</code> y <code>b</code>, del mismo tama\u00f1o devuelva un array con la suma de los elementos de <code>a</code> y <code>b</code>, es decir, devolver\u00e1 el array <code>{a[0]+b[0], a[1]+b[1], ....}</code></li> <li><code>public static double[] sumaArrays(double[] a, double[] b)</code>. Repite el ejercicio anterior pero teniendo en cuenta que <code>a</code> y <code>b</code> podr\u00edan tener longitudes distintas. En tal caso el n\u00famero de elementos del array resultante coincidir\u00e1 con la longitud del array de mayor tama\u00f1o.</li> </ul>"},{"location":"ud04/ud04ac/#arrays-ejercicios-de-busqueda","title":"Arrays. Ejercicios de b\u00fasqueda","text":""},{"location":"ud04/ud04ac/#ejercicio-08-lluvias","title":"Ejercicio 08 <code>Lluvias</code>","text":"<p>( continuaci\u00f3n ) Queremos incorporar al programa la siguiente informaci\u00f3n:</p> <ul> <li>Cual fue el primer d\u00eda del mes en que llovi\u00f3 exactamente 19 litros (si no hubo ninguno mostrar un mensaje por pantalla indic\u00e1ndolo)</li> <li>Cual fue el \u00faltimo d\u00eda del mes en que llovi\u00f3 exactamente 8 litros (si no hubo ninguno mostrar un mensaje por pantalla indic\u00e1ndolo)</li> </ul> <p>\u200b   Para ello desarrollar\u00e1n los siguientes m\u00e9todos:</p> <ul> <li><code>public static int posPrimero(double[] v, double x)</code>, que devuelve la posici\u00f3n de la primera aparici\u00f3n de <code>x</code> en el array <code>v</code>. Si <code>x</code> no est\u00e1 en <code>v</code> el m\u00e9todo devolver\u00e1 -1. El m\u00e9todo realizar\u00e1 una b\u00fasqueda ascendente para proporcionar el resultado.</li> <li><code>public static int posUltimo(double[] v, double x)</code>, que devuelve la posici\u00f3n de la \u00faltima aparici\u00f3n de <code>x</code> en el array <code>v</code>. Si <code>x</code> no est\u00e1 en <code>v</code> el m\u00e9todo devolver\u00e1 -1. El m\u00e9todo realizar\u00e1 una b\u00fasqueda descendente para proporcionar el resultado.</li> </ul>"},{"location":"ud04/ud04ac/#ejercicio-09-tocayos","title":"Ejercicio 09 <code>Tocayos</code>","text":"<p>Disponemos de los nombres de dos grupos de personas (dos arrays de <code>String</code>). Dentro de cada grupo todas las personas tienen nombres distintos, pero queremos saber cu\u00e1ntas personas del primer grupo tienen alg\u00fan tocayo en el segundo grupo, es decir, el mismo nombre que alguna persona del segundo grupo. Escribir un programa que resuelva el problema (inicializa los dos arrays con los valores que quieras y dise\u00f1a los m\u00e9todos que consideres necesarios).</p> <p>Por ejemplo, si los nombres son {\"miguel\",\"jos\u00e9\",\"ana\",\"mar\u00eda\"} y {\"ana\", \"luj\u00e1n\", \"juan\", \"jos\u00e9\", \"pepa\",  \"\u00e1ngela\", \"sof\u00eda\", \"andr\u00e9s\", \"bartolo\"} , el programa mostrar\u00eda:</p> Bash<pre><code>jos\u00e9 tiene tocayo en el segundo grupo.\nana tiene tocayo en el segundo grupo.\nTOTAL: 2 personas del primer grupo tienen tocayo.\n</code></pre> <p>Optimiza el algoritmo para que no tenga en cuenta si se escribe el nombre en may\u00fasculas, min\u00fasculas o cualquier combinaci\u00f3n.</p>"},{"location":"ud04/ud04ac/#ejercicio-10-sumadespuesimpar","title":"Ejercicio 10 <code>SumaDespuesImpar</code>","text":"<p>Escribir un m\u00e9todo que, dado un array de enteros, devuelva la suma de los elementos que aparecen tras el primer valor impar. Usar <code>main</code> para probar el m\u00e9todo.</p>"},{"location":"ud04/ud04ac/#ejercicio-11-haypares","title":"Ejercicio 11 <code>HayPares</code>","text":"<p>Para determinar si existe alg\u00fan valor par en un array se proponen varias soluciones. Indica cual/cuales son v\u00e1lidas para resolver el problema.</p> Java<pre><code>public static boolean haypares1(int v[]) {\n   int i = 0;\n   while (i &lt; v.length &amp;&amp; v[i] % 2 != 0) {\n       i++;\n   }\n   if (v[i] % 2 == 0)\n       return true;\n   else\n       return false;\n}\n\npublic static boolean haypares2(int v[]) {\n   int i = 0;\n   while (i &lt; v.length &amp;&amp; v[i] % 2 != 0) {\n       i++;\n    }\n   if (i &lt; v.length) \n       return true;\n   else\n       return false;\n}\n\npublic static boolean haypares3(int v[]) {\n   int i = 0;\n   while (v[i] % 2 != 0 &amp;&amp; i &lt; v.length) {\n       i++;\n   }\n   if (i &lt; v.length) \n       return true;\n   else\n       return false;\n}\n\npublic static boolean haypares4(int v[]) {\n   int i = 0;\n   boolean encontrado = false;\n   while (i &lt;= v.length &amp;&amp; !encontrado) {\n       if (v[i] % 2 == 0) \n           encontrado = true;\n       else\n           i++;\n   }\n   return encontrado;\n}\n\npublic static boolean haypares5(int v[]) {\n   int i = 0;\n   boolean encontrado = false;\n   while (i &lt; v.length &amp;&amp; !encontrado){\n       if (v[i] % 2 == 0) \n           encontrado = true;\n       i++;\n   }\n   return encontrado;\n}\n\npublic static boolean haypares6(int v[]) {\n   int i = 0;\n   while (i &lt; v.length) {\n       if (v[i] % 2 == 0) \n           return true;\n       else\n           return false;\n   }\n}\n\npublic static boolean haypares7(int v[]) {\n   int i = 0;\n   while (i &lt; v.length) {\n       if (v[i] % 2 == 0) \n           return true;\n       i++;\n   }\n   return false;\n}\n\n}\n</code></pre>"},{"location":"ud04/ud04ac/#ejercicio-12-capicua","title":"Ejercicio 12 <code>Capicua</code>","text":"<p>Escribir un m\u00e9todo para determinar si un array de palabras (<code>String</code>) es capic\u00faa, esto es, si la primera y \u00faltima palabra del array son la misma, la segunda y la pen\u00faltima palabras tambi\u00e9n lo son, y as\u00ed sucesivamente. Escribir el m\u00e9todo main para probar el m\u00e9todo anterior.</p>"},{"location":"ud04/ud04ac/#ejercicio-13-subsecuencia","title":"Ejercicio 13 <code>Subsecuencia</code>","text":"<p>Escribir un m\u00e9todo que, dado un array, determine la posici\u00f3n de la primera subsecuencia del array que comprenda al menos tres n\u00fameros enteros consecutivos en posiciones consecutivas del array. De no existir dicha secuencia devolver\u00e1 -1. </p> <p>Por ejemplo: en el array {23, 8, 12, 6, 7, 9, 10, 11, 2} hay 3 n\u00fameros consecutivos en tres posiciones consecutivas, a partir de la posici\u00f3n 5: {9,10,11}</p>"},{"location":"ud04/ud04ac/#ejercicio-14-mismosvalores","title":"Ejercicio 14 <code>MismosValores</code>","text":"<p>Se desea comprobar si dos arrays de <code>double</code> contienen los mismos valores, aunque sea en orden distinto. Para ello se ha escrito el siguiente m\u00e9todo, que aparece incompleto:</p> Java<pre><code>public static boolean mismosValores(double v1[], double v2[]) {\n    boolean encontrado = false;\n    int i = 0;\n    while (i &lt; v1.length &amp;&amp; !encontrado) {\n        boolean encontrado2 = false;\n        int j = 0;\n        while (j &lt; v2.length &amp;&amp; !encontrado2) {\n            if (v1[?] == v2[?]) {\n                encontrado2 = true;\n                i++;\n            } else {\n                ?\n            }\n        }\n        if (encontrado2 == ?) {\n            encontrado = true;\n        }\n    }\n    return !encontrado;\n}\n</code></pre> <p>Completa el programa en los lugares donde aparece el s\u00edmbolo <code>?</code> .</p>"},{"location":"ud04/ud04ac/#matrices","title":"Matrices","text":""},{"location":"ud04/ud04ac/#ejercicio-15-notas","title":"Ejercicio 15 <code>Notas</code>","text":"<p>Se dispone de una matriz que contiene las notas de una serie de alumnos en una serie de asignaturas. Cada fila corresponde a un alumno, mientras que cada columna corresponde a una asignatura. Desarrollar m\u00e9todos para:</p> <ol> <li>Imprimir las notas alumno por alumno. </li> <li>Imprimir las notas asignatura por asignatura.</li> <li>Imprimir la media de cada alumno.</li> <li>Imprimir la media de cada asignatura.</li> <li>Indicar cual es la asignatura m\u00e1s f\u00e1cil, es decir la de mayor nota media.</li> <li>\u00bfHay alg\u00fan alumno que suspenda todas las asignaturas?</li> <li>\u00bfHay alguna asignatura en la que suspendan todos los alumnos?</li> </ol> <p>Generar la matriz (al menos 5x5) en el m\u00e9todo main, rellenarla, y comprobar los m\u00e9todos anteriores.</p>"},{"location":"ud04/ud04ac/#ejercicio-16-ventas","title":"Ejercicio 16 <code>Ventas</code>","text":"<p>Una empresa comercializa 10 productos para lo cual tiene 5 distribuidores.</p> <p>Los datos de ventas los tenemos almacenados en una matriz de 5 filas x 10 columnas, <code>ventas</code>, con el    n\u00famero de unidades de cada producto que ha vendido cada distribuidor. Cada fila corresponde a las ventas de un distribuidor (la primera fila, del primer distribuidor, etc.), mientras que cada columna corresponde a un producto :</p> 100 25 33 89 23 90 87 6 5 233 28 765 65 77 987 55 4 66 4 8 ... <p>El array <code>precio</code>, de 10 elementos, contiene el precio en \u20ac de cada uno de los 10 productos.</p> Bash<pre><code>125.2  |  234.4  |  453.9  | ...\n</code></pre> <p>Escribe el programa y los m\u00e9todos necesarios para averiguar:</p> <ol> <li>Distribuidor que m\u00e1s art\u00edculos ha vendido.</li> <li>El art\u00edculo que m\u00e1s se vende.</li> <li>Sabiendo que los distribuidores que realizan ventas superiores a 30.000\u20ac cobran una comisi\u00f3n del 5% de las ventas y los que superan los 70.000\u20ac una comisi\u00f3n del 8%, emite un informe de los distribuidores que cobran comisi\u00f3n, indicando n\u00ba de distribuidor, importe de las ventas, porcentaje de comisi\u00f3n e importe de la comisi\u00f3n en \u20ac.</li> </ol>"},{"location":"ud04/ud04ac/#ejercicio-17-utiles","title":"Ejercicio 17 <code>Utiles</code>","text":"<p>Dada una matr\u00edz con el mismo n\u00famero de filas y de columnas, dise\u00f1ar los siguientes m\u00e9todos:</p> <ul> <li> <p><code>public static void mostrarDiagonal(int[][] m)</code> que muestre por pantalla los elementos de la diagonal principal.</p> </li> <li> <p><code>public static int filaDelMayor (int[][] m)</code>, que devuelva la fila en que se encuentra el mayor elemento de la matriz.</p> </li> <li> <p><code>public static void intercambiarFilas(int[][] m, int f1, int f2)</code>, que intercambie los elementos de las filas indicadas.</p> </li> <li> <p>Escribir un m\u00e9todo <code>public static boolean esSimetrica (int[][] m)</code> que devuelva true si la matriz m es sim\u00e9trica. Una matriz es sim\u00e9trica si tiene el mismo n\u00famero de filas que de columnas y adem\u00e1s <code>m[i][j] = m[j][i]</code> para todo par de \u00edndices <code>i,j</code>.</p> </li> </ul> <p>Por ejemplo, es sim\u00e9trica:</p> Bash<pre><code>1 5 3\n5 4 7\n3 7 5\n</code></pre>"},{"location":"ud04/ud04ac/#ejercicio-18-tetris","title":"Ejercicio 18 <code>Tetris</code>","text":"<p>Supongamos que estamos desarrollando un Tetris en Java y para representar la partida utilizamos una matriz bidimensional de enteros 15 filas por 8 columnas. Se utiliza el valor 0 para indicar que la celda est\u00e1 vac\u00eda y un valor distinto de cero para las celdas que contienen parte de una pieza (distintos valores para distintos colores):</p> <p>Escribir un m\u00e9todo que reciba la matriz y elimine las filas completas, haciendo caer las piezas que hay por encima de las celdas eliminadas tal y como se hace en el juego.</p> <p>Nota</p> <p>Puede ser \u00fatil para ver resultados crear un m\u00e9todo <code>public static void imprimePartida(int[][] partida)</code> que imprima el estado actual de la matriz <code>partida</code>.</p>"},{"location":"ud04/ud04ac/#recursividad","title":"Recursividad","text":""},{"location":"ud04/ud04ac/#ejercicio-19-palindromo","title":"Ejercicio 19 <code>Palindromo</code>","text":"<p>Implementa, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que nos diga si una cadena de caracteres es sim\u00e9trica (un pal\u00edndromo). Por ejemplo, \"DABALEARROZALAZORRAELABAD\" es un pal\u00edndromo.</p> <p>\u200b   Otros ejemplos:</p> <p>\u200b       \"La ruta nos aporto otro paso natural\"</p> <p>\u200b       \"Nada, yo soy Adan\"</p> <p>\u200b       \"A mama Roma le aviva el amor a papa y a papa Roma le aviva el amor a mama\"</p> <p>\u200b       \"Ana, la taca\u00f1a catalana\"</p> <p>\u200b       \"Yo hago yoga hoy\"</p> <p>Nota</p> <p>\u00bfTe atreves a implementar una soluci\u00f3n que permita la entrada con espacios? \u00bfY permitiendo espacios y signos de puntuaci\u00f3n?\".</p>"},{"location":"ud04/ud04ac/#ejercicio-20-reversocadena","title":"Ejercicio 20 <code>ReversoCadena</code>","text":"<p>Implementa, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que le d\u00e9 la vuelta a una cadena de caracteres. </p> <p>Nota</p> <p>Obviamente, si la cadena es un pal\u00edndromo, la cadena y su inversa coincidir\u00e1n.</p>"},{"location":"ud04/ud04ac/#ejercicio-21-combinaciones","title":"Ejercicio 21 <code>Combinaciones</code>","text":"<p>Implementa, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que permitan calcular el n\u00famero de combinaciones de <code>n</code> elementos tomados de <code>m</code> en <code>m</code>. </p> <p>Realiza dos versiones de la implementaci\u00f3n iterativa, una aplicando la f\u00f3rmula y otra utilizando una matriz auxiliar (en la que se vaya construyendo el tri\u00e1ngulo de Pascal).</p>"},{"location":"ud04/ud04ac/#ejercicio-22-mcditerativa-mcdrecursiva","title":"Ejercicio 22 <code>McdIterativa</code> <code>McdRecursiva</code>","text":"<p>Implementa, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que nos devuelva el m\u00e1ximo com\u00fan divisor de dos n\u00fameros enteros utilizando el algoritmo de Euclides. </p> Text Only<pre><code>ALGORITMO DE EUCLIDES\nDados dos n\u00fameros enteros positivos m y n, tal que m &gt; n, para encontrar su m\u00e1ximo com\u00fan divisor (es decir, el mayor entero positivo que divide a ambos): \n- Dividir m por n para obtener el resto r (0 \u2264 r &lt; n) \n- Si r = 0, el MCD es n. \n- Si no, el m\u00e1ximo com\u00fan divisor es MCD(n,r). \n</code></pre> <p>La ordenaci\u00f3n por mezcla (<code>mergesort</code>) es un m\u00e9todo de ordenaci\u00f3n que se basa en un principio muy simple: se ordenan las dos mitades de un vector y, una vez ordenadas, se mezclan. Escribe un programa que implemente este m\u00e9todo de ordenaci\u00f3n. </p>"},{"location":"ud04/ud04ac/#ejercicio-23-descomposicion","title":"Ejercicio 23 <code>Descomposicion</code>","text":"<p>Dise\u00f1a e implementa un algoritmo que imprima todas las posibles descomposiciones de un n\u00famero natural como suma de n\u00fameros menores que \u00e9l (sumas con m\u00e1s de un sumando). </p>"},{"location":"ud04/ud04ac/#ejercicio-24-determinantematriz","title":"Ejercicio 24 <code>DeterminanteMatriz</code>","text":"<p>Dise\u00f1a e implementa un m\u00e9todo recursivo que nos permita obtener el determinante de una matriz cuadrada de dimensi\u00f3n <code>n</code>.</p>"},{"location":"ud04/ud04ac/#ejercicio-25-cifrasyletras","title":"Ejercicio 25 <code>CifrasYLetras</code>","text":"<p>Dise\u00f1a e implementa un programa que juegue al juego de cifras de  \"Cifras y Letras \". El juego consiste en obtener, a partir de 6 n\u00fameros, un n\u00famero lo m\u00e1s cercano posible a un n\u00famero de tres cifras realizando operaciones aritm\u00e9ticas con los 6 n\u00fameros.</p> <p>Realiza dos versiones de la implementaci\u00f3n iterativa, una aplicando la f\u00f3rmula y otra utilizando una matriz auxiliar (en la que se vaya construyendo el tri\u00e1ngulo de Pascal).</p>"},{"location":"ud04/ud04ac/#ejercicio-26-_8reinas","title":"Ejercicio 26 <code>_8Reinas</code>","text":"<p>Problema de las 8 reinas: Se trata de buscar la forma de colocar 8 reinas en un tablero de ajedrez de forma que ninguna de ellas amenace ni se vea amenazada por otra reina.</p> Text Only<pre><code>Algoritmo: \n - Colocar la reina i en la primera casilla v\u00e1lida de la fila i. \n - Si una reina no puede llegar a colocarse en ninguna casilla, se vuelve atr\u00e1s y se cambia la posici\u00f3n de la reina de la fila i-1.\n - Intentar colocar las reinas restantes en las filas que quedan. \n</code></pre>"},{"location":"ud04/ud04ac/#ejercicio-27-laberinto","title":"Ejercicio 27 <code>Laberinto</code>","text":"<p>Salida de un laberinto: Se trata de encontrar un camino que nos permita salir de un laberinto definido en una matriz NxN. Para movernos por el laberinto, s\u00f3lo podemos pasar de una casilla a otra que sea adyacente a la primera y no est\u00e9 marcada como una casilla prohibida (esto es, las casillas prohibidas determinan las paredes que forman el laberinto). </p> Text Only<pre><code>Algoritmo:\n - Se comienza en la casilla (0,0) y se termina en la casilla (N-1, N-1). \n - Nos movemos a una celda adyacente si esto es posible. \n - Cuando llegamos a una situaci\u00f3n en la que no podemos realizar ning\u00fan movimiento que nos lleve a una celda que no hayamos visitado ya, retrocedemos sobre nuestros pasos y buscamos un camino alternativo. \n</code></pre>"},{"location":"ud04/ud04pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li> <p>Curso Java Arrays I. V\u00eddeo 23</p> </li> <li> <p>Curso Java Arrays II. V\u00eddeo 24</p> </li> <li>Curso Java Arrays III. Arrays bidimensionales. V\u00eddeo 25</li> </ul>"},{"location":"ud04/ud04re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</p> </li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> </ul>"},{"location":"ud05/ud0501/","title":"5.1 Introducci\u00f3n","text":"<p>Como ya has visto en anteriores unidades, las clases est\u00e1n compuestas por atributos y m\u00e9todos. Una clase especifica las caracter\u00edsticas comunes de un conjunto de objetos. </p> <p>De esta forma los programas que escribas estar\u00e1n formados por un conjunto de clases a partir de las cuales ir\u00e1s creando objetos que se interrelacionar\u00e1n unos con otros.</p> <p> </p> <p>En esta unidad se va a utilizar el concepto de objeto as\u00ed como algunas de las diversas estructuras de control b\u00e1sicas que ofrece cualquier lenguaje de programaci\u00f3n. Todos esos conceptos han sido explicados y utilizados en las unidades anteriores. Si consideras que es necesario hacer un repaso del concepto de objeto o del uso de las estructuras de control elementales, \u00e9ste es el momento de hacerlo.</p>"},{"location":"ud05/ud0501/#repaso-del-concepto-de-objeto","title":"Repaso del concepto de objeto","text":"<p>Desde el comienzo del m\u00f3dulo llevas utilizando el concepto de objeto para desarrollar tus programas de ejemplo. En las unidades anteriores se ha descrito un objeto como una entidad que contiene informaci\u00f3n y que es capaz de realizar ciertas operaciones con esa informaci\u00f3n. Seg\u00fan los valores que tenga esa informaci\u00f3n el objeto tendr\u00e1 un estado determinado y seg\u00fan las operaciones que pueda llevar a cabo con esos datos ser\u00e1n responsables de un comportamiento concreto.</p> <p>Recuerda</p> <p>Entre las caracter\u00edsticas fundamentales de un objeto se encontraban: - la identidad, los objetos son \u00fanicos y por tanto distinguibles entre s\u00ed, aunque pueda haber objetos exactamente iguales,  - un estado, los atributos que describen al objeto y los valores que tienen en cada momento, y  - un determinado comportamiento, acciones que se pueden realizar sobre el objeto.</p> <p>Algunos ejemplos de objetos que podr\u00edamos imaginar podr\u00edan ser:</p> <ul> <li>Un coche de color rojo, marca SEAT, modelo Le\u00f3n , del a\u00f1o 2021. En este ejemplo tenemos una serie de atributos, como el color (en este caso rojo), la marca, el modelo, el a\u00f1o, etc. As\u00ed mismo tambi\u00e9n podr\u00edamos imaginar determinadas caracter\u00edsticas como la cantidad de combustible que le queda, o el n\u00famero de kil\u00f3metros recorridos hasta el momento.</li> <li>Un coche de color amarillo, marca Opel, modelo Moka, del a\u00f1o 2019.</li> <li>Otro coche de color amarillo, marca Opel, modelo Moka y tambi\u00e9n del a\u00f1o 2019. Se tratar\u00eda de otro objeto con las mismas propiedades que el anterior, pero ser\u00eda un segundo objeto.</li> <li>Un cocodrilo de cuatro metros de longitud y de veinte a\u00f1os de edad. </li> <li>Un c\u00edrculo de radio 2 cent\u00edmetros, con centro en las coordenadas (0,0) y relleno de color amarillo.</li> <li>Un c\u00edrculo de radio 3 cent\u00edmetros, con centro en las coordenadas (1,2) y relleno de color verde.</li> </ul> <p>Si observas los ejemplos anteriores podr\u00e1s distinguir sin demasiada dificultad al menos tres familias de objetos diferentes, que no tienen nada que ver una con otra:</p> <ul> <li>Los coches.</li> <li>Los c\u00edrculos.</li> <li>Los cocodrilos.</li> </ul> <p>Es de suponer entonces que cada objeto tendr\u00e1 determinadas posibilidades de comportamiento (acciones) dependiendo de la familia a la que pertenezcan. Por ejemplo, en el caso de los coches podr\u00edamos imaginar acciones como: arrancar, frenar, acelerar, cambiar de marcha, etc. En el caso de los cocodrilos podr\u00edas imaginar otras acciones como: desplazarse, comer, dormir, cazar, etc. Para el caso del c\u00edrculo se podr\u00edan plantear acciones como: c\u00e1lculo de la superficie del c\u00edrculo, c\u00e1lculo de la longitud de la circunferencia que lo rodea, etc.</p> <p>Por otro lado, tambi\u00e9n podr\u00edas imaginar algunos atributos cuyos valores podr\u00edan ir cambiando en funci\u00f3n de las acciones que se realizaran sobre el objeto: ubicaci\u00f3n del coche (coordenadas), velocidad instant\u00e1nea, kil\u00f3metros recorridos, velocidad media, cantidad de combustible en el dep\u00f3sito, etc. En el caso de los cocodrilos podr\u00edas imaginar otros atributos como: peso actual, el n\u00famero de dientes actuales (ir\u00e1 perdiendo algunos a lo largo de su vida), el n\u00famero de presas que ha cazado hasta el momento, etc.</p> <p>Como puedes ver, un objeto puede ser cualquier cosa que puedas describir en t\u00e9rminos de atributos y acciones. </p> <p> </p> <p>Un objeto no es m\u00e1s que la representaci\u00f3n de cualquier entidad concreta o abstracta que puedas percibir o imaginar y que pueda resultar de utilidad para modelar los elementos el entorno del problema que deseas resolver.</p>"},{"location":"ud05/ud0501/#el-concepto-de-clase","title":"El concepto de clase","text":"<p>Est\u00e1 claro que dentro de un mismo programa tendr\u00e1s la oportunidad de encontrar decenas, cientos o incluso miles de objetos. En algunos casos no se parecer\u00e1n en nada unos a otros, pero tambi\u00e9n podr\u00e1s observar que habr\u00e1 muchos que tengan un gran parecido, compartiendo un mismo comportamiento y unos mismos atributos. Habr\u00e1 muchos objetos que s\u00f3lo se diferenciaran por los valores que toman algunos de esos atributos.</p> <p>Es aqu\u00ed donde entra en escena el concepto de clase. Est\u00e1 claro que no podemos definir la estructura y el comportamiento de cada objeto cada vez que va a ser utilizado dentro de un programa, pues la escritura del c\u00f3digo ser\u00eda una tarea interminable y redundante. La idea es poder disponer de una plantilla o modelo para cada conjunto de objetos que sean del mismo tipo, es decir, que tengan los mismos atributos y un comportamiento similar.</p> <p> </p> <p>Una clase consiste en la definici\u00f3n de un tipo de objeto. Se trata de una descripci\u00f3n detallada de c\u00f3mo van a ser los objetos que pertenezcan a esa clase indicando qu\u00e9 tipo de informaci\u00f3n contendr\u00e1n (atributos) y c\u00f3mo se podr\u00e1 interactuar con ellos (comportamiento).</p> <p>Como ya has visto en unidades anteriores, una clase consiste en un plantilla en la que se especifican:</p> <ul> <li>Los atributos que van a ser comunes a todos los objetos que pertenezcan a esa clase (informaci\u00f3n).</li> <li>Los m\u00e9todos que permiten interactuar con esos objetos (comportamiento).</li> </ul> <p>A partir de este momento podr\u00e1s hablar ya sin confusi\u00f3n de objetos y de clases,sabiendo que los primeros son instancias concretas de las segundas, que no son m\u00e1s que una abstracci\u00f3n o definici\u00f3n.</p> <p>Si nos volvemos a fijar en los ejemplos de objetos del apartado anterior podr\u00edamos observar que las clases ser\u00edan lo que clasificamos como \"familias\" de objetos (coches, cocodrilos y c\u00edrculos). </p> <p>Clase vs Objeto</p> <p>En el lenguaje cotidiano de muchos programadores puede ser habitual la confusi\u00f3n entre los t\u00e9rminos clase y objeto. Aunque normalmente el contexto nos permite distinguir si nos estamos refiriendo realmente a una clase (definici\u00f3n abstracta) o a un objeto (instancia concreta), hay que tener cuidado con su uso para no dar lugar a interpretaciones err\u00f3neas, especialmente durante el proceso de aprendizaje.</p>"},{"location":"ud05/ud0502/","title":"5.2 Estructura y miembros de una clase","text":"<p>En unidades anteriores ya se indic\u00f3 que para declarar una clase en Java se usa la palabra reservada <code>class</code>. En la declaraci\u00f3n de una clase vas a encontrar:</p> <ul> <li>Cabecera de la clase. Compuesta por una serie de modificadores de acceso, la palabra reservada <code>class</code> y el nombre de la clase.</li> <li>Cuerpo de la clase. En \u00e9l se especifican los distintos miembros de la clase: atributos y m\u00e9todos. Es decir, el contenido de la clase.</li> </ul> Java<pre><code>public class NombreDeLaClase [herencia] [interfaces]\n{\n    // Atributos de la clase\n    ...\n    ...\n    // M\u00e9todos de la clase\n    ...\n    ...\n}\n</code></pre> <p>El cuerpo de la clase es donde se declaran los atributos que caracterizan a los objetos de la clase y donde se define e implementa el comportamiento de dichos objetos; es decir, donde se declaran e implementan los m\u00e9todos.</p>"},{"location":"ud05/ud0502/#declaracion-de-una-clase","title":"Declaraci\u00f3n de una clase","text":"<p>La declaraci\u00f3n de una clase en Java tiene la siguiente estructura general:</p> Java<pre><code>// Cabecera de la clase\n[modificadores] class &lt;NombreClase&gt; [herencia] [interfaces] {\n    // Cuerpo de la clase\n    //      Declaraci\u00f3n de los atributos\n    //      Declaraci\u00f3n de los m\u00e9todos\n}\n</code></pre> <p>Un ejemplo b\u00e1sico pero completo podr\u00eda ser:</p> Java<pre><code>class Punto {\n    // Atributos\n    private int x,y;\n\n    // M\u00e9todos\n    int obtenerX () {\n        return x;\n    }\n    int obtenerY() {\n        return y;\n    }\n    void establecerX (int nuevoX) {\n        x = nuevoX;\n    }\n    void establecerY (int nuevoY) {\n        y= nuevoY;\n    }\n}\nMath.random()\n</code></pre> <p>En este caso se trata de una clase muy sencilla en la que el cuerpo de la clase (entre llaves) contiene el c\u00f3digo y las declaraciones necesarias para que los objetos que se construyan (bas\u00e1ndose en esta clase) puedan funcionar apropiadamente en un programa (declaraciones de atributos para contener el estado del objeto y m\u00e9todos que implementen el comportamiento de la clase y los objetos creados a partir de ella).</p> <p>Si te fijas en los distintos programas que se han desarrollado en los ejemplos de las unidades anteriores, podr\u00e1s observar que cada uno de esos programas era en s\u00ed mismo una clase Java: se declaraban con la palabra reservada <code>class</code> y conten\u00edan algunos atributos (variables) as\u00ed como algunos m\u00e9todos (como m\u00ednimo el m\u00e9todo <code>main</code>).</p> <p>En el ejemplo anterior hemos visto lo m\u00ednimo que se tiene que indicar en la cabecera de una clase (el nombre de la clase y la palabra reservada <code>class</code>). Se puede proporcionar bastante m\u00e1s informaci\u00f3n mediante modificadores y otros indicadores como por ejemplo el nombre de su superclase (si es que esa clase hereda de otra), si implementa alg\u00fan interfaz y algunas cosas m\u00e1s que ir\u00e1s aprendiendo poco a poco.</p> <p>A la hora de implementar una clase Java (escribirla en un archivo con un editor de textos o con alguna herramienta integrada como por ejemplo VS Code, Netbeans o Eclipse) debes tener en cuenta: </p> <ul> <li>Por convenio, se ha decidido que en lenguaje Java los nombres de las clases deben de empezar por una letra may\u00fascula. As\u00ed, cada vez que observes en el c\u00f3digo una palabra con la primera letra en may\u00fascula sabr\u00e1s que se trata de una clase sin necesidad de tener que buscar su declaraci\u00f3n. Adem\u00e1s, si el nombre de la clase est\u00e1 formado por varias palabras, cada una de ellas tambi\u00e9n tendr\u00e1 su primera letra en may\u00fascula. Siguiendo esta recomendaci\u00f3n, algunos ejemplos de nombres de clases podr\u00edan ser: Recta, Circulo, Coche, CocheDeportivo, Jugador, JugadorFutbol, AnimalMarino, AnimalAcuatico, etc.</li> <li>El archivo en el que se encuentra una clase Java debe tener el mismo nombre que esa clase si queremos poder utilizarla desde otras clases que se encuentren fuera de ese archivo (clase principal del archivo).</li> <li>Tanto la definici\u00f3n como la implementaci\u00f3n de una clase se incluye en el mismo archivo (archivo <code>.java</code>). En otros lenguajes como por ejemplo C++, definici\u00f3n e implementaci\u00f3n podr\u00edan ir en archivos separados (por ejemplo en C++, ser\u00edan sendos archivos con extensiones <code>.h</code> y <code>.cpp</code>).</li> </ul>"},{"location":"ud05/ud0502/#cabecera-de-una-clase","title":"Cabecera de una clase","text":"<p>En general, la declaraci\u00f3n de una clase puede incluir los siguientes elementos y en el siguiente orden:</p> <ol> <li>Modificadores tales como <code>public</code>, <code>abstract</code> o <code>final</code>.</li> <li>El nombre de la clase (con la primera letra de cada palabra en may\u00fasculas, por convenio).</li> <li>El nombre de su clase madre (superclase), si es que se especifica, precedido por la palabra reservada <code>extends</code> (\"extiende\" o \"hereda de\").</li> <li>Una lista separada por comas de interfaces que son implementadas por la clase, precedida por la palabra reservada <code>implements</code> (\"implementa\").</li> <li>El cuerpo de la clase, encerrado entre llaves <code>{...}</code>.</li> </ol> <p>La sintaxis completa de una cabecera (los cuatro primeros puntos) queda de la forma:</p> Java<pre><code>[modificadores] class &lt;NombreClase&gt; [extends &lt;NombreSuperClase&gt;][implements &lt;NombreInterface1&gt;][[implements &lt;NombreInterface2&gt;] ...] {\n</code></pre> <p>En el ejemplo anterior de la clase Punto ten\u00edamos la siguiente cabecera:</p> Java<pre><code>class Punto {\n</code></pre> <p>En este caso no hay modificadores, ni indicadores de herencia, ni implementaci\u00f3n de interfaces. Tan solo la palabra reservada <code>class</code> y el nombre de la clase. Es lo m\u00ednimo que puede haber en la cabecera de una clase.</p> <p>La herencia y las interfaces las ver\u00e1s m\u00e1s adelante. Vamos a ver ahora cu\u00e1les son los modificadores que se pueden indicar al crear la clase y qu\u00e9 efectos tienen. </p> <p>Los modificadores de clase son:</p> Java<pre><code>[public] [final | abstract]\n</code></pre> <p>Veamos qu\u00e9 significado tiene cada uno de ellos:</p> <ul> <li>Modificador <code>public</code>: indica que la clase es visible (se pueden crear objetos de esa clase) desde cualquier otra clase. Es decir, desde cualquier otra parte del programa. Si no se especifica este modificador, la clase s\u00f3lo podr\u00e1 ser utilizada desde clases que est\u00e9n en el mismo paquete. El concepto de paquete lo veremos m\u00e1s adelante. S\u00f3lo puede haber una clase public (clase principal) en un archivo <code>.java</code>. El resto de clases que se definan en ese archivo no ser\u00e1n p\u00fablicas.</li> <li>Modificador <code>abstract</code>: indica que la clase es abstracta. Una clase abstracta no es instanciable. Es decir, no es posible crear objetos de esa clase (habr\u00e1 que utilizar clases que hereden de ella). En este momento es posible que te parezca que no tenga sentido que esto pueda suceder (si no puedes crear objetos de esa clase, \u00bfpara qu\u00e9 la quieres?), pero puede resultar \u00fatil a la hora de crear una jerarqu\u00eda de clases. Esto lo ver\u00e1s tambi\u00e9n m\u00e1s adelante al estudiar el concepto de herencia.</li> <li>Modificador <code>final</code>: indica que no podr\u00e1s crear clases que hereden de ella. Tambi\u00e9n volver\u00e1s a este modificador cuando estudies el concepto de herencia. Los modificadores final y abstract son excluyentes (s\u00f3lo se puede utilizar uno de ellos).</li> </ul> <p>Todos estos modificadores y palabras reservadas las iremos viendo poco a poco, as\u00ed que no te preocupes demasiado por intentar entender todas ellas en este momento.</p> <p>En el ejemplo anterior de la clase Punto tendr\u00edamos una clase que ser\u00eda s\u00f3lo visible (utilizable) desde el mismo paquete en el que se encuentra la clase (modificador de acceso por omisi\u00f3n o de paquete, o <code>package</code>). Desde fuera de ese paquete no ser\u00eda visible o accesible. Para poder utilizarla desde cualquier parte del c\u00f3digo del programa bastar\u00eda con a\u00f1adir el atributo <code>public</code>: </p> Java<pre><code>public class Punto{\n    ...\n}\n</code></pre>"},{"location":"ud05/ud0502/#cuerpo-de-una-clase","title":"Cuerpo de una clase","text":"<p>Como ya has visto anteriormente, el cuerpo de una clase se encuentra encerrado entre llaves y contiene la declaraci\u00f3n e implementaci\u00f3n de sus miembros. Los miembros de una clase pueden ser:</p> <ul> <li>Atributos, que especifican los datos que podr\u00e1 contener un objeto de la clase.</li> <li>M\u00e9todos, que implementan las acciones que se podr\u00e1n realizar con un objeto de la clase.</li> </ul> <p>Una clase puede no contener en su declaraci\u00f3n atributos o m\u00e9todos, pero debe de contener al menos uno de los dos (la clase no puede ser vac\u00eda*).</p> <p>En el ejemplo anterior donde se defin\u00eda una clase <code>Punto</code>, tendr\u00edamos los siguientes atributos:</p> <ul> <li>Atributo <code>x</code>, de tipo <code>int</code>.</li> <li>Atributo <code>y</code>, de tipo <code>int</code>.</li> </ul> <p>Es decir, dos valores de tipo entero. Cualquier objeto de la clase <code>Punto</code> que sea creado almacenar\u00e1 en su interior dos n\u00fameros enteros (<code>x</code> e <code>y</code>). Cada objeto diferente de la clase <code>Punto</code> contendr\u00e1 sendos valores <code>x</code> e <code>y</code>, que podr\u00e1n coincidir o no con el contenido de otros objetos de esa misma clase <code>Punto</code>.</p> <p>Por ejemplo, si se han declarado varios objetos de tipo <code>Punto</code>:</p> Java<pre><code>Punto p1, p2, p3;\n</code></pre> <p>Sabremos que cada uno de esos objetos <code>p1</code>, <code>p2</code> y <code>p3</code> contendr\u00e1n un par de coordenadas (<code>x</code>, <code>y</code>) que definen el estado de ese objeto. Puede que esos valores coincidan con los de otros objetos de tipo <code>Punto</code>, o puede que no, pero en cualquier caso ser\u00e1n objetos diferentes creados a partir del mismo molde (de la misma clase).</p> <p>Por otro lado, la clase <code>Punto</code> tambi\u00e9n defin\u00eda una serie de m\u00e9todos:</p> <ul> <li> <p><code>java   int obtenerX () {       return x;   }</code></p> </li> <li> <p><code>java   int obtenerY() {       return y;   }</code></p> </li> <li> <p><code>java   void establecerX (int nuevoX) {       x= nuevoX;    }</code></p> </li> <li> <p><code>java   void establecerY (int nuevoY) {       y= nuevoY;    }</code></p> </li> </ul> <p>Cada uno de esos m\u00e9todos puede ser llamado desde cualquier objeto que sea una instancia de la clase <code>Punto</code>. Se trata de operaciones que permiten manipular los datos (atributos) contenidos en el objeto bien para calcular otros datos o bien para modificar los propios atributos.</p>"},{"location":"ud05/ud0502/#miembros-estaticos-o-de-clase","title":"Miembros est\u00e1ticos o de clase","text":"<p>Cada vez que se produce una instancia de una clase (es decir, se crea un objeto de esa clase), se desencadenan una serie de procesos (construcci\u00f3n del objeto) que dan lugar a la creaci\u00f3n en memoria de un espacio f\u00edsico que constituir\u00e1 el objeto creado. De esta manera cada objeto tendr\u00e1 sus propios miembros a imagen y semejanza de la plantilla propuesta por la clase.</p> <p>Por otro lado, podr\u00e1s encontrarte en ocasiones en las que determinados miembros de la clase (atributos o m\u00e9todos) no tienen demasiado sentido como partes del objeto, sino m\u00e1s bien como partes de la clase en s\u00ed (partes de la plantilla, pero no de cada instancia de esa plantilla). Por ejemplo, si creamos una clase <code>Coche</code> y quisi\u00e9ramos disponer de un atributo con el nombre de la clase (un atributo de tipo <code>String</code> con la cadena \"Coche\"), no tiene mucho sentido replicar ese atributo para todos los objetos de la clase <code>Coche</code>, pues para todos va a tener siempre el mismo valor (la cadena \"Coche\"). Es m\u00e1s, ese atributo puede tener sentido y existencia al margen de la existencia de cualquier objeto de tipo <code>Coche</code>. Podr\u00eda no haberse creado ning\u00fan objeto de la clase <code>Coche</code> y sin embargo seguir\u00eda teniendo sentido poder acceder a ese atributo de nombre de la clase, pues se trata en efecto de un atributo de la propia clase m\u00e1s que de un atributo de cada objeto instancia de la clase.</p> <p>Para poder definir miembros est\u00e1ticos en Java se utiliza el modificador <code>static</code>. Los miembros (tanto atributos como m\u00e9todos) declarados utilizando este modificador son conocidos como miembros est\u00e1ticos o miembros de clase. A continuaci\u00f3n vas a estudiar la creaci\u00f3n y utilizaci\u00f3n de atributos y m\u00e9todos. En cada caso ver\u00e1s c\u00f3mo declarar y usar atributos est\u00e1ticos y m\u00e9todos est\u00e1ticos.</p>"},{"location":"ud05/ud0503/","title":"5.3 Atributos","text":"<p>Los atributos constituyen la estructura interna de los objetos de una clase. Se trata del conjunto de datos que los objetos de una determinada clase almacenan cuando son creados. Es decir es como si fueran variables cuyo \u00e1mbito de existencia es el objeto dentro del cual han sido creadas. Fuera del objeto esas variables no tienen sentido y si el objeto deja de existir, esas variables tambi\u00e9n deber\u00edan hacerlo (proceso de destrucci\u00f3n del objeto). Los atributos a veces tambi\u00e9n son conocidos con el nombre de variables miembro o variables de objeto.</p> <p>Los atributos pueden ser de cualquier tipo de los que pueda ser cualquier otra variable en un programa en Java: desde tipos primitivos como <code>int</code>, <code>boolean</code> o <code>float</code> hasta tipos referenciados como <code>arrays</code>, <code>Strings</code> u <code>objetos</code>.</p> <p>Adem\u00e1s del tipo y del nombre, la declaraci\u00f3n de un atributo puede contener tambi\u00e9n algunos modificadores (como por ejemplo <code>public</code>, <code>private</code>, <code>protected</code> o <code>static</code>). Por ejemplo, en el caso de la clase <code>Punto</code> que hab\u00edamos definido en el aparado anterior podr\u00edas haber declarado sus atributos como:</p> Java<pre><code>public int x;\npublic int y;\n</code></pre> <p>De esta manera estar\u00edas indicando que ambos atributos son p\u00fablicos, es decir, accesibles por cualquier parte del c\u00f3digo programa que tenga acceso a un objeto de esa clase.</p> <p>\u00c1mbito de los atributos</p> <p>Como ya ver\u00e1s m\u00e1s adelante al estudiar el concepto de encapsulaci\u00f3n, lo normal es declarar todos los atributos (o al menos la mayor\u00eda) como privados (<code>private</code>); de manera que si se desea acceder o manipular alg\u00fan atributo se tenga que hacer a trav\u00e9s de los m\u00e9todos proporcionados por la clase.</p>"},{"location":"ud05/ud0503/#declaracion-de-atributos","title":"Declaraci\u00f3n de atributos","text":"<p>La sintaxis general para la declaraci\u00f3n de un atributo en el interior de una clase es:</p> Java<pre><code>[modificadores] &lt;tipo&gt; &lt;nombreAtributo&gt;;\n</code></pre> <p>Ejemplos:</p> Java<pre><code>int x;\npublic int elementoX, elementoY;  \nprivate int x1, y1, z1;\nstatic double descuentoGeneral;\nfinal boolean CASADO;\nprivate Punto p1;\n</code></pre> <p>Te suena bastante, \u00bfverdad? La declaraci\u00f3n de los atributos en una clase es exactamente igual a la declaraci\u00f3n de cualquier variable tal y como has estudiado en las unidades anteriores y similar a como se hace en cualquier lenguaje de programaci\u00f3n. Es decir mediante la indicaci\u00f3n del tipo y a continuaci\u00f3n el nombre del atributo, pudi\u00e9ndose declarar varios atributos del mismo tipo mediante una lista de nombres de atributos separada por comas (exactamente como ya has estudiado al declarar variables).</p> <p>La declaraci\u00f3n de un atributo (variable miembro o variable de objeto) consiste en la declaraci\u00f3n de una variable que \u00fanicamente existe en el interior del objeto y por tanto su vida comenzar\u00e1 cuando el objeto comience a existir (el objeto sea creado). Esto significa que cada vez que se cree un objeto se crear\u00e1n tantas variables como atributos contenga ese objeto en su interior (definidas en la clase, que es la plantilla o \"molde\" del objeto). Todas esas variables estar\u00e1n encapsuladas dentro del objeto y s\u00f3lo tendr\u00e1n sentido dentro de \u00e9l.</p> <p>En el ejemplo que estamos utilizando de objetos de tipo <code>Punto</code> (instancias de la clase <code>Punto</code>), cada vez que se cree un nuevo <code>Punto</code> <code>p1</code>, se crear\u00e1n sendos atributos <code>x</code>, <code>y</code> de tipo <code>int</code> que estar\u00e1n en el interior de ese punto <code>p1</code>.</p> <p>Si a continuaci\u00f3n se crea un nuevo objeto <code>Punto</code> <code>p2</code>, se crear\u00e1n otros dos nuevos atributos <code>x</code>, <code>y</code> de tipo <code>int</code> que estar\u00e1n esta vez alojados en el interior de <code>p2</code>. Y as\u00ed sucesivamente...</p> <p>Dentro de la declaraci\u00f3n de un atributo puedes encontrar tres partes:</p> <ul> <li>Modificadores. Son palabras reservadas que permiten modificar la utilizaci\u00f3n del atributo (indicar el control de acceso, si el atributo es constante, si se trata de un atributo de clase, etc.). Los iremos viendo uno a uno.</li> <li>Tipo. Indica el tipo del atributo. Puede tratarse de un tipo primitivo (<code>int</code>, <code>char</code>, <code>boolean</code>, <code>double</code>...) o bien de uno referenciado (<code>objeto</code>, <code>array</code>, etc.).</li> <li>Nombre. Identificador \u00fanico para el nombre del atributo. Por convenio se suelen utilizar las min\u00fasculas. En caso de que se trate de un identificador que contenga varias palabras, a partir de la segunda palabra se suele poner la letra de cada palabra en may\u00fasculas. Por ejemplo: <code>primerValor</code>,  <code>valor</code>, <code>puertaIzquierda</code>, <code>cuartoTrasero</code>, <code>equipoVecendor</code>, <code>sumaTotal</code>, <code>nombreCandidatoFinal</code>, etc.  Cualquier identificador v\u00e1lido de Java ser\u00e1 admitido como nombre de atributo v\u00e1lido, pero es importante seguir este convenio para facilitar la legibilidad del c\u00f3digo (todos los programadores de Java lo utilizan).</li> </ul> <p>Como puedes observar, los atributos de una clase tambi\u00e9n pueden contener modificadores en su declaraci\u00f3n (como suced\u00eda al declarar la propia clase). Estos modificadores permiten indicar cierto comportamiento de una tributo a la hora de utilizarlo. Entre los modificadores de un atributo podemos distinguir:</p> <ul> <li>Modificadores de acceso: Indican la forma de acceso al atributo desde otra clase. Son modificadores excluyentes entre s\u00ed. S\u00f3lo se puede poner uno.</li> <li>Modificadores de contenido: No son excluyentes. Pueden aparecer varios a la vez. </li> <li>Otros modificadores: <code>transient</code> y <code>volatile</code>. El primero se utiliza para indicar que un atributo es transitorio (no persistente) y el segundo es para indicar al compilador que no debe realizar optimizaciones sobre esa variable. Es m\u00e1s que probable que no necesites utilizarlos en este m\u00f3dulo.</li> </ul> <p>Aqu\u00ed tienes la sintaxis completa de la declaraci\u00f3n de un atributo teniendo en cuenta la lista de todos los modificadores e indicando cu\u00e1les son incompatibles unos con otros:</p> Java<pre><code>[private | protected | public] [static] [final] [transient] [volatile] &lt;tipo&gt; &lt;nombreAtributo&gt;;\n</code></pre> <p>Vamos a estudiar con detalle cada uno de ellos.</p>"},{"location":"ud05/ud0503/#modificadores-de-acceso","title":"Modificadores de acceso","text":"<p>Los modificadores de acceso disponibles en Java para un atributo son:</p> <ul> <li>Modificador de acceso <code>public</code>. Indica que cualquier clase (por muy ajena o lejana que sea) tiene acceso a ese atributo. No es muy habitual declarar atributos p\u00fablicos (<code>public</code>).</li> <li>Modificador de acceso <code>protected</code>. En este caso se permitir\u00e1 acceder al atributo desde cualquier subclase (lo ver\u00e1s m\u00e1s adelante al estudiar la herencia) de la clase en la que se encuentre declarado el atributo, y tambi\u00e9n desde las clases del mismo paquete.</li> <li>Modificador de acceso por omisi\u00f3n (o de paquete). Si no se indica ning\u00fan modificador de acceso en la declaraci\u00f3n del atributo, se utilizar\u00e1 este tipo de acceso. Se permitir\u00e1 el acceso a este atributo desde todas las clases que est\u00e9n dentro del mismo paquete (<code>package</code>) que esta clase (la que contiene el atributo que se est\u00e1 declarando). No es necesario escribir ninguna palabra reservada. Si no se pone nada se supone se desea indicar este modo de acceso.</li> <li>Modificador de acceso <code>private</code>. Indica que s\u00f3lo se puede acceder al atributo desde dentro de la propia clase. El atributo estar\u00e1 \"oculto\" para cualquier otra zona de c\u00f3digo fuera de la clase en la que est\u00e1 declarado el atributo. Es lo opuesto a lo que permite <code>public</code>.</li> </ul> <p>Puedes observar un resumen de los distintos niveles accesibilidad que permite cada modificador:</p> modificador Misma clase Mismo paquete Subclase Otro paquete <code>public</code> \u2714 \u2714 \u2714 \u2714 <code>protected</code> \u2714 \u2714 \u2714 \u274c Sin modificador (<code>package</code>) \u2714 \u2714 \u274c \u274c <code>private</code> \u2714 \u274c \u274c \u274c <p>Recuerda</p> <p>Los modificadores de acceso son excluyentes! S\u00f3lo se puede utilizar uno de ellos en la declaraci\u00f3n de un atributo.</p>"},{"location":"ud05/ud0503/#modificadores-de-contenido","title":"Modificadores de contenido","text":"<p>Los modificadores de contenido no son excluyentes (pueden aparecer varios para un mismo atributo). Son los siguientes:</p> <ul> <li>Modificador <code>static</code>: Hace que el atributo sea com\u00fan para todos los objetos de una misma clase. Es decir, todos los objetos de la clase compartir\u00e1n ese mismo atributo con el mismo valor. Es un caso de miembro est\u00e1tico o miembro de clase: un atributo est\u00e1tico o atributo de clase o variable de clase.</li> <li>Modificador <code>final</code>: Indica que el atributo es una constante. Su valor no podr\u00e1 ser modificado a lo largo de la vida del objeto. Por convenio, el nombre de los atributos constantes (<code>final</code>) se escribe con todas las letras en may\u00fasculas.</li> </ul> <p>En el siguiente apartado sobre atributos est\u00e1ticos ver\u00e1s un ejemplo completo de un atributo est\u00e1tico (<code>static</code>). Veamos ahora un ejemplo de atributo constante (<code>final</code>).</p> <p>Imagina que est\u00e1s dise\u00f1ando un conjunto de clases para trabajar con expresiones geom\u00e9tricas (figuras, superficies, vol\u00famenes, etc.) y necesitas utilizar muy a menudo la constante pi con abundantes cifras significativas, por ejemplo, 3.14159265. Utilizar esa constante literal muy a menudo puede resultar tedioso adem\u00e1s de poco operativo (imagina que el futuro hubiera que cambiar la cantidad de cifras significativas). La idea es declararla una sola vez, asociarle un nombre simb\u00f3lico (un identificador) y utilizar ese identificador cada vez que se necesite la constante. En tal caso puede resultar muy \u00fatil declarar un atributo final con el valor 3.14159265 dentro de la clase en la que se considere oportuno utilizarla. El mejor identificador que podr\u00edas utilizar para ella ser\u00e1 probablemente el propio nombre de la constante (y en may\u00fasculas, para seguir el convenio de nombres), es decir, <code>PI</code>.</p> <p>As\u00ed podr\u00eda quedar la declaraci\u00f3n del atributo:</p> Java<pre><code>class claseGeometria {\n    // Declaraci\u00f3n de constantes\n    public final float PI = 3.14159265;\n    ...\n</code></pre>"},{"location":"ud05/ud0503/#atributos-estaticos","title":"Atributos est\u00e1ticos","text":"<p>Como ya has visto, el modificador <code>static</code> hace que el atributo sea com\u00fan (el mismo) para todos los objetos de una misma clase. En este caso s\u00ed podr\u00eda decirse que la existencia del atributo no depende de la existencia del objeto, sino de la propia clase y por tanto s\u00f3lo habr\u00e1 uno, independientemente del n\u00famero de objetos que se creen. El atributo ser\u00e1 siempre el mismo para todos los objetos y tendr\u00e1 un valor \u00fanico independientemente de cada objeto. Es m\u00e1s, aunque no exista ning\u00fan objeto de esa clase, el atributo s\u00ed existir\u00e1 y podr\u00e1 contener un valor (pues se trata de un atributo de la clase m\u00e1s que del objeto).</p> <p>Uno de los ejemplos m\u00e1s habituales (y sencillos) de atributos est\u00e1ticos o de clase es el de un contador que indica el n\u00famero de objetos de esa clase que se han ido creando. Por ejemplo, en la clase de ejemplo <code>Punto</code> podr\u00edas incluir un atributo que fuera ese contador para llevar un registro del n\u00famero de objetos de la clase <code>Punto</code> que se van construyendo durante la ejecuci\u00f3n del programa.</p> <p>Otro ejemplo de atributo est\u00e1tico (y en este caso tambi\u00e9n constante) que tambi\u00e9n se ha mencionado anteriormente al hablar de miembros est\u00e1ticos era disponer de un atributo <code>nombre</code>, que contuviera un <code>String</code> con el nombre de la clase. Nuevamente ese atributo s\u00f3lo tiene sentido para la clase, pues habr\u00e1 de ser compartido por todos los objetos que sean de esa clase (es el nombre de la clase a la que pertenecen los objetos y por tanto siempre ser\u00e1 la misma e igual para todos, no tiene sentido que cada objeto de tipo <code>Punto</code> almacene en su interior el nombre de la clase, eso lo deber\u00eda hacer la propia clase).</p> Java<pre><code>class Punto {\n    // Coordenadas del punto\n    private int x, y;\n    // Atributos de clase: cantidad de puntos creados hasta el momento\n    public static cantidadPuntos;\n</code></pre> <p>Obviamente, para que esto funcione como est\u00e1s pensando, tambi\u00e9n habr\u00e1 que escribir el c\u00f3digo necesario para que cada vez que se cree un objeto de la clase <code>Punto</code> se incremente el valor del atributo <code>cantidadPuntos</code>.</p> <p>Volver\u00e1s a este ejemplo para implementar esa otra parte cuando estudies los constructores.</p>"},{"location":"ud05/ud0504/","title":"5.4 M\u00e9todos","text":"<p>Como ya has visto anteriormente, los m\u00e9todos son las herramientas que nos sirven para definir el comportamiento de un objeto en sus interacciones con otros objetos. Forman parte de la estructura interna del objeto junto con los atributos.</p> <p>En el proceso de declaraci\u00f3n de una clase que est\u00e1s estudiando ya has visto c\u00f3mo escribir la cabecera de la clase y c\u00f3mo especificar sus atributos dentro del cuerpo de la clase. Tan solo falta ya declarar los m\u00e9todos, que estar\u00e1n tambi\u00e9n en el interior del cuerpo de la clase junto con los atributos.</p> <p>Orden de declaraci\u00f3n de miembros de un objeto</p> <p>Los m\u00e9todos suelen declararse despu\u00e9s de los atributos. Aunque atributos y m\u00e9todos pueden aparecer mezclados por todo el interior del cuerpo de la clase es aconsejable no hacerlo para mejorar la claridad y la legibilidad del c\u00f3digo. De ese modo, cuando echemos un vistazo r\u00e1pido al contenido de una clase, podremos ver r\u00e1pidamente los atributos al principio (normalmente ocupar\u00e1n menos l\u00edneas de c\u00f3digo y ser\u00e1n f\u00e1ciles de reconocer) y cada uno de los m\u00e9todos inmediatamente despu\u00e9s.</p> <p>Cada m\u00e9todo puede ocupar un n\u00famero de l\u00edneas de c\u00f3digo m\u00e1s o menos grande en funci\u00f3n de la complejidad del proceso que pretenda implementar.</p> <p>Los m\u00e9todos representan la interfaz de una clase. Son la forma que tienen otros objetos de comunicarse con un objeto determinado solicit\u00e1ndole cierta informaci\u00f3n o pidi\u00e9ndole que lleve a cabo una determinada acci\u00f3n. Este modo de programar, como ya has visto en unidades anteriores, facilita mucho la tarea al desarrollador de aplicaciones, pues le permite abstraerse del contenido de las clases haciendo uso \u00fanicamente del interfaz (m\u00e9todos).</p>"},{"location":"ud05/ud0504/#declaracion-de-un-metodo","title":"Declaraci\u00f3n de un m\u00e9todo","text":"<p>La definici\u00f3n de un m\u00e9todo se compone de dos partes:</p> <ul> <li>Cabecera del m\u00e9todo, que contiene el nombre del m\u00e9todo junto con el tipo devuelto, un conjunto de posibles modificadores y una lista de par\u00e1metros.</li> <li>Cuerpo del m\u00e9todo, que contiene las sentencias que implementan el comportamiento del m\u00e9todo (incluidas posibles sentencias de declaraci\u00f3n de variables locales).</li> </ul> <p>Los elementos m\u00ednimos que deben aparecer en la declaraci\u00f3n de un m\u00e9todo son:</p> <ul> <li>El tipo devuelto por el m\u00e9todo.</li> <li>El nombre del m\u00e9todo.</li> <li>Los par\u00e9ntesis.</li> <li>El cuerpo del m\u00e9todo entre llaves: <code>{ }</code>.</li> </ul> <p>Por ejemplo, en la clase <code>Punto</code> que se ha estado utilizando en los apartados anteriores podr\u00edas encontrar el siguiente m\u00e9todo:</p> Java<pre><code>int obtenerX(){\n    // Cuerpo del m\u00e9todo\n    ...\n}\n</code></pre> <p>Donde:</p> <ul> <li>El tipo devuelto por el m\u00e9todo es <code>int</code>.</li> <li>El nombre del m\u00e9todo es <code>obtenerX</code>.</li> <li>No recibe ning\u00fan par\u00e1metro: aparece una lista vac\u00eda entre par\u00e9ntesis: <code>( )</code>.</li> <li>El cuerpo del m\u00e9todo es todo el c\u00f3digo que habr\u00eda encerrado entre llaves: <code>{ }</code>.</li> </ul> <p>Dentro del cuerpo del m\u00e9todo podr\u00e1s encontrar declaraciones de variables, sentencias y todo tipo de estructuras de control (bucles, condiciones, etc.) que has estudiado en los apartados anteriores.</p> <p>Ahora bien, la declaraci\u00f3n de un m\u00e9todo puede incluir algunos elementos m\u00e1s. Vamos a estudiar con detalle cada uno de ellos.</p>"},{"location":"ud05/ud0504/#cabecera-de-metodo","title":"Cabecera de m\u00e9todo","text":"<p>La declaraci\u00f3n de un m\u00e9todo puede incluir los siguientes elementos:</p> <ol> <li>Modificadores (como por ejemplo los ya vistos <code>public</code> o <code>private</code>, m\u00e1s algunos otros que ir\u00e1s conociendo poco a poco). No es obligatorio incluir modificadores en la declaraci\u00f3n.</li> <li>El tipo devuelto (o tipo de retorno), que consiste en el tipo de dato (primitivo o referencia) que el m\u00e9todo devuelve tras ser ejecutado. Si eliges <code>void</code> como tipo devuelto, el m\u00e9todo no devolver\u00e1 ning\u00fan valor.</li> <li>El nombre del m\u00e9todo, aplic\u00e1ndose para los nombres el mismo convenio que para los atributos.</li> <li>Una lista de par\u00e1metros separados por comas y entre par\u00e9ntesis donde cada par\u00e1metro debe ir precedido por su tipo. Si el m\u00e9todo no tiene par\u00e1metros la lista estar\u00e1 vac\u00eda y \u00fanicamente aparecer\u00e1n los par\u00e9ntesis.</li> <li>Una lista de excepciones que el m\u00e9todo puede lanzar. Se utiliza la palabra reservada <code>throws</code> seguida de una lista de nombres de excepciones separadas por comas. No es obligatorio que un m\u00e9todo incluya una lista de excepciones, aunque muchas veces ser\u00e1 conveniente. En unidades anteriores ya has trabajado con el concepto de excepci\u00f3n y m\u00e1s adelante volver\u00e1s a hacer uso de ellas.</li> <li>El cuerpo del m\u00e9todo, encerrado entre llaves. El cuerpo contendr\u00e1 el c\u00f3digo del m\u00e9todo (una lista sentencias y estructuras de control en lenguaje Java) as\u00ed como la posible declaraci\u00f3n de variables locales.</li> </ol> <p>La sintaxis general de la cabecera de un m\u00e9todo podr\u00eda entonces quedar as\u00ed:</p> Java<pre><code>[private | protected | public] [static] [abstract] [final] [native] [synchronized] &lt;tipo&gt; &lt;nombreM\u00e9todo&gt; ( [&lt;lista_parametros&gt;] ) [throws &lt;lista_excepciones&gt;]\n</code></pre> <p>Como sucede con todos los identificadores en Java (variables, clases, objetos, m\u00e9todos, etc.) puede usarse cualquier identificador que cumpla las normas. Ahora bien, para mejorar la legibilidad del c\u00f3digo, se ha establecido el siguiente convenio para nombrar los m\u00e9todos: utilizar un verbo en min\u00fascula o bien un nombre formado por varias palabras que comience por un verbo en min\u00fascula, seguido por adjetivos, nombres, etc. los cuales s\u00ed aparecer\u00e1n en may\u00fasculas.</p> <p>Algunos ejemplos de m\u00e9todos que siguen este convenio podr\u00edan ser: <code>ejecutar</code>, <code>romper</code>, <code>mover</code>, <code>subir</code>, <code>responder</code>, <code>obtenerX</code>, <code>establecerValor</code>, <code>estaVacio</code>, <code>estaLleno</code>, <code>moverFicha</code>, <code>subirPalanca</code>, <code>responderRapido</code>, <code>girarRuedaIzquierda</code>, <code>abrirPuertaDelantera</code>, <code>cambiarMarcha</code>, etc.</p> <p>En el ejemplo de la clase <code>Punto</code>, puedes observar c\u00f3mo los m\u00e9todos <code>obtenerX</code> y <code>obtenerY</code> siguen el convenio de nombres para los m\u00e9todos, devuelven en ambos casos un tipo <code>int</code>, su lista de par\u00e1metros es vac\u00eda (no tienen par\u00e1metros) y no lanzan ning\u00fan tipo de excepci\u00f3n:</p> <ul> <li> <p><code>java   abstract int obtenerX()</code></p> </li> <li> <p><code>java   int obtenerY()</code></p> </li> </ul>"},{"location":"ud05/ud0504/#modificadores-en-la-declaracion-de-un-metodo","title":"Modificadores en la declaraci\u00f3n de un m\u00e9todo","text":"<p>En la declaraci\u00f3n de un m\u00e9todo tambi\u00e9n pueden aparecer modificadores (como en la declaraci\u00f3n de la clase o de los atributos). Un m\u00e9todo puede tener los siguientes tipos de modificadores:</p> <ul> <li>Modificadores de acceso. Son los mismos que en el caso de los atributos (por omisi\u00f3n o de paquete <code>package</code>, <code>public</code>, <code>private</code> y <code>protected</code>) y tienen el mismo cometido (acceso al m\u00e9todo s\u00f3lo por parte de clases del mismo paquete, o por cualquier parte del programa, o s\u00f3lo para la propia clase, o tambi\u00e9n para las subclases).</li> <li>Modificadores de contenido. Son tambi\u00e9n los mismos que en el caso de los atributos (<code>static</code> y <code>final</code>) aunque su significado no es el mismo.</li> <li>Otros modificadores (no son aplicables a los atributos, s\u00f3lo a los m\u00e9todos): <code>abstract</code>, <code>native</code>, <code>synchronized</code>.</li> </ul> <p>Un m\u00e9todo <code>static</code> es un m\u00e9todo cuya implementaci\u00f3n es igual para todos los objetos de la clase y s\u00f3lo tendr\u00e1 acceso a los atributos est\u00e1ticos de la clase (dado que se trata de un m\u00e9todo de clase y no de objeto, s\u00f3lo podr\u00e1 acceder a la informaci\u00f3n de clase y no la de un objeto en particular). Este tipo de m\u00e9todos pueden ser llamados sin necesidad de tener un objeto de la clase instanciado.</p> <p>En Java un ejemplo t\u00edpico de m\u00e9todos est\u00e1ticos se encuentra en la clase <code>Math</code>, cuyos m\u00e9todos son todos est\u00e1ticos (<code>Math.abs</code>, <code>Math.sin</code>, <code>Math.cos</code>, etc.). Como habr\u00e1s podido comprobar en este ejemplo, la llamada a m\u00e9todos est\u00e1ticos se hace normalmente usando el nombre de la propia clase y no el de una instancia (objeto), pues se trata realmente de un m\u00e9todo de clase. En cualquier caso, los objetos tambi\u00e9n admiten la invocaci\u00f3n de los m\u00e9todos est\u00e1ticos de su clase y funcionar\u00eda correctamente.</p> <p>Un m\u00e9todo <code>final</code> es un m\u00e9todo que no permite ser sobrescrito por las clases descendientes de la clase a la que pertenece el m\u00e9todo. Volver\u00e1s a ver este modificador cuando estudies en detalle la herencia.</p> <p>El modificador <code>native</code> es utilizado para se\u00f1alar que un m\u00e9todo ha sido implementado en c\u00f3digo nativo (en un lenguaje que ha sido compilado a lenguaje m\u00e1quina, como por ejemplo C o C++). En estos casos simplemente se indica la cabecera del m\u00e9todo, pues no tiene cuerpo escrito en Java.</p> <p>Un m\u00e9todo <code>abstract</code> (m\u00e9todo abstracto) es un m\u00e9todo que no tiene implementaci\u00f3n (el cuerpo est\u00e1 vac\u00edo). La implementaci\u00f3n ser\u00e1 realizada en las clases descendientes. Un m\u00e9todo s\u00f3lo puede ser declarado como <code>abstract</code> si se encuentra dentro de una clase <code>abstract</code>. Tambi\u00e9n volver\u00e1s a este modificador en unidades posteriores cuando trabajes con la herencia.</p> <p>Por \u00faltimo, si un m\u00e9todo ha sido declarado como <code>synchronized</code>, el entorno de ejecuci\u00f3n obligar\u00e1 a que cuando un proceso est\u00e9 ejecutando ese m\u00e9todo, el resto de procesos que tengan que llamar a ese mismo m\u00e9todo deber\u00e1n esperar a que el otro proceso termine. Puede resultar \u00fatil si sabes que un determinado m\u00e9todo va a poder ser llamado concurrentemente por varios procesos a la vez. Por ahora no lo vas a necesitar.</p> <p>Dada la cantidad de modificadores que has visto hasta el momento y su posible aplicaci\u00f3n en la declaraci\u00f3n de clases, atributos o m\u00e9todos, veamos un resumen de todos los que has visto y en qu\u00e9 casos pueden aplicarse:</p> modificador Clase Atributo M\u00e9todo sin modificador (package) \u2714 \u2714 \u2714 public \u2714 \u2714 \u2714 private \u274c \u2714 \u2714 protected \u2714 \u2714 \u2714 static \u274c \u2714 \u2714 final \u2714 \u2714 \u2714 synchronized \u274c \u274c \u2714 native \u274c \u274c \u2714 abstract \u2714 \u274c \u2714"},{"location":"ud05/ud0504/#parametros-en-un-metodo","title":"Par\u00e1metros en un m\u00e9todo","text":"<p>La lista de par\u00e1metros de un m\u00e9todo se coloca tras el nombre del m\u00e9todo. Esta lista estar\u00e1 constituida por pares de la forma <code>&lt;tipoParametro&gt; &lt;nombreParametro&gt;</code>; cada uno de esos pares estar\u00e1 separado por comas y la lista completa estar\u00e1 encerrada entre par\u00e9ntesis:</p> Java<pre><code>&lt;tipo&gt; nombreMetodo ( &lt;tipo_1&gt; &lt;nombreParametro_1&gt;, &lt;tipo_2&gt; &lt;nombreParametro_2&gt;, ..., &lt;tipo_n&gt;&lt;nombreParametro_n&gt; )\n</code></pre> <p>Si la lista de par\u00e1metros es vac\u00eda, tan solo aparecer\u00e1n los par\u00e9ntesis:</p> Java<pre><code>&lt;tipo&gt; &lt;nombreMetodo&gt; ( )\n</code></pre> <p>A la hora de declarar un m\u00e9todo, debes tener en cuenta:</p> <ul> <li>Puedes incluir cualquier cantidad de par\u00e1metros. Se trata de una decisi\u00f3n del programador, pudiendo ser incluso una lista vac\u00eda.</li> <li>Los par\u00e1metros podr\u00e1n ser de cualquier tipo (tipos primitivos, referencias, objetos, arrays, etc.).</li> <li>No est\u00e1 permitido que el nombre de una variable local del m\u00e9todo coincida con el nombre de un par\u00e1metro.</li> <li>No puede haber dos par\u00e1metros con el mismo nombre. Se producir\u00eda ambig\u00fcedad.</li> <li>Si el nombre de alg\u00fan par\u00e1metro coincide con el nombre de un atributo de la clase, \u00e9ste ser\u00e1 ocultado por el par\u00e1metro. Es decir, al indicar ese nombre en el c\u00f3digo del m\u00e9todo estar\u00e1s haciendo referencia al par\u00e1metro y no al atributo. Para poder acceder al atributo tendr\u00e1s que hacer uso del operador de autorreferencia <code>this</code>, que ver\u00e1s un poco m\u00e1s adelante.</li> <li>El paso de par\u00e1metros es siempre por valor, excepto en el caso de los tipos referenciados (por ejemplo los objetos) en cuyo caso se est\u00e1 pasando efectivamente una referencia. La referencia (el objeto en s\u00ed mismo) no podr\u00e1 ser cambiada pero s\u00ed elementos de su interior (atributos) a trav\u00e9s de sus m\u00e9todos o por acceso directo si se trata de un miembro p\u00fablico.</li> </ul> <p>Es posible utilizar una construcci\u00f3n especial llamada <code>varargs</code> (argumentos variables) que permite que un m\u00e9todo pueda tener un n\u00famero variable de par\u00e1metros. Para utilizar este mecanismo se colocan unos puntos suspensivos (tres puntos: <code>...</code>) despu\u00e9s del tipo del cual se puede tener una lista variable de argumentos, un espacio en blanco y a continuaci\u00f3n el nombre del par\u00e1metro que aglutinar\u00e1 la lista de argumentos variables.</p> Java<pre><code>&lt;tipo&gt;&lt;nombreMetodo&gt; (&lt;tipo&gt; ... &lt;nombre&gt;)\n</code></pre> <p>Es posible adem\u00e1s mezclar el uso de <code>varargs</code> con par\u00e1metros fijos. En tal caso, la lista de par\u00e1metros variables debe aparecer al final (y s\u00f3lo puede aparecer una).</p> <p>En realidad se trata una manera transparente de pasar un <code>array</code> con un n\u00famero variable de elementos para no tener que hacerlo manualmente. Dentro del m\u00e9todo habr\u00e1 que ir recorriendo el <code>array</code> para ir obteniendo cada uno de los elementos de la lista de argumentos variables.</p> Java<pre><code>...\nvoid tablaMultiplicar(int n, int... nums) {\n    System.out.println(\"Tabla de multiplicar por: \" + n);\n\n    for (int i=0 ; i &lt; nums.length ; i++) {\n        System.out.println(nums[i] + \" x \" + n + \" = \" + (nums[i] * n));\n    }\n}\n...\n</code></pre>"},{"location":"ud05/ud0504/#cuerpo-de-un-metodo","title":"Cuerpo de un m\u00e9todo","text":"<p>El interior de un m\u00e9todo (cuerpo) est\u00e1 compuesto por una serie de sentencias en lenguaje Java:</p> <ul> <li>Sentencias de declaraci\u00f3n de variables locales al m\u00e9todo.</li> <li>Sentencias que implementan la l\u00f3gica del m\u00e9todo (estructuras de control como bucles o condiciones; utilizaci\u00f3n de m\u00e9todos de otros objetos; c\u00e1lculo de expresiones matem\u00e1ticas, l\u00f3gicas o de cadenas; creaci\u00f3n de nuevos objetos, etc.). Es decir, todo lo que has visto en las unidades anteriores. </li> <li>Sentencia de devoluci\u00f3n del valor de retorno (<code>return</code>). Aparecer\u00e1 al final del m\u00e9todo y es la que permite devolver la informaci\u00f3n que se le ha pedido al m\u00e9todo. Es la \u00faltima parte del proceso y la forma de comunicarse con la parte de c\u00f3digo que llam\u00f3 al m\u00e9todo (paso de mensaje de vuelta). Esta sentencia de devoluci\u00f3n siempre tiene que aparecer al final del m\u00e9todo. Tan solo si el tipo devuelto por el m\u00e9todo es <code>void</code> (vac\u00edo) no debe aparecer (pues no hay que devolver nada al c\u00f3digo llamante).</li> </ul> <p>En el ejemplo de la clase <code>Punto</code>, ten\u00edas los m\u00e9todos <code>obtenerX</code> y <code>obtenerY</code>. Veamos uno de ellos:</p> Java<pre><code>int obtenerX(){\n    return x;\n}\n</code></pre> <p>En ambos casos lo \u00fanico que hace el m\u00e9todo es precisamente devolver un valor (utilizaci\u00f3n de la sentencia <code>return</code>). No recibe par\u00e1metros (mensajes o informaci\u00f3n de entrada) ni hace c\u00e1lculos, ni obtiene resultados intermedios o finales. Tan solo devuelve el contenido de un atributo. Se trata de uno de los m\u00e9todos m\u00e1s sencillos que se pueden implementar: un m\u00e9todo que devuelve el valor de un atributo. En ingl\u00e9s se les suele llamar m\u00e9todos de tipo <code>get</code>, que en ingl\u00e9s significa <code>obtener</code>.</p> <p>Adem\u00e1s de esos dos m\u00e9todos, la clase tambi\u00e9n dispon\u00eda de otros dos que sirven para la funci\u00f3n opuesta (<code>establecerX</code> y <code>establecerX</code>). Veamos uno de ellos:</p> Java<pre><code>void establecerX (int nuevoX){\n    x = nuevoX;\n}\n</code></pre> <p>En este caso se trata de pasar un valor al m\u00e9todo (par\u00e1metro <code>nuevoX</code> de tipo <code>int</code>) el cual ser\u00e1 utilizado para modificar el contenido del atributo <code>x</code> del objeto. Como habr\u00e1s podido comprobar, ahora no se devuelve ning\u00fan valor (el tipo devuelto es <code>void</code> y no hay sentencia <code>return</code>). En ingl\u00e9s se suele hablar de m\u00e9todos de tipo <code>set</code>, que en ingl\u00e9s significa poner o fijar (establecer un valor). El m\u00e9todo <code>establecerY</code> es pr\u00e1cticamente igual pero para establecer el valor del atributo <code>y</code>.</p> <p>Normalmente el c\u00f3digo en el interior de un m\u00e9todo ser\u00e1 algo m\u00e1s complejo y estar\u00e1 formado un conjunto de sentencias en las que se realizar\u00e1n c\u00e1lculos, se tomar\u00e1n decisiones, se repetir\u00e1n acciones, etc. Puedes ver un ejemplo m\u00e1s completo en el siguiente ejercicio.</p>"},{"location":"ud05/ud0504/#sobrecarga-de-metodos","title":"Sobrecarga de m\u00e9todos","text":"<p>En principio podr\u00edas pensar que un m\u00e9todo puede aparecer una sola vez en la declaraci\u00f3n de una clase (no se deber\u00eda repetir el mismo nombre para varios m\u00e9todos). Pero no tiene porqu\u00e9 siempre suceder as\u00ed. Es posible tener varias versiones de un mismo m\u00e9todo (varios m\u00e9todos con el mismo nombre) gracias a la sobrecarga de m\u00e9todos.</p> <p>El lenguaje Java soporta la caracter\u00edstica conocida como sobrecarga de m\u00e9todos. \u00c9sta permite declarar en una misma clase varias versiones del mismo m\u00e9todo con el mismo nombre. La forma que tendr\u00e1 el compilador de distinguir entre varios m\u00e9todos que tengan el mismo nombre ser\u00e1 mediante la lista de par\u00e1metros del m\u00e9todo: si el m\u00e9todo tiene una lista de par\u00e1metros diferente, ser\u00e1 considerado como un m\u00e9todo diferente (aunque tenga el mismo nombre) y el analizador l\u00e9xico no producir\u00e1 un error de compilaci\u00f3n al encontrar dos nombres de m\u00e9todo iguales en la misma clase.</p> <p>Imag\u00ednate que est\u00e1s desarrollando una clase para escribir sobre un lienzo que permite utilizar diferentes tipograf\u00edas en funci\u00f3n del tipo de informaci\u00f3n que se va a escribir. Es probable que necesitemos un m\u00e9todo diferente seg\u00fan se vaya a pintar un n\u00famero entero (<code>int</code>), un n\u00famero real (<code>double</code>) o una cadena de caracteres (<code>String</code>). Una primera opci\u00f3n podr\u00eda ser definir un nombre de m\u00e9todo diferente dependiendo de lo que se vaya a escribir en el lienzo. Por ejemplo:</p> <ul> <li>M\u00e9todo <code>pintarEntero (int entero)</code>.</li> <li>M\u00e9todo <code>pintarReal (double real)</code>.</li> <li>M\u00e9todo <code>pintarCadena (double String)</code>.</li> <li>M\u00e9todo <code>pintarEnteroCadena (int entero, String cadena)</code>.</li> </ul> <p>Y as\u00ed sucesivamente para todos los casos que desees contemplar...</p> <p>La posibilidad que te ofrece la sobrecarga es utilizar un mismo nombre para todos esos m\u00e9todos (dado que en el fondo hacen lo mismo: pintar). Pero para poder distinguir unos de otros ser\u00e1 necesario que siempre exista alguna diferencia entre ellos en las listas de par\u00e1metros (bien en el n\u00famero de par\u00e1metros, bien en el tipo de los par\u00e1metros). Volviendo al ejemplo anterior, podr\u00edamos utilizar un mismo nombre, por ejemplo <code>pintar</code>, para todos los m\u00e9todos anteriores:</p> <ul> <li>M\u00e9todo <code>pintar (int entero)</code>.</li> <li>M\u00e9todo <code>pintar (double real)</code>.</li> <li>M\u00e9todo <code>pintar (double String)</code>.</li> <li>M\u00e9todo <code>pintar (int entero, String cadena)</code>.</li> </ul> <p>En este caso el compilador no va a generar ning\u00fan error pues se cumplen las normas ya que unos m\u00e9todos son perfectamente distinguibles de otros (a pesar de tener el mismo nombre) gracias a que tienen listas de par\u00e1metros diferentes.</p> <p>Lo que s\u00ed habr\u00eda producido un error de compilaci\u00f3n habr\u00eda sido por ejemplo incluir otro m\u00e9todo pintar (<code>int</code> entero), pues es imposible distinguirlo de otro m\u00e9todo con el mismo nombre y con la misma lista de par\u00e1metros (ya existe un m\u00e9todo <code>pintar</code> con un \u00fanico par\u00e1metro de tipo <code>int</code>).</p> <p>Tambi\u00e9n debes tener en cuenta que el tipo devuelto por el m\u00e9todo no es considerado a la hora de identificar un m\u00e9todo, as\u00ed que un tipo devuelto diferente no es suficiente para distinguir un m\u00e9todo de otro. Es decir, no podr\u00edas definir dos m\u00e9todos exactamente iguales en nombre y lista de par\u00e1metros e intentar distinguirlos indicando un tipo devuelto diferente. El compilador producir\u00e1 un error de duplicidad en el nombre del m\u00e9todo y no te lo permitir\u00e1. </p> <p>Uso moderado de la sobrecarga</p> <p>Es conveniente no abusar de sobrecarga de m\u00e9todos y utilizarla con cierta moderaci\u00f3n (cuando realmente puede beneficiar su uso), dado que podr\u00eda hacer el c\u00f3digo menos legible.</p>"},{"location":"ud05/ud0504/#sobrecarga-de-operadores","title":"Sobrecarga de operadores","text":"<p>Del mismo modo que hemos visto la posibilidad de sobrecargar m\u00e9todos (disponer de varias versiones de un m\u00e9todo con el mismo nombre cambiando su lista de par\u00e1metros), podr\u00eda plantearse tambi\u00e9n la opci\u00f3n de sobrecargar operadores del lenguaje tales como <code>+</code>, <code>-</code> , <code>*</code>, <code>( )</code>, <code>&lt;</code>, <code>&gt;</code>, etc. para darles otro significado dependiendo del tipo de objetos con los que vaya a operar.</p> <p>En algunos casos puede resultar \u00fatil para ayudar a mejorar la legibilidad del c\u00f3digo, pues esos operadores resultan muy intuitivos y pueden dar una idea r\u00e1pida de cu\u00e1l es su funcionamiento.</p> <p>Un t\u00edpico ejemplo podr\u00eda ser el de la sobrecarga de operadores aritm\u00e9ticos como la suma (+) o el producto (*) para operar con fracciones. Si se definen objetos de una clase <code>Fraccion</code> (que contendr\u00e1 los atributos <code>numerador</code> y <code>denominador</code>) podr\u00edan sobrecargarse los operadores aritm\u00e9ticos (habr\u00eda que redefinir el operador suma (<code>+</code>) para la suma, el operador asterisco (<code>*</code>) para el producto, etc.) para esta clase y as\u00ed podr\u00edan utilizarse para sumar o multiplicar objetos de tipo <code>Fraccion</code> mediante el algoritmo espec\u00edfico de suma o de producto del objeto <code>Fraccion</code> (pues esos operadores no est\u00e1n preparados en el lenguaje para operar con esos objetos).</p> <p>En algunos lenguajes de programaci\u00f3n como por ejemplo C++ o C# se permite la sobrecarga, pero no es algo soportado en todos los lenguajes. \u00bfQu\u00e9 sucede en el caso concreto de Java?</p> <p>Sobrecarga de operadores en Java</p> <p>El lenguaje Java NO soporta la sobrecarga de operadores.</p> <p>En el ejemplo anterior de los objetos de tipo Fracci\u00f3n, habr\u00e1 que declarar m\u00e9todos en la clase <code>Fraccion</code> que se encarguen de realizar esas operaciones, pero no lo podremos hacer sobrecargando los operadores del lenguaje (los s\u00edmbolos de la suma, resta, producto, etc.). Por ejemplo:</p> Java<pre><code>public Fraccion sumar (Fraccion sumando)\npublic Fraccion multiplicar (Fraccion multiplicando)\n</code></pre> <p>Y as\u00ed sucesivamente...</p> <p>Dado que en este m\u00f3dulo se est\u00e1 utilizando el lenguaje Java para aprender a programar, no podremos hacer uso de esta funcionalidad. M\u00e1s adelante, cuando aprendas a programar en otros lenguajes, es posible que s\u00ed tengas la posibilidad de utilizar este recurso.</p>"},{"location":"ud05/ud0504/#la-referencia-this","title":"La referencia <code>this</code>","text":"<p>La palabra reservada <code>this</code> consiste en una referencia al objeto actual. El uso de este operador puede resultar muy \u00fatil a la hora de evitar la ambig\u00fcedad que puede producirse entre el nombre de un par\u00e1metro de un m\u00e9todo y el nombre de un atributo cuando ambos tienen el mismo identificador (mismo nombre). En tales casos el par\u00e1metro \"oculta\" al atributo y no tendr\u00edamos acceso directo a \u00e9l (al escribir el identificador estar\u00edamos haciendo referencia al par\u00e1metro y no al atributo). En estos casos la referencia <code>this</code> nos permite acceder a estos atributos ocultados por los par\u00e1metros.</p> <p>Dado que <code>this</code> es una referencia a la propia clase en la que te encuentras en ese momento, puedes acceder a sus atributos mediante el operador punto (<code>.</code>) como sucede con cualquier otra clase u objeto. Por tanto, en lugar deponer el nombre del atributo (que estos casos har\u00eda referencia al par\u00e1metro), podr\u00edas escribir <code>this.nombreAtributo</code>, de manera que el compilador sabr\u00e1 que te est\u00e1s refiriendo al atributo y se eliminar\u00e1 la ambig\u00fcedad.</p> <p>En el ejemplo de la clase <code>Punto</code>, podr\u00edamos utilizar la referencia <code>this</code> si el nombre del par\u00e1metro del m\u00e9todo coincidiera con el del atributo que se desea modificar. Por ejemplo:</p> Java<pre><code>class Punto{\n    private int x,y;\n\n    void establecerX (int nuevaX){\n        x = 1;      //&lt;&lt;&lt;--- metodo\n        this.x = 1; //&lt;&lt;&lt;--- clase\n        this.x = x;\n        this.x = nuevaX;\n    }\n}\n</code></pre> <p>En este caso ha sido indispensable el uso de <code>this</code>, pues si no ser\u00eda imposible saber en qu\u00e9 casos te est\u00e1s refiriendo al par\u00e1metro <code>x</code> y en cu\u00e1les al atributo <code>x</code>. Para el compilador el identificador <code>x</code> ser\u00e1 siempre el par\u00e1metro, pues ha \"ocultado\" al atributo.</p> <p>Uso de <code>this</code></p> <p>En algunos casos puede resultar \u00fatil hacer uso de la referencia <code>this</code> aunque no sea necesario, pues puede ayudar a mejorar la legibilidad del c\u00f3digo.</p>"},{"location":"ud05/ud0504/#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":"<p>Como ya has visto en ocasiones anteriores, un m\u00e9todo est\u00e1tico es un m\u00e9todo que puede ser usado directamente desde la clase, sin necesidad de tener que crear una instancia para poder utilizar al m\u00e9todo. Tambi\u00e9n son conocidos como m\u00e9todos de clase (como suced\u00eda con los atributos de clase), frente a los m\u00e9todos de objeto (es necesario un objeto para poder disponer de ellos).</p> <p>Los m\u00e9todos est\u00e1ticos no pueden manipular atributos de instancias (objetos) sino atributos est\u00e1ticos (de clase) y suelen ser utilizados para realizar operaciones comunes a todos los objetos de la clase, m\u00e1s que para una instancia concreta.</p> <p>Algunos ejemplos de operaciones que suelen realizarse desde m\u00e9todos est\u00e1ticos:</p> <ul> <li>Acceso a atributos espec\u00edficos de clase: incremento o decremento de contadores internos de la clase (<code>no de instancias</code>), acceso a un posible atributo de nombre de la clase, etc.</li> <li>Operaciones gen\u00e9ricas relacionadas con la clase pero que no utilizan atributos de instancia. Por ejemplo una clase <code>NIF</code> (o <code>DNI</code>) que permite trabajar con el <code>DNI</code> y la letra del <code>NIF</code> y que proporciona funciones adicionales para calcular la letra <code>NIF</code> de un n\u00famero de <code>DNI</code> que se le pase como par\u00e1metro. Ese m\u00e9todo puede ser interesante para ser usado desde fuera de la clase de manera independiente a la existencia de objetos de tipo <code>NIF</code>.</li> </ul> <p>En la biblioteca de Java es muy habitual encontrarse con clases que proporcionan m\u00e9todos est\u00e1ticos que pueden resultar muy \u00fatiles para c\u00e1lculos auxiliares, conversiones de tipos, etc. Por ejemplo, la mayor\u00eda de las clases del paquete <code>java.lang</code> que representan tipos (<code>Integer</code>, <code>String</code>, <code>Float</code>, <code>Double</code>, <code>Boolean</code>, etc.) ofrecen m\u00e9todos est\u00e1ticos para hacer conversiones. Aqu\u00ed tienes algunos ejemplos:</p> <ul> <li><code>java   static String valueOf(int i)</code></li> </ul> <p>Devuelve la representaci\u00f3n en formato <code>String</code> (cadena) de un valor <code>int</code>. Se trata de un m\u00e9todo que no tiene que ver nada en absoluto con instancias de concretas de <code>String</code>, sino de un m\u00e9todo auxiliar que puede servir como herramienta para ser usada desde otras clases. Se utilizar\u00eda directamente con el nombre de la clase. Por ejemplo: </p> <ul> <li> <p><code>java     String enteroCadena = String.valueOf(23);</code></p> </li> <li> <p><code>java   static String valueOf(float f)</code></p> </li> </ul> <p>Algo similar para un valor de tipo <code>float</code>. Ejemplo de uso:</p> <ul> <li> <p><code>java     String floatCadena = String.valueOf(24.341);</code></p> </li> <li> <p><code>java   static int parseInt(String s)</code></p> </li> </ul> <p>En este caso se trata de un m\u00e9todo est\u00e1tico de la clase <code>Integer</code>. Analiza la cadena pasada como par\u00e1metro y la transforma en un <code>int</code>. Ejemplo de uso: </p> <ul> <li><code>java     int cadenaEntero=Integer.parseInt (\"\u201012\");</code></li> </ul> <p>Todos los ejemplos anteriores son casos en los que se utiliza directamente la clase como una especie de caja de herramientas que contiene m\u00e9todos que pueden ser utilizados desde cualquier parte, por eso suelen ser m\u00e9todos p\u00fablicos.</p>"},{"location":"ud05/ud0505/","title":"5.5 Encapsulaci\u00f3n, control de acceso y visibilidad","text":"<p>Dentro de la Programaci\u00f3n Orientada a Objetos ya has visto que es muy importante el concepto de ocultaci\u00f3n, la cual ha sido lograda gracias a la encapsulaci\u00f3n de la informaci\u00f3n dentro de las clases. De esta manera una clase puede ocultar parte de su contenido o restringir el acceso a \u00e9l para evitar que sea manipulado de manera inadecuada. Los modificadores de acceso en Java permiten especificar el \u00e1mbito de visibilidad de los miembros de una clase, proporcionando as\u00ed un mecanismo de accesibilidad a varios niveles.</p> <p>Acabas de estudiar que cuando se definen los miembros de una clase (atributos o m\u00e9todos), e incluso la propia clase, se indica (aunque sea por omisi\u00f3n) un modificador de acceso. En funci\u00f3n de la visibilidad que se desee que tengan los objetos o los miembros de esos objetos se elegir\u00e1 alguno de los modificadores de acceso que has estudiado. Ahora que ya sabes c\u00f3mo escribir una clase completa (declaraci\u00f3n de la clase, declaraci\u00f3n de sus atributos y declaraci\u00f3n de sus m\u00e9todos), vamos a hacer un repaso general de las opciones de visibilidad (control de acceso) que has estudiado.</p> <p>Los modificadores de acceso determinan si una clase puede utilizar determinados miembros (acceder a atributos o invocar miembros) de otra clase. Existen dos niveles de control de acceso:</p> <ol> <li>A nivel general (nivel de clase): visibilidad de la propia clase.</li> <li>A nivel de miembros: especificaci\u00f3n, miembro por miembro, de su nivel de visibilidad.</li> </ol> <p>En el caso de la clase, ya estudiaste que los niveles de visibilidad pod\u00edan ser:</p> <ul> <li>P\u00fablico (modificador <code>public</code>), en cuyo caso la clase era visible a cualquier otra clase (cualquier otro fragmento de c\u00f3digo del programa).</li> <li>Privada al paquete (<code>package</code>)(sin modificador o modificador \"por omisi\u00f3n\"). En este caso, la clase s\u00f3lo ser\u00e1 visible a las dem\u00e1s clases del mismo paquete, pero no al resto del c\u00f3digo del programa (otros paquetes).</li> <li>(protected), lo podr\u00e1n ver las clases del mismo paquete y tambi\u00e9n las clases herederas.</li> </ul> <p>En el caso de los miembros, dispon\u00edas de una posibilidad m\u00e1s de niveles de accesibilidad, teniendo un total de cuatro opciones a la hora de definir el control de acceso al miembro:</p> <ul> <li>P\u00fablico (modificador <code>public</code>), igual que en el caso global de la clase y con el mismo significado (miembro visible desde cualquier parte del c\u00f3digo).</li> <li>Del paquete (sin modificador), tambi\u00e9n con el mismo significado que en el caso de la clase (miembro visible s\u00f3lo desde clases del mismo paquete, ni siquiera ser\u00e1 visible desde una subclase salvo si \u00e9sta est\u00e1 en el mismo paquete).</li> <li>Privado (modificador <code>private</code>), donde s\u00f3lo la propia clase tiene acceso al miembro.</li> <li>Protegido (modificador <code>protected</code>), lo podr\u00e1n ver las clases del mismo paquete y tambi\u00e9n las clases herederas.</li> </ul>"},{"location":"ud05/ud0505/#ocultacion-de-atributos-metodos-de-acceso","title":"Ocultaci\u00f3n de atributos. M\u00e9todos de acceso","text":"<p>Los atributos de una clase suelen ser declarados como privados a la clase o, como mucho, <code>protected</code> (accesibles tambi\u00e9n por clases heredadas), pero no como <code>public</code>. De esta manera puedes evitar que sean manipulados inadecuadamente (por ejemplo modificarlos sin ning\u00fan tipo de control) desde el exterior del objeto.</p> <p>En estos casos lo que se suele hacer es declarar esos atributos como privados o protegidos y crear m\u00e9todos p\u00fablicos que permitan acceder a esos atributos. Si se trata de un atributo cuyo contenido puede ser observado pero no modificado directamente, puede implementarse un m\u00e9todo de \"obtenci\u00f3n\" del atributo (en ingl\u00e9s se les suele llamar m\u00e9todo de tipo <code>get</code>) y si el atributo puede ser modificado, puedes tambi\u00e9n implementar otro m\u00e9todo para la modificaci\u00f3n o \"establecimiento\" del valor del atributo (en ingl\u00e9s se le suele llamar m\u00e9todo de tipo <code>set</code>). Esto ya lo has visto en apartados anteriores.</p> <p>Si recuerdas la clase <code>Punto</code> que hemos utilizado como ejemplo, ya hiciste algo as\u00ed con los m\u00e9todos de obtenci\u00f3n y establecimiento de las coordenadas:</p> Java<pre><code>private int x, y;\n\n// M\u00e9todos get\npublic int obtenerX() {\n    return x;\n}\npublic int obtenerY() {\n    return y;\n}\n// M\u00e9todos set\npublic void establecerX(int x) {\n    this.x = x;\n}\npublic void establecerY(int y) {\n    this.y = y;\n}\n</code></pre> <p>As\u00ed, para poder obtener el valor del atributo <code>x</code> de un objeto de tipo <code>Punto</code> ser\u00e1 necesario utilizar el m\u00e9todo <code>obtenerX()</code> y no se podr\u00e1 acceder directamente al atributo <code>x</code> del objeto. En algunos casos los programadores directamente utilizan nombres en ingl\u00e9s para nombrar a estos m\u00e9todos:</p> Java<pre><code>getX(), getY(), setX(), setY(), getNombre, setNombre, getColor, etc.\n</code></pre> <p>Tambi\u00e9n pueden darse casos en los que no interesa que pueda observarse directamente el valor de un atributo, sino un determinado procesamiento o c\u00e1lculo que se haga con el atributo (pero no el valor original). Por ejemplo podr\u00edas tener un atributo <code>DNI</code> que almacene los 8 d\u00edgitos del <code>DNI</code> pero no la letra del <code>NIF</code> (pues se puede calcular a partir de los d\u00edgitos). El m\u00e9todo de acceso para el <code>DNI</code> (m\u00e9todo <code>getDNI</code>) podr\u00eda proporcionar el <code>DNI</code> completo (es decir, el <code>NIF</code>, incluyendo la letra), mientras que la letra no es almacenada realmente en el atributo del objeto. Algo similar podr\u00eda suceder con el d\u00edgito de control de una cuenta bancaria, que puede no ser almacenado en el objeto, pero s\u00ed calculado y devuelto cuando se nos pide el n\u00famero de cuenta completo.</p> <p>En otros casos puede interesar disponer de m\u00e9todos de modificaci\u00f3n de un atributo pero a trav\u00e9s de un determinado procesamiento previo para, por ejemplo, poder controlar errores o valores inadecuados. Volviendo al ejemplo del <code>NIF</code>, un m\u00e9todo para modificar un <code>DNI</code> (m\u00e9todo <code>setDNI</code>) podr\u00eda incluir la letra (<code>NIF</code> completo), de manera que as\u00ed podr\u00eda comprobarse si el n\u00famero de <code>DNI</code> y la letra coinciden (es un <code>NIF</code> v\u00e1lido). En tal caso se almacenar\u00e1 el <code>DNI</code> y en caso contrario se producir\u00e1 un error de validaci\u00f3n (por ejemplo lanzando una excepci\u00f3n). En cualquier caso, el <code>DNI</code> que se almacenara ser\u00eda solamente el n\u00famero y no la letra (pues la letra es calculable a partir del n\u00famero de <code>DNI</code>).</p>"},{"location":"ud05/ud0505/#ocultacion-de-metodos","title":"Ocultaci\u00f3n de m\u00e9todos","text":"<p>Normalmente los m\u00e9todos de una clase pertenecen a su interfaz y por tanto parece l\u00f3gico que sean declarados como p\u00fablicos. Pero tambi\u00e9n es cierto que pueden darse casos en los que exista la necesidad de disponer de algunos m\u00e9todos privados a la clase. Se trata de m\u00e9todos que realizan operaciones intermedias o auxiliares y que son utilizados por los m\u00e9todos que s\u00ed forman parte de la interfaz. Ese tipo de m\u00e9todos (de comprobaci\u00f3n, de adaptaci\u00f3n de formatos, de c\u00e1lculos intermedios, etc.) suelen declararse como privados pues no son de inter\u00e9s (o no es apropiado que sean visibles) fuera del contexto del interior del objeto.</p> <p>En el ejemplo anterior de objetos que contienen un <code>DNI</code>, ser\u00e1 necesario calcular la letra correspondiente a un determinado n\u00famero de <code>DNI</code> o comprobar si una determinada combinaci\u00f3n de n\u00famero y letra forman un <code>DNI</code> v\u00e1lido. Este tipo de c\u00e1lculos y comprobaciones podr\u00edan ser implementados en m\u00e9todos privados de la clase (o al menos como m\u00e9todos protegidos).</p>"},{"location":"ud05/ud0506/","title":"5.6 Utilizaci\u00f3n de m\u00e9todos y atributos de una clase","text":"<p>Una vez que ya tienes implementada una clase con todos sus atributos y m\u00e9todos, ha llegado el momento de utilizarla, es decir, de instanciar objetos de esa clase e interaccionar con ellos. En unidades anteriores ya has visto c\u00f3mo declarar un objeto de una clase determinada, instanciarlo con el operador <code>new</code> y utilizar sus m\u00e9todos y atributos.</p>"},{"location":"ud05/ud0506/#declaracion-de-un-objeto","title":"Declaraci\u00f3n de un objeto","text":"<p>Como ya has visto en unidades anteriores, la declaraci\u00f3n de un objeto se realiza exactamente igual que la declaraci\u00f3n de una variable de cualquier tipo:</p> Java<pre><code>&lt;tipo&gt; nombreVariable;\n</code></pre> <p>En este caso el tipo ser\u00e1 alguna clase que ya hayas implementado o bien alguna de las proporcionadas por la biblioteca de Java o por alguna otra biblioteca escrita por terceros.</p> <p>Por ejemplo:</p> Java<pre><code>Punto p1;\n\nRectangulo r1, r2;\n\nCoche cocheAntonio;\n\nString palabra;\n</code></pre> <p>Esas variables (<code>p1</code>, <code>r1</code>, <code>r2</code>, <code>cocheAntonio</code>, <code>palabra</code>) en realidad son referencias (tambi\u00e9n conocidas como punteros o direcciones de memoria) que apuntan (hacen \"referencia\") a un objeto (una zona de memoria) de la clase indicada en la declaraci\u00f3n.</p> <p>Como ya estudiaste en la unidad dedicada a los objetos, un objeto reci\u00e9n declarado (referencia reci\u00e9n creada) no apunta a nada. Se dice que la referencia est\u00e1 vac\u00eda o que es una referencia nula (la variable objeto contiene el valor <code>null</code>). Es decir, la variable existe y est\u00e1 preparada para guardar una direcci\u00f3n de memoria que ser\u00e1 la zona donde se encuentre el objeto al que har\u00e1 referencia, pero el objeto a\u00fan no existe (no ha sido creado o instanciado). Por tanto se dice que apunta a un objeto nulo o inexistente.</p> <p>Para que esa variable (referencia) apunte realmente a un objeto (contenga una referencia o direcci\u00f3n de memoria que apunte a una zona de memoria en la que se ha reservado espacio para un objeto) es necesario crear o instanciar el objeto. Para ello se utiliza el operador <code>new</code>.</p>"},{"location":"ud05/ud0506/#creacion-de-un-objeto","title":"Creaci\u00f3n de un objeto","text":"<p>Para poder crear un objeto (instancia de una clase) es necesario utilizar el operador <code>new</code>, el cual tiene la siguiente sintaxis:</p> Java<pre><code>nombreObjeto= new &lt;ConstructorClase&gt; ([listaParametros]);\n</code></pre> <p>El constructor de una clase (<code>&lt;ConstructorClase&gt;</code>) es un m\u00e9todo especial que tiene toda clase y cuyo nombre coincide con el de la clase. Es quien se encarga de crear o construir el objeto, solicitando la reserva de memoria necesaria para los atributos e inicializ\u00e1ndolos a alg\u00fan valor si fuera necesario.</p> <p>Dado que el constructor es un m\u00e9todo m\u00e1s de la clase, podr\u00e1 tener tambi\u00e9n su lista de par\u00e1metros como tienen todos los m\u00e9todos.</p> <p>De la tarea de reservar memoria para la estructura del objeto (sus atributos m\u00e1s alguna otra informaci\u00f3n de car\u00e1cter interno para el entorno de ejecuci\u00f3n) se encarga el propio entorno de ejecuci\u00f3n de Java. Es decir, que por el hecho de ejecutar un m\u00e9todo constructor, el entorno sabr\u00e1 que tiene que realizar una serie de tareas (solicitud de una zona de memoria disponible, reserva de memoria para los atributos, enlace de la variable objeto a esa zona, etc.) y se pondr\u00e1 r\u00e1pidamente a desempe\u00f1arlas.</p> <p>Cuando escribas el c\u00f3digo de una clase no es necesario que implementes el m\u00e9todo constructor si no quieres hacerlo. Java se encarga de dotar de un constructor por omisi\u00f3n (tambi\u00e9n conocido como constructor por defecto) a toda clase. Ese constructor por omisi\u00f3n se ocupar\u00e1 exclusivamente de las tareas de reserva de memoria. Si deseas que el constructor realice otras tareas adicionales, tendr\u00e1s que escribir el constructor t\u00fa mismo; y tambi\u00e9n el constructor por defecto. El constructor por omisi\u00f3n no tiene par\u00e1metros.</p> <p>Constructor por defecto impl\u00edcito</p> <p>El constructor por defecto no se ve en el c\u00f3digo de una clase. Lo incluir\u00e1 el compilador de Java al compilar la clase si descubre que no se ha creado ning\u00fan m\u00e9todo constructor para esa clase. </p> <p>Algunos ejemplos de instanciaci\u00f3n o creaci\u00f3n de objetos podr\u00edan ser:</p> Java<pre><code>p1 = new Punto();\n\nr1 = new Rectangulo();\n\nr2 = new Rectangulo;\n\ncocheAntonio = new Coche();\n\npalabra = new String; //palabra = new String(\"\");\n</code></pre> <p> </p> <p>En el caso de los constructores, si \u00e9stos no tienen par\u00e1metros, pueden omitirse los par\u00e9ntesis vac\u00edos.</p> <p>Un objeto puede ser declarado e instanciado en la misma l\u00ednea. Por ejemplo:</p> Java<pre><code>Punto p1 = new Punto();\n</code></pre>"},{"location":"ud05/ud0506/#manipulacion-de-un-objeto-utilizacion-de-metodos-y-atributos","title":"Manipulaci\u00f3n de un objeto: utilizaci\u00f3n de m\u00e9todos y atributos","text":"<p>Una vez que un objeto ha sido declarado y creado (clase instanciada) ya s\u00ed se puede decir que el objeto existe en el entorno de ejecuci\u00f3n, y por tanto que puede ser manipulado como un objeto m\u00e1s en el programa, haci\u00e9ndose uso de sus atributos y sus m\u00e9todos.</p> <p>Para acceder a un miembro de un objeto se utiliza el operador punto (<code>.</code>) del siguiente modo:</p> Java<pre><code>&lt;nombreObjeto&gt;.&lt;nombreMiembro&gt;\n</code></pre> <p>Donde <code>&lt;nombreMiembro&gt;</code> ser\u00e1 el nombre de alg\u00fan miembro del objeto (atributo o m\u00e9todo) al cual se tenga acceso.</p> <p>Por ejemplo, en el caso de los objetos de tipo <code>Punto</code> que has declarado e instanciado en los apartados anteriores, podr\u00edas acceder a sus miembros de la siguiente manera:</p> Java<pre><code>Punto p1, p2, p3;\n\np1= new Punto();\np1.x= 5;\np1.y= 6;\n\nSystem.out.printf (\"p1.x: %d\\np1.y: %d\\n\", p1.x, p1.y);\nSystem.out.printf (\"p1.x: %d\\np1.y: %d\\n\", p1.obtenerX(), p1.obtenerY());\np1.establecerX(25);\np1.establecerX(30);\nSystem.out.printf (\"p1.x: %d\\np1.y: %d\\n\", p1.obtenerX(), p1.obtenerY());\n</code></pre> <p>Es decir, colocando el operador punto (<code>.</code>) a continuaci\u00f3n del nombre del objeto y seguido del nombre del miembro al que se desea acceder.</p>"},{"location":"ud05/ud0507/","title":"5.7 Constructores","text":"<p>El ciclo de vida de un objeto se pueden distinguir las fases de:</p> <ul> <li>Construcci\u00f3n del objeto.</li> <li>Manipulaci\u00f3n y utilizaci\u00f3n del objeto accediendo a sus miembros.</li> <li>Destrucci\u00f3n del objeto.</li> </ul> <p>Como has visto en el apartado anterior, durante la fase de construcci\u00f3n o instanciaci\u00f3n de un objeto es cuando se reserva espacio en memoria para sus atributos y se inicializan algunos de ellos. Un constructor es un m\u00e9todo especial con el mismo nombre de la clase y que se encarga de realizar este proceso.</p> <p>El proceso de declaraci\u00f3n y creaci\u00f3n de un objeto mediante el operador <code>new</code> ya ha sido estudiado en apartados anteriores. A lo largo de las unidades anteriores hemos creado clases que ten\u00edan constructor por defecto y tambi\u00e9n constructores implementados por nosotros mismos.</p> <p> </p> <p>Los m\u00e9todos constructores se encargan de llevar a cabo el proceso de creaci\u00f3n o construcci\u00f3n de un objeto.</p>"},{"location":"ud05/ud0507/#concepto-de-constructor","title":"Concepto de constructor","text":"<p>Un constructor es un m\u00e9todo que tiene el mismo nombre que la clase a la que pertenece y que no devuelve ning\u00fan valor tras su ejecuci\u00f3n. Su funci\u00f3n es la de proporcionar el mecanismo de creaci\u00f3n de instancias (objetos) de la clase.</p> <p>Cuando un objeto es declarado, en realidad a\u00fan no existe. Tan solo se trata de un nombre simb\u00f3lico (una variable) que en el futuro har\u00e1 referencia a una zona de memoria que contendr\u00e1 la informaci\u00f3n que representa realmente a un objeto. Para que esa variable de objeto a\u00fan \"vac\u00eda\" (se suele decir que es una referencia nula o vac\u00eda) apunte, o haga referencia a una zona de memoria que represente a una instancia de clase (objeto) existente, es necesario \"construir\" el objeto. Ese proceso se realizar\u00e1 a trav\u00e9s del m\u00e9todo constructor de la clase. Por tanto para crear un nuevo objeto es necesario realizar una llamada a un m\u00e9todo constructor de la clase a la que pertenece ese objeto.</p> <p>Ese proceso se realiza mediante la utilizaci\u00f3n del operador <code>new</code>.</p> <p>Hasta el momento ya has utilizado en numerosas ocasiones el operador <code>new</code> para instanciar o crear objetos. En realidad lo que estabas haciendo era una llamada al constructor de la clase para que reservara memoria para ese objeto y por tanto \"crear\" f\u00edsicamente el objeto en la memoria (dotarlo de existencia f\u00edsica dentro de la memoria del ordenador). Dado que en esta unidad est\u00e1s ya definiendo tus propias clases, parece que ha llegado el momento de que empieces a escribir tambi\u00e9n los constructores de tus clases.</p> <p>Por otro lado, si un constructor es al fin y al cabo una especie de m\u00e9todo (aunque algo especial) y Java soporta la sobrecarga de m\u00e9todos, podr\u00edas plantearte la siguiente pregunta: \u00bfpodr\u00e1 una clase disponer de m\u00e1s de constructor? En otras palabras, \u00bfser\u00e1 posible la sobrecarga de constructores? La respuesta es afirmativa.</p> <p>N\u00famero de constructores en las clases</p> <p>Una misma clase puede disponer de varios constructores. Los constructores soportan la sobrecarga.</p> <p>Es necesario que toda clase tenga al menos un constructor. Si no se define ning\u00fan constructor en una clase, el compilador crear\u00e1 por nosotros un constructor por defecto vac\u00edo que se encarga de inicializar todos los atributos a sus valores por defecto (0 para los num\u00e9ricos, null para las referencias, false para los boolean, etc.).</p> <p>Algunas analog\u00edas que podr\u00edas imaginar para representar el constructor de una clase podr\u00edan ser:</p> <ul> <li>Los moldes de cocina para flanes, galletas, pastas, etc.</li> <li>Un cubo de playa para crear castillos de arena.</li> <li>Un molde de un lingote de oro.</li> <li>Una bolsa para hacer cubitos de hielo.</li> </ul>"},{"location":"ud05/ud0507/#creacion-de-constructores","title":"Creaci\u00f3n de constructores","text":"<p>Cuando se escribe el c\u00f3digo de una clase normalmente se pretende que los objetos de esa clase se creen de una determinada manera. Para ello se definen uno o m\u00e1s constructores en la clase. En la definici\u00f3n de un constructor se indican:</p> <ul> <li>El tipo de acceso.</li> <li>El nombre de la clase (el nombre de un m\u00e9todo constructor es siempre el nombre de la propia clase).</li> <li>La lista de par\u00e1metros que puede aceptar.</li> <li>Si lanza o no excepciones.</li> <li>El cuerpo del constructor (un bloque de c\u00f3digo como el de cualquier m\u00e9todo).</li> </ul> <p>Como puedes observar, la estructura de los constructores es similar a la de cualquier m\u00e9todo, con las excepciones de que no tiene tipo de dato devuelto (no devuelve ning\u00fan valor) y que el nombre del m\u00e9todo constructor debe ser obligatoriamente el nombre de la clase.</p> <p>Desaparici\u00f3n del m\u00e9todo constructor por defecto</p> <p>Si defines constructores personalizados para una clase, el constructor por defecto (sin par\u00e1metros) para esa clase deja de ser generado por el compilador, de manera que tendr\u00e1s que crearlo t\u00fa si quieres poder utilizarlo. Si se ha creado un constructor con par\u00e1metros y no se ha implementado el constructor por defecto, el intento de utilizaci\u00f3n del constructor por defecto producir\u00e1 un error de compilaci\u00f3n (el compilador no lo har\u00e1 por nosotros).</p> <p>Un ejemplo de constructor para la clase Punto podr\u00eda ser:</p> Java<pre><code>public Punto(int x, int y) {\n    this.x= x;\n    this.y= y;\n    cantidadPuntos++; // Suponiendo que tengamos un atributo est\u00e1tico cantidadPuntos\n}\n</code></pre> <p>En este caso el constructor recibe dos par\u00e1metros. Adem\u00e1s de reservar espacio para los atributos (de lo cual se encarga autom\u00e1ticamente Java), tambi\u00e9n asigna sendos valores iniciales a los atributos <code>x</code> e y. Por \u00faltimo incrementa un atributo (probablemente est\u00e1tico) llamado <code>cantidadPuntos</code>.</p>"},{"location":"ud05/ud0507/#utilizacion-de-constructores","title":"Utilizaci\u00f3n de constructores","text":"<p>Una vez que dispongas de tus propios constructores personalizados, la forma de utilizarlos es igual que con el constructor por defecto (mediante la utilizaci\u00f3n de la palabra reservada <code>new</code>) pero teniendo en cuenta que si has declarado par\u00e1metros en tu m\u00e9todo constructor, tendr\u00e1s que llamar al constructor con alg\u00fan valor para esos par\u00e1metros. Un ejemplo de utilizaci\u00f3n del constructor que has creado para la clase <code>Punto</code> en el apartado anterior podr\u00eda ser:</p> Java<pre><code>Punto p1;\np1 = new Punto(10, 7);\n</code></pre> <p>o declaraci\u00f3n e instanciaci\u00f3n en la misma l\u00ednea de c\u00f3digo:</p> Java<pre><code>Punto p1 = new Punto(10, 7);\n</code></pre> <p>En este caso no se estar\u00eda utilizando el constructor por defecto sino el constructor que acabas de implementar en el cual adem\u00e1s de reservar memoria se asigna un valor a algunos de los atributos.</p>"},{"location":"ud05/ud0507/#constructores-de-copia","title":"Constructores de copia","text":"<p>Una forma de iniciar un objeto podr\u00eda ser mediante la copia de los valores de los atributos de otro objeto ya existente. Imagina que necesitas varios objetos iguales (con los mismos valores en sus atributos) y que ya tienes uno de ellos perfectamente configurado (sus atributos contienen los valores que t\u00fa necesitas). Estar\u00eda bien disponer de un constructor que hiciera copias id\u00e9nticas de ese objeto.</p> <p>Durante el proceso de creaci\u00f3n de un objeto puedes generar objetos exactamente iguales (basados en la misma clase) que se distinguir\u00e1n posteriormente porque podr\u00e1n tener estados distintos (valores diferentes en los atributos). La idea es poder decirle a la clase que adem\u00e1s de generar un objeto nuevo, que lo haga con los mismos valores que tenga otro objeto ya existente. Es decir, algo as\u00ed como si pudieras clonar el objeto tantas veces como te haga falta. A este tipo de mecanismo se le suele llamar constructor copia o constructor de copia.</p> <p>Un constructor copia es un m\u00e9todo constructor como los que ya has utilizado pero con la particularidad de que recibe como par\u00e1metro una referencia al objeto cuyo contenido se desea copiar. Este m\u00e9todo revisa cada uno de los atributos del objeto recibido como par\u00e1metro y se copian todos sus valores en los atributos del objeto que se est\u00e1 creando en ese momento en el m\u00e9todo constructor.</p> <p>Un ejemplo de constructor copia para la clase Punto podr\u00eda ser:</p> Java<pre><code>public Punto(Punto p){\n    this.x = p.obtenerX();\n    this.y = p.obtenerY();\n}\n</code></pre> <p>En este caso el constructor recibe como par\u00e1metro un objeto del mismo tipo que el que va a ser creado (clase <code>Punto</code>), inspecciona el valor de sus atributos (atributos <code>x</code> e <code>y</code>), y los reproduce en los atributos del objeto en proceso de construcci\u00f3n (<code>this</code>).</p> <p>Un ejemplo de utilizaci\u00f3n de ese constructor podr\u00eda ser:</p> Java<pre><code>Punto p1, p2;\np1 = new Punto (10, 7);\np2 = new Punto (p1);\n</code></pre> <p>En este caso el objeto <code>p2</code> se crea a partir de los valores del objeto <code>p1</code>.</p>"},{"location":"ud05/ud0507/#destruccion-de-objetos","title":"Destrucci\u00f3n de objetos","text":"<p>Como ya has estudiado en unidades anteriores, cuando un objeto deja de ser utilizado, los recursos usados por \u00e9l (memoria, acceso a archivos, conexiones con bases de datos, etc.) deber\u00edan de ser liberados para que puedan volver a ser utilizados por otros procesos (mecanismo de destrucci\u00f3n del objeto).</p> <p>Mientras que de la construcci\u00f3n de los objetos se encargan los m\u00e9todos constructores, de la destrucci\u00f3n se encarga un proceso del entorno de ejecuci\u00f3n conocido como recolector de basura (garbage collector). Este proceso va buscando peri\u00f3dicamente objetos que ya no son referenciados (no hay ninguna variable que haga referencia a ellos) y los marca para ser eliminados. Posteriormente los ir\u00e1 eliminando de la memoria cuando lo considere oportuno (en funci\u00f3n de la carga del sistema, los recursos disponibles, etc.).</p> <p>Normalmente se suele decir que en Java no hay m\u00e9todo destructor y que en otros lenguajes orientados a objetos como C++, s\u00ed se implementa expl\u00edcitamente el destructor de una clase de la misma manera que se define el constructor. En realidad en Java tambi\u00e9n es posible implementar el m\u00e9todo destructor de una clase, se trata del m\u00e9todo <code>finalize()</code>.</p> <p>Este m\u00e9todo <code>finalize</code> es llamado por el recolector de basura cuando va a destruir el objeto (lo cual nunca se sabe cu\u00e1ndo va a suceder exactamente, pues una cosa es que el objeto sea marcado para ser borrado y otra que sea borrado efectivamente). Si ese m\u00e9todo no existe, se ejecutar\u00e1 un destructor por defecto (el m\u00e9todo <code>finalize</code> que contiene la clase <code>Object</code>, de la cual heredan todas las clases en Java) que liberar\u00e1 la memoria ocupada por el objeto. Se recomienda por tanto que si un objeto utiliza determinados recursos de los cuales no tienes garant\u00eda que el entorno de ejecuci\u00f3n los vaya a liberar (cerrar archivos, cerrar conexiones de red, cerrar conexiones con bases de datos, etc.), implementes expl\u00edcitamente un m\u00e9todo <code>finalize</code> en tus clases. Si el \u00fanico recurso que utiliza tu clase es la memoria necesaria para albergar sus atributos, eso s\u00ed ser\u00e1 liberado sin problemas. Pero si se trata de algo m\u00e1s complejo, ser\u00e1 mejor que te encargues t\u00fa mismo de hacerlo implementando tu destructor personalizado (<code>finalize</code>).</p> <p>Por otro lado, esta forma de funcionar del entorno de ejecuci\u00f3n de Java (destrucci\u00f3n de objetos no referenciados mediante el recolector de basura) implica que no puedas saber exactamente cu\u00e1ndo un objeto va a ser definitivamente destruido, pues si una variable deja de ser referenciada (se cierra el \u00e1mbito de ejecuci\u00f3n donde fue creada) no implica necesariamente que sea inmediatamente borrada, sino que simplemente es marcada para que el recolector la borre cuando pueda hacerlo.</p> <p>Si en un momento dado fuera necesario garantizar que el proceso de finalizaci\u00f3n (m\u00e9todo <code>finalize</code>) sea invocado, puedes recurrir al m\u00e9todo <code>runFinalization()</code> de la clase <code>System</code> para forzarlo:</p> Java<pre><code>System.runFinalization ();\n</code></pre> <p>Este m\u00e9todo se encarga de llamar a todos los m\u00e9todos <code>finalize</code> de todos los objetos marcados por el recolector de basura para ser destruidos.</p> <p>Si necesitas implementar un destructor (normalmente no ser\u00e1 necesario), debes tener en cuenta que:</p> <ul> <li>El nombre del m\u00e9todo destructor debe ser <code>finalize()</code>.</li> <li>No puede recibir par\u00e1metros.</li> <li>S\u00f3lo puede haber un destructor en una clase. No es posible la sobrecarga dado que no tiene par\u00e1metros.</li> <li>No puede devolver ning\u00fan valor. Debe ser de tipo <code>void</code>.</li> </ul> <p>Ejemplo:</p> Java<pre><code> protected void finalize() throws Throwable{\n   System.out.println(\"Finalizando el Objeto\");\n   // si la superclase tambi\u00e9n tiene un destructor...\n   super.finalize();\n }\n</code></pre>"},{"location":"ud05/ud0508/","title":"5.8 Introducci\u00f3n a la herencia","text":"<p>La herencia es uno de los conceptos fundamentales que introduce la programaci\u00f3n orientada a objetos. La idea fundamental es permitir crear nuevas clases aprovechando las caracter\u00edsticas (atributos y m\u00e9todos) de otras clases ya creadas evitando as\u00ed tener que volver a definir esas caracter\u00edsticas (reutilizaci\u00f3n).</p> <p>A una clase que hereda de otra se le llama subclase o clase hija y aquella de la que se hereda es conocida como superclase o clase padre. Tambi\u00e9n se puede hablar en general de clases descendientes o clases ascendientes. Al heredar, la subclase adquiere todas las caracter\u00edsticas (atributos y m\u00e9todos) de su superclase, aunque algunas de ellas pueden ser sobrescritas o modificadas dentro de la subclase (a eso se le suele llamar especializaci\u00f3n).</p> <p>Una clase puede heredar de otra que a su vez ha podido heredar de una tercera y as\u00ed sucesivamente. Esto significa que las clases van tomando todas las caracter\u00edsticas de sus clases ascendientes (no s\u00f3lo de su superclase o clase padre inmediata) a lo largo de toda la rama del \u00e1rbol de la jerarqu\u00eda de clases en la que se encuentre.</p> <p>Imagina que quieres modelar el funcionamiento de algunos veh\u00edculos para trabajar con ellos en un programa de simulaci\u00f3n. Lo primero que haces es pensar en una clase <code>Veh\u00edculo</code> que tendr\u00e1 un conjunto de atributos (por ejemplo: posici\u00f3n actual, velocidad actual y velocidad m\u00e1xima que puede alcanzar el veh\u00edculo) y de m\u00e9todos (por ejemplo: detener, acelerar, frenar, establecer direcci\u00f3n, establecer sentido).</p> <p>Dado que vas a trabajar con muchos tipos de veh\u00edculos, no tendr\u00e1s suficiente con esas caracter\u00edsticas, as\u00ed que seguramente vas a necesitar nuevas clases que las incorporen. Pero las caracter\u00edsticas b\u00e1sicas que has definido en la clase Veh\u00edculo van a ser compartidas por cualquier nuevo veh\u00edculo que vayas a modelar. Esto significa que si creas otra clase podr\u00edas heredar de <code>Veh\u00edculo</code> todas esos atributos y propiedades y tan solo tendr\u00edas que a\u00f1adir las nuevas.</p> <p>Si vas a trabajar con veh\u00edculos que se desplazan por tierra, agua y aire, tendr\u00e1s que idear nuevas clases con caracter\u00edsticas adicionales. Por ejemplo, podr\u00edas crear una clase <code>VehiculoTerrestre</code>, que herede las caracter\u00edsticas de <code>Veh\u00edculo</code>, pero que tambi\u00e9n incorpore atributos como el n\u00famero de ruedas o la altura de los bajos). A su vez, podr\u00eda idearse una nueva clase que herede de <code>VehiculoTerrestre</code> y que incorpore nuevos atributos y m\u00e9todos como, por ejemplo, una clase <code>Coche</code>. Y as\u00ed sucesivamente con toda la jerarqu\u00eda de clases heredadas que consideres oportunas para representar lo mejor posible el entorno y la informaci\u00f3n sobre la que van a trabajar tus programas.</p>"},{"location":"ud05/ud0508/#creacion-y-utilizacion-de-clases-heredadas","title":"Creaci\u00f3n y utilizaci\u00f3n de clases heredadas","text":"<p>\u00bfC\u00f3mo se indica en Java que una clase hereda de otra? Para indicar que una clase hereda de otra es necesario utilizar la palabra reservada <code>extends</code> junto con el nombre de la clase de la que se quieren heredar sus caracter\u00edsticas:</p> Java<pre><code>class&lt;NombreClase&gt; extends &lt;nombreSuperClase&gt; {\n    ...\n}\n</code></pre> <p>En el ejemplo anterior de los veh\u00edculos, la clase <code>VehiculoTerrestre</code> podr\u00eda quedar as\u00ed al ser declarada:</p> Java<pre><code>class VehiculoTerrestre extends Vehiculo {\n    ...\n}\n</code></pre> <p>Y en el caso de la clase <code>Coche</code>:</p> Java<pre><code>class Coche extends VehiculoTerrestre {\n    ...\n}\n</code></pre> <p>En unidades posteriores estudiar\u00e1s detalladamente c\u00f3mo crear una jerarqu\u00eda de clases y qu\u00e9 relaci\u00f3n existe entre la herencia y los distintos modificadores de clases, atributos y m\u00e9todos. Por ahora es suficiente con que entiendas el concepto de herencia y sepas reconocer cu\u00e1ndo una clase hereda de otra (uso de la palabra reservada <code>extends</code>).</p> <p>Puedes comprobar que en las bibliotecas proporcionadas por Java aparecen jerarqu\u00edas bastante complejas de clases heredadas en las cuales se han ido aprovechando cada uno de los miembros de una clase base para ir construyendo las distintas clases derivadas a\u00f1adiendo (y a veces modificando) poco a poco nueva funcionalidad.</p> <p>Eso suele suceder en cualquier proyecto de software conforme se van a analizando, descomponiendo y modelando los datos con los que hay que trabajar. La idea es poder representar de una manera eficiente toda la informaci\u00f3n que es manipulada por el sistema que se desea automatizar. Una jerarqu\u00eda de clases suele ser una buena forma de hacerlo.</p> <p>En el caso de Java, cualquier clase con la que trabajes tendr\u00e1 un ascendiente. Si en la declaraci\u00f3n de clase no indicas la clase de la que se hereda (no se incluye un <code>extends</code>), el compilador considerar\u00e1 autom\u00e1ticamente que se hereda de la clase <code>Object</code>, que es la clase que se encuentra en el nivel superior de toda la jerarqu\u00eda de clases en Java (y que es la \u00fanica que no hereda de nadie).</p> <p>Tambi\u00e9n ir\u00e1s viendo al estudiar distintos componentes de las bibliotecas de Java (por ejemplo en el caso de las interfaces gr\u00e1ficas) que para poder crear objetos basados en las clases proporcionadas por esas bibliotecas tendr\u00e1s que crear tus propias clases que hereden de algunas de esas clases. Para ellos tendr\u00e1s que hacer uso de la palabra reservada <code>extends</code>.</p> <p>Descendientes de la superclase <code>Object</code></p> <p>En Java todas las clases son descendientes (de manera expl\u00edcita o impl\u00edcita) de la clase <code>Object</code>.</p>"},{"location":"ud05/ud0509/","title":"5.9 Empaquetado de clases","text":"<p>La encapsulaci\u00f3n de la informaci\u00f3n dentro de las clases ha permitido llevar a cabo el proceso de ocultaci\u00f3n, que es fundamental para el trabajo con clases y objetos. Es posible que conforme vaya aumentando la complejidad de tus aplicaciones necesites que algunas de tus clases puedan tener acceso a parte de la implementaci\u00f3n de otras debido a las relaciones que se establezcan entre ellas a la hora de dise\u00f1ar tu modelo de datos. En estos casos se puede hablar de un nivel superior de encapsulamiento y ocultaci\u00f3n conocido como empaquetado.</p> <p>Un paquete consiste en un conjunto de clases relacionadas entre s\u00ed y agrupadas bajo un mismo nombre. Normalmente se encuentran en un mismo paquete todas aquellas clases que forman una biblioteca o que re\u00fanen alg\u00fan tipo de caracter\u00edstica en com\u00fan. </p>"},{"location":"ud05/ud0509/#jerarquia-de-paquetes","title":"Jerarqu\u00eda de paquetes","text":"<p>Los paquetes en Java pueden organizarse jer\u00e1rquicamente de manera similar a lo que puedes encontrar en la estructura de carpetas en un dispositivo de almacenamiento, donde:</p> <ul> <li>Las clases ser\u00edan como los archivos.</li> <li>Cada paquete ser\u00eda como una carpeta que contiene archivos (clases).</li> <li>Cada paquete puede adem\u00e1s contener otros paquetes (como las carpetas que contienen carpetas).</li> <li>Para poder hacer referencia a una clase dentro de una estructura de paquetes, habr\u00e1 que indicar la trayectoria completa desde el paquete ra\u00edz de la jerarqu\u00eda hasta el paquete en el que se encuentra la clase, indicando por \u00faltimo el nombre de la clase (como el path absoluto de un archivo).</li> </ul> <p>La estructura de paquetes en Java permite:</p> <ul> <li>organizar y clasificar las clases, evitando conflictos de nombres y facilitando la ubicaci\u00f3n de una clase dentro de una estructura jer\u00e1rquica.</li> <li>el control de acceso a miembros de las clases desde otras clases que est\u00e9n en el mismo paquete gracias a los modificadores de acceso (recuerda que uno de los modificadores que viste era precisamente el de paquete).</li> </ul> <p>Las clases que forman parte de la jerarqu\u00eda de clases de Java se encuentran organizadas en diversos paquetes.</p> <p>Todas las clases proporcionadas por Java en sus bibliotecas son miembros de distintos paquetes y se encuentran organizadas jer\u00e1rquicamente. Dentro de cada paquete habr\u00e1 un conjunto de clases con alg\u00fan tipo de relaci\u00f3n entre ellas. Se dice que todo ese conjunto de paquetes forman la API (interfaz de programaci\u00f3n de aplicaciones) de Java. Por ejemplo las clases b\u00e1sicas del lenguaje se encuentran en el paquete <code>java.lang</code>, las clases de entrada/salida las podr\u00e1s encontrar en el paquete <code>java.io</code> y en el paquete <code>java.math</code> podr\u00e1s observar algunas clases para trabajar con n\u00fameros grandes y de gran precisi\u00f3n.</p>"},{"location":"ud05/ud0509/#utilizacion-de-los-paquetes","title":"Utilizaci\u00f3n de los paquetes","text":"<p>Es posible acceder a cualquier clase de cualquier paquete (siempre que ese paquete est\u00e9 disponible en nuestro sistema, obviamente) mediante la calificaci\u00f3n completa de la clase dentro de la estructura jer\u00e1rquica de paquete. Es decir indicando la trayectoria completa de paquetes desde el paquete ra\u00edz hasta la propia clase. Eso se puede hacer utilizando el operador punto (<code>.</code>) para especificar cada subpaquete:</p> Java<pre><code>paquete_raiz.subpaquete1.subpaquete2. ... .subpaquete_n.NombreClase\n</code></pre> <p>Por ejemplo: </p> Java<pre><code>java.lang.String\n</code></pre> <p>En este caso se est\u00e1 haciendo referencia a la clase <code>String</code> que se encuentra dentro del paquete <code>java.lang</code>. Este paquete contiene las clases elementales para poder desarrollar una aplicaci\u00f3n Java.</p> <p>Otro ejemplo podr\u00eda ser: </p> Java<pre><code>java.util.regex.Patern\n</code></pre> <p>En este otro caso se hace referencia a la clase <code>Patern</code> ubicada en el paquete <code>java.util.regex</code>, que contiene clases para trabajar con expresiones regulares.</p> <p>Dado que puede resultar bastante tedioso tener que escribir la trayectoria completa de una clase cada vez que se quiera utilizar, existe la posibilidad de indicar que se desea trabajar con las clases de uno o varios paquetes. De esa manera cuando se vaya a utilizar una clase que pertenezca a uno de esos paquetes no ser\u00e1 necesario indicar toda su trayectoria. Para ello se utiliza la sentencia <code>import</code> (importar):</p> Java<pre><code>import paquete_raiz.subpaquete1.subpaquete2. ... .subpaquete_n.NombreClase;\n</code></pre> <p>De esta manera a partir de ese momento podr\u00e1 utilizarse directamente <code>NombreClase</code> en lugar de toda su trayectoria completa.</p> <p>Los ejemplos anteriores quedar\u00edan entonces:</p> Java<pre><code>import java.lang.String;\nimport java.util.regex.Patern;\n</code></pre> <p>Si suponemos que vamos a utilizar varias clases de un mismo paquete, en lugar de hacer un <code>import</code> de cada una de ellas, podemos utilizar el comod\u00edn (s\u00edmbolo asterisco: <code>*</code>) para indicar que queremos importar todas las clases de ese paquete y no s\u00f3lo una determinada:</p> Java<pre><code>import java.lang.*;\nimport java.util.regex.*;\n</code></pre> <p>Si un paquete contiene subpaquetes, el comod\u00edn no importar\u00e1 las clases de los subpaquetes, tan solo las que haya en el paquete. La importaci\u00f3n de las clases contenidas en los subpaquetes habr\u00e1 que indicarla expl\u00edcitamente. Por ejemplo:</p> Java<pre><code>import java.util.*;\nimport java.util.regex.*;\n</code></pre> <p>En este caso se importar\u00e1n todas las clases del paquete <code>java.util</code> (clases <code>Date</code>, <code>Calendar</code>, <code>Timer</code>, etc.) y de su subpaquete <code>java.util.regex</code> (<code>Matcher</code> y <code>Pattern</code>), pero no las de otros subpaquetes como <code>java.util.concurrent</code> o <code>java.util.jar</code>.</p> <p>Por \u00faltimo tan solo indicar que en el caso del paquete java.lang, no es necesario realizar importaci\u00f3n. El compilador, dada la importancia de este paquete, permite el uso de sus clases sin necesidad de indicar su trayectoria (es como si todo archivo Java incluyera en su primera l\u00ednea la sentencia <code>import java.lang.*</code>).</p>"},{"location":"ud05/ud0509/#inclusion-de-una-clase-en-un-paquete","title":"Inclusi\u00f3n de una clase en un paquete","text":"<p>Al principio de cada archivo <code>.java</code> se puede indicar a qu\u00e9 paquete pertenece mediante la palabra reservada <code>package</code> seguida del nombre del paquete:</p> Java<pre><code>package nombre_paquete;\n</code></pre> <p>Por ejemplo:</p> Java<pre><code>package paqueteEjemplo;\nclass claseEjemplo {\n    ...\n}\n</code></pre> <p>La sentencia <code>package</code> debe ser incluida en cada archivo fuente de cada clase que quieras incluir ese paquete. Si en un archivo fuente hay definidas m\u00e1s de una clase, todas esas clases formar\u00e1n parte del paquete indicado en la sentencia <code>package</code>.</p> <p>Si al comienzo de un archivo Java no se incluyen ninguna sentencia <code>package</code>, el compilador considerar\u00e1 que las clases de ese archivo formar\u00e1n parte del paquete por omisi\u00f3n (un paquete sin nombre asociado al proyecto).</p> <p>Para evitar la ambig\u00fcedad, dentro de un mismo paquete no puede haber dos clases con el mismo nombre, aunque s\u00ed pueden existir clases con el mismo nombre si est\u00e1n en paquetes diferentes. El compilador ser\u00e1 capaz de distinguir una clase de otra gracias a que pertenecen a paquetes distintos.</p> <p>Como ya has visto en unidades anteriores, el nombre de un archivo fuente en Java se construye utilizando el nombre de la clase p\u00fablica que contiene junto con la extensi\u00f3n <code>.java</code>, pudiendo haber \u00fanicamente una clase p\u00fablica por cada archivo fuente. El nombre de la clase deb\u00eda coincidir (en may\u00fasculas y min\u00fasculas) exactamente con el nombre del archivo en el que se encontraba definida.</p> <p>As\u00ed, si por ejemplo ten\u00edas una clase <code>Punto</code> dentro de un archivo <code>Punto.java</code>, la compilaci\u00f3n dar\u00eda lugar a un archivo <code>Punto.class</code>.</p> <p>En el caso de los paquetes, la correspondencia es a nivel de directorios o carpetas. Es decir, si la clase <code>Punto</code> se encuentra dentro del paquete <code>prog.figuras</code>, el archivo <code>Punto.java</code> deber\u00eda encontrarse en la carpeta <code>prog\\figuras</code>. Para que esto funcione correctamente el compilador ha de ser capaz de localizar todos los paquetes (tanto los est\u00e1ndar de Java como los definidos por otros programadores). Es decir, que el compilador debe tener conocimiento de d\u00f3nde comienza la estructura de carpetas definida por los paquetes y en la cual se encuentran las clases. Para ello se utiliza el ClassPath. Se trata de una variable de entorno que contiene todas las rutas en las que comienzan las estructuras de directorios (distintas jerarqu\u00edas posibles de paquetes) en las que est\u00e1n contenidas las clases.</p> <p>Por ejemplo, en Linux:</p> Bash<pre><code>CLASSPATH=/users/chuidiang/MI_PROYECTO; export CLASSPATH\njava ClasePrincipal\n</code></pre>"},{"location":"ud05/ud0509/#proceso-de-creacion-de-un-paquete","title":"Proceso de creaci\u00f3n de un paquete","text":"<p>Para crear un paquete en Java te recomendamos seguir los siguientes pasos:</p> <ol> <li>Poner un nombre al paquete. Suele ser habitual utilizar el dominio de Internet de la empresa que ha creado el paquete. Por ejemplo, para el caso de <code>miempresa.com</code>, podr\u00eda utilizarse un nombre de paquete <code>com.miempresa</code>.</li> <li>Crear una estructura jer\u00e1rquica de carpetas equivalente a la estructura de subpaquetes. La ruta de la ra\u00edz de esa estructura jer\u00e1rquica deber\u00e1 estar especificada en el ClassPath de Java.</li> <li>Especificar a qu\u00e9 paquete pertenecen la clase (o clases) del archivo <code>.java</code> mediante el uso de la sentencia package tal y como has visto en el apartado anterior.</li> </ol> <p>Este proceso ya lo has debido de llevar a cabo en unidades anteriores al compilar y ejecutar clases con paquetes. Estos pasos simplemente son para que te sirvan como recordatorio del procedimiento que debes seguir a ala hora de clasificar, jerarquizar y utilizar tus propias clases.</p>"},{"location":"ud05/ud0510/","title":"5.10 Anexos","text":""},{"location":"ud05/ud0510/#wrappers-envoltorios","title":"Wrappers (envoltorios)","text":"<p>Los wrappers permiten \"envolver\" datos primitivos en objetos, tambi\u00e9n se llaman clases contenedoras. La diferencia entre un tipo primitivo y un wrapper es que este \u00faltimo es una clase y por tanto, cuando trabajamos con wrappers estamos trabajando con objetos. </p> <p>Atenci\u00f3n al paso de par\u00e1metros de tipo Wrapper</p> <p>Como son objetos debemos tener cuidado en el paso como par\u00e1metro en m\u00e9todos ya que en el wrapper se realiza por referencia.</p> <p>Una de las principales ventajas del uso de wrappers son la facilidad de conversi\u00f3n entre tipos primitivos y cadenas.</p> <p>Hay una clase contenedora por cada uno de los tipos primitivos de Java. Los datos primitivos se escriben en min\u00fasculas y los wrappers se escriben con la primera letra en may\u00fasculas.</p> Tipo primitivo Wrapper asociado byte Byte short Short int Integer long Long float Float double Double char Char boolean Boolean <p>Cada clase wrapper tiene dos constructores, uno se le pasa por par\u00e1metro el dato de tipo primitivo y otro se le pasa un <code>String</code>.</p> <p>Para wrapper <code>Integer</code>:</p> Java<pre><code>Integer(int)\nInteger(String)\n</code></pre> <p> </p> Java<pre><code>Integer i1 = new Integer(42);\nInteger i2 = new Integer (\"42\");\n\n\nFloat f1 = new Float(3.14f);\nFloat f2 = new Float (\"3.14f\");\n</code></pre> <p>Antiguamente, una vez asignado un valor a un objeto o wrapper <code>Integer</code>, este no pod\u00eda cambiarse. Actualmente e internamente se puede realizar un apoyo en variables y wrapers internos para poder variar el valor de un wrapper.</p> <p> </p> Java<pre><code>Integer y = new Integer(567);       //Crea el objeto\ny++;    //Lo desenvuelve, incrementa y lo   vuelve a envolver \nSystem.out.println(\"Valor: \" + y);  //Imprime el valor del Objeto y\n</code></pre> <p>Los wrapper disponen de una serie de m\u00e9todos que permiten realizar funciones de conversi\u00f3n de datos. Por ejemplo, el wrapper <code>Integer</code> dispone de los siguientes m\u00e9todos:</p> M\u00e9todo Descripci\u00f3n <code>Integer(int)</code><code>Integer(String)</code> Constructores <code>byteValue()</code><code>shortValue()</code><code>intValue()</code><code>longValue()</code><code>doubleValue()</code><code>floatValue()</code> Funciones de conversi\u00f3n con datos primitivos <code>Integer decode(String)</code><code>Integer parseInt(String)</code><code>Integer parseInt(String, int)</code><code>Integer valueOf(String)</code><code>String toString()</code> Conversi\u00f3n a String <code>String toBinaryString(int)</code><code>String toHexString(int)</code><code>String toOctalString(int)</code> Conversi\u00f3n a otros sistemas de numeraci\u00f3n <code>MAX_VALUE</code>, <code>MIN_VALU</code>, <code>TYPE</code> Constantes"},{"location":"ud05/ud0510/#metodos-valueof","title":"M\u00e9todos <code>valueOf()</code>","text":"<p>El m\u00e9todo <code>valueOf()</code> permite crear objetos wrapper y se le pasa un par\u00e1metro <code>String</code> y opcionalmente otro par\u00e1metro que indica la base en la que ser\u00e1 representado el primer par\u00e1metro.</p> <p> </p> Java<pre><code>// Convierte el 101011 (base 2) a 43 y le asigna el valor al objeto Integer i1 \nInteger i3 = Integer.valueOf(\"101011\", 2);\nSystem.out.println(i3);\n\n\n// Asigna 3.14 al objeto Float f2 \nFloat f3 = Float.valueOf(\"3.14f\");\nSystem.out.println(f3);\n</code></pre>"},{"location":"ud05/ud0510/#metodos-xxxvalue","title":"M\u00e9todos <code>xxxValue()</code>","text":"<p>Los m\u00e9todos <code>xxxValue()</code> permiten convertir un wrapper en un dato de tipo primitivo y no necesitan argumentos.</p> <p> </p> Java<pre><code>Integer i4 = 120; // Crea un nuevo objeto wrapper\nbyte b = i4.byteValue(); // Convierte el valor de i4 a un primitivo byte \nshort s1 = i4.shortValue(); // Otro de los m\u00e9todos de Integer\ndouble d = i4.doubleValue(); // Otro de los m\u00e9todos xxxValue de Integer \nSystem.out.println(s1); // Muestra 120 como resultado\n\n\nFloat f4 = 3.14f; // Crea un nuevo objeto wrapper\nshort s2 = f4.shortValue(); // Convierte el valor de f2 en un primitivo short\nSystem.out.println(s2); // El resultado es 3 (truncado, no redondeado)\n</code></pre>"},{"location":"ud05/ud0510/#metodos-parsexxxx","title":"M\u00e9todos <code>parseXxxx()</code>","text":"<p>Los m\u00e9todos <code>parseXxxx()</code> permiten convertir un wrapper en un dato de tipo primitivo y le pasamos como par\u00e1metro el <code>String</code> con el valor que deseamos convertir y opcionalmente la base a la que convertiremos el valor (2, 8, 10 o 16).</p> <p> </p> Java<pre><code>double d4 = Double.parseDouble(\"3.14\"); // Convierte un String a primitivo \nSystem.out.println(\"d4 = \" + d4);   // El resultado ser\u00e1 d4 = 3.14 \n\n\nlong l2 = Long.parseLong(\"101010\", 2);  // un String binario a primitivo\nSystem.out.println(\"l2 = \" + l2);   // El resultado es L2 42\n</code></pre>"},{"location":"ud05/ud0510/#metodos-tostring","title":"M\u00e9todos <code>toString()</code>","text":"<p>El m\u00e9todo <code>toString()</code> permite retornar un <code>String</code> con el valor primitivo que se encuentra en el objeto contenedor. Se le pasa un par\u00e1metro que es el wrapper y opcionalmente para <code>Integer</code> y <code>Long</code> un par\u00e1metro con la base a la que convertiremos el valor (2, 8, 10 o 16).</p> <p> </p> Java<pre><code>Double d1 = new Double(\"3.14\");\nSystem.out.println(\"d1 = \" + d1.toString() ); // El resultado es d1 = 3.14 \n\n\nString d2 = Double.toString(3.14); // d2 = \"3.14\"\nSystem.out.println(\"d2 = \" + d2); // El resultado es d2 = 3.14 \n\nString s3 = Long.toString(254, 16); // s = \"hex = fe\" \nSystem.out.println(\"s3 = \" + s3); // El resultado es s3 = 3.14\n</code></pre>"},{"location":"ud05/ud0510/#metodos-toxxxxxstring-binario-hexadecimal-y-octal","title":"M\u00e9todos <code>toXxxxxString()</code> (Binario, Hexadecimal y Octal)","text":"<p>Los m\u00e9todos <code>toXxxxxString()</code> permiten a las clases contenedoras <code>Integer</code> y <code>Long</code> convertir n\u00fameros en base 10 a otras bases, retornando un <code>String</code> con el valor primitivo que se encuentra en el objeto contenedor.</p> <p> </p> Java<pre><code>String s4 = Integer.toHexString(254); // Convierte 254 a hex \nSystem.out.println(\"254 es \" + s4); // Resultado: \"254 es fe\" \nString s5 = Long.toOctalString(254); // Convierte 254 a octal\nSystem.out.println(\"254(oct) = \" + s5); // Resultado: \"254(oct) = 376\"\n</code></pre> <p>Para resumir, los m\u00e9todos esenciales para las conversiones son:</p> <ul> <li> <p><code>primitive xxxValue()</code> \u2013 Para convertir de Wrapper a primitive</p> </li> <li> <p><code>primitive parseXxx(String)</code> \u2013 Para convertir un String en primitive</p> </li> <li><code>Wrapper valueOf(String)</code> \u2013 Para convertir String en Wrapper</li> </ul> Ejemplo completo <code>Anexo1Wrappers</code> <p>Enlace completo ejemplo <code>Anexo1Wrappers</code></p>"},{"location":"ud05/ud0510/#clase-date","title":"Clase <code>Date</code>","text":"<p>La clase <code>Date</code> es una utilidad contenida en el paquete <code>java.util</code> y permiten trabajar con fechas y horas. La fecha y hora se almacenan en un entero de tipo <code>Long</code> que almacena los milisegundos transcurridos desde el 1 de Enero de de 1970 que se obtienen con <code>getTime()</code>. Importamos <code>java.util.Date</code>.</p> <p> </p> Java<pre><code>Date fecha = new Date(2022, 12, 19);\nSystem.out.println(fecha);           //Fri Jan 19 00:00:00 CET 3923\nSystem.out.println(fecha.getTime()); //61590146400000\n</code></pre>"},{"location":"ud05/ud0510/#clase-gregoriancalendar","title":"Clase <code>GregorianCalendar</code>","text":"<p>Para utilizar fechas y horas se utiliza la clase <code>GregorianCalendar</code> que dispone de variables enteras como: <code>DAY_OF_WEEK</code>, <code>DAY_OF_MONTH</code>, <code>YEAR</code>, <code>MONTH</code>, <code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code>, <code>MILLISECOND</code>, <code>WEEK_OF_MONTH</code>, <code>WEEK_OF_YEAR</code>, \u2026 (importamos clase <code>java.util.Calendar</code> y <code>java.util.GregorianCalendar</code>)</p> <p> </p> Java<pre><code>Calendar calendar = new Calendar(2021, 8, 19);\nSystem.out.println(calendar.getTime()); //Sun Sep 19 00:00:00 CEST 2021\n</code></pre> <p> </p> Java<pre><code>Date d = new Date();\nGregorianCalendar c = new GregorianCalendar(); \nSystem.out.println(\"Fecha: \" + d); //Fecha: Thu Aug 19 20:06:14 CEST 2023\nSystem.out.println(\"Info: \" + c);  //Info:\n//java.util.GregorianCalendar[time=1629396374723,areFieldsSet=true\n//,areAllFieldsSet=true\n//,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Madrid\",offset=3600000\n//,dstSavings=3600000,useDaylight=true,transitions=163\n//,lastRule=java.util.SimpleTimeZone[id=Europe/Madrid,offset=3600000\n//,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2\n//,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMod2.1e=2,endMode=2\n//,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]]\n//,firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=7,WEEK_OF_YEAR=33\n//,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=231,DAY_OF_WEEK=5\n//,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=6,SECOND=14\n//,MILLISECOND=723,ZONE_OFFSET=3600000,DST_OFFSET=3600000]\nc.setTime(d); \nSystem.out.print(c.get(Calendar.DAY_OF_MONTH));\nSystem.out.print(\"/\"); \nSystem.out.print(c.get(Calendar.MONTH)+1); \nSystem.out.print(\"/\"); \nSystem.out.println(c.get(Calendar.YEAR)+1); //19/8/2023\n</code></pre>"},{"location":"ud05/ud0510/#paquete-javatime","title":"Paquete <code>java.time</code>","text":"<p>El paquete <code>java.time</code> dispone de las clases <code>LocalDate</code>, <code>LocalTime</code>, <code>LocalDateTime</code>, <code>Duration</code> y <code>Period</code> para trabajar con fechas y horas.</p> <p>Estas clases no tienen constructores p\u00fablicos, y por tanto, no se puede usar <code>new</code> para crear objetos de estas clases. Necesitas usar sus m\u00e9todos <code>static</code> para instanciarlas.</p> <p>No es v\u00e1lido llamar directamente al constructor usando <code>new</code>, ya que no tienen un constructor p\u00fablico.</p> Ejemplo ERR\u00d3NEO: Java<pre><code>LocalDate d = new LocalDate(); // ERROR -&gt; NO compila\n</code></pre>"},{"location":"ud05/ud0510/#localdate","title":"<code>LocalDate</code>","text":"<p><code>LocalDate</code> representa una fecha determinada. Haciendo uso del m\u00e9todo <code>of()</code>, esta clase puede crear un <code>LocalDate</code> teniendo en cuenta el a\u00f1o, mes y d\u00eda. Finalmente, para capturar el <code>LocalDate</code> actual se puede usar el m\u00e9todo <code>now()</code>:</p> <p> </p> Java<pre><code>LocalDate date = LocalDate.of(1989, 11, 11); //1989-11-11 \nSystem.out.println(date.getYear()); //1989 \nSystem.out.println(date.getMonth()); //NOVEMBER \nSystem.out.println(date.getDayOfMonth()); //11\ndate = LocalDate.now();\nSystem.out.println(date); //2022-12-19\n</code></pre>"},{"location":"ud05/ud0510/#localtime","title":"<code>LocalTime</code>","text":"<p><code>LocalTime</code>, representa un tiempo determinado. Haciendo uso del m\u00e9todo <code>of()</code>, esta clase puede crear un <code>LocalTime</code> teniendo en cuenta la hora, minuto, segundo y nanosegundo. Finalmente, para capturar el <code>LocalTime</code> actual se puede usar el m\u00e9todo <code>now()</code>.</p> <p> </p> Java<pre><code>LocalTime time = LocalTime.of(5, 30, 45, 35); // 05:30:45:35 \nSystem.out.println(time.getHour());   // 5 \nSystem.out.println(time.getMinute()); // 30 \nSystem.out.println(time.getSecond()); // 45 \nSystem.out.println(time.getNano());   // 35\ntime = LocalTime.now();\nSystem.out.println(time); // 20:13:53.118044\n</code></pre>"},{"location":"ud05/ud0510/#localdatetime","title":"<code>LocalDateTime</code>","text":"<p><code>LocalDateTime</code>, es una clase compuesta, la cual combina las clases anteriormente mencionadas <code>LocalDate</code> y <code>LocalTime</code>. Podemos construir un <code>LocalDateTime</code> haciendo uso de todos los campos (a\u00f1o, mes, d\u00eda, hora, minuto, segundo, nanosegundo).</p> <p> </p> Java<pre><code>LocalDateTime dateTime = LocalDateTime.of (1989, 11, 11, 5, 30, 45, 35);\n</code></pre> <p>Tambi\u00e9n, se puede crear un objeto <code>LocalDateTime</code> basado en los tipos <code>LocalDate</code> y <code>LocalTime</code>, haciendo uso del m\u00e9todo <code>of()</code> (<code>LocalDate</code> <code>date</code>, <code>LocalTime</code> <code>time</code>):</p> <p> </p> Java<pre><code>LocalDate date = LocalDate.of(1989, 11, 11);\nLocalTime time = LocalTime.of(5, 30, 45, 35); \nLocalDateTime dateTime = LocalDateTime.of(date, time); \nLocalDateTime dateTime = LocalDateTime.now();\n</code></pre>"},{"location":"ud05/ud0510/#duration","title":"<code>Duration</code>","text":"<p><code>Duration</code>, hace referencia a la diferencia que existe entre dos objetos de tiempo. La duraci\u00f3n denota la cantidad de tiempo en horas, minutos y segundos.</p> <p> </p> Java<pre><code>LocalTime localTime1 = LocalTime.of(12, 25);\nLocalTime localTime2 = LocalTime.of(17, 35);\nDuration duration1 = Duration.between(localTime1, localTime2);\nSystem.out.println(duration1); //PT5H10M\nSystem.out.println(duration1.toDays()); //0\nLocalDateTime localDateTime1 = LocalDateTime.of(2016, Month.JULY, 18, 14, 13);\nLocalDateTime localDateTime2 = LocalDateTime.of(2016, Month.JULY, 20, 12, 25);\nDuration duration2 = Duration.between(localDateTime1, localDateTime2);\nSystem.out.println(duration2); //PT46H12M\nSystem.out.println(duration2.toDays()); //1\n</code></pre> <p>Tambi\u00e9n, se puede crear <code>Duration</code> basado en los m\u00e9todos <code>ofDays(long days)</code>, <code>ofHours(long hours)</code>, <code>ofMilis(long milis)</code>, <code>ofMinutes(long minutes)</code>, <code>ofNanos(long nanos)</code>, <code>ofSeconds(long seconds)</code>.</p> <p> </p> Java<pre><code>Duration duracion3 = Duration.ofDays(1);\nSystem.out.println(duracion3); //PT24H\nSystem.out.println(duracion3.toDays()); //1\n</code></pre>"},{"location":"ud05/ud0510/#period","title":"<code>Period</code>","text":"<p><code>Period</code>, hace referencia a la diferencia que existe entre dos fechas. Esta clase denota la cantidad de tiempo en a\u00f1os, meses y d\u00edas.</p> <p> </p> Java<pre><code>LocalDate localDate1 = LocalDate.of(2016, 7, 18);\nLocalDate localDate2 = LocalDate.of(2016, 7, 20);\nPeriod periodo1 = Period.between(localDate1, localDate2);\nSystem.out.println(periodo1); //P2D\n</code></pre> <p>Se puede crear <code>Period</code> basado en el m\u00e9todo <code>of(int years, int months, int days)</code>. En el siguiente ejemplo, se crea un per\u00edodo de 1 a\u00f1o 2 meses y 3 d\u00edas:</p> <p> </p> Java<pre><code>Period periodo2 = Period.of(1, 2, 3); \nSystem.out.println(periodo2); //P1Y2M3D\n</code></pre> <p>Se puede crear <code>Period</code> basado en los m\u00e9todos <code>ofDays(int days)</code>, <code>ofMonths(int months)</code>, <code>ofWeeks(int weeks)</code>, <code>ofYears(int years)</code>.</p> <p> </p> Java<pre><code>Period periodo3 = Period.ofYears(1); \nSystem.out.println(periodo3); //P1Y\n</code></pre>"},{"location":"ud05/ud0510/#chronounit","title":"<code>ChronoUnit</code>","text":"<p>Permite devolver el tiempo transcurrido entre dos fechas en diferentes formatos (<code>DAYS</code>, <code>MONTHS</code>, <code>YEARS</code>, <code>HOURS</code>, <code>MINUTES</code>, <code>SECONDS</code>, ...). Debemos importar la clase <code>time.temporal.ChronoUnit</code>;</p> <p> </p> Java<pre><code>LocalDate fechaInicio = LocalDate.of(2016, 7, 18);\nLocalDate fechaFin = LocalDate.of(2016, 7, 20);\n// Calculamos el tiempo transcurrido entre las dos fechas\n// con la clase ChronoUnit y la unidad temporal en la que\n// queremos que nos lo devuelva, en este caso DAYS.\nlong tiempo = ChronoUnit.DAYS.between(fechaInicio, fechaFin);\nSystem.out.println(tiempo); //2\n</code></pre>"},{"location":"ud05/ud0510/#introducir-fecha-como-cadena","title":"Introducir fecha como Cadena","text":"<p>Podemos introducir la fecha como una cadena con el formato que deseemos y posteriormente convertir a fecha con la sentencia <code>parse</code>. Debemos importar las clases <code>time</code> y <code>time.format</code>.</p> <p> </p> Java<pre><code>DateTimeFormatter formato = DateTimeFormatter.ofPattern(\"d/MM/u\"); \nString fechaCadena = \"16/08/2016\";\nLocalDate mifecha = LocalDate.parse(fechaCadena, formato);\nSystem.out.println(formato.format(mifecha)); //16/08/2016\n</code></pre> <p>Ojo</p> <p>A partir de Java 8<code>y</code>es para el a\u00f1o de la era (BC AD), y para el a\u00f1o debemos usar <code>u</code>.</p> <p>M\u00e1s detalles sobre los formatos: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html</p>"},{"location":"ud05/ud0510/#manipulacion","title":"Manipulaci\u00f3n","text":"<ul> <li>Manipulando <code>LocalDate</code></li> </ul> <p>Haciendo uso de los m\u00e9todos <code>withYear(int year)</code>, <code>withMonth(int month)</code>, <code>withDayOfMonth(int dayOfMonth)</code>, <code>with(TemporalField field, long newValue)</code> se puede modificar el <code>LocalDate</code>.</p> <p> </p> Java<pre><code>LocalDate date = LocalDate.of(2016, 7, 25); \nLocalDate date1 = date.withYear(2017); \nLocalDate date2 = date.withMonth(8); \nLocalDate date3 = date.withDayOfMonth(27); \nSystem.out.println(date);  //2016-07-25 \nSystem.out.println(date1); //2017-07-25 \nSystem.out.println(date2); //2016-08-25 \nSystem.out.println(date3); //2016-07-27 \n</code></pre> <ul> <li>Manipulando <code>LocalTime</code></li> </ul> <p>Haciendo uso de los m\u00e9todos <code>withHour(int hour)</code>, <code>withMinute(int minute)</code>, <code>withSecond(int second)</code>, <code>withNano(int nanoOfSecond)</code> se puede modificar el <code>LocalTime</code>.</p> <p> </p> Java<pre><code>LocalTime time = LocalTime.of(14, 30, 35); \nLocalTime time1 = time.withHour(20); \nLocalTime time2 = time.withMinute(25); \nLocalTime time3 = time.withSecond(23);\nLocalTime time4 = time.withNano(24); \nSystem.out.println(time);  //14:30:35\nSystem.out.println(time1); //20:30:35\nSystem.out.println(time2); //14:25:35\nSystem.out.println(time3); //14:30:23\nSystem.out.println(time4); //14:30:35.000000024\n</code></pre> <ul> <li>Manipulando <code>LocalDateTime</code></li> </ul> <p><code>LocalDateTime</code> provee los mismo m\u00e9todos mencionados en las clases <code>LocalDate</code> y <code>LocalTime</code>.</p> <p> </p> Java<pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 25, 22, 11, 30); \nLocalDateTime dateTime1 = dateTime.withYear(2017);\nLocalDateTime dateTime2 = dateTime.withMonth(8); \nLocalDateTime dateTime3 = dateTime.withDayOfMonth(27); \nLocalDateTime dateTime4 = dateTime.withHour(20); \nLocalDateTime dateTime5 = dateTime.withMinute(25); \nLocalDateTime dateTime6 = dateTime.withSecond(23); \nLocalDateTime dateTime7 = dateTime.withNano(24); \nSystem.out.println(dateTime);  //2016-07-25T22:11:30\nSystem.out.println(dateTime1); //2017-07-25T22:11:30\nSystem.out.println(dateTime2); //2016-08-25T22:11:30\nSystem.out.println(dateTime3); //2016-07-27T22:11:30\nSystem.out.println(dateTime4); //2016-07-25T20:11:30\nSystem.out.println(dateTime5); //2016-07-25T22:25:30\nSystem.out.println(dateTime6); //2016-07-25T22:11:23\nSystem.out.println(dateTime7); //2016-07-25T22:11:30.000000024\n</code></pre>"},{"location":"ud05/ud0510/#operaciones","title":"Operaciones","text":"<ul> <li>Operaciones con <code>LocalDate</code></li> </ul> <p>Realizar operaciones como suma o resta de d\u00edas, meses, a\u00f1os, etc es muy f\u00e1cil con la nueva <code>Date</code> API. Los siguientes m\u00e9todos <code>plus(long amountToAdd, TemporalUnit unit)</code>, <code>minus(long amountToSubtract, TemporalUnit unit)</code> proveen una manera general de realizar estas operaciones. (Debemos importar la clase <code>java.time.temporal.ChronoUnit</code> para poder utilizar las unidades: <code>ChronoUnit.YEARS</code>, <code>ChronoUnit.MONTHS</code>, <code>ChronoUnit.DAYS</code>).</p> <p> </p> Java<pre><code>LocalDate date = LocalDate.of(2016, 7, 18);\nLocalDate datePlusOneDay = date.plus(1, ChronoUnit.DAYS); \nLocalDate dateMinusOneDay = date.minus(1, ChronoUnit.DAYS); \nSystem.out.println(date);            // 2016-07-18\nSystem.out.println(datePlusOneDay);  // 2016-07-19\nSystem.out.println(dateMinusOneDay); // 2016-07-17\n</code></pre> <p>Tambi\u00e9n se puede hacer c\u00e1lculos basados en un <code>Period</code>. En el siguiente ejemplo, se crea un <code>Period</code> de 1 d\u00eda para poder realizar los c\u00e1lculos.</p> <p> </p> Java<pre><code>LocalDate date = LocalDate.of(2016, 7, 18);\nLocalDate datePlusOneDay = date.plus(Period.ofDays(1)); \nLocalDate dateMinusOneDay = date.minus(Period.ofDays(1)); \nSystem.out.println(date);            // 2016-07-18\nSystem.out.println(datePlusOneDay);  // 2016-07-19\nSystem.out.println(dateMinusOneDay); // 2016-07-17\n</code></pre> <p>Finalmente, haciendo uso de m\u00e9todos expl\u00edcitos como <code>plusDays(long daysToAdd)</code> y <code>minusDays(long daysToSubtract)</code> se puede indicar el valor a incrementar o reducir.</p> <p> </p> Java<pre><code>LocalDate date = LocalDate.of(2016, 7, 18); \nLocalDate datePlusOneDay = date.plusDays(1); \nLocalDate dateMinusOneDay = date.minusDays(1);\nSystem.out.println(date);            // 2016-07-18\nSystem.out.println(datePlusOneDay);  // 2016-07-19\nSystem.out.println(dateMinusOneDay); // 2016-07-17\n</code></pre> <ul> <li>Operaciones con <code>LocalTime</code></li> </ul> <p>La nueva <code>Date</code> API perimite realizar operaciones como suma y resta de horas, minutos, segundos, etc. Al igual que <code>LocalDate</code>, los siguientes m\u00e9todos <code>plus(long amountToAdd, TemporalUnit unit)</code>, <code>minus(long amountToSubtract, TemporalUnit unit)</code> proveen una manera general de realizar estas operaciones.</p> <p>(Debemos importar la clase <code>java.time.temporal.ChronoUnit</code> para poder utilizar las unidades: <code>ChronoUnit.HOURS</code>, <code>ChronoUnit.MINUTES</code>, <code>ChronoUnit.SECONDS</code>, <code>ChronoUnit.NANOS</code>).</p> <p> </p> Java<pre><code>LocalTime time = LocalTime.of(15, 30);\nLocalTime timePlusOneHour = time.plus(1, ChronoUnit.HOURS); \nLocalTime timeMinusOneHour = time.minus(1, ChronoUnit.HOURS); \nSystem.out.println(time);               // 15:30\nSystem.out.println(timePlusOneHour);    // 16:30\nSystem.out.println(timeMinusOneHour);   // 14:30\n</code></pre> <p>Tambi\u00e9n se puede hacer c\u00e1lculos basados en un <code>Duration</code>. En el siguiente ejemplo, se crea un <code>Duration</code> de 1 hora para poder realizar los c\u00e1lculos.</p> <p> </p> Java<pre><code>LocalTime time = LocalTime.of(15, 30);\nLocalTime timePlusOneHour = time.plus(Duration.ofHours(1)); \nLocalTime timeMinusOneHour = time.minus(Duration.ofHours(1));\nSystem.out.println(time);               // 15:30\nSystem.out.println(timePlusOneHour);    // 16:30\nSystem.out.println(timeMinusOneHour);   // 14:30\n</code></pre> <p>Finalmente, haciendo uso de m\u00e9todos expl\u00edcitos como <code>plusHours(long hoursToAdd)</code> y <code>minusHours(long hoursToSubtract)</code> se puede indicar el valor a incrementar o reducir.</p> <p> </p> Java<pre><code>LocalTime time = LocalTime.of(15, 30); \nLocalTime timePlusOneHour = time.plusHours(1);\nLocalTime timeMinusOneHour = time.minusHours(1);\nSystem.out.println(time);               // 15:30\nSystem.out.println(timePlusOneHour);    // 16:30\nSystem.out.println(timeMinusOneHour);   // 14:30\n</code></pre> <ul> <li>Operaciones con <code>LocalDateTime</code></li> </ul> <p><code>LocalDateTime</code>, al ser una clase compuesta por <code>LocalDate</code> y <code>LocalTime</code> ofrece los mismos m\u00e9todos para realizar operaciones.</p> <p>(Debemos importar la clase <code>java.time.temporal.ChronoUnit</code> para poder utilizar las unidades: <code>ChronoUnit.YEARS</code>, <code>ChronoUnit.MONTHS</code>, <code>ChronoUnit.DAYS</code>, <code>ChronoUnit.HOURS</code>, <code>ChronoUnit.MINUTES</code>, <code>ChronoUnit.SECONDS</code>, <code>ChronoUnit.NANOS</code>).</p> <p> </p> Java<pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 28, 14, 30); \nLocalDateTime dateTime1 = dateTime.plus(1, ChronoUnit.DAYS).plus(1, ChronoUnit.HOURS); LocalDateTime dateTime2 = dateTime.minus(1, ChronoUnit.DAYS).minus(1, ChronoUnit.HOURS);\nSystem.out.println(dateTime);  // 2016-07-28T14:30\nSystem.out.println(dateTime1); // 2016-07-29T15:30\nSystem.out.println(dateTime2); // 2016-07-27T13:30\n</code></pre> <p>En el siguiente ejemplo, se hace uso de <code>Period</code> y <code>Duration</code>:</p> <p> </p> Java<pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 28, 14, 30); \nLocalDateTime dateTime1 = dateTime.plus(Period.ofDays(1)).plus(Duration.ofHours(1));\nLocalDateTime dateTime2 = dateTime.minus(Period.ofDays(1)).minus(Duration.ofHours(1));\nSystem.out.println(dateTime);  // 2016-07-28T14:30\nSystem.out.println(dateTime1); // 2016-07-29T15:30\nSystem.out.println(dateTime2); // 2016-07-27T13:30\n</code></pre> <p>Finalmente, haciendo uso de los m\u00e9todos <code>plusX(long xToAdd)</code> o <code>minusX(long xToSubtract)</code>:</p> <p> </p> Java<pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 28, 14, 30); \nLocalDateTime dateTime1 = dateTime.plusDays(1).plusHours(1); \nLocalDateTime dateTime2 = dateTime.minusDays(1).minusHours(1);\nSystem.out.println(dateTime);  // 2016-07-28T14:30\nSystem.out.println(dateTime1); // 2016-07-29T15:30\nSystem.out.println(dateTime2); // 2016-07-27T13:30\n</code></pre> <p>Adem\u00e1s, m\u00e9todos como <code>isBefore</code>, <code>isAfter</code>, <code>isEequal</code> est\u00e1n disponibles para comparar las siguientes clases <code>LocalDate</code>, <code>LocalTime</code> y <code>LocalDateTime</code>.</p> <p> </p> Java<pre><code>LocalDate date1 = LocalDate.of(2016, 7, 28);\nLocalDate date2 = LocalDate.of(2016, 7, 29);\nboolean isBefore = date1.isBefore(date2); //true \nboolean isAfter = date2.isAfter(date1); //true \nboolean isEqual = date1.isEqual(date2); //false \n</code></pre>"},{"location":"ud05/ud0510/#formatos","title":"Formatos","text":"<p>Cuando se trabaja con fechas, en ocasiones se requiere de un formato personalizado. Podemos usar el m\u00e9todo <code>ofPattern(String pattern)</code>, para definir un formato en particular.</p> <p>Para utilizar <code>DateTimeFormatter.ofPattern</code> debemos importar la clase con   <code>import java.time.format.DateTimeFormatter;</code></p> <p> </p> Java<pre><code>LocalDate mifecha = LocalDate.of(2016, 7, 25);\nString fechaTexto=mifecha.format(DateTimeFormatter.ofPattern(\"eeee',' dd 'de' MMMM 'del' yyyy\"));\nSystem.out.println(\"La fecha es: \"+fechaTexto); // La fecha es: lunes, 25 de julio del 2016\n</code></pre> <p>El patr\u00f3n del formato se realiza en funci\u00f3n a la siguiente tabla de s\u00edmbolos:</p> S\u00edmbolo Descripci\u00f3n Salida y A\u00f1o 2004; 04 D D\u00eda del A\u00f1o 189 M Mes del A\u00f1o 7; 07; Jul; July; J d D\u00eda del Mes 10 w Semana del A\u00f1o 27 E D\u00eda de la Semana Tue; Tuesday; T F Semana del Mes 3 a AM/PM PM K Hora AM/PM (0-11) 0 H Hora del d\u00eda (0-23) 0 m Minutos de la hora 30 s Segundos del minuto 55 n Nanosegundos del Segundo 987654321 '' Texto 'D\u00eda de la semana'"},{"location":"ud05/ud0510/#dia-de-la-semana","title":"D\u00eda de la Semana","text":"<p>La funci\u00f3n <code>getDayOfWeek()</code> devuelve un elemento del tipo <code>DayOfWeek</code> que corresponde el d\u00eda de la semana de una fecha. Debemos importar la clase <code>java.time.DayOfWeek</code>.</p> <p>Por ejemplo, el lunes ser\u00e1 <code>DayOfWeek.MONDAY</code>.</p> <p> </p> Java<pre><code>LocalDate lafecha = LocalDate.of(2016, 7, 25);\nif (lafecha.getDayOfWeek().equals(DayOfWeek.SATURDAY)) {\n    System.out.println(\"La fecha es S\u00e1bado\");\n} else {\n    System.out.println(\"La fecha NO es S\u00e1bado\");\n}\n//La fecha NO es S\u00e1bado\n</code></pre> Ejemplo completo <code>Anexo2Date</code> <p>Enlace completo ejemplo <code>Anexo2Date</code></p>"},{"location":"ud05/ud0510/#conversion-entre-objetos-casting","title":"Conversi\u00f3n entre objetos (Casting)","text":"<p>La esencia de Casting permite convertir un dato de tipo primitivo en otro generalmente de m\u00e1s precisi\u00f3n.</p> <p>Entre objetos es posible realizar el casting. </p> <p>En el siguiente ejemplo tenemos una clase persona con una subclase empleado y este a su vez una subclase encargado.</p> <p>Si creamos una instancia de tipo persona y le asignamos un objeto de tipo empleado o encargado, al ser una subclase no existe ning\u00fan tipo de problema, ya que todo encargado o empleado es persona.</p> <p>Por otro lado, si intentamos asignar valores a los atributos espec\u00edficos de empleado o encargado nos encontramos con una p\u00e9rdida de precisi\u00f3n puesto que no se pueden ejecutar todos los m\u00e9todos de los que dispone un objeto de tipo empleado o encargado, ya que persona contiene menos m\u00e9todos que la clase empleado o encargado. En este caso es necesario hacer un casting, sino el compilador dar\u00e1 error.</p> Ejemplo: Java<pre><code>package UD05;\n\n\n// Clase Persona que solo dispone de nombre\npublic class Persona {\n\n    String nombre;\n\n    public Persona(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void setNombre(String nom) {\n        nombre = nom;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    @Override\n    public String toString() {\n        return \"Nombre: \" + nombre;\n    }\n}\n</code></pre> Java<pre><code>package UD05;\n\n// Clase Empleado que hereda de Persona y a\u00f1ade atributo sueldoBase\npublic class Empleado extends Persona {\n\n    double sueldoBase;\n\n    public Empleado(String nombre, double sueldoBase) {\n        super(nombre);\n        this.sueldoBase = sueldoBase;\n    }\n\n    public double getSueldo() {\n        return sueldoBase;\n    }\n\n    public void setSueldoBase(double sueldoBase) {\n        this.sueldoBase = sueldoBase;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\nSueldo Base: \" + sueldoBase;\n    }\n}\n</code></pre> Java<pre><code>package UD05;\n\n// Clase Encargado que hereda de Empleado y a\u00f1ade atributo seccion\npublic class Encargado extends Empleado {\n\n    String seccion;\n\n    public Encargado(String nombre, double sueldoBase, String seccion) {\n        super(nombre, sueldoBase);\n        this.seccion = seccion;\n    }\n\n    public String getSeccion() {\n        return seccion;\n    }\n\n    public void setSeccion(String seccion) {\n        this.seccion = seccion;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\nSecci\u00f3n:\" + seccion ;\n    }\n}\n</code></pre> Java<pre><code>package UD05;\n\npublic class Anexo3Casting {\n\n    public static void main(String[] args) {\n        // Casting Implicito\n        Persona encargadoCarniceria = new Encargado(\"Rosa Ramos\", 1200,\n                \"Carniceria\");\n\n        // No tenemos disponibles los m\u00e9todos de la clase Encargado:\n        //EncargadaCarniceria.setSueldoBase(1200);\n        //EncargadaCarniceria.setSeccion(\"Carniceria\");\n        //Pero al imprimir se imprime con el m\u00e9todo m\u00e1s espec\u00edfico (luego lo vemos)\n        System.out.println(encargadoCarniceria);\n\n        // Casting Explicito\n        Encargado miEncargado = (Encargado) encargadoCarniceria;\n        //Tenemos disponibles los m\u00e9todos de la clase Encargado:       \n        miEncargado.setSueldoBase(1200);\n        miEncargado.setSeccion(\"Carniceria\");\n        //Al imprimir se imprime con el m\u00e9todo m\u00e1s espec\u00edfico de nuevo.\n        System.out.println(miEncargado);\n    }\n}\n</code></pre> <p>Las reglas a la hora de realizar casting es que:</p> <ul> <li>cuando se utiliza una clase m\u00e1s espec\u00edfica (m\u00e1s abajo en la jerarqu\u00eda) no hace falta casting. Es lo que llamamos casting impl\u00edcito.</li> <li>cuando se utiliza una clase menos espec\u00edfica (m\u00e1s arriba en la jerarqu\u00eda) hay que hacer un casting expl\u00edcito.</li> </ul> <p>\u00bfPorqu\u00e9 a la hora de imprimir el casting impl\u00edcito la clase m\u00e1s gen\u00e9rica se imprime con el m\u00e9todo m\u00e1s especializado?</p> <p>Debes entender que en realidad <code>encargadoCarniceria</code> es un <code>Encargado</code> que se disfraza de <code>Persona</code>, pero en realidad sus m\u00e9todos son los especializados (el <code>toString()</code> m\u00e1s moderno sobrescribe al de sus padres. Recuerda que la anotaci\u00f3n <code>@override</code> es opcional, y aunque no se indique el m\u00e9todo sigue sobrescribiendo al de su padre). Si por ejemplo usamos este fragmento:</p> Java<pre><code>//Persona\nPersona David = new Persona (\"David\");\nSystem.out.println(David);\n</code></pre> <p>Se imprimir\u00e1 con el m\u00e9todo <code>toString()</code> de la clase <code>Persona</code> (s\u00f3lo el nombre). Y si hacemos un casting del objeto David a uno m\u00e1s gen\u00e9rico (Object) seguir\u00e1 usando el m\u00e9todo m\u00e1s especializado:</p> Java<pre><code>//Object\nObject oDavid = David;\n</code></pre> Ejemplo completo <code>Anexo3Casting</code> <p>Enlace completo ejemplo <code>Anexo3Casting</code> Enlace completo ejemplo <code>Persona</code> Enlace completo ejemplo <code>Empleado</code> Enlace completo ejemplo <code>Encargado</code></p>"},{"location":"ud05/ud0510/#acceso-a-metodos-de-la-superclase","title":"Acceso a m\u00e9todos de la superclase","text":"<p>Para acceder a los m\u00e9todos de la superclase se utiliza la sentencia <code>super</code>. La sentencia <code>this</code> permite acceder a los campos y m\u00e9todos de la clase. La sentencia <code>super</code> permite acceder a los campos y m\u00e9todos de la superclase. El uso de <code>super</code> lo hemos visto en las clases <code>Empleado</code> y <code>Encargado</code> anteriores:</p> Java<pre><code>[...]    \n    public Empleado(String nombre, double sueldoBase) {\n        super(nombre);\n        this.sueldoBase = sueldoBase;\n    }\n[...]\n</code></pre> Java<pre><code>[...]    \n    public Encargado(String nombre, double sueldoBase, String seccion) {\n        super(nombre, sueldoBase);\n        this.seccion = seccion;\n    }\n[...]\n</code></pre> <p>Podemos mostrar el nombre de la clase y el nombre de la clase de la que hereda con <code>getClass()</code> y <code>getSuperclass()</code>. Ejemplo:</p> Java<pre><code>package UD05;\n\npublic class Anexo4SuperClase {\n\n    public static void main(String[] args) {\n        Empleado empleadoCarniceria = new Empleado(\"Rosa Ramos\", 1200);\n        // Muestra los datos del Empleado\n        System.out.println(empleadoCarniceria instanceof Encargado); //false\n        System.out.println(empleadoCarniceria.getClass()); //class Empleado\n        System.out.println(empleadoCarniceria.getClass().getSuperclass()); //class Persona\n    }\n}\n</code></pre>"},{"location":"ud05/ud0510/#clases-anidadas-clases-internas-inner-class","title":"Clases Anidadas, Clases Internas (Inner Class)","text":"<p>Una clase anidada es una clase que es miembro de otra clase. La clase anidada al ser miembro de la clase externa tienen acceso a todos sus m\u00e9todos y atributos.</p> <p>Permiten:</p> <ul> <li>acceder a los campos privados de la otra clase.</li> <li>ocultar la clase interna de las otras clases del paquete.</li> <li>...</li> </ul> Java<pre><code>class Externa{\n    private String a;\n    ...\n    class Interna{\n        //a es accesible\n        ...\n    }\n    ...\n}\nclass Otra{\n    //a no es accesible\n}\n</code></pre> <p>Para instanciar una clase interna se utilizar\u00e1 la sentencia:</p> Java<pre><code>Externa.Interna objetoInterno = objetoExterno.new Interna();\n</code></pre> <p>Ejemplo</p> Java<pre><code>class Pc {\n\n    double precio;\n\n    public String toString() {\n        return \"El precio del PC es \" + this.precio;\n    }\n\n    class Monitor {\n\n        String marca;\n\n        public String toString() {\n            return \"El monitor es de la marca \" + this.marca;\n        }\n    }\n\n    class Cpu {\n\n        String marca;\n\n        public String toString() {\n            return \"La CPU es de la marca \" + this.marca;\n        }\n    }\n}\n\npublic class ClaseInternaHardware {\n\n    public static void main(String[] args) {\n        Pc miPc = new Pc();\n        Pc.Monitor miMonitor = miPc.new Monitor();\n        Pc.Cpu miCpu = miPc.new Cpu();\n        miPc.precio = 1250.75;\n        miMonitor.marca = \"Asus\";\n        miCpu.marca = \"Acer\";\n        System.out.println(miPc); //El precio del PC es 1250.75\n        System.out.println(miMonitor); //El monitor es de la marca Asus\n        System.out.println(miCpu); //La CPU es de la marca Acer\n    }\n}\n</code></pre> <p>Observa que ...</p> <p>Observa que estas clases se definen unas dentro de otras (anidadas o internas), mientras que por ejemplo cuando hemos a\u00f1adido excepciones a nuestros ejercicios lo hemos hecho como otra clase en el mismo fichero.</p>"},{"location":"ud05/ud05ac/","title":"Actividades","text":""},{"location":"ud05/ud05ac/#paquete-_01_gestionempleados","title":"paquete <code>_01_gestionEmpleados</code>","text":""},{"location":"ud05/ud05ac/#ejercicio-01","title":"Ejercicio 01","text":"<p>Una empresa quiere hacer una gesti\u00f3n informatizada b\u00e1sica de sus empleados. Para ello, de cada empleado le interesa:</p> <ul> <li>nombre (String)</li> <li>dni (String)</li> <li>a\u00f1o de ingreso (n\u00famero entero)</li> <li>sueldo bruto anual (n\u00famero real)</li> </ul> <p>Dise\u00f1ar una clase Java <code>Empleado</code>, que contenga los atributos (privados) que caracterizan a un empleado e implemente los m\u00e9todos adecuados para:</p> <ul> <li> <p>Crear objetos de la clase: Constructor que reciba todos los datos del empleado a crear.</p> </li> <li> <p>Consultar el valor de cada uno de sus atributos: Consultores (o getters)</p> </li> <li> <p><code>public int antiguedad()</code>: Devuelve el n\u00famero de a\u00f1os transcurridos desde el ingreso del empleado en la empresa. Si el a\u00f1o de ingreso fuera posterior al de la fecha actual, devolver\u00e1 0. Para obtener el a\u00f1o actual puedes usar:</p> </li> <li> <p><code>java     int a\u00f1oActual = Calendar.getInstance().get(Calendar.YEAR);</code></p> </li> <li> <p><code>public void incrementarSueldo(double porcentaje)</code>: Incrementa el sueldo del empleado en un porcentaje dado (expresado como una cantidad real entre 0 y 100).</p> </li> <li> <p><code>public String toString()</code>: Devuelve un <code>String</code> con los datos del empleado, de la siguiente forma:</p> </li> </ul> Bash<pre><code>Nombre: Juan Gonz\u00e1lez\nDni: 545646556K\nA\u00f1o de ingreso: 1998\nSueldo bruto anual: 20000 \u20ac\n</code></pre> <ul> <li> <p><code>public boolean equals(Object o)</code>: M\u00e9todo para comprobar si dos empleados son iguales. Dos empleados se consideran iguales si tienen el mismo DNI.</p> </li> <li> <p><code>public int compareTo(Empleado o)</code>. Se considera menor o mayor el empleado que tiene menor o mayor DNI (el mismo criterio que al comparar dos strings).</p> </li> <li> <p>M\u00e9todo est\u00e1tico <code>public static double calcularIRPF(double salario)</code>. Determina el % de IRPF que corresponde a un salario (mensual) determinado, seg\u00fan la siguiente tabla:</p> </li> </ul> Desde salario (incluido) Hasta salario (no incluido) % IRPF 0 800 3 800 1000 10 1000 1500 15 1500 2100 20 2100 infinito 30"},{"location":"ud05/ud05ac/#ejercicio-02","title":"Ejercicio 02","text":"<p>Dise\u00f1ar una clase Java <code>TestEmpleado</code> que permita probar la clase <code>Empleado</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</p> <ul> <li>Se crear\u00e1n dos empleados utilizando los datos que introduzca el usuario.</li> <li>Se incrementar\u00e1 el sueldo un 20 % al empleado que menos cobre.</li> <li>Se incrementar\u00e1 el sueldo un 10% al empleando m\u00e1s antiguo.</li> <li>Muestra el IRPF que corresponder\u00eda a cada empleado. </li> <li>Para comprobar que las operaciones se realizan correctamente, muestra los datos de los empleados tras cada operaci\u00f3n.</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-03","title":"Ejercicio 03","text":"<p>Dise\u00f1ar una clase <code>Empresa</code>, que permita almacenar el nombre de la empresa y la informaci\u00f3n de los empleados de la misma (m\u00e1ximo 10 empleados) en un array. Para ello, se utilizar\u00e1n tres atributos: nombre, plantilla (array de empleados) y <code>numEmpleados</code> (n\u00famero de empleados que tiene la empresa). En esta clase, se deben implementar los m\u00e9todos:</p> <ul> <li> <p><code>public Empresa (String nombre)</code>. Constructor de la clase: Crea la empresa con el nombre indicado y sin empleados.</p> </li> <li> <p><code>public void contratar(Empleado e) throws PlantillaCompletaException</code>: A\u00f1ade el empleado indicado a la plantilla de la empresa, siempre que quepa en el array. Si no cabe, se lanzar\u00e1 la excepci\u00f3n <code>PlantillaCompletaException</code>.</p> </li> <li> <p><code>public void despedir(Empleado e) throws ElementoNoEncontradoException</code>: Elimina el empleado indicado de la plantilla. Si no existe en la empresa, se lanza <code>ElementoNoEncontradoException</code>.</p> </li> <li> <p><code>public void subirTrienio (double porcentaje)</code>: Subir el sueldo, en el porcentaje indicado, a todos los empleados cuya antig\u00fcedad sea exactamente tres a\u00f1os.</p> </li> <li> <p><code>public String toString()</code>: Devuelve un <code>String</code> con el nombre de la empresa y la informaci\u00f3n de todos los empleados. La informaci\u00f3n de los distintos empleados debe estar separada por saltos de l\u00ednea.</p> </li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-04","title":"Ejercicio 04","text":"<p>Dise\u00f1ar una clase Java <code>TestEmpresa</code> que permita probar la clase <code>Empresa</code> y sus m\u00e9todos. Para ello, desarrolla el m\u00e9todo <code>main</code> y en \u00e9l \u2026:</p> <ul> <li>Crea una empresa, de nombre \"CataDaw\".</li> <li>Contrata a varios empleados (con el nombre, DNI, etc. que quieras).</li> <li>Usa el m\u00e9todo <code>subirTrienio</code> para subir un 10% el salario de los empleados que cumplen un trienio en el a\u00f1o actual.</li> <li>Despide a alguno de los empleados.</li> <li>Trata de despedir a alg\u00fan empleado que no exista en la empresa.</li> <li>Muestra los datos de la empresa siempre que sea necesario para comprobar que las operaciones se realizan de forma correcta.</li> </ul>"},{"location":"ud05/ud05ac/#paquete-_02_gestionhospital","title":"paquete: <code>_02_gestionHospital</code>","text":"<p>Se desea realizar una aplicaci\u00f3n para gestionar el ingreso y el alta de pacientes de un hospital. Una de las clases que participar\u00e1 en la aplicaci\u00f3n ser\u00e1 la clase <code>Paciente</code>, que se detalla a continuaci\u00f3n :</p>"},{"location":"ud05/ud05ac/#ejercicio-05","title":"Ejercicio 05","text":"<p>La clase <code>Paciente</code> permite representar un paciente mediante los atributos: <code>nombre</code> (cadena), <code>edad</code> (entero), <code>estado</code> (entero entre 1 -m\u00e1s grave- y 5 -menos grave-, 6 si est\u00e1 curado), y con las siguientes operaciones:</p> <ul> <li> <p><code>public Paciente (String n, int e)</code>. Constructor de un objeto <code>Paciente</code> de nombre <code>n</code>, de <code>e</code> a\u00f1os y cuyo estado es un valor aleatorio entre 1 y 5.</p> </li> <li> <p><code>public int getEdad()</code>. Consultor que devuelve edad.</p> </li> <li> <p><code>public int getEstado()</code>. Consultor que devuelve estado.</p> </li> <li> <p><code>public void mejorar()</code>. Modificador que incrementa en uno el estado del paciente (mejora al paciente)</p> </li> <li> <p><code>public void empeorar()</code>. Modificador que decrementa en uno el estado del paciente (empeora al paciente)</p> </li> <li> <p><code>public String toString()</code>. Transforma el paciente en un <code>String</code>. Por ejemplo,</p> </li> </ul> Bash<pre><code>Pepe P\u00e9rez 46 5\n</code></pre> <ul> <li> <p><code>public int compareTo(Paciente o)</code>. Permite comparar dos pacientes. Se considera menor el paciente m\u00e1s leve. A igual gravedad, se considera menor el paciente m\u00e1s joven. Ejemplo:</p> </li> <li> <p>Teniendo a <code>David 40 3</code>, <code>Pepe 25 3</code> y <code>Juan 35 5</code>:</p> Bash<pre><code>David.compareTo(Juan) = 2\nJuan.compareTo(Pepe) = -2\nDavid.compareTo(Pepe) = 15\n</code></pre> </li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-06","title":"Ejercicio 06","text":"<p>Dise\u00f1ar una clase Java <code>TestPaciente</code> que permita probar la clase <code>Paciente</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</p> <ul> <li>Se crear\u00e1n dos pacientes: \"Antonio\" de 20 a\u00f1os y \"Miguel\" de 30 a\u00f1os.</li> <li>Imprimir el estado inicial de los dos pacientes.</li> <li>Mostrar los datos del que se considere menor (seg\u00fan el criterio de <code>compareTo</code> de la clase <code>Paciente</code>).</li> <li>Aplicar \"mejoras\" al paciente m\u00e1s grave hasta que los dos pacientes tengan el mismo estado.</li> <li>Imprimir el estado final de los dos pacientes.</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-07","title":"Ejercicio 07","text":"<p>La clase Hospital contiene la informaci\u00f3n de las camas de un hospital, as\u00ed como de los pacientes que las ocupan. Un Hospital tiene un n\u00famero m\u00e1ximo de camas <code>MAXC</code> = 200 y para representarlas se utilizar\u00e1 un array (llamado <code>listaCamas</code>) de objetos de tipo Paciente junto con un atributo (<code>numLibres</code>) que indique el n\u00famero de camas libres del hospital en un momento dado. El n\u00famero de cada cama coincide con su posici\u00f3n en el array de pacientes (la posici\u00f3n 0 no se utiliza), de manera que <code>listaCamas[i]</code> es el Paciente que ocupa la cama <code>i</code> o es <code>null</code> si la cama est\u00e1 libre. Las operaciones de esta clase son:</p> <ul> <li> <p><code>public Hospital()</code>: Constructor de un hospital. Cuando se crea un hospital, todas las camas est\u00e1n libres.</p> </li> <li> <p><code>public int getNumLibres()</code>: Consultor del n\u00famero de camas libres.</p> </li> <li> <p><code>public boolean hayLibres()</code>: Devuelve true si en el hospital hay camas libres y devuelve false en caso contrario.</p> </li> <li> <p><code>public int primeraLibre()</code>: Devuelve el n\u00famero de la primera cama libre del array <code>listaCamas</code> si hay camas libres o devuelve un 0 si no las hay.</p> </li> <li> <p><code>public void ingresarPaciente(String n, int e) throws HospitalLlenoException</code>: Si hay camas libres, la primera de ellas (la de n\u00famero menor) pasa a estar ocupada por el paciente de nombre <code>n</code> y edad <code>e</code>. Si no hay camas libres, lanza una excepci\u00f3n.</p> </li> <li> <p><code>private void darAltaPaciente(int i)</code>: La cama <code>i</code> del hospital pasa a estar libre. (Afectar\u00e1 al n\u00famero de camas libres)</p> </li> <li> <p><code>public void darAltas()</code>: Se mejora el estado (m\u00e9todo <code>mejorar()</code> de <code>Paciente</code>) de cada uno de los pacientes del hospital y a aquellos pacientes sanos (cuyo estado es 6) se les da el alta m\u00e9dica (invocando al m\u00e9todo <code>darAltaPaciente</code>).</p> </li> <li> <p><code>public String toString()</code>: Devuelve un <code>String</code> con la informaci\u00f3n de las camas del hospital. Por ejemplo,</p> </li> </ul> Bash<pre><code>1 Mar\u00eda Medina 30 4\n2 Pepe P\u00e9rez 46 5\n3 libre\n4 Juan L\u00f3pez 50 1\n5 libre\n...\n199 Andr\u00e9s S\u00e1nchez 29 3\n</code></pre>"},{"location":"ud05/ud05ac/#ejercicio-08","title":"Ejercicio 08","text":"<p>En la clase <code>GestorHospital</code> se probar\u00e1 el comportamiento de las clases anteriores. El programa deber\u00e1:</p> <ul> <li>Crear un hospital.</li> <li>Ingresar a cinco pacientes con los datos simulados introducidos directamente en el programa.</li> <li>Realizar el proceso de <code>darAltas</code> mientras que el n\u00famero de habitaciones libres del hospital no llegue a una cantidad (por ejemplo 198).</li> <li>Mostrar los datos del hospital cuando se considere oportuno para comprobar la correcci\u00f3n de las operaciones que se hacen.</li> </ul>"},{"location":"ud05/ud05ac/#paquete-_03_contrarreloj","title":"Paquete: <code>_03_contrarreloj</code>","text":"<p>Se quiere realizar una aplicaci\u00f3n para registrar las posiciones y tiempos de llegada en una carrera ciclista contrarreloj. </p>"},{"location":"ud05/ud05ac/#ejercicio-09","title":"Ejercicio 09","text":"<p>La clase <code>Corredor</code> representa a un participante en la carrera. Sus atributos son el dorsal (entero), el nombre (string) y el tiempo en segundos (double) que le ha costado completar el recorrido. Los m\u00e9todos con los que cuenta son:</p> <ul> <li> <p><code>public Corredor(int d, String n)</code>: Constructor a partir del dorsal y el nombre. Por defecto el tiempo tardado es 0.</p> </li> <li> <p><code>public double getTiempo()</code>: Devuelve el tiempo tardado por el corredor.</p> </li> <li> <p><code>public int getDorsal()</code>: Devuelve el dorsal del corredor.</p> </li> <li> <p><code>public String getNombre()</code>: Devuelve el nombre del corredor.</p> </li> <li> <p><code>public void setTiempo(double t) throws IllegalArgumentException</code>: Establece el tiempo tardado por el corredor. Lanzar\u00e1 la excepci\u00f3n si el tiempo indicado es negativo.</p> </li> <li> <p><code>public void setTiempo(double t1, double t2) throws IllegalArgumentException</code>: Establece el tiempo tardado por el corredor. </p> </li> </ul> <p><code>t1</code> indica la hora de comienzo y <code>t2</code> la hora de finalizaci\u00f3n (expresadas en segundos). La diferencia en segundos entre los dos datos servir\u00e1 para establecer el tiempo tardado por el <code>Corredor</code>.</p> <p>Lanzar\u00e1 la excepci\u00f3n si el tiempo resultante es negativo.</p> <ul> <li><code>public String toString()</code>: Devuelve un String con los datos del corredor, de la forma:</li> </ul> Bash<pre><code>(234) - Juan Ramirez - 2597 segundos\n</code></pre> <ul> <li> <p><code>public boolean equals(Object o)</code>: Devuelve true si los corredores tienen el mismo dorsal y false en caso contrario.</p> </li> <li> <p><code>public int compareTo (Corredor o)</code>: Un corredor es menor que otro si tiene menor dorsal.</p> </li> <li> <p><code>public static int generarDorsal()</code>: Devuelve un n\u00famero de dorsal generado secuencialmente. Para ello la clase har\u00e1 uso de un atributo <code>static int siguienteDorsal</code> que incrementar\u00e1 cada vez que se genere un nuevo dorsal.</p> </li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-10","title":"Ejercicio 10","text":"<p>Dise\u00f1ar una clase Java <code>TestCorredor</code> que permita probar la clase Corredor y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</p> <ul> <li>Se crear\u00e1n dos corredores: El nombre lo indicar\u00e1 el usuario mientras que el dorsal se generar\u00e1 utilizando el m\u00e9todo <code>generarDorsal()</code> de la clase.</li> <li>Se establecer\u00e1 el tiempo de llegada del primer corredor a 300 segundos y el del segundo a 400. </li> <li>Se mostrar\u00e1n los datos de ambos corredores (<code>toString</code>)</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-11","title":"Ejercicio 11","text":"<p>La clase <code>ListaCorredores</code> permite representar a un conjunto de corredores. En la lista, como m\u00e1ximo habr\u00e1 200 corredores, aunque puede haber menos de ese n\u00famero. Se utilizar\u00e1 un array, llamado lista, de 200 elementos junto con una propiedad <code>numCorredores</code> que permita saber cuentos corredores hay realmente. M\u00e9todos:</p> <ul> <li> <p><code>public ListaCorredores()</code>: Constructor. Crea la lista de corredores, inicialmente vac\u00eda.</p> </li> <li> <p><code>public void anyadir(Corredor c) throws ElementoDuplicadoException</code>: A\u00f1ade un corredor al final de la lista de corredores, siempre y cuando el corredor no est\u00e9 ya en la lista, en cuyo caso se lanzar\u00e1 <code>ElementoDuplicadoException</code></p> </li> <li> <p><code>public void insertarOrdenado(Corredor c)</code>: Inserta un corredor en la posici\u00f3n adecuada de la lista de manera que esta se mantenga ordenada crecientemente por el tiempo de llegada. Para poder realizar la inserci\u00f3n debe averiguarse la posici\u00f3n que debe ocupar el nuevo elemento y, antes de a\u00f1adirlo al array, desplazar el elemento que ocupa esa posici\u00f3n y todos los posteriores, una posici\u00f3n a la derecha.</p> </li> <li> <p><code>public Corredor quitar(int dorsal) throws ElementoNoEncontradoException</code>: Quita de la lista al corredor cuyo dorsal se indica. El array debe mantenerse compacto, es decir, todos los elementos posteriores al eliminado deben desplazarse una posici\u00f3n a la izquierda. El m\u00e9todo devuelve el Corredor quitado de la lista. Si no se encuentra se lanza <code>ElementoNoEncontradoException</code>. </p> </li> <li> <p><code>public String toString()</code>: Devuelve un <code>String</code> con la informaci\u00f3n de la lista de corredores. Los minutos aparecer\u00e1n formateados con 2 decimales. Por ejemplo:</p> </li> </ul> Bash<pre><code>Posici\u00f3n: 0\n Dorsal: 234\n Nombre: Juan Ramirez\n Tiempo: 25.97 minutos\n\nPosici\u00f3n: 1\n Dorsal: 26\n Nombre: Jos\u00e9 Gonz\u00e1lez\n Tiempo: 29.70 minutos\n</code></pre> <p>(Clase <code>Contrarreloj</code>) Realizar un programa que simule una contrarreloj. Para llevar el control de una carrera contrarreloj se mantienen dos listas de corredores (dos objetos de tipo <code>ListaCorredores</code>):</p> <ul> <li>(<code>hanSalido</code>) Una con los que han salido, que tiene a los corredores por orden de salida. El atributo tiempo de estos corredores ser\u00e1 0. Para que los corredores se mantengan por orden de salida, se a\u00f1adiran a la lista utilizando el m\u00e9todo a\u00f1adir.</li> <li>(<code>hanLlegado</code>) Otra con los corredores que hay llegado a la meta. A medida que los corredores llegan a la meta se les extrae de la primera lista, se les asigna un tiempo y se les inserta ordenadamente en esta segunda lista.</li> </ul> <p>En el m\u00e9todo <code>main</code> realizar un programa que muestre un men\u00fa con las siguientes opciones:</p> <ol> <li><code>Salida</code>: Para registrar que un corredor ha comenzado la contrarreloj y sale de la l\u00ednea de salida. Solicita al usuario el nombre de un corredor y su dorsal, y lo a\u00f1ade a la lista de corredores que han salido.</li> <li><code>Llegada</code>: Para registrar que un corredor ha llegado a la meta. Solicita al usuario el dorsal de un corredor y el tiempo de llegada (en segundos). Quita al corredor de la lista de corredores que <code>hanSalido</code>, le asigna el tiempo que ha tardado y lo inserta (ordenadamente) en la lista de corredores que <code>hanLlegado</code></li> <li><code>Clasificaci\u00f3n</code>: Muestra la lista de corredores que <code>hanLlegado</code>. Dado que esta lista est\u00e1 ordenada por tiempo, mostrarla por pantalla nos da la clasificaci\u00f3n.</li> <li><code>Salir</code>: Sale del programa</li> </ol>"},{"location":"ud05/ud05ac/#paquete-_04_reservaslibreria","title":"Paquete: <code>_04_reservasLibreria</code>","text":"<p>Una librer\u00eda quiere proporcionar a sus clientes el siguiente servicio:</p> <p>Cuando un cliente pide un libro y la librer\u00eda no lo tiene, el cliente puede hacer una reserva de manera que cuando lo reciban en la librer\u00eda le avisen por tel\u00e9fono. </p> <p>De cada reserva se almacena:</p> <ul> <li><code>Nif</code> del cliente (<code>String</code>)</li> <li><code>Nombre</code> del cliente (<code>String</code>)</li> <li><code>Tel\u00e9fono</code> del cliente (<code>String</code>)</li> <li><code>C\u00f3digo</code> del libro reservado. (<code>entero</code>)</li> <li>Numero de <code>ejemplares</code> (<code>entero</code>)</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-12","title":"Ejercicio 12","text":"<p>Dise\u00f1ar la clase <code>Reserva</code>, de manera que contemple la informaci\u00f3n descrita e implementar:</p> <ul> <li><code>public Reserva(String nif, String nombre, String tel, int codigo, int ejemplares)</code>: Constructor que recibe todos los datos de la reserva.</li> <li><code>public Reserva(String nif, String nombre, String tel, int codigo)</code>: Constructor que recibe los datos del cliente y el c\u00f3digo del libro. Establece el n\u00famero de ejemplares a uno. </li> <li>Consultores de todos los atributos.</li> <li><code>public void setEjemplares(int ejemplares)</code>: Modificador del n\u00famero de ejemplares. Establece el n\u00famero de ejemplares al valor indicado como par\u00e1metro. </li> <li><code>public String toString(): que devuelva un</code>String` con los datos de la reserva</li> <li><code>public boolean equals(Object o)</code>: Dos reservas son iguales si son del mismo cliente y reservan el mismo libro.</li> <li><code>public int compareTo(Object o)</code>: Es menor la reserva cuyo c\u00f3digo de libro es menor. El par\u00e1metro es de tipo <code>Object</code> as\u00ed que revisa si debes hacer alguna \"adaptaci\u00f3n\".</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-13","title":"Ejercicio 13","text":"<p>Dise\u00f1ar una clase Java <code>TestReservas</code> que permita probar la clase <code>Reserva</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</p> <ul> <li>Se creen dos reservas con los datos que introduce el usuario. Las reservas no pueden ser iguales (equals). Si la segunda reserva es igual a la primera se pedir\u00e1 de nuevo los datos de la segunda al usuario.</li> <li>Se incremente en uno el n\u00famero de ejemplares de ambas reservas.</li> <li>Se muestre la menor y a continuaci\u00f3n la mayor.</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-14","title":"Ejercicio 14","text":"<p>Dise\u00f1ar una clase <code>ListaReservas</code> que implemente una lista de reservas. Como m\u00e1ximo puede haber 100 reservas en la lista. Se utilizar\u00e1 un array de Reservas que ocuparemos a partir de la posici\u00f3n 0 y un atributo que indique el n\u00famero de reservas. Las reservas existentes ocupar\u00e1n las primeras posiciones del array (sin espacios en blanco). Implementar los siguientes m\u00e9todos:</p> <ul> <li><code>public void reservar(String nif, String nombre, String telefono, int libro, int ejemplares) throws ListaLlenaException, ElementoDuplicadoException</code>: Crea una reserva y la a\u00f1ade a la lista. Lanza <code>ElementoDuplicadoException</code> si la reserva ya estaba en la lista. Lanza <code>ListaLlenaException</code> si la lista de reservas est\u00e1 llena.</li> <li><code>public void cancelar(String nif, int libro) throws ElementoNoEncontradoException</code>. Dado un nif de cliente y un c\u00f3digo de libro, anular la reserva correspondiente. Lanzar <code>ElementoNoEncontradoException</code> si la reserva no existe.</li> <li><code>public String toString()</code>: Devuelve un <code>String</code> con los datos de todas las reservas de la lista.</li> <li><code>public int numEjemplaresReservadosLibro(int codigo)</code>: Devuelve el n\u00famero de ejemplares que hay reservados en total de un libro determinado.</li> <li><code>public void reservasLibro(int codigo)</code>: Dado un c\u00f3digo de libro, muestra el nombre y el tel\u00e9fono de todos los clientes que han reservado el libro.</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-15","title":"Ejercicio 15","text":"<p>Realizar un programa <code>GestionReservas</code> que, utilizando un men\u00fa, permita:</p> <ul> <li>Realizar reserva. Permite al usuario realizar una reserva.</li> <li>Anular reserva: Se anula la reserva que indique el usuario (Nif de cliente y c\u00f3digo de libro).</li> <li>Pedido: El usuario introduce un c\u00f3digo de libro y el programa muestra el n\u00ba de reservas que se han hecho del libro. Esta opci\u00f3n de men\u00fa le resultar\u00e1 \u00fatil al usuario para poder hacer el pedido de un libro determinado.</li> <li>Recepci\u00f3n: Cuando el usuario recibe un libro quiere llamar por tel\u00e9fono a los clientes que lo reservaron. Solicitar al usuario un c\u00f3digo de libro y mostrar los datos (nombre y tel\u00e9fono) de los clientes que lo tienen reservado.</li> </ul>"},{"location":"ud05/ud05ac/#paquete-_05_gestorcorreoelectronico","title":"Paquete: <code>_05_gestorCorreoElectronico</code>","text":"<p>Queremos realizar la parte de un programa de correo electr\u00f3nico que gestiona la organizaci\u00f3n de los mensajes en distintas carpetas. Para ello desarrollaremos:</p>"},{"location":"ud05/ud05ac/#ejercicio-16","title":"Ejercicio 16","text":"<p>La clase <code>Mensaje</code>. De un mensaje conocemos:</p> <ul> <li><code>Codigo (int)</code> N\u00famero que permite identificar a los mensajes.</li> <li><code>Emisor (String)</code>: email del emisor.</li> <li><code>Destinatario (String)</code>: email del destinatario.</li> <li><code>Asunto (String)</code></li> <li><code>Texto (String)</code></li> </ul> <p>Desarrollar los siguientes m\u00e9todos:</p> <ul> <li>Constructor que reciba todos los datos, excepto el c\u00f3digo, que se generar\u00e1 autom\u00e1ticamente (n\u00ba consecutivo. Ayuda: utiliza una variable de clase (<code>static</code>))</li> <li>Consultores de todos los atributos.</li> <li><code>public boolean equals(Object o)</code>: Dos mensajes son iguales si tienen el mismo c\u00f3digo.</li> <li><code>public static boolean validarEMail(String email)</code>: M\u00e9todo est\u00e1tico que devuelve true o false indicando si la direcci\u00f3n de correo indicada es v\u00e1lida o no. Una direcci\u00f3n es v\u00e1lida si tiene la forma <code>direccion@subdominio.dominio</code></li> <li><code>public String toString()</code></li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-17","title":"Ejercicio 17","text":"<p>Con la clase <code>TestCorreo</code> probaremos las clases y m\u00e9todos desarrollados.</p> <ul> <li>Crea varios mensajes con los datos que introduzca el usuario y mu\u00e9stralos por pantalla.</li> <li>Prueba el m\u00e9todo <code>validarEMail</code> de la clase Mensaje con las direcciones siguientes (solo la primera es correcta):</li> <li><code>tuCorreo@gmail.com</code></li> <li><code>tuCorreogmail.com</code></li> <li><code>tuCorreo@gmail</code></li> <li><code>tuCorreo.com@gmail</code> </li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-18","title":"Ejercicio 18","text":"<p>La clase <code>Carpeta</code>, cada carpeta tiene un nombre y una lista de Mensajes. Para ello usaremos un array con capacidad para 100 mensajes y un atributo que indique el n\u00famero de mensajes que contiene la carpeta. Adem\u00e1s se implementar\u00e1n los siguientes m\u00e9todos:</p> <ul> <li><code>public Carpeta(String nombre)</code>: Constructor. Dado un nombre, crea la carpeta sin mensajes.</li> <li><code>public void a\u00f1adir(Mensaje m)</code>: A\u00f1ade a la carpeta el mensaje indicado.</li> <li><code>public void borrar(Mensaje m) throws ElementoNoEncotradoException</code>: Borra de la carpeta el mensaje indicado. Lanza la excepci\u00f3n si el mensaje no existe.</li> <li><code>public Mensaje buscar(int codigo) throws ElementoNoEncontradoException</code>: Busca el mensaje cuyo c\u00f3digo se indica. Si lo encuentra devuelve el mensaje, en caso contrario lanza la excepci\u00f3n.</li> <li><code>public String toString()</code> que devuelva un <code>String</code> con el nombre de la carpeta y sus mensajes</li> <li><code>public static void moverMensaje(Carpeta origen, Carpeta destino, int codigo) throws ElementoNoEncontradoException</code>: M\u00e9todo est\u00e1tico. Recibe dos Carpetas de correo y un c\u00f3digo de mensaje y mueve el mensaje indicado de una carpeta a otra. Para ello buscar\u00e1 el mensaje en la carpeta origen. Si existe lo eliminar\u00e1 y lo a\u00f1adir\u00e1 a la carpeta de destino. Si el mensaje indicado no est\u00e1 en la carpeta de origen lanza <code>ElementoNoEncontradoException</code>.</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-19","title":"Ejercicio 19","text":"<p>Con la clase <code>TestCarpetas</code> probaremos las clases y m\u00e9todos desarrollados:</p> <ul> <li>Crea dos carpetas de correo de nombre <code>Mensajes recibidos</code> y <code>Mensajes eliminados respectivamente</code>.</li> <li>Crea varios mensajes y a\u00f1\u00e1delos a <code>Mensajes recibidos</code>.</li> <li>Mueve el mensaje de c\u00f3digo 1 desde la <code>Mensajes recibidos</code> a <code>Mensajes elimiminados</code>.</li> <li>Muestra el contenido de las carpetas antes y despu\u00e9s de cada operaci\u00f3n (a\u00f1adir, mover,...)</li> </ul>"},{"location":"ud05/ud05ac/#paquete-_06_juegodecartas","title":"Paquete: <code>_06_juegoDeCartas</code>","text":"<p>Se est\u00e1 desarrollando una aplicaci\u00f3n que usa una baraja de cartas. Para ello, se implementar\u00e1n en Java las clases necesarias. </p>"},{"location":"ud05/ud05ac/#ejercicio-20","title":"Ejercicio 20","text":"<p>Una de ellas es la clase <code>Carta</code> que permite representar una carta de la baraja espa\u00f1ola. La informaci\u00f3n requerida para identificar una <code>Carta</code> es:</p> <ul> <li>su <code>palo</code> (oros, copas, espadas o bastos) y</li> <li>su <code>valor</code> (un entero entre 1 y 12).</li> </ul> <p>Para dicha clase, se pide:</p> <ul> <li>Definir 4 constantes, atributos de clase (est\u00e1ticos) p\u00fablicos enteros, para representar cada uno de los palos de la baraja (<code>OROS</code> ser\u00e1 el valor 0, <code>COPAS</code> el 1, <code>ESPADAS</code> el 2 y <code>BASTOS</code> el 3). </li> <li>Definir los atributos (privados): <code>palo</code> y <code>valor</code>.</li> <li>Escribir dos constructores: uno para construir una carta de forma aleatoria (sin par\u00e1metros) y otro para construir una carta de acuerdo a dos datos: su palo y su valor (si los datos son incorrectos se lanzar\u00e1 <code>IllegalArgumentException</code>)</li> <li>Escribir los m\u00e9todos <code>consultores</code> y <code>modificadores</code> de los valores de los atributos.</li> <li>Escribir un m\u00e9todo <code>compareTo</code> para comprobar si la carta actual es menor que otra carta dada. El criterio de ordenaci\u00f3n es por palos (el menor es oros, despu\u00e9s copas, a continuaci\u00f3n espadas y, finalmente, bastos) y dentro de cada palo por valor (1, 2, ..., 12).</li> <li>Escribir un m\u00e9todo <code>equals</code> para comprobar la igualdad de dos cartas. Dos cartas son iguales si tienen el mismo palo y valor.</li> <li>Escribir un m\u00e9todo <code>sigPalo</code> para devolver una nueva carta con el mismo valor que el de la carta actual pero del palo siguiente, seg\u00fan la ordenaci\u00f3n anterior y sabiendo que el siguiente al palo bastos es oros.</li> <li>Escribir un m\u00e9todo <code>toString</code> para transformar en <code>String</code> la carta actual, con el siguiente formato: \"valor de palo\"; por ejemplo, \"4 de oros\" o \"1 de bastos\" (sobrescritura del m\u00e9todo <code>toString</code> de <code>Object</code>).</li> </ul>"},{"location":"ud05/ud05ac/#ejercicio-21","title":"Ejercicio 21","text":"<p>Implementar una clase <code>JuegoCartas</code> con los m\u00e9todos siguientes:</p> <ul> <li>Un m\u00e9todo de clase (est\u00e1tico) <code>public static int ganadora( Carta c1, Carta c2, int triunfo)</code> que dados dos objetos <code>Carta</code> y un n\u00famero entero representando el palo de triunfo (o palo ganador), determine cu\u00e1l es la carta ganadora. El m\u00e9todo debe devolver 0 si las dos cartas son iguales. En caso contrario, devolver\u00e1 -1 cuando la primera carta es la ganadora y 1 si la segunda carta es la ganadora.</li> </ul> <p>Para determinar la carta ganadora se aplicar\u00e1n las siguientes reglas:</p> <ul> <li>Si las dos cartas son del mismo palo, la carta ganadora es el as (valor 1) y, en el resto de casos, la carta ganadora es la de valor m\u00e1s alto (por ejemplo, \"1 de oros\" gana a \"7 de oros\", \"5 de copas\" gana a \"2 de copas\", \"11 de bastos\" gana a \"7 de bastos\").</li> <li> <p>Si las dos cartas son de palos diferentes:</p> <ul> <li>Si el palo de alguna carta es el palo de triunfo, dicha carta es la ganadora.</li> <li>En otro caso, la primera carta siempre gana a la segunda.</li> </ul> </li> <li> <p>Un m\u00e9todo <code>main</code> en el que se debe:</p> </li> <li> <p>Crear una <code>Carta</code> aleatoriamente y mostrar sus datos por pantalla.</p> </li> <li>Generar aleatoriamente un entero en el rango [0..3] representando el palo de triunfo, y mostrar por pantalla a qu\u00e9 palo corresponde.</li> <li>Crear una <code>Carta</code> a partir de un palo y un valor dados (solicitados al usuario desde teclado), y mostrar sus datos por pantalla.</li> <li>Mostrar por pantalla la carta ganadora (invocando al m\u00e9todo del apartado anterior con el objeto <code>Carta</code> del usuario.</li> </ul>"},{"location":"ud05/ud05ac/#actividades","title":"Actividades","text":""},{"location":"ud05/ud05ac/#actividad-01","title":"Actividad 01","text":"<p>Introducir por teclado un valor de tipo <code>double</code> , convertirlo en Wrapper e imprimirlo.</p>"},{"location":"ud05/ud05ac/#actividad-02","title":"Actividad 02","text":"<p>Introducir por teclado un valor num\u00e9rico en un <code>String</code> y convertirlo en entero e imprimirlo.</p>"},{"location":"ud05/ud05ac/#actividad-03","title":"Actividad 03","text":"<p>Introducir por teclado un valor num\u00e9rico entero en un <code>String</code> y convertirlo en un <code>Wrapper</code> e imprimirlo.</p>"},{"location":"ud05/ud05ac/#actividad-04","title":"Actividad 04","text":"<p>Introducir por teclado dos valores num\u00e9ricos enteros y la operaci\u00f3n que queremos realizar (<code>suma</code>, <code>resta</code> o <code>multiplicaci\u00f3n</code>). Realizar la operaci\u00f3n y mostrar el resultado en <code>Binario</code>, <code>Hexadecimal</code> y <code>Octal</code>.</p> <p>Ejemplo de ejecuci\u00f3n:</p> Bash<pre><code>Introduce el primer valor num\u00e9rico: 14\nIntroduce el segundo valor num\u00e9rico: 4\nIntroduce la operaci\u00f3n: resta\nEL RESULTADO:\n en binario: 1010\n en octal: 12\n en binario: a\n</code></pre>"},{"location":"ud05/ud05ac/#actividad-05","title":"Actividad 05","text":"<p>Mostrar los segundos transcurridos desde el <code>1 de Enero de 1970 a las 0:00:00</code> hasta <code>hoy</code>.</p>"},{"location":"ud05/ud05ac/#actividad-06","title":"Actividad 06","text":"<p>Mostrar la <code>fecha</code> y <code>hora</code> de hoy con los siguientes formatos (para todos los ejemplos se supone que hoy es 26 de agosto de 2021 a las 17 horas 16 minutos y 8 segundos, tu deberas mostrar la fecha y hora de tu sistema en el momento de ejecuc):</p> <p>a) <code>August 26, 2021, 5:16 pm</code> b) <code>08.26.21</code> c) <code>26, 8, 2021</code> d) <code>20210826</code> e) <code>05-16-08, 26-08-21</code> f) <code>Thu Aug 26 17:16:08</code> g) <code>17:16:08</code></p>"},{"location":"ud05/ud05ac/#actividad-07","title":"Actividad 07","text":"<p>Introducir un d\u00eda, un mes y un a\u00f1o y verificar si es una fecha correcta. </p> Bash<pre><code>Introduce un dia para la fecha: 29\nIntroduce un mes para la fecha: 2\nIntroduce un a\u00f1o para la fecha: 2022\nLA FECHA ES INCORRECTA\n\nIntroduce un dia para la fecha: 29\nIntroduce un mes para la fecha: 2\nIntroduce un a\u00f1o para la fecha: 2020\nLA FECHA ES CORRECTA\n</code></pre>"},{"location":"ud05/ud05ac/#actividad-08","title":"Actividad 08","text":"<p>Introducir dos fechas e indicar los d\u00edas transcurridos entre las dos fechas. </p> Bash<pre><code>Introduce la fecha inicial con formato dd/mm/yyyy: 01/02/2021\nIntroduce la fecha final con formato dd/mm/yyyy: 15/03/2022\nLa fecha inicial es: 1/2/2021\nLa fecha final es: 15/3/2022\nEntre la fecha inicial y la final hay un periodo de: P1Y1M14D\ndias: 14\nmeses: 1\na\u00f1os: 1\n</code></pre>"},{"location":"ud05/ud05ac/#actividad-09","title":"Actividad 09","text":"<p>Introducir una fecha y devolver las fecha de los pagos a 30, 60 y 90 d\u00edas. </p>"},{"location":"ud05/ud05ac/#actividad-10","title":"Actividad 10","text":"<p>Introducir tres fechas e indicar la mayor y a menor.</p>"},{"location":"ud05/ud05ac/#actividad-11","title":"Actividad 11","text":"<p>Introducir el d\u00eda, mes, a\u00f1o. Crear una fecha a partir de los datos introducidos y comprobar e indicar si se trata de la fecha actual, si es una fecha pasada o una fecha futura.</p>"},{"location":"ud05/ud05ac/#actividad-12","title":"Actividad 12","text":"<p>Introducir una fecha de nacimiento de un empelado e indicar cu\u00e1ntos a\u00f1os tiene el empleado.</p>"},{"location":"ud05/ud05ac/#actividad-13","title":"Actividad 13","text":"<p>Introducir la fecha de caducidad de un producto e indicar si el producto est\u00e1 o no caducado. El valor por defecto ser\u00e1 la fecha actual y solo se podr\u00e1n introducir fechas del a\u00f1o en curso.</p>"},{"location":"ud05/ud05ac/#actividad-14","title":"Actividad 14","text":"<p>Mostrar una fecha con formato dd/mm/aaaa utilizando 0 delante de los d\u00edas o meses de 1 d\u00edgito.</p>"},{"location":"ud05/ud05ac/#actividad-15","title":"Actividad 15","text":"<p>Mostrar una fecha con formato <code>DiaSemana</code>, <code>DiaMes</code> de <code>Mes</code> del <code>A\u00f1o</code> a las <code>horas:minutos:segundos</code>. Por ejemplo: Miercoles, 9 de Diciembre del 2015 a las 18:45:32</p>"},{"location":"ud05/ud05ac/#actividad-16","title":"Actividad 16","text":"<p>Suma 10 a\u00f1os, 4 meses y 5 d\u00edas a la fecha actual.</p> Bash<pre><code>Hoy es: dijous, 03 de mar\u00e7 del 2022\nDentro de 10 a\u00f1os, 4 meses y 5 dias ser\u00e1: dijous, 08 de juliol del 2032\n</code></pre>"},{"location":"ud05/ud05ac/#actividad-17","title":"Actividad 17","text":"<p>Resta 5 a\u00f1os, 11 meses y 18 d\u00edas a la fecha actual.</p>"},{"location":"ud05/ud05ac/#actividad-18","title":"Actividad 18","text":"<p>Introducir el n\u00famero de horas trabajadas por un empleado y la fecha en las que las trabajo. Si el d\u00eda fue s\u00e1bado o domingo el precio hora trabajada es 20\u20ac en caso contrario 15\u20ac. Calcula la cantidad de dinero que habr\u00e1 que pagar al empleado por las horas trabajadas.</p>"},{"location":"ud05/ud05ac/#actividad-19","title":"Actividad 19","text":"<p>Introducir la fecha inicial y final de una n\u00f3mina y calcular lo que debe cobrar el empleado sabiendo que cada d\u00eda trabajado recibe 55 \u20ac y tiene una retenci\u00f3n del 12% sobre el sueldo.</p>"},{"location":"ud05/ud05ac/#actividad-20","title":"Actividad 20","text":"<p>Crear una clase <code>Alumno</code> con los atributos <code>codigo</code>, <code>nombre</code>, <code>apellidos</code>, <code>fecha_nacimiento</code>, <code>calificacion</code>. La fecha de nacimiento deber\u00e1 introducirse como una fecha. Crear constructor, m\u00e9todos <code>setter</code> y <code>getter</code> y <code>toString</code>. Crear una instancia con los siguientes valores <code>1</code>, <code>'Luis'</code>, <code>'Mas Ros'</code>, <code>05/10/1990</code>, <code>7.5</code>. Mostrar los datos del alumno adem\u00e1s de su edad.</p> Bash<pre><code>Alumno{codigo=1, nombre=Luis, apellidos=Mas Ros, fecha=1990-10-05, calificacion=7.5, edad= 31}\n</code></pre>"},{"location":"ud05/ud05ac/#actividad-21","title":"Actividad 21","text":"<p>Introducir la fecha de entrega de un documento y nos diga si est\u00e1 dentro o fuera de plazo teniendo en cuenta que la fecha de entrega l\u00edmite es la fecha actual.</p>"},{"location":"ud05/ud05ac/#actividad-22","title":"Actividad 22","text":"<p>Introducir en un array <code>nombre</code>, <code>apellidos</code> y <code>sueldo</code> de varios trabajadores y la <code>fecha de alta</code> en la empresa. Las fechas deber\u00e1n introducirse como fechas. Recorrer el array y mostrar para cada trabajador la retenci\u00f3n que debe aplicarse sobre el sueldo teniendo en cuenta que los trabajadores incorporados antes de 1980 tienen una retenci\u00f3n del 20%, los trabajadores con fecha entre 1980 y 2000 una retenci\u00f3n del 15% y los trabajadores con fecha posterior al 2000 la retenci\u00f3n que aplicaremos ser\u00e1 el 5% del sueldo.</p>"},{"location":"ud05/ud05ac/#actividad-23","title":"Actividad 23","text":"<p>Realiza un m\u00e9todo est\u00e1tico que dada la <code>fecha de nacimiento</code> de una persona indique si es mayor de edad.</p>"},{"location":"ud05/ud05ac/#actividad-24","title":"Actividad 24","text":"<p>Realiza una clase <code>Conversor</code> que tenga las siguientes caracter\u00edsticas: Toma como par\u00e1metro en el constructor un valor entero. Tiene un m\u00e9todo <code>getNumero</code> que dependiendo del par\u00e1metro devolver\u00e1 el mismo n\u00famero en el siguiente <code>B Binario</code>, <code>H Hexadecimal</code>, <code>O Octal</code>. Realiza un m\u00e9todo <code>main</code> en la clase para probar todo lo anterior.</p>"},{"location":"ud05/ud05ac/#actividad-25","title":"Actividad 25","text":"<p>Realiza una clase <code>ConversorFechas</code> que tenga los siguientes m\u00e9todos:</p> <ul> <li><code>String normalToAmericano(String)</code>. Este m\u00e9todo convierte una fecha en formato normal <code>dd/mm/yyyy</code> a formato americano <code>mm/dd/yyyy</code></li> <li><code>String americanoToNormal(String)</code>. Este m\u00e9todo realiza el paso contrario, convierte fechas en formato americano a formato normal.</li> </ul>"},{"location":"ud05/ud05pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li> <p>Curso Java. POO I. V\u00eddeo 27</p> </li> <li> <p>Curso Java. POO II. V\u00eddeo 28</p> </li> <li>Curso Java. POO III. V\u00eddeo 29</li> <li>Curso Java POO VI. Construcci\u00f3n objetos. V\u00eddeo 32</li> <li>Curso Java POO VII. Construcci\u00f3n objetos II. V\u00eddeo 33</li> <li>Curso Java POO VIII. Construcci\u00f3n objetos III. V\u00eddeo 34</li> <li>Curso Java POO IX. Construcci\u00f3n objetos IV. V\u00eddeo 35</li> <li>Curso Java. Constantes Uso final. V\u00eddeo 36</li> <li>Curso Java . Uso static. V\u00eddeo 37</li> <li>Curso Java. M\u00e9todos static. V\u00eddeo 38</li> <li>Curso Java. Sobrecarga de constructores. V\u00eddeo 39</li> <li>Curso Java. Modificadores de acceso. Clase Object. V\u00eddeo 47</li> <li>Curso Java Excepciones V. Cl\u00e1usula throw. V\u00eddeo 146</li> </ul>"},{"location":"ud05/ud05re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</p> </li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> </ul>"},{"location":"ud06/ud0601/","title":"6.1 Streams (flujos)","text":"<p>Los programas Java realizan las operaciones de entrada y salida a trav\u00e9s de lo que se denominan streams (traducido: flujos). </p> <p>Un stream es una abstracci\u00f3n de todo aquello que produzca o consuma informaci\u00f3n. Podemos ver a este stream como una entidad l\u00f3gica que, por otra parte, se encontrar\u00e1 vinculado con un dispositivo f\u00edsico. La eficacia de esta forma de implementaci\u00f3n radica en que las operaciones de entrada y salida que el programador necesita manejar son las mismas independientemente del dispositivo con el que estemos actuando. Ser\u00e1 Java quien se encargue de manejar el dispositivo concreto, ya se trate del teclado, el monitor, un sistema de ficheros o un socket de red, etc., liberando a nuestro c\u00f3digo de tener que saber con qui\u00e9n est\u00e1 interactuando.</p>"},{"location":"ud06/ud0601/#clasificacion-de-los-streams","title":"Clasificaci\u00f3n de los Streams","text":"<p>En Java los streams se materializan en un conjunto de clases y subclases, contenidas en el paquete <code>java.io</code>. Todas las clases para manejar streams parten, de cuatro clases abstractas: </p> <ul> <li><code>InputStream</code></li> <li><code>OutputStream</code></li> <li><code>Reader</code></li> <li><code>Writer</code></li> </ul> Streams Orientados a car\u00e1cter Orientados a bytes Para lectura Reader InputStream Para escritura Writer OutputStream"},{"location":"ud06/ud0601/#streams-orientados-a-byte-byte-streams","title":"Streams orientados a byte (byte streams)","text":"<p>Proporcionan un medio adecuado para el manejo de entradas y salidas de bytes y su uso l\u00f3gicamente est\u00e1 orientado a la lectura y escritura de datos binarios. El tratamiento del flujo de bytes viene gobernado por dos clases abstractas que son <code>InputStream</code> y <code>OutputStream</code>. </p> <p>Cada una de estas clases abstractas tiene varias subclases concretas que controlan las diferencias entre los distintos dispositivos de I/O que se pueden utilizar. As\u00ed mismo, estas dos clases son las que definen los m\u00e9todos que sus subclases tendr\u00e1n implementados y, de entre todas, destacan las operaciones <code>read()</code> y <code>write()</code> que leen y escriben bytes de datos respectivamente.</p> <p></p>"},{"location":"ud06/ud0601/#streams-orientados-a-caracter-character-streams","title":"Streams orientados a car\u00e1cter (character streams)","text":"<p>Proporciona un medio conveniente para el manejo de entradas y salidas de caracteres. Dichos flujos usan codificaci\u00f3n Unicode y, por tanto, se pueden internacionalizar. </p> <p> </p> <p>Este es un modo que Java nos proporciona para manejar caracteres, pero al nivel m\u00e1s bajo todas las operaciones de I/O son orientadas a byte. Al igual que el anterior, el flujo de caracteres tambi\u00e9n viene gobernado por dos clases abstractas: <code>Reader</code> y <code>Writer</code>. Dichas clases manejan flujos de caracteres Unicode; y tambi\u00e9n de ellas derivan subclases concretas que implementan los m\u00e9todos definidos en ellas siendo los m\u00e1s destacados los m\u00e9todos <code>read()</code> y <code>write()</code> que, en este caso, leen y escriben caracteres de datos respectivamente.</p> <p></p> <p>Como hemos comentado, tanto en <code>Reader</code> como en <code>InputStream</code> encontramos un m\u00e9todo <code>read()</code>, en concreto public int read(). Observar la diferencia entre estos dos m\u00e9todos nos ayudar\u00e1 a comprender la diferencia entre los flujos orientados a byte y los orientados a car\u00e1cter. </p> m\u00e9todo devuelve <code>int InputStream.read()</code> valor entre 0 y 255 <code>int Reader.read()</code> valor entre 0 y 65535 <p>A pesar de llamarse igual, <code>InputStream.read()</code> devuelve el siguiente byte de datos le\u00eddo del stream. El valor que devuelve est\u00e1 entre 0 y 255 (\u00f3 -1 si se ha llegado al final del stream). <code>Reader.read()</code>, sin embargo, devuelve un valor entre 0 y 65535 (\u00f3 -1 si se ha llegado al final del stream), correspondiente al siguiente car\u00e1cter simple le\u00eddo del stream.</p>"},{"location":"ud06/ud0601/#stream-estandar","title":"Stream est\u00e1ndar","text":"<p>Existen una serie de stream de uso com\u00fan a los cuales se denomina stream est\u00e1ndar. El sistema se encarga de crear estos stream autom\u00e1ticamente. </p> <ul> <li><code>System.in</code></li> <li>Instancia de la clase <code>InputStream</code>: flujo de bytes de entrada.</li> <li>M\u00e9todos:<ul> <li><code>read()</code> permite leer un byte de la entrada como entero.</li> <li><code>skip(n)</code> ignora <code>n</code> bytes de la entrada.</li> <li><code>available()</code> n\u00famero de bytes disponibles para leer en la entrada.</li> </ul> </li> <li><code>System.out</code></li> <li>Instancia de la clase <code>PrintStream</code>: flujo de bytes de salida.</li> <li>M\u00e9todos:<ul> <li>para impresi\u00f3n de datos: <code>print()</code>, <code>println()</code>.</li> <li><code>flush()</code> vac\u00eda el buffer de salida escribiendo su contenido.</li> </ul> </li> <li><code>System.err</code></li> <li>Funcionamiento similar a <code>System.out</code>.</li> <li>Se utiliza para enviar mensajes de error (por ejemplo a un fichero de log o a la consola).</li> </ul> <p> </p> <p>Por defecto, <code>System.in</code>, <code>System.out</code> y <code>System.err</code> se encuentran asociados a la consola (teclado y pantalla), pero es posible redirigirlos a otras fuentes o destinos, como por ejemplo a un fichero.</p>"},{"location":"ud06/ud0601/#utilizacion-de-streams","title":"Utilizaci\u00f3n de Streams","text":"<p>Para utilizar un stream hay que seguir una serie de pasos:</p> <ul> <li> <p>Lectura:</p> </li> <li> <p>Abrir el stream asociado a una fuente de datos (creaci\u00f3n del objeto stream):</p> <ul> <li> <p>Teclado.</p> </li> <li> <p>Fichero.</p> </li> <li> <p>Socket remoto.</p> </li> </ul> </li> <li> <p>Mientras existan datos disponibles:</p> <ul> <li>Leer datos.</li> </ul> </li> <li> <p>Cerrar el stream (m\u00e9todo <code>close</code>).</p> </li> <li> <p>Escritura:</p> </li> <li> <p>Abrir el stream asociado a una fuente de datos (creaci\u00f3n del objeto stream):</p> <ul> <li> <p>Pantalla.</p> </li> <li> <p>Fichero.</p> </li> <li> <p>Socket local.</p> </li> </ul> </li> <li> <p>Mientras existan datos disponibles:</p> <ul> <li>Escribir datos.</li> </ul> </li> <li> <p>Cerrar el stream (m\u00e9todo <code>close</code>).</p> </li> </ul> <p> </p> <ul> <li>Los streams est\u00e1ndar ya se encarga el sistema de abrirlos y cerrarlos.</li> <li>Un fallo en cualquier punto del proceso produce una <code>IOException</code>.</li> </ul>"},{"location":"ud06/ud0601/#las-clases-inputstream-y-outputstream","title":"Las clases <code>InputStream</code> y <code>OutputStream</code>","text":"<p>Como hemos dicho anteriormente, proporcionan m\u00e9todos para leer y escribir, respectivamente, un byte de informaci\u00f3n, a trav\u00e9s de sus m\u00e9todos <code>read()</code> y <code>write()</code>.</p> clase m\u00e9todos descripci\u00f3n <code>InputStream</code> <code>int read()</code> Lee un byte de informaci\u00f3n y lo devuelve como un entero cuyo valor estar\u00e1 entre 0 y 255.Si se detecta el final de los datos de entrada devuelve -1. <code>OutputStream</code> <code>write (int b)</code> Escribe un byte de informaci\u00f3n en el stream. El par\u00e1metro es entero, pero si su valor es superior a 255 se escriben los 8 bits de menos peso (los m\u00e1s a la derecha)."},{"location":"ud06/ud0601/#las-clases-reader-y-writer","title":"Las clases <code>Reader</code> y <code>Writer</code>","text":"<p>Permiten, respectivamente, leer y escribir un car\u00e1cter en el stream.</p> clase m\u00e9todos descripci\u00f3n <code>Reader</code> <code>int read()</code> Lee un car\u00e1cter unicode de informaci\u00f3n y lo devuelve como un entero cuyo valor estar\u00e1 entre 0 y 65565.Si se detecta el final de los datos de entrada devuelve -1. <code>Writer</code> <code>write (int c)</code> Escribe un car\u00e1cter unicode en el stream. El par\u00e1metro es entero y corresponder\u00e1 al c\u00f3digo Unicode del car\u00e1cter que se escribe."},{"location":"ud06/ud0601/#las-clases-inputstreamreader-y-outputstreamwriter","title":"Las clases <code>InputStreamReader</code> y <code>OutputStreamWriter</code>","text":"<p>Son clases que act\u00faan de puente entre streams orientados a bytes y streams orientados a car\u00e1cter. Podemos, por ejemplo, crear un <code>InputStreamReader</code> asociado a un <code>InputStream</code> y leer caracteres del <code>InputStream</code> asociado, a trav\u00e9s del <code>InputStreamReader</code>.</p> clase m\u00e9todos descripci\u00f3n <code>InputStreamReader</code> <code>InputStreamReader(inputStream)</code> <code>int read()</code> Constructor: El objeto se crea a partir de un <code>InputStream</code> (orientado a byte). Leer\u00e1 informaci\u00f3n del <code>inputStream</code> asociado y la devolver\u00e1 en forma de caracteres. Se puede indicar el charset a utilizar.Lee un car\u00e1cter del <code>InputStream</code> asociado. <code>OutputStreamWriter</code> <code>OutputStreamWriter(outputStream)</code><code>write(int c)</code> Constructor: Crea el objeto asoci\u00e1ndolo a un <code>outputStream</code>, en el que escribir\u00e1 bytes. Se puede indicar el charset a utilizar.Escribe el car\u00e1cter indicado en el <code>OutputStream</code> asociado."},{"location":"ud06/ud0601/#buffering","title":"Buffering","text":"<p>Las clases <code>BufferedReader</code>, <code>BufferedWritter</code>, <code>BufferedInputStream</code> y <code>BufferedOutputStream</code> permiten realizar buffering.</p> <p>Situadas \"por delante\" de un stream acumulan las operaciones de lectura y escritura en una memoria o buffer y cuando hay suficiente informaci\u00f3n las operaciones se realizan finalmente sobre el dispositivo f\u00edsico.</p> <p>Mantienen las mismas operaciones de lectura y escritura que sus clases padre pero, como hemos dicho, reducen el n\u00famero de accesos al dispositivo f\u00edsico por el uso de buffers.</p> clase m\u00e9todos descripci\u00f3n <code>BufferedReader</code> <code>BufferedWriter</code> <code>String readLine()</code><code>void write(String s)</code><code>void newLine()</code> Adem\u00e1s de los m\u00e9todos heredados, encontramos otros que permiten leer Strings completos, escribir una l\u00ednea completa de texto y hacer saltos de l\u00ednea. <code>BufferedInputStream</code> <code>BufferedOutputStream</code> Mantienen las mismas operaciones de lectura y escritura que sus clases padre pero, como hemos dicho, reducen el n\u00famero de accesos al dispositivo f\u00edsico por el uso de buffers."},{"location":"ud06/ud0601/#datainputstream-y-dataoutputstream","title":"<code>DataInputStream</code> y <code>DataOutputStream</code>","text":"<p>Realizan una transformaci\u00f3n de la informaci\u00f3n antes de ser escrita o despu\u00e9s de ser le\u00edda. Los bytes le\u00eddos o escritos se interpretan como datos correspondientes a los tipos primitivos de Java.</p> clase m\u00e9todos descripci\u00f3n <code>DataInputStream</code><code>DataOutputStream</code> <code>read()</code>,<code>readInt()</code>, <code>readDouble()</code>, <code>readUTF()</code><code>write()</code>,<code>writeInt()</code>,<code>writeDouble()</code>,<code>writeUTF()</code> \u2026 Que permiten leer y escribir informaci\u00f3n correspondiente a los distintos tipos de datos de Java."},{"location":"ud06/ud0601/#printwriter","title":"<code>PrintWriter</code>","text":"clase m\u00e9todos descripci\u00f3n <code>PrintWriter</code> <code>print()</code> <code>println()</code> Esta clase (a la que pertenece <code>System.out</code>) tiene los m\u00e9todos <code>print</code> y <code>println</code>, que escriben en el stream de salida datos binarios representados en forma de cadenas de caracteres."},{"location":"ud06/ud0601/#combinacion-de-streams","title":"Combinaci\u00f3n de Streams","text":"<p>En muchas ocasiones, una sola clase de las vistas no nos da la funcionalidad necesaria para poder hacer la tarea que se requiere. En tales casos es necesario combinar (anidar) varios Streams de manera que unos act\u00faan como origen de informaci\u00f3n de los otros, o unos escriben sobre los otros.</p> <p>En este caso tendr\u00edamos que combinar tres clases:</p> Java<pre><code>BufferedReader b = new BufferedReader(new InputStreamReader(System.in));\n</code></pre> Ejemplo: est\u00e1ndar de entrada <p>Veamos un ejemplo en el que se lee por teclado hasta pulsar la tecla de retorno, en ese momento el programa acabar\u00e1 imprimiendo por la salida est\u00e1ndar la cadena le\u00edda. Para ir construyendo la cadena con los caracteres le\u00eddos podr\u00edamos usar la clase <code>StringBuffer</code> o la <code>StringBuilder</code>. La clase <code>StringBuffer</code> permite almacenar cadenas que cambiar\u00e1n en la ejecuci\u00f3n del programa. <code>StringBuilder</code> es similar, pero no es s\u00edncrona. De este modo, para la mayor\u00eda de las aplicaciones, donde se ejecuta un solo hilo, supone una mejora de rendimiento sobre <code>StringBuffer</code>. El proceso de lectura ha de estar en un bloque <code>try..catch</code>. Java<pre><code>package UD06.P1_Flujos;\n\nimport java.io.IOException;\n\npublic class P1_1_FlujoEstandarEntrada {\n\n  public static void main(String[] args) {\n    // Cadena donde iremos almacenando los caracteres que se escriban\n    StringBuilder str = new StringBuilder();\n    char c;\n    // Por si ocurre una excepci\u00f3n ponemos el bloque try-cath\n    try {\n       // Mientras la entrada de terclado no sea Intro\n       while ((c = (char) System.in.read()) != '\\n') {\n          // A\u00f1adir el character le\u00eddo a la cadena str\n          str.append(c);\n       }\n    } catch (IOException ex) {\n       System.out.println(\"ERROR: \" + ex.getMessage());\n    }\n    // Escribir la cadena que se ha ido tecleando\n    System.out.println(\"Cadena introducida: \" + str);\n  }\n}\n</code></pre></p> Ejemplo: est\u00e1ndar de salida <p>En el siguiente ejemplo se pide introducir texto hasta que se introduzca una l\u00ednea con el texto \"salir\". Dicho texto se almacenar\u00e1 en un fichero <code>salida.txt</code>. El proceso debe de estar en un bloque <code>try..catch</code>. Java<pre><code>package UD06.P1_Flujos;\n\nimport java.io.BufferedReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\n\npublic class P1_2_FlujoEstandarSalida {\n\n  public static void main(String[] args) {\n    try {\n      PrintWriter out = new PrintWriter(new FileWriter(\"salida.txt\", true));\n      BufferedReader br = new BufferedReader(\n                                new InputStreamReader(System.in));\n      String s;\n      while (!(s = br.readLine()).equals(\"salir\")) {\n         out.println(s);\n      }\n      out.close();\n    } catch (IOException ex) {\n      System.out.println(\"Error: \" + ex.getMessage());\n    }\n  }\n}\n</code></pre></p>"},{"location":"ud06/ud0602/","title":"6.2 Ficheros","text":"<p>En ocasiones necesitamos que los datos que introduce el usuario o que produce un programa persistan cuando \u00e9ste finaliza; es decir, que se conserven cuando el programa termina su ejecuci\u00f3n. Para ello es necesario el uso de una base de datos o de ficheros, que permitan guardar los datos en un almacenamiento secundario como un pendrive, disco duro, DVD, etc.</p> <p>Abordaremos distintos aspectos relacionados con el almacenamiento en ficheros: </p> <ul> <li>Introducci\u00f3n a conceptos b\u00e1sicos como los de registro y campo.</li> <li>Clasificaci\u00f3n de los ficheros seg\u00fan el contenido y forma de acceso.</li> <li>Operaciones b\u00e1sicas con ficheros de distinto tipo.</li> </ul>"},{"location":"ud06/ud0602/#registros-y-campos","title":"Registros y campos","text":"<p>Llamamos campo a un dato en particular almacenado en una base de datos o fichero. Un campo puede ser el nombre de un cliente, la fecha de nacimiento de un alumno, el n\u00famero de tel\u00e9fono de un comercio. Los campos pueden ser de distintos tipos: alfanum\u00e9ricos, num\u00e9ricos, fechas, etc.</p> <p>La agrupaci\u00f3n de uno o m\u00e1s campos forman un registro. Un registro de alumno podr\u00eda consistir, por ejemplo, de los siguientes campos:</p> Text Only<pre><code>1. N\u00famero de expediente.\n2. Nombre y apellidos.\n3. Domicilio.\n</code></pre> <p>Un fichero puede estar formado por registros, lo cual dotar\u00eda al archivo de estructura. En un fichero de alumnos tendr\u00edamos un registro por cada alumno. Los campos del registro ser\u00edan cada uno de los datos que se almacena del alumno: n\u00ba expediente, nombre, etc \u2026</p> <p>En Java no existen espec\u00edficamente los conceptos de campo y registro. Lo m\u00e1s similar que conocemos son las clases (similares a un registro) y, dentro de las clases, los atributos (similares a campos). </p> <p>Tampoco en Java los ficheros est\u00e1n formados por registros. Java considera los archivos simplemente como flujos secuenciales de bytes. Cuando se abre un fichero se asocia a \u00e9l un flujo (stream) a trav\u00e9s del cual se lee o escribe en el fichero.</p> <p>Ejemplo de fichero:</p> <p><code>txt 65255 Jos\u00e9 Mateo Ruiz C/ Paz, \u2026 56488 \u00c1ngela Lopez Villa Av. Blas.. 24645 Armando Garc\u00eda Ledesma C/ Tuej \u2026</code></p> <p>Ejemplo de registro en el fichero anterior:</p> <p><code>txt 24645 Armando Garc\u00eda Ledesma C/ Tuej \u2026</code></p> <p>Ejemplo de campo en el registro anterior:</p> <p><code>txt Armando Garc\u00eda Ledesma</code></p>"},{"location":"ud06/ud0602/#ficheros-de-texto-vs-ficheros-binarios","title":"Ficheros de texto VS ficheros binarios","text":"<p>Desde un punto de vista a muy bajo nivel, un fichero es un conjunto de bits almacenados en memoria secundaria, accesibles a trav\u00e9s de una ruta y un nombre de archivo. </p> <p>Este punto de vista a bajo nivel es demasiado simple, pues cuando se recupera y trata la informaci\u00f3n que contiene el fichero, esos bits se agrupan en unidades mayores que las dotan de significado. As\u00ed, dependiendo de cu\u00e1l es el contenido del fichero (de c\u00f3mo se interpretan los bits que contiene el fichero), podemos distinguir dos tipos de ficheros:</p> <ul> <li>Ficheros de texto (o de caracteres).</li> <li>Ficheros binarios (o de bytes).</li> </ul> <p>Un fichero de texto est\u00e1 formado \u00fanicamente por caracteres. Los bits que contiene se interpretan atendiendo a una tabla de caracteres, ya sea ASCII o Unicode. Este tipo de ficheros se pueden abrir con un editor de texto plano y son, en general, legibles. Por ejemplo, los ficheros <code>.java</code> que contienen los programas que elaboramos, son ficheros de texto.</p> <p>Por otro lado, los ficheros binarios contienen secuencias de bytes que se agrupan para representar otro tipo de informaci\u00f3n: n\u00fameros, sonidos, im\u00e1genes, etc. Un fichero binario se puede abrir tambi\u00e9n con un editor de texto plano pero, en este caso, el contenido ser\u00e1 ininteligible. Existen muchos ejemplos de ficheros binarios: el archivo <code>.exe</code> que contiene la versi\u00f3n ejecutable de un programa es un fichero binario.</p> <p>Las operaciones de lectura/escritura que utilizamos al acceder desde un programa a un fichero de texto est\u00e1n orientadas al car\u00e1cter: leer o escribir un car\u00e1cter, una secuencia de caracteres, una l\u00ednea de texto, etc. En cambio las operaciones de lectura/escritura en ficheros binarios est\u00e1n orientadas a byte: se leen o escriben datos binarios, como enteros, bytes, double, etc.</p>"},{"location":"ud06/ud0602/#acceso-secuencial-vs-acceso-directo","title":"Acceso secuencial VS acceso directo","text":"<p>Existen dos maneras de acceder a la informaci\u00f3n que contiene un fichero:</p> <ul> <li>Acceso secuencial.</li> <li>Acceso directo (o aleatorio).</li> </ul> <p>Con acceso secuencial, para poder leer el byte que se encuentra en determinada posici\u00f3n del archivo es necesario leer, previamente, todos los bytes anteriores. Al escribir, los datos se sit\u00faan en el archivo uno a continuaci\u00f3n del otro, en el mismo orden en que se introducen. Es decir, la nueva informaci\u00f3n se coloca en el archivo a continuaci\u00f3n de la que ya existe. No es posible realizar modificaciones de los datos existentes, tan solo a\u00f1adir al final.</p> <p>Sin embargo, con el acceso directo, es posible acceder a determinada posici\u00f3n (direcci\u00f3n) del fichero de manera directa y, posteriormente, hacer la operaci\u00f3n de lectura o escritura deseada.</p> <p>No siempre es necesario realizar un acceso directo a un archivo. En muchas ocasiones el procesamiento que realizamos de sus datos consiste en la escritura o lectura de todo el archivo siguiendo el orden en que se encuentran. Para ello basta con un acceso secuencial.</p>"},{"location":"ud06/ud0602/#streams-para-trabajar-con-ficheros","title":"Streams para trabajar con ficheros","text":"<p>Para trabajar con ficheros disponemos de las siguientes clases:</p> Streams para ficheros Ficheros binarios Ficheros de texto Para lectura <code>FileInputStream</code> <code>FileReader</code> Para escritura <code>FileOutputStream</code> <code>FileWriter</code> <ul> <li><code>FileReader</code> permite leer de un fichero uno o varios caracteres.</li> <li><code>FileWriter</code> permite escribir en un fichero uno o varios caracteres o un String.</li> <li><code>FileInputStream</code> permite leer bytes de un fichero.</li> <li><code>FileOutputStream</code> permite escribir bytes de un fichero.</li> </ul> <p>Consulta</p> <p>Consulta en la documentaci\u00f3n los distintos constructores disponibles para estas clases.</p> Ejemplo: crear un fichero <p>En el siguiente ejemplo vemos c\u00f3mo crear un fichero de texto y escribir una frase en \u00e9l. Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\n\npublic class P2_1_CrearFichero {\n\n    public static void main(String[] args) {\n        FileWriter f = null;\n        try {\n            f = new FileWriter(\"texto.txt\");\n            f.write(\"Este texto se escribe en el fichero\\n\\r\");\n        } catch (IOException e) {\n            System.out.println(\"Problema al abrir o escribir \");\n        } finally {\n            if (f != null) {\n                try {\n                    f.close();\n                } catch (IOException e) {\n                    System.out.println(\"Problema al cerrar el fichero\");\n                }\n            }\n        }\n    }\n}\n</code></pre> La creaci\u00f3n del <code>FileWriter</code> puede provocar <code>IOException</code>, lo mismo que el m\u00e9todo <code>write</code>. Por ello las instrucciones se encuentran en un bloque <code>try-catch</code>. Al finalizar su uso, y tan pronto como sea posible, hay que cerrar los streams (<code>close</code>) .</p> Ejemplo: sobreescribir un fichero <p>Es muy importante tener en cuenta que cuando se crea un <code>FileWriter</code> o un <code>FileOutputStream</code> y se escribe en \u00e9l: - si el fichero no existe se crea. - si el fichero existe, su contenido se reemplaza por el nuevo. El contenido previo que tuviera el fichero se pierde.  Vamos a ver una serie de ejemplos que muestren c\u00f3mo leer y escribir secuencialmente sobre/en un fichero y tambi\u00e9n escribir en un fichero indicando que la informaci\u00f3n se a\u00f1ada a la que ya hay y no se reescriba el fichero. Para esto \u00faltimo usaremos el constructor de FileWriter que recibe dos par\u00e1metros; el primer par\u00e1metro es el nombre del fichero y el segundo par\u00e1metro, <code>append</code>, lo pasaremos con el valor true. El siguiente ejemplo muestra como a\u00f1adir una l\u00ednea al final de un fichero de texto. Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\n\npublic class P2_2_SobreescribirFichero {\n\n    public static void main(String[] args) {\n        try (FileWriter f = new FileWriter(\"texto.txt\", true);) {\n            f.write(\"Este texto se a\u00f1ade en el fichero\\n\\r\");\n\n        } catch (IOException e) {\n            System.out.println(\"Problema al abrir o escribir \");\n        }\n    }\n}\n</code></pre></p> <p>En este ejemplo se ha utilizado la nueva sintaxis disponible para los bloques try-catch: lo que se denomina <code>try with resource</code>. Esta sintaxis permite crear un objeto en la cabecera del bloque try. El objeto creado se cerrar\u00e1 autom\u00e1ticamente al finalizar. El objeto debe pertenecer al interface Closeable, es decir, debe tener m\u00e9todo close().</p>"},{"location":"ud06/ud0602/#lectura-y-escritura-de-informacion-estructurada","title":"Lectura y escritura de informaci\u00f3n estructurada","text":"<p>Si observamos la documentaci\u00f3n de las clases <code>FileInputStream</code> y <code>FileOutputStream</code> veremos que las operaciones de lectura y escritura son muy b\u00e1sicas y permiten \u00fanicamente leer o escribir uno o varios bytes. Es decir, son operaciones de muy bajo nivel. Si lo que queremos es escribir informaci\u00f3n binaria m\u00e1s compleja, como por ejemplo un dato de tipo <code>double</code>, <code>boolean</code> o <code>int</code>, tendr\u00edamos que hacerlo a trav\u00e9s de un stream que permitiese ese tipo de operaciones y asociarlo al <code>FileInputStream</code> o <code>FileOutputStream</code>. </p> <p>Podr\u00edamos, por ejemplo, asociar un <code>DataInputStream</code> a un <code>FileInputStream</code> para leer del fichero un dato de tipo <code>int</code>.</p> <p>En ejemplos posteriores se ilustrar\u00e1 c\u00f3mo asociar un stream a un <code>File\u2026Stream</code>.</p> Ejemplo: lectura de un fichero secuencial de texto <p>Leer un fichero de texto y mostrar el n\u00famero de vocales que contiene. Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\n\npublic class P2_3_LecturaSecuencialTexto {\n\n    final static String VOCALES = \"a\u00e1\u00e0e\u00e9\u00e9i\u00edo\u00f3\u00f2u\u00fa\u00fcA\u00c1\u00c0E\u00c9\u00c8I\u00cdO\u00d3\u00d2U\u00da\u00dc\";\n\n    public static void main(String[] args) {\n        try (FileReader f = new FileReader(new File(\"texto.txt\"));) {\n            int contadorVocales = 0;\n            int caracter;\n            while ((caracter = f.read()) != -1) {\n                char letra = (char) caracter;\n                if (VOCALES.indexOf(letra) != -1) {\n                    contadorVocales++;\n                }\n            }\n            System.out.println(\"Numero de vocales: \" + contadorVocales);\n        } catch (FileNotFoundException e) {\n            System.out.println(\"ERROR: Probrema al abrir el fichero\");\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Problema al leer\");\n        }\n    }\n}\n</code></pre> Observa que: - Para leer el fichero de texto usamos un <code>InputReader</code>. - Al crear el stream (<code>InputReader</code>) es posible indicar un objeto de tipo <code>File</code>. - La operaci\u00f3n <code>read()</code> devuelve un entero. Para obtener el car\u00e1cter correspondiente tenemos que hacer una conversi\u00f3n expl\u00edcita de tipos. - La operaci\u00f3n <code>read()</code> devuelve -1 cuando no queda informaci\u00f3n que leer del stream. - La guarda del bucle <code>while</code> combina una asignaci\u00f3n con una comparaci\u00f3n. En primer lugar se realiza la asignaci\u00f3n y luego se compara car\u00e1cter con -1. - <code>FileNotFoundException</code> sucede cuando el fichero no se puede abrir (no existe, permiso denegado, etc), mientras que <code>IOException</code> se lanzar\u00e1 si falla la operaci\u00f3n <code>read().</code></p> Ejemplo: escritura de un fichero secuencial de texto <p>Dada una cadena escribirla en un fichero en orden inverso: Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\n\npublic class P2_4_EscrituraSecuencialTexto {\n\n    final static String CADENA = \"En un lugar de la mancha...\";\n\n    public static void main(String[] args) {\n        try (FileWriter f = new FileWriter(new File(\"texto.txt\"));) {\n            for (int i = CADENA.length() - 1; i &gt;= 0; i--) {\n                f.write(CADENA.charAt(i));\n            }\n            System.out.println(\"FIN\");\n        } catch (FileNotFoundException e) {\n            System.out.println(\"ERROR: Probrema al abrir el fichero\");\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Problema al escribir\");\n        }\n    }\n}\n</code></pre> Observa que: - Para escribir el fichero de texto usamos un <code>FileWriter</code>. - Tal y como se ha creado el stream, el fichero (si ya existe) se sobreescribir\u00e1. - El manejo de excepciones es como el del caso previo.</p> Ejemplo: escritura de un fichero secuencial binario <p>Ya hemos visto que con <code>FileInputStream</code> y <code>FileOutputStream</code> se puede leer y escribir bytes de informaci\u00f3n de/a un archivo. Sin embargo esto puede no ser suficiente cuando la informaci\u00f3n que tenemos que leer o escribir es m\u00e1s compleja y los bytes se agrupan para representar distintos tipos de datos. Imaginemos por ejemplo que queremos guardar en un fichero \u201cjugadores.dat\u201d, el a\u00f1o de nacimiento y la estatura de cinco jugadores de baloncesto: Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class P2_6_EscrituraSecuencialBinario {\n\n  public static void main(String[] args) {\n     Scanner tec = new Scanner(System.in);\n     try (DataOutputStream fs = new DataOutputStream(\n                                  new BufferedOutputStream(\n                                    new FileOutputStream(\"jugadores.dat\")));) {\n         for (int i = 1; i &lt;= 5; i++) {\n            //Pedimos datos al usuario\n            System.out.println(\" ---- Jugador \" + i + \" -----\");\n            System.out.print(\"Nombre: \");\n            String nombre = tec.nextLine();\n\n            System.out.print(\"Nacimiento: \");\n            int anyo = tec.nextInt();\n\n            System.out.print(\"Estatura: \");\n            double est = tec.nextDouble();\n            //Vaciar salto linea\n            tec.nextLine();\n\n            //Volcamos informaci\u00f3n al fichero\n            fs.writeUTF(nombre);\n            fs.writeInt(anyo);\n            fs.writeDouble(est);\n         }\n      } catch (FileNotFoundException e) {\n          System.out.println(\"ERROR: Probrema al abrir el fichero\");\n      } catch (IOException e) {\n          System.out.println(\"ERROR: Problema al leer o escribir\");\n      }\n  }\n}\n</code></pre> Observa que: - Para escribir informaci\u00f3n binaria usamos un <code>DataInputStream</code> asociado al stream. La clase tiene m\u00e9todos para escribir <code>int</code>, <code>byte</code>, <code>double</code>, <code>boolean</code>, etc. - Adem\u00e1s, como hemos hecho en ejemplos previos, usamos un buffer. F\u00edjate como en el constructor se enlazan unas clases con otras. - A pesar de que en Java los ficheros son secuencias de bytes, estamos dotando al fichero de cierta estructura: primero aparece el nombre, luego el a\u00f1o y finalmente la estatura. Cada uno de estos tres datos constituir\u00edan un registro de formado por tres campos. Para poder recuperar informaci\u00f3n de un fichero binario es necesario conocer c\u00f3mo se estructura \u00e9sta dentro del fichero.</p> Ejemplo: lectura de un fichero secuencial binario <p>Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class P2_7_LecturaSecuencialBinario {\n\n  public static void main(String[] args) {\n     Scanner tec = new Scanner(System.in);\n     try (DataInputStream fe = new DataInputStream(\n                                new BufferedInputStream(\n                                 new FileInputStream(\"jugadores.dat\")));) {\n        while (true) {\n           //Leemos nombre\n           System.out.println(fe.readUTF());\n           //leemos y desechamos resto de datos\n           fe.readInt();\n           fe.readDouble();\n        }\n     } catch (EOFException e) {\n          //Se lanzar\u00e1 cuando se llegue al final del fichero\n     } catch (FileNotFoundException e) {\n          System.out.println(\"ERROR: Probrema al abrir el fichero\");\n     } catch (IOException e) {\n          System.out.println(\"ERROR: Problema al leer o escribir\");\n     }\n  }\n}\n</code></pre> Observa que: - A pesar de que necesitamos solamente el nombre de cada jugador, es necesario leer tambi\u00e9n el a\u00f1o y la estatura. No es posible acceder al nombre del segundo jugador sin leer previamente todos los datos del primer jugador.  - La lectura se hace a trav\u00e9s de un bucle infinito (<code>while (true)</code>), que finalizar\u00e1 cuando se llegue el final del fichero y al leer de nuevo se produzca la excepci\u00f3n <code>EOFException</code>.</p>"},{"location":"ud06/ud0602/#ficheros-con-buffering","title":"Ficheros con buffering","text":"<p>Cualquier operaci\u00f3n que implique acceder a memoria externa es muy costosa, por lo que es interesante intentar reducir al m\u00e1ximo las operaciones de lectura/escritura que realizamos sobre los ficheros, haciendo que cada operaci\u00f3n lea o escriba muchos caracteres. Adem\u00e1s, eso tambi\u00e9n permite operaciones de m\u00e1s alto nivel, como la de leer una l\u00ednea completa y devolverla en forma de cadena.</p> <p>En el libro Head First Java, describe los buffers de la siguiente forma: \"Si no hubiera buffers, ser\u00eda como comprar sin un carrito: deber\u00eda llevar los productos uno a uno hasta la caja. Los buffers te dan un lugar en el que dejar temporalmente las cosas hasta que est\u00e1 lleno. Por ello has de hacer menos viajes cuando usas el carrito.\"</p> <p>Las clases <code>BufferedReader</code>, <code>BufferedWritter</code>, <code>BufferedInputStream</code> y <code>BufferedOutputStream</code> permiten realizar buffering. Situadas \"por delante\" de un stream de fichero acumulan las operaciones de lectura y escritura y cuando hay suficiente informaci\u00f3n se llevan finalmente al fichero.</p> <p>Recuerda</p> <p>Recuerda la importancia de cerrar los flujos para asegurarte que se vac\u00eda el buffer.</p> Ejemplo: usando Buffers para leer y escribir de/en fichero <p>En el siguiente codigo se usan buffers para leer l\u00edneas de un fichero y escribirlas en otro convertidas a may\u00fasculas. Java<pre><code>package UD06.P2_Ficheros;\n\nimport java.io.*;\n\npublic class P2_5_Buffers {\n\n    final static String ENTRADA = \"texto.txt\";\n    final static String SALIDA = \"textoMayusculas.txt\";\n\n    public static void main(String[] args) {\n        try (BufferedReader fe = new BufferedReader(new FileReader(ENTRADA));\n             BufferedWriter fs = new BufferedWriter(new FileWriter(SALIDA))){\n            String linea;\n            while ((linea = fe.readLine()) != null) {\n                fs.write(linea.toUpperCase());\n                fs.newLine();\n            }\n            System.out.println(\"FIN\");\n        } catch (FileNotFoundException e) {\n            System.out.println(\"ERROR: Probrema al abrir el fichero\");\n        } catch (IOException e) {\n            System.out.println(\"ERROR: Problema al leer o escribir\");\n        }\n    }\n}\n</code></pre> Observa que: - Usamos buffers tanto para leer como para escribir. Esto permite minimizar los accesos a disco. - Los buffers quedan asociados a un <code>FileReader</code> y <code>FileWriter</code> respectivamente. Realizamos las operaciones de lectura/escritura sobre las clases <code>Buffered\u2026</code> y cuando es necesario la clase accede internamente al stream que maneja el fichero. - Es necesario escribir expl\u00edcitamente los saltos de l\u00ednea. Esto se hace mediante el m\u00e9todo <code>newLine()</code>. Este m\u00e9todo permite a\u00f1adir un salto de l\u00ednea sin preocuparnos de cu\u00e1l es el car\u00e1cter de salto de l\u00ednea. El salto de l\u00ednea es distinto en distintos sistemas: en unos es <code>\\n</code>, en otros <code>\\r</code>, en otros <code>\\n\\r</code>, \u2026  - <code>BufferedReader</code> dispone de un m\u00e9todo para leer l\u00edneas completas (<code>readLine()</code>). Cuando se llega al final del fichero este m\u00e9todo devuelve <code>null</code>. - F\u00edjate como en el bloque <code>try with resources</code> creamos varios objetos. Si la creaci\u00f3n de cualquiera de ellos falla, se cerrar\u00e1n todos los stream que se han abierto.</p>"},{"location":"ud06/ud0602/#try-vs-try-with-resources","title":"<code>try</code> VS <code>try with resources</code>","text":"<p>En ocasiones el propio IDE nos sugiere que usemos el bloque <code>try with resources</code> en lugar de un simple <code>try</code>, as\u00ed una sentencia como esta:</p> Java<pre><code>FileReader fr = new FileReader(path);\nBufferedReader br = new BufferedReader(fr);\ntry {\n    return br.readLine();\n} finally {\n    br.close();\n    fr.close();\n}\n</code></pre> <p>Acaba convertida en algo parecido a esta:</p> Java<pre><code>static String readFirstLineFromFile(String path) throws IOException {\n    try (FileReader fr = new FileReader(path);\n         BufferedReader br = new BufferedReader(fr)) {\n        return br.readLine();\n    }\n}   \n</code></pre> <p>.close ??</p> <p>La principal diferencia es que hasta Java 7 s\u00f3lo se pod\u00eda hacer como en la primera versi\u00f3n. Adem\u00e1s, en la segunda versi\u00f3n nos \"ahorramos\" tener que cerrar los recursos, puesto que lo realizar\u00e1 autom\u00e1ticamente en caso de que se produzca alg\u00fan error evitando as\u00ed el enmascaramiento de excepciones. Por tanto, sigue siendo necesario cerrar el stream por ejemplo al usar un Buffer para que se vac\u00ede totalmente en el fichero de destino.</p>"},{"location":"ud06/ud0603/","title":"6.3 Serializaci\u00f3n","text":"<p>Java facilita el almacenamiento y transmisi\u00f3n del estado de un objeto mediante un mecanismo conocido con el nombre de serializaci\u00f3n.</p> <p>La serializaci\u00f3n de un objeto consiste en generar una secuencia de bytes lista para su almacenamiento o transmisi\u00f3n. Despu\u00e9s, mediante la deserializaci\u00f3n, el estado original del objeto se puede reconstruir.</p> <p>Para que un objeto sea serializable, ha de implementar la interfaz <code>java.io.Serializable</code> (que lo \u00fanico que hace es marcar el objeto como serializable, sin que tengamos que implementar ning\u00fan m\u00e9todo).</p> Java<pre><code>import java.io.*;\n\npublic class Persona implements Serializable {\n\n    private String nombre;\n    transient private int edad; //No se guardar\u00e1 al serializar\n    private double salario;\n    private Persona tutor;\n[...]\n</code></pre> <p>Para que un objeto sea serializable, todas sus variables de instancia han de ser serializables.</p> <p>Todos los tipos primitivos en Java son serializables por defecto (igual que los arrays y otros muchos tipos est\u00e1ndar).</p> <p>Cuando queremos evitar que cualquier campo persista en un archivo, lo marcamos como transitorio (<code>transient</code>). No podemos marcar ning\u00fan m\u00e9todo transitorio, solo campos.</p> <p> </p> <p>El fichero con los objetos serializados almacena los datos en un formato propio de Java, por lo que no se puede leer f\u00e1cilmente con un simple editor de texto (ni editar).</p> Ejemplo: serializaci\u00f3n <p>Java<pre><code>package UD06.P3_Serializacion;\n\nimport java.io.*;\n\npublic class Persona implements Serializable {\n\n  private String nombre;\n  transient private int edad; //No se guardar\u00e1 al serializar\n  private double salario;\n  private Persona tutor;\n\n  public Persona(String nom, double salari) {\n     this.nombre = nom;\n     this.salario = salari;\n     edad = 0;\n     tutor = null;\n  }\n\n  public String getNombre() {\n     return nombre;\n  }\n\n  public int getEdad() {\n     return edad;\n  }\n\n  public double getSalario() {\n     return salario;\n  }\n\n  public Persona getTutor() {\n     return tutor;\n  }\n\n  public void incrementaEdad() {\n     edad++;\n  }\n\n  public void asignaTutor(Persona p) {\n     tutor = p;\n  }\n}\n</code></pre> Ahora detallamos la clase para serializar o guardar la informaci\u00f3n en un archivo: Java<pre><code>package UD06.P3_Serializacion;\n\nimport java.io.*;\n\npublic class Guardar {\n\n  public static void main(String args[]) {\n     ObjectOutputStream salida;\n     Persona p1, p2, p3, p4;\n\n     p1 = new Persona(\"Vicent\", 1200.0);\n     p2 = new Persona(\"Mireia\", 1800.0);\n     p3 = new Persona(\"Josep\", 2100.0);\n     p4 = new Persona(\"Marta\", 850.0);\n\n     p1.asignaTutor(p2);\n     p2.asignaTutor(p3);\n     p3.asignaTutor(p4);\n\n     try {\n        salida = new ObjectOutputStream(new FileOutputStream(\"empleados.ser\"));\n        salida.writeObject(p1);\n        salida.close();\n     } catch (IOException e) {\n        System.out.println(\"ERROR: Alg\u00fan problema guardando a disco.\");\n     }\n  }\n}\n</code></pre></p>"},{"location":"ud06/ud0604/","title":"6.4 Sockets","text":"<p>Los sockets son un mecanismo que nos permite establecer un enlace entre dos programas que se ejecutan independientes el uno del otro  (generalmente un programa cliente y un programa servidor). Java, por medio de la librer\u00eda <code>java.net</code>, nos provee dos clases: <code>Socket</code> para implementar la conexi\u00f3n desde el lado del cliente y <code>ServerSocket</code> que nos permitir\u00e1 manipular la conexi\u00f3n desde el lado del servidor.</p> <p>Cabe resaltar que tanto el cliente como el servidor no necesariamente deben estar implementados en Java, solo  deben conocer sus direcciones IP y el puerto por el cual se comunicar\u00e1n.</p> Ejemplo <p>Para nuestro ejemplo de sockets implementaremos ambos (cliente y servidor) usando Java y se comunicar\u00e1n usando el puerto 10000 (elegir puertos en el rango de 1024 hasta 65535). La secuencia de eventos en nuestro ejemplo ser\u00e1: 1. El servidor crear\u00e1 el socket y esperar\u00e1 a que el cliente se conecte o lo detengamos. 2. Por otro lado, el cliente abrir\u00e1 la conexi\u00f3n con el servidor y le enviar\u00e1 una frase en min\u00fasculas que escribir\u00e1 el usuario y la enviar\u00e1 al servidor. 3. Una vez recibida la frase en min\u00fasculas, el servidor la convertir\u00e1 en may\u00fasculas y la devolver\u00e1 al cliente. 4. El cliente mostrar\u00e1 la frase en may\u00fasculas recibida desde el servidor y cerrar\u00e1 la conexi\u00f3n. 5. El servidor quedar\u00e1 a la espera de una nueva conexi\u00f3n de otro cliente. Servidor Java<pre><code>package UD06.P4_Sockets;\n\nimport java.io.*;\nimport java.net.*;\n\npublic class TCPServidor {\n\n  public static void main(String[] args) throws IOException, ClassNotFoundException {\n    String FraseClient;\n    String FraseMajuscules;\n    ServerSocket serverSocket;\n    Socket clientSocket;\n    ObjectInputStream entrada;\n    ObjectOutputStream eixida;\n    serverSocket = new ServerSocket(10000);\n    System.out.println(\"Servidor iniciado y escuchando por el puerto 10000\");\n    while (true) {\n        clientSocket = serverSocket.accept();\n        entrada = new ObjectInputStream(clientSocket.getInputStream());\n        FraseClient = (String) entrada.readObject();\n\n        System.out.println(\"La frase recibida es: \" + FraseClient);\n\n        eixida = new ObjectOutputStream(clientSocket.getOutputStream());\n        FraseMajuscules = FraseClient.toUpperCase();\n        System.out.println(\"El servidor devuelve la frase: \" + FraseMajuscules);\n        eixida.writeObject(FraseMajuscules);\n\n        clientSocket.close();\n        System.out.println(\"Server esperando una nueva conexi\u00f3n...\");\n    }\n  }\n}\n</code></pre> Cliente Java<pre><code>package UD06.P4_Sockets;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.Scanner;\n\npublic class TCPClient {\n\n  public static void main(String[] args) throws IOException, ClassNotFoundException {\n    Socket socket;\n    ObjectInputStream entrada;\n    ObjectOutputStream eixida;\n    String frase;\n\n    socket = new Socket(InetAddress.getLocalHost(), 10000);\n    eixida = new ObjectOutputStream(socket.getOutputStream());\n\n    System.out.println(\"Introduce la frase a enviar en min\u00fasculas\");\n    Scanner in = new Scanner(System.in);\n    frase = in.nextLine();\n    System.out.println(\"Se envia la frase \" + frase);\n    eixida.writeObject(frase);\n\n    entrada = new ObjectInputStream(socket.getInputStream());\n    System.out.println(\n            \"La frase recibida es: \" + (String) entrada.readObject());\n\n    socket.close();\n  }\n}\n</code></pre></p>"},{"location":"ud06/ud0605/","title":"6.5 Manejo de ficheros y carpetas","text":""},{"location":"ud06/ud0605/#la-clase-file","title":"La clase File","text":"<p>La clase <code>File</code> es una representaci\u00f3n abstracta ficheros y carpetas. Cuando creamos en Java un objeto de la clase <code>File</code> en representaci\u00f3n de un fichero o carpeta concretos, no creamos el fichero al que se representa; es decir, el objeto <code>File</code> representa al archivo o carpeta de disco, pero no es el archivo o carpeta de disco.</p> <p>La clase <code>File</code> dispone de m\u00e9todos que permiten realizar determinadas operaciones sobre los ficheros. Podr\u00edamos, por ejemplo, crear un objeto de tipo <code>File</code> que represente a <code>c:\\datos\\libros.txt</code> o <code>/home/abc/datos/libros.txt</code> y, a trav\u00e9s de ese objeto <code>File</code>, realizar consultas relativas al fichero <code>libros.txt</code>, como su tama\u00f1o, atributos, etc; o realizar operaciones sobre \u00e9l: borrarlo, renombrarlo, \u2026</p>"},{"location":"ud06/ud0605/#constructores","title":"Constructores","text":"<p>La clase <code>File</code> tiene varios constructores, que permiten referirse, de varias formas, al archivo que queremos representar:</p> M\u00e9todo Descripci\u00f3n <code>public File (String ruta)</code> Crea el objeto <code>File</code> a partir de la ruta indicada. Si se trata de un archivo tendr\u00e1 que indicar la ruta y el nombre. <code>public File (String ruta, String nombre)</code> Permite indicar de forma separada la ruta del archivo y su nombre. <code>public File (File ruta, String nombre)</code> Permite indicar de forma separada la ruta del archivo y su nombre. En este caso la ruta est\u00e1 representada por otro objeto File. <code>public File (URI uri)</code> Crea el objeto File a partir de un objeto URI (Uniform Resource Identifier). Un URI permite representar un elemento siguiendo una sintaxis concreta, un est\u00e1ndar."},{"location":"ud06/ud0605/#metodos","title":"M\u00e9todos","text":"<p>Aqu\u00ed exponemos algunos m\u00e9todos interesantes. Hay otros que puedes consultar en la documentaci\u00f3n de Java.</p> Relacionados con el nombre del fichero <code>String getName()</code> Devuelve el nombre del fichero o directorio al que representa el objeto (solo el nombre, sin la ruta). <code>String getPath()</code> Devuelve la ruta del fichero o directorio. La ruta obtenida es dependiente del sistema; es decir, contendr\u00e1 el car\u00e1cter de separaci\u00f3n de directorios que est\u00e9 establecido por defecto. Este separador est\u00e1 definido en public <code>static final String separator</code>. <code>String getAbsolutePath()</code> Devuelve la ruta absoluta del fichero o directorio. <code>String getParent()</code> Devuelve la ruta del directorio en que se encuentra el fichero o directorio representado. Devuelve null si no hay directorio padre. Para hacer comprobaciones <code>boolean exists()</code><code>boolean canWrite()</code><code>boolean canRead()</code> <code>boolean isFile()</code><code>boolean isDirectory()</code> Permiten averiguar si el fichero existe, si se puede escribir en el, si se puede leer de \u00e9l,si se trata de un fichero o si se trata de un directorio Obtener informaci\u00f3n de un fichero <code>long length</code> Devuelve el tama\u00f1o en bytes del archivo. El resultado es indefinido si se consulta sobre un directorio o una unidad. <code>long lastModified</code> Devuelve la fecha de la \u00faltima modificaci\u00f3n del archivo. Devuelve el n\u00famero de milisegundos transcurridos desde el 1 de enero de 1970 Para trabajar con directorios <code>boolean mkdir()</code> Crea el directorio al cual representa el objeto File. <code>boolean mkdirs()</code> Crea el directorio al cual representa el objeto File, incluyendo todos aquellos que sean necesarios y no existan. <code>String[] list()</code> Devuelve un array de <code>Strings</code> con los nombres de los ficheros y directorios que contiene el directorio al que representa el objeto File. <code>String[] list(FileNameFilter filtro)</code> Devuelve un array de <code>Strings</code> con los nombres de los ficheros y directorios que contiene el directorio al que representa el objeto File y que cumplen con determinado filtro. <code>public File[] listFiles()</code> Devuelve un array de objetos <code>File</code> que representan a los archivos y carpetas contenidos en el directorio al que se refiere el objeto File. Para hacer cambios <code>boolean renameTo(File nuevoNombre)</code> Permite renombrar un archivo. Hay que tener en cuenta que la operaci\u00f3n puede fracasar por muchas razones, y que ser\u00e1 dependiente del sistema (por ejemplo: que no se pueda mover el fichero de un lugar a otro, que ya exista un fichero que coincide con el nuevo, etc). El m\u00e9todo devuelve true solo si la operaci\u00f3n se ha realizado con \u00e9xito. Existe un m\u00e9todo move en la clase Files para mover archivos de una forma independiente del sistema. <code>boolean delete()</code> Elimina el archivo o la carpeta a la que representa el objeto File. Si se trata de una carpeta tendr\u00e1 que estar vac\u00eda. Devuelve true si la operaci\u00f3n tiene \u00e9xito. <code>boolean createNewFile()</code> Crea un archivo vac\u00edo. Devuelve true si la operaci\u00f3n se realiza con \u00e9xito. <code>File createTempFile(String prefijo, String sufijo)</code> Crea un archivo vac\u00edo en la carpeta de archivos temporales. El nombre llevar\u00e1 el prefijo y sufijo indicados. Devuelve el objeto File que representa al nuevo archivo. Ejemplo: manejo de ficheros y carpetas Java<pre><code>package UD06.P5_Manejo;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class P5_1_Manejo {\n\n  public static void main(String[] args) {\n     Scanner tec = new Scanner(System.in);\n     System.out.println(\"Introduce ruta absoluta de una carpeta\");\n     String nombreCarpeta = tec.nextLine();\n     //Creamos objeto File para representar a la carpeta\n     File car = new File(nombreCarpeta);\n     //Comprobamos si existe\n     if (car.exists()) {\n        //\u00bfEs una carpeta?\n        if (car.isDirectory()) {\n           if (car.canRead()) \n               System.out.println(\"Lectura permitida\");\n           else\n               System.out.println(\"Lectura no permitida\");\n\n           if (car.canWrite())\n               System.out.println(\"Escritura permitida\");\n           else\n               System.out.println(\"Escritura no permitida\");\n\n           if (car.isHidden())\n               System.out.println(\"Carpet aoculta\");\n           else\n               System.out.println(\"Carpeta visible\");\n\n           System.out.println(\"---- Contenido de la carpeta ----\");\n           File[] contenido = car.listFiles();\n           for (File f : contenido) {\n               System.out.println(f.getName());\n           }\n        } else {\n            System.out.println(\"ERROR: \" + car.getAbsolutePath() + \" No es una carpeta\");\n        }\n     } else {\n         System.out.println(\"ERROR: No existe la carpeta/archivo \" + car.getAbsolutePath());\n     }\n  }\n}\n</code></pre>"},{"location":"ud06/ud0606/","title":"6.6 Comparativa CRUD","text":"Comparativa CRUD <p>Enlace a documento pdf Comparativa CRUD</p>"},{"location":"ud06/ud06ac/","title":"Actividades","text":""},{"location":"ud06/ud06ac/#ejercicios","title":"Ejercicios","text":""},{"location":"ud06/ud06ac/#ejercicio-01-gestorvuelos","title":"Ejercicio 01 - gestorVuelos","text":"<p>Paquete: <code>gestorVuelos</code></p> <p>Se desea realizar una aplicaci\u00f3n <code>GestorVuelos</code> para gestionar la reserva y cancelaci\u00f3n de vuelos en una agencia de viajes. Dicha agencia trabaja \u00fanicamente con la compa\u00f1\u00eda a\u00e9rea AirVostrum, que ofrece vuelos desde/hacia varias ciudades de Europa. Se deben definir las clases que siguen, teniendo en cuenta que sus atributos ser\u00e1n privados y sus m\u00e9todos s\u00f3lo los que se indican en cada clase.</p> <p>A) Implementaci\u00f3n de la clase <code>Vuelo</code>, que permite representar un vuelo mediante los atributos:  </p> <ul> <li><code>identificador</code> (<code>String</code>)</li> <li><code>origen</code> (<code>String</code>)</li> <li><code>destino</code> (<code>String</code>)</li> <li><code>hSalida</code> (un tipo que te permita controlar la hora, no es un <code>String</code> ni un <code>int</code>, etc.)</li> <li><code>hLlegada</code> (un tipo que te permita controlar la hora, no es un <code>String</code> ni un <code>int</code>, etc.)</li> <li>Adem\u00e1s, cada vuelo dispone de 50 asientos, es decir, pueden viajar, como mucho, 50 pasajeros en cada vuelo. Para representarlos, se har\u00e1 uso de <code>asiento</code>, un array de <code>String</code> (nombres de los pasajeros) junto con un atributo <code>numP</code> que indique el n\u00famero actual de asientos reservados. Si el asiento <code>i</code> est\u00e1 reservado, <code>asiento[i]</code> contendr\u00e1 el nombre del pasajero que lo ha reservado. Si no lo est\u00e1, <code>asiento[i]</code> ser\u00e1 <code>null</code>. En el array <code>asiento</code>, las posiciones impares pertenecen a asientos de ventanilla y las posiciones pares, a asientos de pasillo (la posici\u00f3n 0 no se utilizar\u00e1).</li> </ul> <p>En esta clase, se deben implementar los siguientes m\u00e9todos:</p> <ul> <li> <p><code>public Vuelo(String id, String orig, String dest, LocalTime hsal, LocalTime hlleg)</code>: Constructor que crea un vuelo con identificador, ciudad de origen, ciudad de destino, hora de salida y hora de llegada indicados en los respectivos par\u00e1metros, y sin pasajeros.</p> </li> <li> <p><code>public String getIdentificador()</code>: Devuelve el <code>identificador</code></p> </li> <li> <p><code>public String getOrigen()</code>: Devuelve <code>origen</code>.</p> </li> <li> <p><code>public String getDestino()</code>: Devuelve <code>destino</code>.</p> </li> <li> <p><code>public boolean hayLibres()</code>: Devuelve <code>true</code> si quedan asientos libres y <code>false</code> si no quedan.</p> </li> <li> <p><code>public boolean equals(Object o)</code>: Dos vuelos son iguales si tienen el mismo identificador.</p> </li> <li> <p><code>public int reservarAsiento(String pas, char pref) throws VueloCompletoException</code>: Si el vuelo ya est\u00e1 completo se lanza una excepci\u00f3n. Si no est\u00e1 completo, se reserva al pasajero <code>pas</code> el primer asiento libre en <code>pref</code>. El car\u00e1cter <code>pref</code> ser\u00e1 '<code>V</code>' o '<code>P</code>' en funci\u00f3n de que el pasajero desee un asiento de ventanilla o de pasillo. En caso de que no quede ning\u00fan asiento libre en la preferencia indicada (<code>pref</code>), se reservar\u00e1 el primer asiento libre de la otra preferencia. El m\u00e9todo devolver\u00e1 el n\u00famero de asiento que se le ha reservado. Este m\u00e9todo hace uso del m\u00e9todo privado <code>asientoLibre</code>, que se explica a continuaci\u00f3n.</p> </li> <li> <p><code>private int asientoLibre(char pref)</code>: Dado un tipo de asiento <code>pref</code> (pasillo '<code>P</code>' o ventanilla '<code>V</code>'), devuelve el primer asiento libre (el de menor numero) que encuentre de ese tipo. O devuelve <code>0</code> si no quedan asientos libres de tipo <code>pref</code>.</p> </li> <li> <p><code>public void cancelarReserva(int numAsiento)</code>: Se cancela la reserva del asiento <code>numasiento</code>.</p> </li> <li> <p><code>public String toString()</code>: Devuelve una <code>String</code> con los datos del vuelo y los nombres de los pasajeros, con el siguiente formato:</p> </li> </ul> Bash<pre><code>Vuelo:\n  AV101 Valencia Par\u00eds 19:05:00 21:00:00\nPasajeros (23):\n  Asiento 1: Sonia Dominguez\n  \u2026\n  Asiento 23: Fernando Romero\n</code></pre> <p>B) Dise\u00f1ar e implementar una clase <code>TestVuelo</code> que permita probar la clase <code>Vuelo</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</p> <ul> <li>Se cree el vuelo IB101 de Valencia a Par\u00eds, que sale a las 19:05 y llega a las 21:00</li> <li>Reservar:</li> <li>Un asiento de ventanilla a \"Miguel Fern\u00e1ndez\"</li> <li>Un asiento de ventanilla a \"Ana Folgado\"</li> <li>Un asiento de pasillo a \"David M\u00e1s\"</li> <li>Mostrar el vuelo por pantalla.</li> <li>Cancelar la reserva del asiento que indique el usuario.</li> </ul> <p>C) Implementaci\u00f3n de la clase <code>Compa\u00f1\u00eda</code> para representar todos los vuelos de una compa\u00f1\u00eda a\u00e9rea. Una Compa\u00f1\u00eda tiene un nombre y puede ofrecer, como mucho, 10 vuelos distintos. Para representarlos se utilizar\u00e1 <code>listaVuelos</code>, un array de objetos <code>Vuelo</code> junto con un atributo <code>numVuelos</code> que indique el n\u00famero de vuelos que la compa\u00f1\u00eda ofrece en un momento dado. Las operaciones de esta clase son:</p> <ul> <li> <p><code>public Compania(String n) throws FileNotFoundException</code>: Constructor de una compa\u00f1\u00eda de nombre <code>n</code>. Cuando se crea una compa\u00f1\u00eda, se invoca al m\u00e9todo privado <code>leeVuelos()</code> para cargar la informaci\u00f3n de vuelos desde un fichero. Si el fichero no existe, se propaga la excepci\u00f3n <code>FileNotFoundException</code></p> </li> <li> <p><code>private void leeVuelos() throws FileNotFoundException</code>: Lee desde un fichero toda la informaci\u00f3n de los vuelos que ofrece la compa\u00f1\u00eda y los va almacenando en el array de vuelos <code>listaVuelos</code>. El nombre del fichero coincide con el nombre de la compa\u00f1\u00eda y tiene extensi\u00f3n <code>.txt</code>. La informaci\u00f3n de cada vuelo se estructura en el fichero como sigue:</p> </li> </ul> Text Only<pre><code>&lt;Identificador&gt;\n&lt;Origen&gt;\n&lt;Destino&gt;\n&lt;Hora de salida&gt;\n&lt;Minuto de salida&gt;\n&lt;Hora de llegada&gt;\n&lt;Minuto de llegada&gt;\n...\n...\n</code></pre> <p>Si el fichero no existe, se propaga la excepci\u00f3n <code>FileNotFoundException</code>.</p> <ul> <li> <p><code>public Vuelo buscarVuelo(String id) throws ElementoNoEncontradoException</code>: Dado un identificador de vuelo <code>id</code>, busca dicho vuelo en el array de vuelos <code>listaVuelos</code>. Si lo encuentra, lo devuelve. Si no, lanza <code>ElementoNoEncontradoException</code>.</p> </li> <li> <p><code>public void mostrarVuelosIncompletos(String o, String d)</code>: Muestra por pantalla los vuelos con origen <code>o</code> y destino <code>d</code>, y que tengan asientos libres. Por ejemplo, vuelos con asientos libres de la compa\u00f1\u00eda AirVostrum con origen Mil\u00e1n y destino Valencia:</p> </li> </ul> Bash<pre><code>AirVostrum - Vuelo AV201 - Mil\u00e1n Val\u00e8ncia - 14:25:00 16:20:00\nAirVostrum - Vuelo AV202 - M\u00edl\u00e1n Val\u00e8ncia - 21:40:00 23:35:00\n</code></pre> <p>D) En la clase <code>GestorVuelos</code> se probar\u00e1 el comportamiento de las clases anteriores. En esta clase se debe implementar el m\u00e9todo <code>main</code> en el que, por simplificar, se pide \u00fanicamente:</p> <ul> <li>La creaci\u00f3n de la compa\u00f1\u00eda a\u00e9rea <code>AirVostrum</code>. Se dispone de un fichero de texto <code>AirVostrum.txt</code>, con la informaci\u00f3n de los vuelos que ofrece.</li> <li>Reserva de un asiento de ventanilla en un vuelo de Val\u00e8ncia a Mil\u00e1n por parte de Manuel Soler Roca. Para ello:</li> <li>Mostraremos vuelos con origen Val\u00e8ncia y destino Mil\u00e1n, que no est\u00e9n completos.</li> <li>Pediremos al usuario el identificador del vuelo en que quiere hacer la reserva.</li> <li>Buscaremos el vuelo que tiene el identificador indicado. Si existe realizaremos la reserva y mostraremos un mensaje por pantalla. En caso contrario mostraremos un mensaje de error por pantalla.</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-02-maquinaexpendedora","title":"Ejercicio 02 - maquinaExpendedora","text":"<p>Paquete: <code>maquinaExpendedora</code></p> <p>Se desea simular el funcionamiento de una m\u00e1quina expendedora. Se trata de una expendedora sencilla que, por el momento, ser\u00e1 capaz de dispensar \u00fanicamente un producto.</p> <p>Su funcionamiento, a grandes rasgos, es el siguiente:</p> <ol> <li>El cliente introduce dinero en la m\u00e1quina. Al dinero introducido lo llamaremos <code>credito</code>.</li> <li>Selecciona el producto que quiere comprar (ya hemos comentado que por el momento habr\u00e1 un solo producto).</li> <li>Si hay stock del producto seleccionado, la m\u00e1quina dispensa el art\u00edculo elegido y devuelve el importe sobrante (diferencia entre el cr\u00e9dito introducido y el precio del producto).</li> </ol> <p>Durante el proceso se pueden producir diversas incidencias, como por ejemplo, que el cliente no haya introducido suficiente cr\u00e9dito para comprar el producto, que no quede producto o que no haya cambio suficiente para la devoluci\u00f3n. La m\u00e1quina tambi\u00e9n da la posibilidad de solicitar la devoluci\u00f3n del cr\u00e9dito sin realizar la compra.</p> <p>A) Dise\u00f1ar la clase <code>Expendedora</code> (proyecto <code>Expendedora</code>) con los atributos y m\u00e9todos que se describen a continuaci\u00f3n.</p> <ul> <li> <p>Atributos (privados)</p> </li> <li> <p><code>credito</code>: Cantidad de dinero (en euros) introducida por el cliente.</p> </li> <li><code>stock</code>: N\u00famero de unidades que quedan en la m\u00e1quina disponibles para la venta. Se reducir\u00e1 con cada nueva venta.</li> <li><code>precio</code>: Precio del \u00fanico art\u00edculo que dispensa la m\u00e1quina (en euros).</li> <li><code>cambio</code>: Cambio del que dispone la m\u00e1quina. El cambio disponible se reduce cada vez que se devuelve al cliente la diferencia entre el cr\u00e9dito introducido y el precio del producto comprado. El cambio nunca se ve incrementado por las compras de los clientes.</li> <li> <p><code>recaudaci\u00f3n</code>: Representa la suma de las ventas realizadas por la m\u00e1quina (en euros). Se ve incrementada con cada nueva compra.</p> </li> <li> <p>M\u00e9todos:</p> </li> <li> <p>Constructor: <code>public Expendedora (double cambio, int stock, double precio)</code>. Crea la expendedora inicializando los atributos cambio, stock y precio con los valores indicados en los par\u00e1metros). El cr\u00e9dito y la recaudaci\u00f3n ser\u00e1n cero.</p> </li> <li> <p>Consultores:</p> <ul> <li>M\u00e9todos consultores para los atributos cr\u00e9dito, cambio, y recaudaci\u00f3n</li> <li>Los consultores para el stock y el precio los haremos previendo que en el futuro la m\u00e1quina pueda expender m\u00e1s de un tipo de producto. Para consultar el stock y el precio se indicar\u00e1 como par\u00e1metro el n\u00famero de producto que se quiere consultar aunque, por el momento se ignorar\u00e1 el valor de dicho atributo.</li> <li><code>public getStock (int producto)</code> Devuelve el stock disponible del producto indicado. En esta versi\u00f3n simplificada se devolver\u00e1 el valor del atributo stock, sea cual sea el valor de producto.</li> <li><code>public getPrecio (int producto)</code> Devuelve el precio del producto indicado. En esta versi\u00f3n simplificada se devolver\u00e1 el valor del atributo precio, , sea cual sea el valor de producto.</li> </ul> </li> <li> <p>Modificadores: Para simplificar, consideramos que los atributos de la m\u00e1quina solo van a cambiar por operaciones derivadas de su funcionamiento, por lo que no proporcionamos modificadores p\u00fablicos.</p> </li> <li> <p>Otros m\u00e9todos:</p> </li> <li> <p><code>public String toString()</code> Devuelve un <code>String</code> de la forma:</p> Bash<pre><code>Cr\u00e9dito: 3.0 euros\nCambio: 12.73 euros\nStock: 12 unidades\nRecaudaci\u00f3n: 127.87 euros\n</code></pre> </li> <li> <p><code>public void introducirDinero(double importe)</code> Representa la operaci\u00f3n mediante la cual el cliente a\u00f1ade dinero (cr\u00e9dito) a la m\u00e1quina. Esta operaci\u00f3n incrementa el cr\u00e9dito introducido por el cliente en el importe indicado como par\u00e1metro.</p> </li> <li> <p><code>public double solicitarDevolucion()</code> Representa la operaci\u00f3n mediante la cual el cliente solicita la devoluci\u00f3n del cr\u00e9dito introducido sin realizar la compra. El m\u00e9todo devuelve la cantidad de dinero que se devuelve al cliente.</p> </li> <li> <p><code>public double comprarProducto(int producto) throws NoHayCambioException, NoHayProductoException, CreditoInsuficienteException</code>. Representa la operaci\u00f3n mediante la cual el cliente selecciona un producto para su compra. El m\u00e9todo devuelve la cantidad de dinero que se devuelve al cliente.</p> <p>Si no se produce ninguna situaci\u00f3n inesperada, se reduce el stock del producto, se devuelve el cambio, se pone el cr\u00e9dito a cero y se incrementa la recaudaci\u00f3n.</p> <p>Si la venta no es posible se lanzar\u00e1 la excepci\u00f3n correspondiente a la situaci\u00f3n que impide completar la venta.</p> </li> </ul> <p>B) La clase <code>Producto</code> permite representar uno de los art\u00edculos de los que vende una m\u00e1quina expendedora. Para ello utilizaremos tres atributos privados <code>nombre</code> (<code>String</code>), <code>precio</code> (<code>double</code>) y <code>stock</code> (<code>int</code>), y los siguientes m\u00e9todos:</p> <ul> <li><code>public Producto(String nombre, double precio, int stock)</code> Constructor que inicializa el producto con los par\u00e1metros indicados.</li> <li>Consultores de los tres atributos: <code>getNombre</code>, <code>getPrecio</code> y <code>getStock</code>.</li> <li><code>public int decrementarStock()</code>: decrementa en 1 el stock del producto y devuelve el stock resultante.</li> </ul> <p>C) La clase <code>TestExpendedora</code> sirve para provar los m\u00e9todos desarrollados en las clases <code>Expendedora</code> y <code>Producto</code>.</p> <ul> <li>Crea un Objeto de tipo <code>Expendedora</code> e inicializalo con: 12 unidades de stock, 5 euros de cambio y un precio de 3.75 euros. Muestra por pantalla su estado actual.</li> <li>Simula la introducci\u00f3n por parte del cliente de un billete de 5 euros y muestra el estado de la m\u00e1quina <code>Expendedora</code>.</li> <li>Simula la compra de un <code>producto</code> y muestra la cantidad devuelta.</li> <li>Simula la introducci\u00f3n de una moneda de 2 euros y solicita la devoluci\u00f3n sin realizar ninguna compra y muestra la cantidad devuelta.</li> <li>Intenta realizar una compra sin tener suficiente cr\u00e9dito y gestiona la excepci\u00f3n.</li> <li>Crea otro objeto de tipo <code>Expendedora</code> que inicialmente tenga 0 unidades de stock (el resto de valores a tu gusto), simula la compra de un producto teniendo suficiente cr\u00e9dito y cambio. Gestiona la excepci\u00f3n.</li> <li>Crea un \u00faltimo objeto de tipo <code>Expendedora</code> que inicialmente tenga 0 euros de cambio (el resto de valores a tu gusto), simula la compra de un producto para el que la m\u00e1quina tenga que devolver alg\u00fan importe, gestiona la excepci\u00f3n.</li> <li>Muestra las recaudaciones para las 3 m\u00e1quinas expendedoras.</li> </ul> <p>D) La clase <code>Surtido</code> representa una colecci\u00f3n de productos. Para ello se usar\u00e1 un atributo <code>listaProductos</code>, array de <code>Productos</code>. El array se rellenar\u00e1 con los datos de productos extra\u00eddos de un fichero de texto y, una vez creado el surtido no ser\u00e1 posible a\u00f1adir o quitar productos. As\u00ed, el array de productos estar\u00e1 siempre completo y no es necesario ning\u00fan atributo que indique cu\u00e1ntos productos existen en el array.</p> <p>Se implementar\u00e1n los siguientes m\u00e9todos:</p> <ul> <li><code>public Surtido() throws FileNotFoundException</code>: crea el surtido con los datos de los productos que se encuentran en el fichero <code>productos.txt</code>. El fichero tiene el siguiente formato:</li> </ul> Text Only<pre><code>&lt;n\u00ba de productos&gt;\n&lt;nombre de producto&gt; &lt;precio&gt; &lt;stock&gt;\n&lt;nombre de producto&gt; &lt;precio&gt; &lt;stock&gt;\n&lt;nombre de producto&gt; &lt;precio&gt; &lt;stock&gt;\n...\n</code></pre> <p>Como vemos, la primera l\u00ednea del fichero indica el n\u00famero de productos que contiene el surtido. Este dato lo usaremos para dar al array de productos el tama\u00f1o adecuado.</p> <ul> <li> <p><code>public int numProductos()</code>: devuelve el n\u00famero de productos que componen el surtido.</p> </li> <li> <p><code>public Producto getProducto(int numProducto)</code>: devuelve el producto que ocupa la posici\u00f3n <code>numProducto</code> del surtido. La primera posici\u00f3n v\u00e1lida es la <code>1</code>. La posici\u00f3n <code>0</code> no se utiliza.</p> </li> <li><code>public String[] getNombresProductos()</code>: devuelve un array con los nombres de los productos. La posici\u00f3n <code>0</code> del array no se utilizar\u00e1 (ser\u00e1 <code>null</code>).</li> </ul> <p>E) Crea una copia de la clase <code>Expendedora</code> y ll\u00e1mala <code>ExpendedoraSurtido</code>. A\u00f1adir los atributos y hacer los cambios necesarios en la clase para que sea capaz de dispensar varios productos usando la nueva clase <code>Surtido</code>. Por ejemplo, ya no tienen sentido los atributos stock y precio ya que pertenecen al <code>Surtido</code>.</p> <p>A\u00f1ade tambi\u00e9n el m\u00e9todo <code>public String toStringSurtido()</code>, que muestre por pantalla el listado de productos con su nombre, precio y stock para mostrar al cliente que productos puede elegir. El c\u00f3digo del producto coincidir\u00e1 con su posici\u00f3n al leer el surtido.</p> <p>F) Crea una copia de la clase <code>TestExpendedora</code> y ren\u00f3mbrala como <code>TestExpendedora2</code> para adaptarla a los cambios hechos en la clase <code>Expendedora</code> y usando la nueva posibilidad de comprar diferentes productos y usando solamente un \u00fanico objeto <code>Expendedora</code>. Al final en lugar de mostrar la recaudaci\u00f3n de las 3 m\u00e1quinas expendedoras, muestra solo la de la \u00fanica que hay y muestra el surtido.</p>"},{"location":"ud06/ud06ac/#flujos-estandar","title":"Flujos est\u00e1ndar","text":""},{"location":"ud06/ud06ac/#ejercicio-03","title":"Ejercicio 03","text":"<p>ejercicio <code>_03_leeNombre</code></p> <p>Escribir un programa que solicite al usuario su nombre y, utilizando directamente <code>System.in</code>, lo lea de teclado y muestre por pantalla un mensaje del estilo \"Su nombre es Miguel\".  Recuerda que <code>System.in</code> es un objeto de tipo <code>InputStream</code>. La clase <code>InputStream</code> permite leer bytes utilizando el m\u00e9todo <code>read()</code>. Ser\u00e1 tarea nuestra ir construyendo un <code>String</code> a partir de los bytes le\u00eddos. Prueba el programa de manera que el usuario incluya en su nombre alg\u00fan car\u00e1cter \u201cextra\u00f1o\u201d, por ejemplo el s\u00edmbolo \"\u20ac\" \u00bfFunciona bien el programa? \u00bfPor qu\u00e9?</p>"},{"location":"ud06/ud06ac/#ejercicio-04","title":"Ejercicio 04","text":"<p>ejercicio <code>_04_leeEdad</code></p> <p>Escribir un programa que solicite al usuario su edad y, utilizando directamente <code>System.in</code>, la lea de teclado y muestre por pantalla un mensaje del estilo \"Su edad es 32 a\u00f1os\". En este caso, ser\u00e1 tarea nuestra construir un String a partir de los bytes le\u00eddos y transformarlo posteriormente en un entero. </p>"},{"location":"ud06/ud06ac/#ejercicio-05","title":"Ejercicio 05","text":"<p>ejercicio <code>_05_cambiarEstandar</code></p> <p>La salida est\u00e1ndar (<code>System.out</code>) y la salida de errores (<code>System.err</code>) est\u00e1n asociadas por defecto con la pantalla. Se puede cambiar este comportamiento por defecto utilizando los m\u00e9todos <code>System.setout</code> y <code>System.seterr</code> respectivamente. Investiga un poco c\u00f3mo se utilizan, escribe un programa que asocie la salida est\u00e1ndar a al fichero <code>salida.txt</code> y la salida de errores al fichero <code>errores.txt</code> y, a continuaci\u00f3n, escriba alg\u00fan mensaje en cada uno de las salidas, por ejemplo <code>System.out.println(\u201cEl resultado es 20\u201d);</code> y <code>System.err.println(\u201cERROR: Elemento no encontrado\u201d);</code></p>"},{"location":"ud06/ud06ac/#ejercicio-06","title":"Ejercicio 06","text":"<p>ejercicio <code>_06_sumarEdades</code></p> <ul> <li>Escribir m\u00e9todo <code>void sumaEdades()</code> que lea de teclado las edades de una serie de personas y muestre cuanto suman.  El m\u00e9todo finalizar\u00e1 cuando el usuario introduzca una edad negativa.</li> <li>Escribir un m\u00e9todo <code>main</code> que llame al m\u00e9todo anterior para probarlo.</li> <li>Modificar el m\u00e9todo <code>main</code> de forma que, antes de llamar al m\u00e9todo <code>sumaEdades</code>, se cambie la entrada est\u00e1ndar para que tome los datos del fichero <code>edades.txt</code> en lugar de leerlos de teclado.</li> </ul>"},{"location":"ud06/ud06ac/#inputstreamreader","title":"<code>InputStreamReader</code>","text":""},{"location":"ud06/ud06ac/#ejercicio-07","title":"Ejercicio 07","text":"<p>ejercicio <code>_07_leerByte</code></p> <p><code>System.in</code> (<code>InputStream</code>) est\u00e1 orientado a lectura de  bytes. Escribe un programa que lea un byte de teclado y muestre su valor (int) por pantalla. Pru\u00e9balo con un car\u00e1cter \u201cextra\u00f1o\u201d, por ejemplo \u2018\u20ac\u2019.</p>"},{"location":"ud06/ud06ac/#ejercicio-08","title":"Ejercicio 08","text":"<p>ejercicio <code>_08_leerCaracter</code></p> <p><code>InputStreamReader</code> (<code>StreamReader</code>) est\u00e1 orientado a caracteres. Escribe un programa que lea un car\u00e1cter de teclado usando un <code>InputStreamReader</code> y muestre su valor (<code>int</code>) por pantalla. Pru\u00e9balo con un car\u00e1cter \u201cextra\u00f1o\u201d, por ejemplo \u2018\u20ac\u2019. \u00bfSe obtiene el mismo resultado que en el ejercicio anterior?.</p>"},{"location":"ud06/ud06ac/#entrada-orientada-a-lineas","title":"Entrada \"orientada a l\u00edneas\"","text":"<p>En los ejercicios anteriores, las limitaciones de la clase utilizada (<code>InputStream</code>), nos obliga a incluir en el programa instrucciones que detecten que el usuario ha terminado su entrada (ha pulsado INTRO). La clase <code>BuffereReader</code> dispone del m\u00e9todo <code>readLine()</code>, capaz de leer una l\u00ednea completa (la propia instrucci\u00f3n detecta el final de la l\u00ednea) y devolver un <code>String</code>.</p>"},{"location":"ud06/ud06ac/#ejercicio-09","title":"Ejercicio 09","text":"<p>ejercicio <code>_09_leerNombre</code></p> <p>Repite el ejercicio 1 utilizando un <code>BufferedReader</code> asociado a la entrada est\u00e1ndar. La clase <code>BufferedReader</code>, est\u00e1 orientada a leer caracteres en lugar de bytes. \u00bfQu\u00e9 ocurre ahora si el usuario introduce un car\u00e1cter \"extra\u00f1o\" en su nombre?</p>"},{"location":"ud06/ud06ac/#ejercicio-10","title":"Ejercicio 10","text":"<p>ejercicio <code>_10_leeEdad</code></p> <p>Repite el ejercicio 2 utilizando un <code>BufferedReader</code> asociado a la entrada est\u00e1ndar.</p>"},{"location":"ud06/ud06ac/#lecturaescritura-en-ficheros","title":"Lectura/escritura en ficheros","text":""},{"location":"ud06/ud06ac/#ejercicio-11","title":"Ejercicio 11","text":"<p>ejercicio <code>_11_escribirFichero1</code></p> <p>Escribe un programa que, usando las clases <code>FileOutputStream</code> y <code>FileInputStream</code>, </p> <ul> <li>escriba los caracteres de tu nombre en un fichero y los vaya a\u00f1adiendo (<code>nombres.log</code>).</li> <li>lea el fichero creado y lo muestre por pantalla.</li> <li>Si abrimos el fichero creado con un editor de textos, \u00bfsu contenido es legible?</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-12","title":"Ejercicio 12","text":"<p>ejercicio <code>_12_escribirFichero2</code></p> <p>Repetir el ejercicio anterior utilizando las clases <code>FileReader</code> y <code>FileWriter</code>. </p>"},{"location":"ud06/ud06ac/#uso-de-buffers","title":"Uso de buffers","text":"<p>Los  buffers hacen que las operaciones de lectura-escritura  se realicen inicialmente en memoria y, cuando los buffers correspondientes est\u00e1n vac\u00edos/llenos, se hagan definitivamente sobre el dispositivo.</p>"},{"location":"ud06/ud06ac/#ejercicio-13","title":"Ejercicio 13","text":"<p>ejercicio <code>_13_testVelocidadBuffer</code></p> <p>Vamos a probar la diferencia de tiempo que conlleva escribir datos a un fichero directamente o hacerlo a trav\u00e9s de un buffer. Para ello, crea un fichero de 1 Mb (1000000 de bytes aprox.) usando un la clase <code>FileWriter</code> y mide el tiempo que tarda en crearlo. Posteriormente, crea un fichero de exactamente el mismo tama\u00f1o utilizando un <code>BufferedWriter</code> y mide el tiempo que tarda. \u00bfHay diferencia?. Para medir el tiempo puedes utilizar <code>System.currentTimeMillis()</code>, inmediatamente antes y despu\u00e9s de crear el fichero y restar los valores obtenidos.</p>"},{"location":"ud06/ud06ac/#ejercicio-14","title":"Ejercicio 14","text":"<p>ejercicio <code>_14_testVelocidadBuffer2</code></p> <p>Modifica el programa <code>TestVelocidadBuffer</code> para probar c\u00f3mo afecta a la escritura con buffer la ejecuci\u00f3n de la instrucci\u00f3n <code>flush()</code>. Esta instrucci\u00f3n fuerza el volcado del buffer a disco. \u00bfDisminuye la velocidad si tras cada operaci\u00f3n de escritura ejecutamos flush()?</p>"},{"location":"ud06/ud06ac/#ejercicio-15","title":"Ejercicio 15","text":"<p>ejercicio <code>_15_testVelocidadBuffer3</code></p> <p>Modifica el programa <code>TestVelocidadBuffer</code> para probar c\u00f3mo a la velocidad el tama\u00f1o del buffer. La clase <code>BufferedWriter</code> tiene un constructor que permite indicar el tama\u00f1o del buffer. Prueba con distintos valores.</p>"},{"location":"ud06/ud06ac/#streams-para-informacion-binaria","title":"Streams para informaci\u00f3n binaria","text":""},{"location":"ud06/ud06ac/#ejercicio-16","title":"Ejercicio 16","text":"<p>ejercicio <code>_16_personas</code></p> <p>Escribe un programa que, utilizando entre otras la clase <code>DataOutputStream</code>, almacene en un fichero llamado <code>personas.dat</code> la informaci\u00f3n relativa a una serie de personas que va introduciendo el usuario desde teclado:</p> <ul> <li><code>Nombre</code> (String)</li> <li><code>Edad</code> (entero)</li> <li><code>Peso</code> (double)</li> <li><code>Estatura</code> (double)</li> </ul> <p>La entrada del usuario terminar\u00e1 cuando se introduzca un nombre vac\u00edo.</p> <p>Nota: Utiliza la clase <code>Scanner</code> para leer desde teclado y los m\u00e9todos <code>writeDouble</code>, <code>writeInt</code> y <code>writeUTF</code> de la clase <code>DataOutput/InputStream</code> para escribir en el fichero).</p> <p>Al finalizar el programa, abre el fichero resultante con un editor de texto \u00bfLa informaci\u00f3n que contiene es legible?.</p>"},{"location":"ud06/ud06ac/#ejercicio-17","title":"Ejercicio 17","text":"<p>ejercicio <code>_17_anyadirPersonas</code></p> <p>Modifica el programa anterior para que el usuario, al comienzo del programa, pueda elegir si quiere a\u00f1adir datos al fichero o sobre escribir la informaci\u00f3n que contiene.</p>"},{"location":"ud06/ud06ac/#ejercicio-18","title":"Ejercicio 18","text":"<p>ejercicio <code>_18_mostrarPersonas</code></p> <p>Realizar un programa que lea la informaci\u00f3n del fichero <code>personas.dat</code> y la muestre por pantalla. Para determinar que no quedan m\u00e1s datos en el fichero podemos capturar la excepci\u00f3n <code>EOFException</code> .</p>"},{"location":"ud06/ud06ac/#ejercicio-19","title":"Ejercicio 19","text":"<p>ejercicio <code>_19_calculosPersonas</code></p> <p>Realizar un programa, similar al anterior,  que lea la informaci\u00f3n del fichero <code>personas.dat</code> y muestre por pantalla la estatura que tienen de media las personas cuya edad est\u00e1 entre 20 y 30 a\u00f1os.</p>"},{"location":"ud06/ud06ac/#streams-de-objetos-serializacion","title":"Streams de objetos. Serializaci\u00f3n","text":""},{"location":"ud06/ud06ac/#ejercicio-20","title":"Ejercicio 20","text":"<p>ejercicio <code>_20_guardiaLibros</code></p> <ul> <li>(Autor) Crea la clase autor, con los atributos nombre, a\u00f1o de nacimiento y nacionalidad. Incorpora un constructor que reciba todos los datos y el m\u00e9todo <code>toString()</code>.</li> <li>(Libro) Crea la clase Libro, con los atributos titulo, a\u00f1o de edici\u00f3n y autor (Objeto de la clase autor). Incorpora un constructor que reciba todos los datos y el m\u00e9todo <code>toString()</code>.</li> <li>Escribe un programa (GuardaLibros) que cree tres libros y los almacene en el fichero <code>biblioteca.obj</code>.</li> <li>Las clases deber\u00e1n implementar el interfaz <code>Serializable</code>.</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-21","title":"Ejercicio 21","text":"<p>ejercicio <code>_21_leeLibros</code></p> <p>Escribe un programa que lea los objetos del fichero <code>biblioteca.obj</code> y los muestre por pantalla.</p>"},{"location":"ud06/ud06ac/#sockets","title":"Sockets","text":""},{"location":"ud06/ud06ac/#ejercicio-22","title":"Ejercicio 22","text":"<p>ejercicio <code>_22_signoZodiaco</code></p> <p>Programar un Servidor que reciba una fecha (previamente validada por el cliente) y nos diga cual es nuestro signo del zod\u00edaco occidental y el animal que corresponde en el zod\u00edaco oriental (animales).</p>"},{"location":"ud06/ud06ac/#mas-ejercicios","title":"M\u00e1s ejercicios","text":""},{"location":"ud06/ud06ac/#ejercicio-23","title":"Ejercicio 23","text":"<p>ejercicio <code>_23_cuentaLineas</code></p> <p>Escribe un programa que, sin utilizar la clase <code>Scanner</code>, muestre el n\u00famero de l\u00edneas que contiene un fichero de texto. El nombre del fichero se solicitar\u00e1 al usuario al comienzo de la ejecuci\u00f3n. </p>"},{"location":"ud06/ud06ac/#ejercicio-24","title":"Ejercicio 24","text":"<p>ejercicio <code>_24_cuentaPalabras</code></p> <p>Escribe un programa que, sin utilizar la clase <code>Scanner</code>, muestre el n\u00famero de palabras que contiene un fichero de texto. El nombre del fichero se solicitar\u00e1 al usuario al comienzo de la ejecuci\u00f3n. </p> <p>Sugerencia</p> <p>Lee el fichero, l\u00ednea a l\u00ednea y utiliza la clase <code>StringTokenizer</code> o bien el m\u00e9todo <code>split</code> de la clase <code>String</code> para averiguar el n\u00ba de palabras.</p>"},{"location":"ud06/ud06ac/#ejercicio-25","title":"Ejercicio 25","text":"<p>ejercicio <code>_25_censura</code></p> <p>Escribir un programa que sustituya por otras, ciertas palabras de un fichero de texto. Para ello, se desarrollar\u00e1 y llamar\u00e1 al m\u00e9todo <code>void aplicaCensura(String entrada, String censura, String salida),</code> que lee de un fichero de entrada y mediante un fichero de censura, crea el correspondiente fichero modificado. Por ejemplo:</p> <p>Fichero de entrada:</p> PHP<pre><code>En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que viv\u00eda un hidalgo de los de lanza en astillero\n</code></pre> <p>Fichero de censura:</p> PHP<pre><code>lugar sitio\nquiero debo\nhidalgo noble\n</code></pre> <p>Fichero de salida:</p> PHP<pre><code>En un sitio de la Mancha, de cuyo nombre no debo acordarme, no ha mucho tiempo que viv\u00eda un noble de los de lanza en astillero\n</code></pre> <p>Sugerencia</p> <p>Valora la posibilidad de cargar el fichero de censura en un mapa o par clave, valor.</p>"},{"location":"ud06/ud06ac/#ejercicio-26","title":"Ejercicio 26","text":"<p>ejercicio <code>_26_concatenar1</code></p> <p>Escribe un programa que dados dos ficheros de texto <code>f1</code> y <code>f2</code> confeccione un tercer fichero <code>f3</code> cuyo contenido sea el de <code>f1</code> y a continuaci\u00f3n el de <code>f2</code>.</p>"},{"location":"ud06/ud06ac/#ejercicio-27","title":"Ejercicio 27","text":"<p>ejercicio <code>_27_concatenar2</code></p> <p>Escribe un programa que dados dos ficheros de texto <code>f1</code> y <code>f2</code>, a\u00f1ada al final de <code>f1</code> el contenido de <code>f2</code>. Es decir, como el ejercicio anterior, pero sin producir un nuevo fichero.</p>"},{"location":"ud06/ud06ac/#ejercicio-28","title":"Ejercicio 28","text":"<p>ejercicio <code>_28_iguales</code></p> <p>Escribir un programa que compruebe si el contenido de dos ficheros es id\u00e9ntico. Puesto que no sabemos de qu\u00e9 tipo de ficheros se trata, (de texto, binarios, \u2026) habr\u00e1 que hacer una comparaci\u00f3n byte por byte.</p>"},{"location":"ud06/ud06ac/#ejercicio-29","title":"Ejercicio 29","text":"<p>ejercicio <code>_29_generarMedias</code></p> <p>Escribe los siguientes m\u00e9todos y programa:</p> <ul> <li>M\u00e9todo <code>void generar()</code> que genere 20 n\u00fameros aleatorios enteros entre 1 y 100 y los muestre por pantalla.</li> <li>M\u00e9todo <code>void media()</code> que lea de teclado 20 n\u00fameros enteros y calcule su media.</li> <li>Programa que, modificando la entrada y la salida est\u00e1ndar, llame a <code>generar()</code> para que los datos se graben en un fichero y a continuaci\u00f3n llame a <code>media()</code> de manera que se tomen los datos del fichero generado.</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-30","title":"Ejercicio 30","text":"<p>ejercicio <code>_30_notas</code></p> <p>Escribir un programa que almacene en un fichero binario (<code>notas.dat</code>) las notas de 20 alumnos. El programa tendr\u00e1 el siguiente funcionamiento:</p> <ul> <li>En el fichero se guardar\u00e1n como m\u00e1ximo 20 notas, pero se pueden guardar menos. El proceso de introducci\u00f3n de notas (y en consecuencia, el programa) finalizar\u00e1 cuando el usuario introduzca una nota no v\u00e1lida (menor que cero o mayor que 10).</li> <li>Si, al comenzar la ejecuci\u00f3n, el fichero ya contiene notas, se indicar\u00e1 al usuario cu\u00e1ntas faltan por a\u00f1adir y las notas que introduzca el usuario se a\u00f1adir\u00e1n a continuaci\u00f3n de las que hay.</li> <li>Si, al comenzar la ejecuci\u00f3n, el fichero ya contiene 20 notas, se le preguntar\u00e1 al usuario si desea sobrescribirlas. En caso afirmativo las notas que introduzca sustituir\u00e1n a las que hay y en caso negativo el fichero no se modificar\u00e1.</li> </ul>"},{"location":"ud06/ud06ac/#mas-ejercicios-lionel","title":"M\u00e1s ejercicios (Lionel)","text":"<p>Descargar Documentos.zip</p> <p>Para probar algunos de estos ejercicios debes utilizar el archivo <code>Documentos.zip</code>. Desc\u00e1rgalo del aula virtual y descompr\u00edmelo en la carpeta de cada proyecto que crees.</p>"},{"location":"ud06/ud06ac/#ejercicio-31","title":"Ejercicio 31","text":"<p>ejercicio <code>_31_informacionFicheros</code></p> <p>Implementa un programa que pida al usuario introducir por teclado una ruta del sistema de archivos (por ejemplo, <code>C:/Windows</code> o <code>Documentos</code>) y muestre informaci\u00f3n sobre dicha ruta (ver funci\u00f3n m\u00e1s abajo). El proceso se repetir\u00e1 una y otra vez hasta que el usuario introduzca una ruta vac\u00eda (tecla intro). Deber\u00e1 manejar las posibles excepciones.</p> <p>Necesitar\u00e1s crear la funci\u00f3n <code>void muestraInfoRuta(File ruta)</code> que dada una ruta de tipo <code>File</code> haga lo siguiente:</p> <ul> <li>Si es un archivo, mostrar\u00e1 por pantalla el nombre del archivo.</li> <li>Si es un directorio, mostrar\u00e1 por pantalla la lista de directorios y archivos que contiene (sus nombres). Deber\u00e1 mostrar primero los directorios y luego los archivos.</li> <li>En cualquier caso, a\u00f1ade delante del nombre la etiqueta <code>[*]</code> o <code>[A]</code> para indicar si es un directorio o un archivo respectivamente.</li> <li>Si el path no existe lanzar\u00e1 un <code>FileNotFoundException</code>.</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-32","title":"Ejercicio 32","text":"<p>ejercicio <code>_32_informacionFicheros2</code></p> <p>Partiendo de una copia del programa anterior, modifica la funci\u00f3n <code>muestraInfoRuta</code>:</p> <ul> <li>En el caso de un directorio, mostrar\u00e1 la lista de directorios y archivos en orden alfab\u00e9tico. Es decir, primero los directorios en orden alfab\u00e9tico y luego los archivos en orden alfab\u00e9tico. Te ser\u00e1 \u00fatil <code>Arrays.sort()</code>.</li> <li>A\u00f1ade un segundo argumento <code>boolean info</code> que cuando sea <code>true</code> mostrar\u00e1, junto a la informaci\u00f3n de cada directorio o archivo, su tama\u00f1o en bytes y la fecha de la \u00faltima modificaci\u00f3n. Cuando <code>info</code> sea <code>false</code> mostrar\u00e1 la informaci\u00f3n como en el ejercicio anterior.</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-33","title":"Ejercicio 33","text":"<p>ejercicio <code>_33_renombrarFicheros</code></p> <ol> <li>Renombrando directorios y ficheros</li> </ol> <p>Implementa un programa que haga lo siguiente:</p> <ul> <li>Cambiar el nombre de la carpeta <code>Documentos</code> a <code>DOCS</code>, el de la carpeta <code>Fotografias</code> a <code>FOTOS</code> y el de la carpeta <code>Libros</code> a <code>LECTURAS</code>.</li> <li>Cambiar el nombre de todos los archivos de las carpetas <code>FOTOS</code> y <code>LECTURAS</code> quit\u00e1ndole la extensi\u00f3n. Por ejemplo, <code>astronauta.jpg</code> pasar\u00e1 a llamarse <code>astronauta</code>.</li> </ul>"},{"location":"ud06/ud06ac/#ejercicio-34","title":"Ejercicio 34","text":"<p>ejercicio <code>_34_moverCarpetas</code></p> <p>Implementa un programa que cree, dentro de <code>Documentos</code>, dos nuevas carpetas: <code>Mis Cosas</code> y <code>Alfabeto</code>. Mueve las carpetas <code>Fotografias</code> y <code>Libros</code> dentro de <code>Mis Cosas</code>. Luego crea dentro de <code>Alfabeto</code> una carpeta por cada letra del alfabeto (en may\u00fasculas): <code>A</code>, <code>B</code>, <code>C</code>... <code>Z</code>. Te ser\u00e1n de ayuda los c\u00f3digos num\u00e9ricos ASCII: https://elcodigoascii.com.ar.</p>"},{"location":"ud06/ud06ac/#ejercicio-35","title":"Ejercicio 35","text":"<p>ejercicio <code>_35_borrarArchivos</code></p> <p>Implementa un programa con una funci\u00f3n <code>boolean borraTodo(File f)</code> que borre <code>f</code>: Si no existe lanzar\u00e1 una excepci\u00f3n. Si es un archivo lo borrar\u00e1. Si es un directorio, borrar\u00e1 primero sus archivos y luego el propio directorio (recuerda que para poder borrar un directorio debe estar vac\u00edo). Devolver\u00e1 <code>true</code> si pudo borrar el <code>File f</code> (<code>false</code> si no fu\u00e9 posible).</p> <p>Prueba la funci\u00f3n borrando las carpetas: <code>Documentos/Fotografias</code>, <code>Documentos/Libros</code> y <code>Documentos</code> (es decir, tres llamadas a la funci\u00f3n, en ese orden).</p> <p>Super extra challenge: Esta funci\u00f3n, tal y como est\u00e1 definida, no borrar\u00e1 las subcarpetas que est\u00e9n dentro de una carpeta (para ello habr\u00eda que borrar primero el contenido de dichas subcarpetas). \u00bfSe te ocurre c\u00f3mo podr\u00eda hacerse?</p>"},{"location":"ud06/ud06ac/#ejercicio-36","title":"Ejercicio 36","text":"<p>ejercicio <code>_36_maximoMinimo</code></p> <p>Implementa un programa que muestre por pantalla los valores m\u00e1ximos y m\u00ednimos del archivo <code>numeros.txt</code>.</p>"},{"location":"ud06/ud06ac/#ejercicio-37","title":"Ejercicio 37","text":"<p>ejercicio <code>_37_notasAlumnos</code></p> <p>El archivo <code>alumnos_notas.txt</code> contiene una lista de 10 alumnos y las notas que han obtenido en cada asignatura. El n\u00famero de asignaturas de cada alumno es variable. Implementa un programa que muestre por pantalla la nota media de cada alumno junto a su nombre y apellido, ordenado por nota media de mayor a menor.</p>"},{"location":"ud06/ud06ac/#ejercicio-38","title":"Ejercicio 38","text":"<p>ejercicio <code>_38_ordenarArchivos</code></p> <p>Implementa un programa que pida al usuario un nombre de archivo <code>A</code> para lectura y otro nombre de archivo <code>B</code> para escritura. Leer\u00e1 el contenido del archivo <code>A</code> (por ejemplo <code>usa_personas.txt</code>) y lo escribir\u00e1 ordenado alfab\u00e9ticamente en B (por ejemplo <code>usa_personas_sorted.txt</code>).</p>"},{"location":"ud06/ud06ac/#ejercicio-39","title":"Ejercicio 39","text":"<p>ejercicio <code>_39_nombreApellidos</code></p> <p>Implementa un programa que genere aleatoriamente nombres de persona (combinando nombres y apellidos de <code>usa_nombres.txt</code> y <code>usa_apellidos.txt</code>). Se le pedir\u00e1 al usuario cu\u00e1ntos nombres de persona desea generar y a qu\u00e9 archivo a\u00f1adirlos (por ejemplo <code>usa_personas.txt</code>).</p>"},{"location":"ud06/ud06ac/#ejercicio-40","title":"Ejercicio 40","text":"<p>ejercicio <code>_40_diccionario</code></p> <p>Implementa un programa que cree la carpeta <code>Diccionario</code> con tantos archivos como letras del abecedario (<code>A.txt</code>, <code>B.txt</code>\u2026 <code>Z.txt</code>). Introducir\u00e1 en cada archivo las palabras de <code>diccionario.txt</code> que comiencen por dicha letra.</p>"},{"location":"ud06/ud06ac/#ejercicio-41","title":"Ejercicio 41","text":"<p>ejercicio <code>_41_busquedaEnPi</code></p> <p>Implementa un programa que pida al usuario un n\u00famero de cualquier longitud, como por ejemplo \"1234\", y le diga al usuario si dicho n\u00famero aparece en el primer mill\u00f3n de decimales del n\u00ba pi (est\u00e1n en el archivo <code>pi-million.txt</code>). No est\u00e1 permitido utilizar ninguna librer\u00eda ni clase ni m\u00e9todo que realice la b\u00fasqueda. Debes implementar el algoritmo de b\u00fasqueda t\u00fa.</p>"},{"location":"ud06/ud06ac/#ejercicio-42","title":"Ejercicio 42","text":"<p>ejercicio <code>_42_estadisticas</code></p> <p>Implementa un programa que lea un documento de texto y muestre por pantalla algunos datos estad\u00edsticos: n\u00ba de l\u00edneas, n\u00ba de palabras, n\u00ba de caracteres y cu\u00e1les son las 10 palabras m\u00e1s comunes (y cu\u00e1ntas veces aparecen). Prueba el programa con los archivos de la carpeta <code>Libros</code>.</p> <p>Sugerencia</p> <p>Para llevar la cuenta de cu\u00e1ntas veces aparece cada palabra puedes utilizar una HashTable. Una tabla hash es una estructura de datos tipo colecci\u00f3n (como el ArrayList), que permite almacenar pares clave-valor. Por ejemplo {\u201celefante\u201d, 5} o {\u201ccasa\u201d, 10} son pares  que asocian una palabra (clave) con un n\u00ba entero (valor)."},{"location":"ud06/ud06pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li> <p>Curso Java. Entrada Salida datos I. V\u00eddeo 14</p> </li> <li> <p>Curso Java. Entrada Salida datos II. V\u00eddeo 15</p> </li> <li>Curso Java. Streams I. Accediendo a ficheros. Lectura. V\u00eddeo 152</li> <li>Curso Java. Streams II. Accediendo a ficheros Escritura. V\u00eddeo 153</li> <li>Curso Java. Streams III. Usando buffers. V\u00eddeo 154</li> <li>Curso Java Streams IV. Leyendo archivos. Streams Byte I. V\u00eddeo 155</li> <li>Curso Java. Streams V. Escribiendo archivos Streams Byte II. V\u00eddeo 156</li> <li>Curso Java. Serializaci\u00f3n. V\u00eddeo 157</li> <li>Curso Java. Serializaci\u00f3n II. SerialVersionUID. V\u00eddeo 158</li> <li>Curso Java. Sockets I. V\u00eddeo 190</li> <li>Curso Java. Manipulaci\u00f3n archivos y directorios. Clase File I. V\u00eddeo 159</li> <li>Curso Java. Manipulaci\u00f3n archivos y directorios. Clase File II. V\u00eddeo 160</li> </ul>"},{"location":"ud06/ud06re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li>Wikipedia</li> <li>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> <li>Apuntes Lionel</li> </ul>"},{"location":"ud07/ud0701/","title":"7.1 Introducci\u00f3n","text":"<p>Cuando el volumen de datos a manejar por una aplicaci\u00f3n es elevado, no basta con utilizar variables.</p> <p>Manejar los datos de un \u00fanico pedido en una aplicaci\u00f3n puede ser relativamente sencillo, pues un pedido est\u00e1 compuesto por una serie de datos y eso simplemente se traduce en varias variables. Pero, \u00bfqu\u00e9 ocurre cuando en una aplicaci\u00f3n tenemos que gestionar varios pedidos a la vez? Lo mismo ocurre en otros casos. </p> <p>Para poder realizar ciertas aplicaciones se necesita poder manejar datos que van m\u00e1s all\u00e1 de meros datos simples (n\u00fameros y letras). A veces, los datos que tiene que manejar la aplicaci\u00f3n son datos compuestos, es decir, datos que est\u00e1n compuestos a su vez de varios datos m\u00e1s simples. Por ejemplo, un pedido est\u00e1 compuesto por varios datos, los datos podr\u00edan ser el cliente que hace el pedido, la direcci\u00f3n de entrega, la fecha requerida de entrega y los art\u00edculos del pedido.</p> <p>Los datos compuestos son un tipo de estructura de datos, y en realidad ya los has manejado. Las clases son un ejemplo de estructuras de datos que permiten almacenar datos compuestos, y el objeto en s\u00ed, la instancia de una clase, ser\u00eda el dato compuesto. Pero, a veces, los datos tienen estructuras a\u00fan m\u00e1s complejas, y son necesarias soluciones adicionales.</p> <p>Esas soluciones consisten b\u00e1sicamente en la capacidad de poder manejar varios datos del mismo o diferente tipo de forma din\u00e1mica y flexible.</p>"},{"location":"ud07/ud0701/#estructuras-de-almacenamiento","title":"Estructuras de almacenamiento","text":"<p>\u00bfC\u00f3mo almacenar\u00edas en memoria un listado de n\u00fameros del que tienes que extraer el valor m\u00e1ximo?</p> <p>Seguro que te resultar\u00eda f\u00e1cil. Pero, \u00bfy si el listado de n\u00fameros no tiene un tama\u00f1o fijo, sino que puede variar en tama\u00f1o de forma din\u00e1mica? Entonces la cosa se complica.</p> <p>Un listado de n\u00fameros que aumenta o decrece en tama\u00f1o es una de las cosas que aprender\u00e1s a utilizar aqu\u00ed, utilizando estructuras de datos.</p> <p>Pasaremos por alto las clases y los objetos, pues ya los has visto con anterioridad, pero debes saber que las clases en s\u00ed mismas son la evoluci\u00f3n de un tipo de estructuras de datos conocidas como datos compuestos (tambi\u00e9n llamadas registros). Las clases, adem\u00e1s de aportar la ventaja de agrupar datos relacionados entre s\u00ed en una misma estructura (caracter\u00edstica aportada por los datos compuestos), permiten agregar m\u00e9todos que manejen dichos datos, ofreciendo una herramienta de programaci\u00f3n sin igual. Pero todo esto ya lo sab\u00edas.</p> <p>Las estructuras de almacenamiento, en general, se pueden clasificar de varias formas, atendiendo a: </p> Si pueden almacenar datos de diferente tipo o no con capacidad de almacenar varios datos del mismo tipo: varios n\u00fameros, varios caracteres, etc. los arrays, las listas, los conjuntos, las cadenas de caracteres con capacidad de almacenar varios datos de distinto tipo: n\u00fameros, fechas, cadenas de caracteres, etc. las clases En funci\u00f3n de si pueden o no cambiar de tama\u00f1o de forma din\u00e1mica cuyo tama\u00f1o se establece en el momento de la creaci\u00f3n o definici\u00f3n y su tama\u00f1o no puede variar despu\u00e9s. los arrays, las matrices (arrays multidimensionales) cuyo tama\u00f1o es variable (conocidas como estructuras din\u00e1micas). Su tama\u00f1o crece o decrece seg\u00fan las necesidades de forma din\u00e1mica. las listas, \u00e1rboles, conjuntos y el caso de algunos tipos de cadenas de caracteres. Atendiendo a la forma en la que los datos se ordenan dentro de la estructura que no se ordenan de por s\u00ed, y debe ser el programador el encargado de ordenar los datos si fuera necesario los arrays ordenadas: al incorporar un dato nuevo a todos los datos existentes, este se almacena en una posici\u00f3n concreta que ir\u00e1 en funci\u00f3n del orden. El orden establecido en la estructura puede variar dependiendo de las necesidades del programa: alfab\u00e9tico, orden num\u00e9rico de mayor a menor, momento de inserci\u00f3n, etc. ArrayList, TreeSet <p>Todav\u00eda no conoces mucho de las estructuras, y probablemente todo te suena raro y extra\u00f1o. No te preocupes, poco a poco ir\u00e1s descubri\u00e9ndolas. Ver\u00e1s que son sencillas de utilizar y muy c\u00f3modas.</p>"},{"location":"ud07/ud0701/#clases-y-metodos-genericos","title":"Clases y m\u00e9todos gen\u00e9ricos","text":"<p>\u00bfCrees que el c\u00f3digo es m\u00e1s legible al utilizar gen\u00e9ricos o que se complica? La verdad es que al principio cuesta, pero despu\u00e9s, el c\u00f3digo se entiende mejor que si se empieza a insertar conversiones de tipo.</p> <p>Las clases gen\u00e9ricas son equivalentes a los m\u00e9todos gen\u00e9ricos pero a nivel de clase, permiten definir un par\u00e1metro de tipo gen\u00e9rico que se podr\u00e1 usar a lo largo de toda la clase, facilitando as\u00ed crear clases gen\u00e9ricas que son capaces de trabajar con diferentes tipos de datos base. Para crear una clase gen\u00e9rica se especifican los par\u00e1metros de tipo al lado del nombre de la clase:</p> Java<pre><code> public class Util&lt;T&gt; {\n    T temp;\n\n    public void invertir (T[] array) {\n       for (int i = 0; i &lt; array.length / 2; i++) {\n          temp = array[i];\n          array[i] = array[array.length - i - 1];\n          array[array.length - i - 1] = temp;\n       }\n    }\n}\n</code></pre> <p>En el ejemplo anterior, la clase <code>Util</code> contiene el m\u00e9todo <code>invertir</code> cuya funci\u00f3n es invertir el orden de los elementos de cualquier <code>array</code>, sea del tipo que sea. Para usar esa clase gen\u00e9rica hay que crear un objeto o instancia de dicha clase especificando el tipo base entre los s\u00edmbolos menor que (<code>&lt;</code>) y mayor que (<code>&gt;</code>), justo detr\u00e1s del nombre de la clase. Veamos un ejemplo:</p> Java<pre><code>Integer[] numeros = {0,1,2,3,4,5,6,7,8,9}; //el array clase wrapper\n\nUtil&lt;Integer&gt; u = new Util&lt;Integer&gt;();\n\nu.invertir(numeros);\nfor (int i=0; i&lt;numeros.length; i++){\n   System.out.println(numeros[i]);\n}\n</code></pre> <p>Como puedes observar, el uso de gen\u00e9ricos es sencillo, tanto a nivel de clase como a nivel de m\u00e9todo.</p> <p>Simplemente, a la hora de crear una instancia de una clase gen\u00e9rica, hay que especificar el tipo, tanto en la definici\u00f3n (<code>Util&lt;Integer&gt; u</code>) como en la creaci\u00f3n (<code>new Util&lt;Integer&gt;()</code>).</p> <p>Los gen\u00e9ricos los vamos a usar ampliamente a partir de ahora, aplicados a un mont\u00f3n de clases gen\u00e9ricas que tiene Java y que son de gran utilidad, por lo que es conveniente que aprendas bien a usar una clase gen\u00e9rica.</p> <p>Par\u00e1metros de las clases gen\u00e9ricas</p> <p>Los par\u00e1metros de tipo de las clases gen\u00e9ricas solo pueden ser clases: - no pueden ser jam\u00e1s tipos de datos primitivos como <code>int</code>, <code>short</code>, <code>double</code>, etc. - debemos usar sus clases envoltorio (wrappers) <code>Integer</code>, <code>Short</code>, <code>Double</code>, etc.</p> <p>Todav\u00eda hay un mont\u00f3n de cosas m\u00e1s sobre los m\u00e9todos y las clases gen\u00e9ricas que deber\u00edas saber. A continuaci\u00f3n se muestran algunos usos interesantes de los gen\u00e9ricos:</p> <ul> <li>Dos o m\u00e1s par\u00e1metros de tipo (I):</li> </ul> <p>Si el m\u00e9todo gen\u00e9rico necesita tener dos o m\u00e1s par\u00e1metros gen\u00e9ricos, podemos indicarlo separ\u00e1ndolos por comas. </p> Java<pre><code>public class Util&lt;T,M&gt;{\n    public static &lt;T,M&gt; int sumaDeLongitudes (T[] a, M[] b){\n       return a.length + b.length;\n    }\n}\n</code></pre> <p>\u200b   En el ejemplo anterior se suman las longitudes de dos arrays que no tienen que ser del mismo tipo.</p> <ul> <li>Dos o m\u00e1s par\u00e1metros de tipo (II):</li> </ul> <p>Usar un m\u00e9todo o una clase con dos o m\u00e1s par\u00e1metros gen\u00e9ricos es sencillo, a la hora de invocar al m\u00e9todo o crear la clase, se indican los tipos base separados por coma.</p> Java<pre><code>Integer[] a1 = {0,1,2,3,4};\nDouble[]  a2 = {0d,1d,2d,3d,4d};\nint resultado = Util.&lt;Integer,Double&gt;sumaDeLongitudes(a1,a2);\nSystem.out.println(resultado);\n</code></pre> <ul> <li>Dos o m\u00e1s par\u00e1metros de tipo (III):</li> </ul> <p>Si una clase gen\u00e9rica necesita tener dos o m\u00e1s par\u00e1metros gen\u00e9ricos, podemos indicarlo separ\u00e1ndolos por comas.    En el ejemplo anterior se muestra una clase que almacena una terna de elementos de diferente tipo base que est\u00e1n relacionados entre s\u00ed.</p> Java<pre><code>public class Terna&lt;A,B,C&gt;{\n  A a;\n  B b;\n  C c;\n  public Terna(A a, B b, C c){\n    this.a = a;\n    this.b = b;\n    this.c = c;\n  }\n  public A getA(){return a;}\n  public B getB(){return b;}\n  public C getC(){return c;}\n}\n</code></pre> <ul> <li>M\u00e9todos con tipos adicionales:</li> </ul> <p>Una clase gen\u00e9rica puede tener unos par\u00e1metros gen\u00e9ricos, pero si en uno de sus m\u00e9todos necesitamos otros par\u00e1metros gen\u00e9ricos distintos, no hay problema, podemos combinarlos.</p> Java<pre><code>class Util&lt;A,B&gt;{\n  A a;\n  Util (A a){\n    this.a = a;\n  }\n  public &lt;B&gt; void salida(B b){\n    System.out.println ( a.toString() + b.toString() );\n  }\n}\n</code></pre> <ul> <li>Inferencia (deducci\u00f3n) de tipos (I):</li> </ul> <p>No siempre es necesario indicar los tipos a la hora de instanciar un m\u00e9todo gen\u00e9rico. A partir de Java 7, es capaz de determinar los tipos a partir de los par\u00e1metros.</p> Java<pre><code>Integer[] a1 = {0,1,2,3,4};\nDouble[]  a2 = {0d,1d,2d,3d,4d};\nutil.&lt;Integer,Double&gt;sumaDeLongitudes(a1,a2);\nutil.sumaDeLongitudes(a1,a2);  //no es necesario indicar el tipo para instanciar\n</code></pre> <p>Las dos expresiones de arriba serian v\u00e1lidas y funcionar\u00edan. Si no es capaz de inferirlos, nos dar\u00e1 un error a la hora de compilar.</p> <ul> <li>Inferencia de tipos (II):</li> </ul> <p>A partir de Java 7 es posible usar el operador diamante <code>&lt; &gt;</code> para simplificar la instanciaci\u00f3n o creaci\u00f3n de nuevos objetos a partir de clases gen\u00e9ricas. Cuidado, esto solo es posible a partir de Java 7.</p> Java<pre><code>Integer a1 = 0;\nDouble  d1 = 1.3d;\nFloat   f1 = 1.4f;\nTerna &lt;Integer,Double,Float&gt; t = new Terna&lt;&gt;(a1,d1,f1);\n</code></pre> <ul> <li>Limitaci\u00f3n de tipos:</li> </ul> <p>Se pueden limitar el conjunto de tipos que se pueden usar con una clase o m\u00e9todo gen\u00e9rico usando el operador <code>extends</code>. El operador <code>extends</code> permite indicar que la clase que se pasa como par\u00e1metro gen\u00e9rico tiene que derivar de una clase espec\u00edfica.</p> Java<pre><code>public class Util {\n    public static &lt;T extends Number&gt; Double sumar (T t1, T t2){\n        return t1.doubleValue() + t2.doubleValue();\n    }\n}\n</code></pre> <p>En el ejemplo, no se admitir\u00e1 ninguna clase que no derive de <code>Number</code>, pudiendo as\u00ed realizar operaciones matem\u00e1ticas.</p> <ul> <li>Paso de clases gen\u00e9ricas por par\u00e1metro:</li> </ul> <p>Cuando un m\u00e9todo tiene como par\u00e1metro una clase gen\u00e9rica (como en el caso del m\u00e9todo test del ejemplo), se puede especificar cu\u00e1l debe ser el tipo base usado en la instancia de la clase gen\u00e9rica que se le pasa como argumento. Esto permite, entre otras cosas, crear diferentes versiones de un mismo m\u00e9todo (sobrecarga), dependiendo del tipo base usado en la instancia de la clase gen\u00e9rica se ejecutar\u00e1 una versi\u00f3n u otra.</p> Java<pre><code>public class Ejemplo &lt;A&gt; {\n  public A a;\n}\n...\nvoid test (Ejemplo&lt;Integer&gt; e) {\n  ...\n}\n</code></pre> <ul> <li>Paso de clases gen\u00e9ricas por par\u00e1metro. Wildcards (I):</li> </ul> <p>Cuando un m\u00e9todo admite como par\u00e1metro una clase gen\u00e9rica en la que no importa el tipo de objeto sobre la que se ha creado, podemos usar el interrogante para indicar \"cualquier tipo\".</p> Java<pre><code>public class Ejemplo &lt;A&gt; {\n   public A a;\n}\n...\nvoid test (Ejemplo&lt;?&gt; e) {\n   ...\n}\n</code></pre> <ul> <li>Paso de clases gen\u00e9ricas por par\u00e1metro. Wildcards (II):</li> </ul> <p>Tambi\u00e9n es posible limitar el conjunto de tipos que una clase gen\u00e9rica puede usar, a trav\u00e9s del operador <code>extends</code>. El ejemplo anterior es como decir \"cualquier tipo que derive de Number\".</p> Java<pre><code>public class Ejemplo &lt;A&gt; {\n   public A a;\n}\n...\nvoid test (Ejemplo&lt;? extends Number&gt; e) {\n   ...\n}\n</code></pre>"},{"location":"ud07/ud0702/","title":"7.2 Colecciones","text":""},{"location":"ud07/ud0702/#introduccion","title":"Introducci\u00f3n","text":"<p>\u00bfQu\u00e9 consideras una colecci\u00f3n? Pues seguramente al pensar en el t\u00e9rmino se te viene a la cabeza una colecci\u00f3n de libros o algo parecido, y la idea no va muy desencaminada. Una colecci\u00f3n a nivel de software es un grupo de elementos almacenados de forma conjunta en una misma estructura. Eso son las colecciones.</p> <p>Las colecciones definen un conjunto de interfaces, clases gen\u00e9ricas y algoritmos que permiten manejar grupos de objetos, todo ello enfocado a potenciar la reusabilidad del software y facilitar las tareas de programaci\u00f3n. Te parecer\u00e1 incre\u00edble el tiempo que se ahorra empleando colecciones y c\u00f3mo se reduce la complejidad del software us\u00e1ndolas adecuadamente. Las colecciones permiten almacenar y manipular grupos de objetos que, a priori, est\u00e1n relacionados entre s\u00ed (aunque no es obligatorio que est\u00e9n relacionados, lo l\u00f3gico es que si se almacenan juntos es porque tienen alguna relaci\u00f3n entre s\u00ed), pudiendo trabajar con cualquier tipo de objeto (de ah\u00ed que se empleen los gen\u00e9ricos en las colecciones).</p> <p>Adem\u00e1s las colecciones permiten realizar algunas operaciones \u00fatiles sobre los elementos almacenados, tales como b\u00fasqueda u ordenaci\u00f3n. En algunos casos es necesario que los objetos almacenados cumplan algunas condiciones (que implementen algunas interfaces), para poder hacer uso de estos algoritmos. </p> <p>Las colecciones son en general elementos de programaci\u00f3n que est\u00e1n disponibles en muchos lenguajes de programaci\u00f3n. En algunos lenguajes de programaci\u00f3n su uso es algo m\u00e1s complejo (como es el caso de C++), pero en Java su uso es bastante sencillo.</p> <p>Las colecciones en Java parten de una serie de interfaces b\u00e1sicas. Cada interfaz define un modelo de colecci\u00f3n y las operaciones que se pueden llevar a cabo sobre los datos almacenados, por lo que es necesario conocerlas. La interfaz inicial, a trav\u00e9s de la cual se han construido el resto de colecciones, es la interfaz <code>java.util.Collection</code>, que define las operaciones comunes a todas las colecciones derivadas. A continuaci\u00f3n se muestran las operaciones m\u00e1s importantes definidas por esta interfaz, ten en cuenta que <code>Collection</code> es una interfaz gen\u00e9rica donde <code>&lt;E&gt;</code> es el par\u00e1metro de tipo (podr\u00eda ser cualquier clase):</p> <ul> <li>M\u00e9todo <code>int size()</code> : retorna el n\u00famero de elementos de la colecci\u00f3n.</li> <li>M\u00e9todo <code>boolean isEmpty()</code> : retornar\u00e1 verdadero si la colecci\u00f3n est\u00e1 vac\u00eda.</li> <li>M\u00e9todo <code>boolean contains (Object element)</code>: retornar\u00e1 verdadero si la colecci\u00f3n tiene el elemento pasado como par\u00e1metro.</li> <li>M\u00e9todo <code>boolean add(E element)</code> : permitir\u00e1 a\u00f1adir elementos a la colecci\u00f3n.</li> <li>M\u00e9todo <code>boolean remove(Object element)</code> : permitir\u00e1 eliminar elementos de la colecci\u00f3n.</li> <li>M\u00e9todo <code>Iterator&lt;E&gt; iterator()</code>: permitir\u00e1 crear un iterador para recorrer los elementos de la colecci\u00f3n. Esto se ve m\u00e1s adelante, no te preocupes.</li> <li>M\u00e9todo <code>Object[] toArray()</code>: permite pasar la colecci\u00f3n a un array de objetos tipo Object.</li> <li>M\u00e9todo <code>boolean containsAll(Collection&lt;?&gt; c)</code>: permite comprobar si una colecci\u00f3n contiene los elementos existentes en otra colecci\u00f3n, si es as\u00ed, retorna verdadero.</li> <li>M\u00e9todo <code>boolean addAll(Collection&lt;?&gt; extends E&gt; c)</code>: permite a\u00f1adir todos los elementos de una colecci\u00f3n a otra colecci\u00f3n, siempre que sean del mismo tipo (o deriven del mismo tipo base).</li> <li>M\u00e9todo <code>boolean removeAll(Collection&lt;?&gt; c)</code>: si los elementos de la colecci\u00f3n pasada como par\u00e1metro est\u00e1n en nuestra colecci\u00f3n, se eliminan, el resto se quedan.</li> <li>M\u00e9todo <code>boolean retainAll(Collection&lt;?&gt; c)</code>: si los elementos de la colecci\u00f3n pasada como par\u00e1metro est\u00e1n en nuestra colecci\u00f3n, se dejan, el resto se eliminan.</li> <li>M\u00e9todo <code>void clear()</code>: vaciar la colecci\u00f3n.</li> </ul> <p>M\u00e1s adelante veremos c\u00f3mo se usan estos m\u00e9todos, ser\u00e1 cuando veamos las implementaciones (clases gen\u00e9ricas que implementan alguna de las interfaces derivadas de la interfaz <code>Collection</code>).</p>"},{"location":"ud07/ud0702/#conjuntos-sets","title":"Conjuntos (sets)","text":"<p>\u00bfCon qu\u00e9 relacionar\u00edas los conjuntos? Seguro que con las matem\u00e1ticas. Los conjuntos son un tipo de colecci\u00f3n que no admite duplicados, derivados del concepto matem\u00e1tico de conjunto.</p> <p>La interfaz <code>java.util.Set</code> define c\u00f3mo deben ser los conjuntos, y implementa la interfaz <code>Collection</code>, aunque no a\u00f1ade ninguna operaci\u00f3n nueva. Las implementaciones (clases gen\u00e9ricas que implementan la interfaz <code>Set</code>) m\u00e1s usadas son las siguientes:</p> <ul> <li><code>java.util.HashSet</code>. Conjunto que almacena los objetos usando tablas hash (estructura de datos formada b\u00e1sicamente por un array donde la posici\u00f3n de los datos va determinada por una funci\u00f3n hash, permitiendo localizar la informaci\u00f3n de forma extraordinariamente r\u00e1pida. Los datos est\u00e1n ordenados en la tabla en base a un resumen num\u00e9rico de los mismos (en hexadecimal generalmente) obtenido a partir de un algoritmo para c\u00e1lculo de res\u00famenes, denominadas funciones hash. El resumen no tiene significado para un ser humano, se trata simplemente de un mecanismo para obtener un n\u00famero asociado a un conjunto de datos. El inconveniente de estas tablas es que los datos se ordenan por el resumen obtenido, y no por el valor almacenado. El resumen, de un buen algoritmo hash, no se parece en nada al contenido almacenado) lo cual acelera enormemente el acceso a los objetos almacenados.</li> </ul> <p>Inconvenientes: necesitan bastante memoria y no almacenan los objetos de forma ordenada (al contrario, pueden aparecer completamente desordenados).</p> <ul> <li> <p><code>java.util.LinkedHashSet</code>. Conjunto que almacena objetos combinando tablas hash, para un acceso r\u00e1pido a los datos, y listas enlazadas (estructura de datos que almacena los objetos enlaz\u00e1ndolos entre s\u00ed a trav\u00e9s de un apuntador de memoria o puntero, manteniendo un orden, que generalmente es el del momento de inserci\u00f3n, pero que puede ser otro. Cada dato se almacena en una estructura llamada nodo en la que existe un campo, generalmente llamado siguiente, que contiene la direcci\u00f3n de memoria del siguiente nodo (con el siguiente dato)) para conservar el orden. El orden de almacenamiento es el de inserci\u00f3n, por lo que se puede decir que es una estructura ordenada a medias.</p> </li> <li> <p>Inconvenientes: necesitan bastante memoria y es algo m\u00e1s lenta que <code>HashSet</code> .</p> </li> <li> <p><code>java.util.TreeSet</code>. Conjunto que almacena los objetos usando unas estructuras conocidas como \u00e1rboles rojo\u2010negro. Son m\u00e1s lentas que los dos tipos anteriores. pero tienen una gran ventaja: los datos almacenados se ordenan por valor. Es decir, que aunque se inserten los elementos de forma desordenada, internamente se ordenan dependiendo del valor de cada uno.</p> </li> </ul> <p>Poco a poco, iremos viendo que son las listas enlazadas y los \u00e1rboles (no profundizaremos en los \u00e1rboles rojo\u2010negro, pero si veremos las estructuras tipo \u00e1rbol en general). Veamos un ejemplo de uso b\u00e1sico de la estructura <code>HashSet</code> y despu\u00e9s, profundizaremos en los <code>LinkedHashSet</code> y los <code>TreeSet</code> .</p> <p>Para crear un conjunto, simplemente creamos el <code>HashSet</code> indicando el tipo de objeto que va a almacenar, dado que es una clase gen\u00e9rica que puede trabajar con cualquier tipo de dato debemos crearlo como sigue (no olvides hacer la importaci\u00f3n de <code>java.util.HashSet</code> primero):</p> Java<pre><code>HashSet&lt;Integer&gt; conjunto=new HashSet&lt;Integer&gt;();\nHashSet&lt;Integer&gt; conjunto=new HashSet&lt;&gt;(); //a partir de Java 7\n</code></pre> <p>Despu\u00e9s podremos ir almacenando objetos dentro del conjunto usando el m\u00e9todo <code>add</code> (definido por la interfaz <code>Set</code>). Los objetos que se pueden insertar ser\u00e1n siempre del tipo especificado al crear el conjunto:</p> Java<pre><code>Integer n=new Integer(10);\nif (!conjunto.add(n)){\n    System.out.println(\"N\u00famero ya en la lista.\");\n}\n</code></pre> <p>Si el elemento ya est\u00e1 en el conjunto, el m\u00e9todo <code>add</code> retornar\u00e1 <code>false</code> indicando que no se pueden insertar duplicados. Si todo va bien, retornar\u00e1 <code>true</code>.</p>"},{"location":"ud07/ud0702/#acceso","title":"Acceso","text":"<p>Y ahora te preguntar\u00e1s, \u00bfc\u00f3mo accedo a los elementos almacenados en un conjunto? Para obtener los elementos almacenados en un conjunto hay que usar iteradores, que permiten obtener los elementos del conjunto uno a uno de forma secuencial (no hay otra forma de acceder a los elementos de un conjunto, es su inconveniente). Los iteradores se ven en mayor profundidad m\u00e1s adelante, de momento, vamos a usar iteradores de forma transparente, a trav\u00e9s de una estructura for especial, denominada bucle \" for-each \" o bucle \"para cada\". En el siguiente c\u00f3digo se usa un bucle foreach, en \u00e9l la variable i va tomando todos los valores almacenados en el conjunto hasta que llega al \u00faltimo:</p> Java<pre><code>for (Integer i: conjunto) {\n    System.out.println(\"Elemento almacenado:\"+i);\n}\n</code></pre> <p>Como ves la estructura <code>for-each</code> es muy sencilla: la palabra <code>for</code> seguida de \"(<code>tipo variable:colecci\u00f3n</code>)\" y el cuerpo del bucle; <code>tipo</code> es el tipo del objeto sobre el que se ha creado la colecci\u00f3n, <code>variable</code> pues es la variable donde se almacenar\u00e1 cada elemento de la colecci\u00f3n y <code>coleccion</code> la colecci\u00f3n en s\u00ed. Los bucles <code>for-each</code> se pueden usar para todas las colecciones.</p>"},{"location":"ud07/ud0702/#linkedhashset-y-treeset","title":"<code>LinkedHashSet</code> y <code>TreeSet</code>","text":"<p>\u00bfEn qu\u00e9 se diferencian las estructuras <code>LinkedHashSet</code> y <code>TreeSet</code> de la estructura <code>HashSet</code>? Ya se comento antes, y es b\u00e1sicamente en su funcionamiento interno.</p> <p>La estructura <code>LinkedHashSet</code> es una estructura que internamente funciona como una lista enlazada, aunque usa tambi\u00e9n tablas hash para poder acceder r\u00e1pidamente a los elementos. Una lista enlazada es una estructura similar a la representada en la imagen de la derecha, la cual est\u00e1 compuesta por nodos (elementos que forman la lista) que van enlaz\u00e1ndose entre s\u00ed. Un nodo contiene dos cosas: el dato u objeto almacenado en la lista y el siguiente nodo de la lista. Si no hay siguiente nodo, se indica poniendo nulo (null) en la variable que contiene el siguiente nodo.</p> <p>Las listas enlazadas tienen un mont\u00f3n de operaciones asociadas en las que no vamos a profundizar: eliminaci\u00f3n de un nodo de la lista, inserci\u00f3n de un nodo al final, al principio o entre dos nodos, etc. </p> <p>Gracias a las colecciones podremos utilizar listas enlazadas sin tener que complicarnos en detalles de programaci\u00f3n.</p> <p>La estructura <code>TreeSet</code>, en cambio, utiliza internamente \u00e1rboles. Los \u00e1rboles son como las listas pero mucho m\u00e1s complejos. En vez de tener un \u00fanico elemento siguiente, pueden tener dos o m\u00e1s elementos siguientes, formando estructuras organizadas y jer\u00e1rquicas.</p> <p>Los nodos se diferencian en dos tipos: nodos padre y nodos hijo; un nodo padre puede tener varios nodos hijo asociados (depende del tipo de \u00e1rbol), dando lugar a una estructura que parece un \u00e1rbol invertido (de ah\u00ed su nombre).</p> <p>En la figura de abajo se puede apreciar un \u00e1rbol donde cada nodo puede tener dos hijos, denominados izquierdo (izq) y derecho (dch). Puesto que un nodo hijo puede tambi\u00e9n ser padre a su vez, los \u00e1rboles se suelen visualizar para su estudio por niveles para entenderlos mejor, donde cada nivel contiene hijos de los nodos del nivel anterior, excepto el primer nivel (que no tiene padre).</p> <p>Los \u00e1rboles son estructuras complejas de manejar y que permiten operaciones muy sofisticadas. Los \u00e1rboles usados en los <code>TreeSet</code>, los \u00e1rboles rojo\u2010negro, son \u00e1rboles auto-ordenados, es decir, que al insertar un elemento, este queda ordenado por su valor de forma que al recorrer el \u00e1rbol, pasando por todos los nodos, los elementos salen ordenados. El ejemplo mostrado en la imagen es simplemente un \u00e1rbol binario, el m\u00e1s simple de todos.</p> <p>Nuevamente, no se va a profundizar en las operaciones que se pueden realizar en un \u00e1rbol a nivel interno (inserci\u00f3n de nodos, eliminaci\u00f3n de nodos, b\u00fasqueda de un valor, etc.). Nos aprovecharemos de las colecciones para hacer uso de su potencial. En la siguiente tabla tienes un uso comparado de <code>TreeSet</code> y <code>LinkedHashSet</code> . Su creaci\u00f3n es similar a como se hace con <code>HashSet</code> , simplemente sustituyendo el nombre de la clase <code>HashSet</code> por una de las otras. Ni <code>TreeSet</code> , ni <code>LinkedHashSet</code> admiten duplicados, y se usan los mismos m\u00e9todos ya vistos antes, los existentes en la interfaz <code>Set</code> (que es la interfaz que implementan).</p> <ul> <li>Conjunto <code>TreeSet</code> (Ejemplo01):</li> </ul> Java<pre><code>package UD07.P2_2_Sets;\n\nimport java.util.TreeSet;\n\npublic class Ejemplo01 {\n\n    public static void main(String[] args) {\n        TreeSet&lt;Integer&gt; t = new TreeSet&lt;&gt;();\n        t.add(4);\n        t.add(3);\n        t.add(1);\n        t.add(99);\n        for (Integer i : t) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n</code></pre> <p>Resultado mostrado por pantalla (el resultado sale ordenado por valor):</p> Java<pre><code>1 3 4 99\n</code></pre> <ul> <li>Conjunto <code>LinkedHashSet</code> (Ejemplo02):</li> </ul> Java<pre><code>package UD07.P2_2_Sets;\n\nimport java.util.LinkedHashSet;\n\npublic class Ejemplo02 {\n\n    public static void main(String[] args) {\n        LinkedHashSet&lt;Integer&gt; t = new LinkedHashSet&lt;&gt;();\n        t.add(4);\n        t.add(3);\n        t.add(1);\n        t.add(99);\n        for (Integer i : t) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n</code></pre> <p>Resultado mostrado por pantalla (los valores salen ordenados seg\u00fan el momento de inserci\u00f3n en el conjunto):</p> Java<pre><code>4 3 1 99\n</code></pre>"},{"location":"ud07/ud0702/#operar-con-elementos","title":"Operar con elementos","text":"<p>\u00bfC\u00f3mo podr\u00eda copiar los elementos de un conjunto de uno a otro? \u00bfHay que usar un bucle for y recorrer toda la lista para ello? \u00a1Qu\u00e9 va! Para facilitar esta tarea, los conjuntos, y las colecciones en general, facilitan un mont\u00f3n de operaciones para poder combinar los datos de varias colecciones. Ya se vieron en un apartado anterior, aqu\u00ed simplemente vamos poner un ejemplo de su uso.</p> <p>Partimos del siguiente ejemplo, en el que hay dos colecciones de diferente tipo, cada una con 4 n\u00fameros enteros:</p> Java<pre><code>TreeSet&lt;Integer&gt; A= new TreeSet&lt;Integer&gt;();\nA.add(9); A.add(19); A.add(5); A.add(7); // Elementos del conjunto A: 9, 19, 5 y 7\nLinkedHashSet&lt;Integer&gt; B= new LinkedHashSet&lt;Integer&gt;();\nB.add(10); B.add(20); B.add(5); B.add(7); // Elementos del conjunto B: 10, 20, 5 y 7\n</code></pre> <p>En el ejemplo anterior, el literal de n\u00famero se convierte autom\u00e1ticamente a la clase envoltorio <code>Integer</code> sin tener que hacer nada, lo cual es una ventaja. Veamos las formas de combinar ambas colecciones:</p> <ul> <li>Uni\u00f3n. A\u00f1adir todos los elementos del conjunto B en el conjunto A.</li> </ul> Java<pre><code> A.addAll(B)\n</code></pre> <p>Todos los del conjunto A, a\u00f1adiendo los del B, pero sin repetir los que ya est\u00e1n: </p> Bash<pre><code>5, 7, 9, 10, 19 y 20.\n</code></pre> <ul> <li>Diferencia. Eliminar los elementos del conjunto B que puedan estar en el conjunto A.</li> </ul> Java<pre><code> A.removeAll(B)\n</code></pre> <p>Todos los elementos del conjunto A, que no est\u00e9n en el conjunto B: </p> Bash<pre><code>9, 19.\n</code></pre> <ul> <li>Intersecci\u00f3n. Retiene los elementos comunes a ambos conjuntos.</li> </ul> Java<pre><code> A.retainAll(B)\n</code></pre> <p>Todos los elementos del conjunto A, que tambi\u00e9n est\u00e1n en el conjunto B:</p> Bash<pre><code>5 y 7.\n</code></pre> <p>Recuerda</p> <p>Estas operaciones son comunes a todas las colecciones.</p> Ejemplo 03 Java<pre><code>package UD07.P2_2_Sets;\n\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.TreeSet;\n\npublic class Ejemplo03 {\n\n    private static void imprimirColeccion(Collection&lt;?&gt; c) {\n        for (Object i : c) {\n            System.out.print(i.toString() + \" \");\n        }\n        System.out.println(\"\");\n    }\n\n    public static void main(String[] args) {\n        TreeSet&lt;Integer&gt; conjuntoA = new TreeSet&lt;&gt;();\n        conjuntoA.add(9);\n        conjuntoA.add(19);\n        conjuntoA.add(5);\n        conjuntoA.add(7); // Elementos del conjunto A: 9, 19, 5 y 7\n        LinkedHashSet&lt;Integer&gt; conjuntoB = new LinkedHashSet&lt;&gt;();\n        conjuntoB.add(10);\n        conjuntoB.add(20);\n        conjuntoB.add(5);\n        conjuntoB.add(7); // Elementos del conjunto B: 10, 20, 5 y 7\n\n        conjuntoA.addAll(conjuntoB);\n        imprimirColeccion(conjuntoA); //5 7 9 10 19 20\n\n        conjuntoA.removeAll(conjuntoB);\n        imprimirColeccion(conjuntoA); //9 19\n\n        //recolocamos todo como al principio\n        conjuntoA.add(5);\n        conjuntoA.add(7);\n        conjuntoB.add(10);\n        conjuntoB.add(20);\n        conjuntoB.add(5);\n        conjuntoB.add(7);\n\n        conjuntoA.retainAll(conjuntoB);\n        imprimirColeccion(conjuntoA); //5 7\n\n    }\n}\n</code></pre>"},{"location":"ud07/ud0702/#ordenacion","title":"Ordenaci\u00f3n","text":"<p>Por defecto, los <code>TreeSet</code> ordenan sus elementos de forma ascendente, pero, \u00bfse podr\u00eda cambiar el orden de ordenaci\u00f3n? Los <code>TreeSet</code> tienen un conjunto de operaciones adicionales, adem\u00e1s de las que incluye por el hecho de ser un conjunto, que permite entre otras cosas, cambiar la forma de ordenar los elementos. Esto es especialmente \u00fatil cuando el tipo de objeto que se almacena no es un simple n\u00famero, sino algo m\u00e1s complejo (un art\u00edculo por ejemplo). <code>TreeSet</code> es capaz de ordenar tipos b\u00e1sicos (n\u00fameros, cadenas y fechas) pero otro tipo de objetos no puede ordenarlos con tanta facilidad.</p> <p>Para indicar a un <code>TreeSet</code> c\u00f3mo tiene que ordenar los elementos, debemos decirle cu\u00e1ndo un elemento va antes o despu\u00e9s que otro, y cu\u00e1ndo son iguales. Para ello, utilizamos la interfaz gen\u00e9rica <code>java.util.Comparator</code>, usada en general en algoritmos de ordenaci\u00f3n, como veremos m\u00e1s adelante.</p> <p>Se trata de crear una clase que implemente dicha interfaz, as\u00ed de f\u00e1cil. Dicha interfaz requiere de un \u00fanico m\u00e9todo que debe calcular si un objeto pasado por par\u00e1metro es mayor, menor o igual que otro del mismo tipo. Veamos un ejemplo general de c\u00f3mo implementar un comparador para una hipot\u00e9tica clase <code>Objeto</code>:</p> Java<pre><code>class ComparadorDeObjetos implements Comparator&lt;Objeto&gt; {\n    public int compare(Objeto o1, Objeto o2) { ... }\n}\n</code></pre> <p>La interfaz <code>Comparator</code> obliga a implementar un \u00fanico m\u00e9todo, es el m\u00e9todo <code>compare</code> , el cual tiene dos par\u00e1metros: los dos elementos a comparar. Las reglas son sencillas, a la hora de personalizar dicho m\u00e9todo:</p> <ul> <li>Si el primer objeto (o1) es menor que el segundo (o2), debe retornar un n\u00famero entero negativo.</li> <li>Si el primer objeto (o1) es mayor que el segundo (o2), debe retornar un n\u00famero entero positivo.</li> <li>Si ambos son iguales, debe retornar 0.</li> </ul> <p>A veces, cuando el orden que deben tener los elementos es diferente al orden real (por ejemplo cuando ordenamos los n\u00fameros en orden inverso), la definici\u00f3n de antes puede ser un poco liosa, as\u00ed que es recomendable en tales casos pensar de la siguiente forma:</p> <ul> <li>Si el primer objeto (o1) debe ir antes que el segundo objeto (o2), retornar entero negativo.</li> <li>Si el primer objeto (o1) debe ir despu\u00e9s que el segundo objeto (o2), retornar entero positivo.</li> <li>Si ambos son iguales, debe retornar 0.</li> </ul> <p>Una vez creado el comparador simplemente tenemos que pasarlo como par\u00e1metro en el momento de la creaci\u00f3n al <code>TreeSet</code> , y los datos internamente mantendr\u00e1n dicha ordenaci\u00f3n:</p> Java<pre><code>TreeSet&lt;Objeto&gt; ts = new TreeSet&lt;Objeto&gt;(new ComparadorDeObjetos());\n</code></pre> <p>Hay otra manera de definir esta ordenaci\u00f3n, pero lo estudiaremos m\u00e1s a fondo en el punto 7.4 Comparadores.</p> Revisa este ejemplo 04 <p>Realiza un peque\u00f1o programa que pregunte al usuario 5 n\u00fameros diferentes (almacen\u00e1ndolos en un <code>HashSet</code>), y que despu\u00e9s calcule la suma de los mismos (usando un bucle <code>for\u2010each</code>). SOLUCI\u00d3N Una soluci\u00f3n posible podr\u00eda ser la siguiente. F\u00edjate en la soluci\u00f3n y ver\u00e1s que el uso de conjuntos ha simplificado enormemente el ejercicio, permitiendo al programador o la programadora centrarse en otros aspectos: Java<pre><code>package UD07.P2_HashSet;\n\n\nimport java.util.HashSet;\nimport java.util.Scanner;\n\npublic class EjemploHashSet {\n\n    public static void main(String[] args) {\n        HashSet&lt;Integer&gt; conjunto = new HashSet&lt;Integer&gt;();\n        Scanner teclado = new Scanner(System.in);\n        int numero;\n        do {\n            try {\n                System.out.print(\"Introduce un n\u00famero \" + (conjunto.size() + 1) + \": \");\n                numero = teclado.nextInt();\n                if (!conjunto.add(numero)) {\n                    System.out.println(\"N\u00famero ya en la lista. Introducir otro.\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"N\u00famero err\u00f3neo.\");\n            }\n        } while (conjunto.size() &lt; 5);\n        // Calcular la suma\n        Integer suma = 0;\n        for (Integer i : conjunto) {\n            suma = suma + i;\n        }\n        System.out.println(\"La suma es: \" + suma);\n    }\n}\n</code></pre></p> Revisa este ejemplo 05 Java<pre><code>package UD07.P2_Comparator;\n\nimport java.io.*;\nimport java.util.*;\n\nclass Estudiante {\n  private int id;\n  private String nombre;\n\n  public Estudiante(int valor, String nombre) {\n    this.id = valor;\n    this.nombre = nombre;\n  }\n\n  public String getNombre() {\n    return this.nombre;\n  }\n\n  public int getId() {\n    return this.id;\n  }\n}\n\n// Comparador mediante atributo entero\nstatic class IdComparator implements Comparator&lt;Estudiante&gt; {\n  public int compare(Estudiante e1, Estudiante e2) {\n    return e1.getId()-e2.getId();\n  }\n}\n// Comparador mediante atributo String \nstatic class NombreComparator implements Comparator&lt;Estudiante&gt; {\n  public int compare(Estudiante e1, Estudiante e2) {\n    return e1.getNombre().compareTo(e2.getNombre());\n  }\n}\n\nclass EjemploComparador {\n\n  public static void main (String[] args){\n    // Crear TreeSet con Comparador con objeto Estudiante\n    TreeSet&lt;Estudiante&gt; setId = new TreeSet&lt;Estudiante&gt;(new IdComparator());\n\n    setId.add(new Estudiante(450,\"Laura\"));\n    setId.add(new Estudiante(341,\"Esther\"));\n    setId.add(new Estudiante(134,\"Daniel\"));\n    setId.add(new Estudiante(590,\"Jorge\"));\n\n    System.out.println(\"Ordenaci\u00f3n por marca:\");\n    for(Estudiante elemento : setId) {\n       System.out.print(elemento.getNombre()+\"\\t\"+elemento.getId());\n       System.out.println();\n    }  \n\n    TreeSet&lt;Estudiante&gt; setNombre= new TreeSet&lt;Estudiante&gt;(new NombreComparator());\n\n    setNombre.add(new Estudiante(450,\"Laura\"));\n    setNombre.add(new Estudiante(341,\"Esther\"));\n    setNombre.add(new Estudiante(134,\"Daniel\"));\n    setNombre.add(new Estudiante(590,\"Jorge\"));\n\n    System.out.println(\"Ordenaci\u00f3n por nombre:\");\n    for(students elemento : setNombre) {\n       System.out.print(elemento.getNombre() +\"\\t\"+ elemento.getId());\n       System.out.println();\n    }\n  }\n}\n</code></pre> Bash<pre><code>Ordenaci\u00f3n por marca:\nDaniel  134\nEsther  341\nLaura   450\nJorge   590\nOrdenaci\u00f3n por nombre:\nDaniel  134\nEsther  341\nJorge   590\nLaura   450\n</code></pre>"},{"location":"ud07/ud0702/#listas","title":"Listas","text":"<p>\u00bfEn qu\u00e9 se diferencia una lista de un conjunto? Las listas son elementos de programaci\u00f3n un poco m\u00e1s avanzados que los conjuntos. Su ventaja es que ampl\u00edan el conjunto de operaciones de las colecciones a\u00f1adiendo operaciones extra. Veamos algunas de ellas:</p> <ul> <li>S\u00ed pueden almacenar duplicados. Si no queremos duplicados, hay que verificar manualmente que el elemento no est\u00e9 en la lista antes de su inserci\u00f3n.</li> <li>Acceso posicional. Podemos acceder a un elemento indicando su posici\u00f3n en la lista.</li> <li>B\u00fasqueda. Es posible buscar elementos en la lista y obtener su posici\u00f3n. En los conjuntos, al ser colecciones sin aportar nada nuevo, solo se pod\u00eda comprobar si un conjunto conten\u00eda o no un elemento, retornando verdadero o falso. Las listas mejoran este aspecto.</li> <li>Extracci\u00f3n de sublistas. Es posible obtener una lista que contenga solo una parte de los elementos de forma muy sencilla.</li> </ul> <p>En Java, para las listas se dispone de una interfaz llamada <code>java.util.List</code>, y dos implementaciones (<code>java.util.LinkedList</code> y <code>java.util.ArrayList</code>), con diferencias significativas entre ellas. Los m\u00e9todos de la interfaz <code>List</code>, que obviamente estar\u00e1n en todas las implementaciones, y que permiten las operaciones anteriores son:</p> <ul> <li><code>E get(int index)</code> : el m\u00e9todo <code>get</code> permite obtener un elemento partiendo de su posici\u00f3n (index).</li> <li><code>E set(int index, E element)</code> : el m\u00e9todo <code>set</code> permite cambiar el elemento almacenado en una posici\u00f3n de la lista (index), por otro (element).</li> <li><code>void add(int index, E element)</code> : se a\u00f1ade otra versi\u00f3n del m\u00e9todo <code>add</code>, en la cual se puede insertar un elemento (element) en la lista en una posici\u00f3n concreta (index), desplazando los existentes.</li> <li><code>E remove(int index)</code> : se a\u00f1ade otra versi\u00f3n del m\u00e9todo <code>remove</code>, esta versi\u00f3n permite eliminar un elemento indicando su posici\u00f3n en la lista.</li> <li><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code> : se a\u00f1ade otra versi\u00f3n del m\u00e9todo <code>addAll</code> , que permite insertar una colecci\u00f3n pasada por par\u00e1metro en una posici\u00f3n de la lista, desplazando el resto de elementos.</li> <li><code>int indexOf(Object o)</code> : el m\u00e9todo <code>indexOf</code> permite conocer la posici\u00f3n (\u00edndice) de un elemento, si dicho elemento no est\u00e1 en la lista retornar\u00e1 <code>\u20101</code>.</li> <li><code>int lastIndexOf(Object o)</code> : el m\u00e9todo <code>lastIndexOf</code> nos permite obtener la \u00faltima ocurrencia del objeto en la lista (dado que la lista s\u00ed puede almacenar duplicados).</li> <li><code>List&lt;E&gt; subList(int from, int to)</code> : el m\u00e9todo <code>subList</code> genera una sublista (una vista parcial de la lista) con los elementos comprendidos entre la posici\u00f3n inicial (incluida) y la posici\u00f3n final (no incluida).</li> </ul> <p>Comienzo de lista por 0</p> <p>Ten en cuenta que los elementos de una lista empiezan a numerarse por 0. Es decir, que el primer elemento de la lista es el 0. Ten en cuenta tambi\u00e9n que <code>List</code> es una interfaz gen\u00e9rica, por lo que <code>&lt;E&gt;</code> corresponde con el tipo base usado como par\u00e1metro gen\u00e9rico al crear la lista.</p>"},{"location":"ud07/ud0702/#uso","title":"Uso","text":"<p>Y, \u00bfc\u00f3mo se usan las listas? Pues para usar una lista haremos uso de sus implementaciones <code>LinkedList</code> y <code>ArrayList</code>. Veamos un ejemplo de su uso y despu\u00e9s obtendr\u00e1s respuesta a esta pregunta.</p> <p>Supongo que intuir\u00e1s c\u00f3mo se usan, pero nunca viene mal un ejemplo sencillo, que nos aclare las ideas. El siguiente ejemplo muestra c\u00f3mo usar un <code>LinkedList</code> pero valdr\u00eda tambi\u00e9n para <code>ArrayList</code> (no olvides importar las clases <code>java.util.LinkedList</code> y <code>java.util.ArrayList</code> seg\u00fan sea necesario). En este ejemplo se usan los m\u00e9todos de acceso posicional a la lista:</p> Java<pre><code>LinkedList&lt;Integer&gt; ll = new LinkedList&lt;&gt;(); // declaraci\u00f3n y creaci\u00f3n del LinkedList de enteros.\nll.add(1); // a\u00f1ade un elemento al final de la lista.\nll.add(3); // a\u00f1ade otro elemento al final de la lista.\nll.add(1,2); // a\u00f1ade en la posici\u00f3n 1 el elemento 2.\nll.add(ll.get(1) + ll.get(2)); // suma los valores contenidos en la posici\u00f3n 1 y 2, y lo agrega al final.\nll.remove(0); // elimina el primer elementos de la lista.\n</code></pre> <p>En el ejemplo anterior, se realizan muchas operaciones, \u00bfcu\u00e1l ser\u00e1 el contenido de la lista al final?</p> Java<pre><code>// recorrer la colecci\u00f3n:\nfor (Integer elemento: ll){\n    System.out.print(elemento + \" \");\n}\n// devuelve: 2 3 5\n</code></pre> <p>Veamos otro ejemplo, esta vez con <code>ArrayList</code>, de c\u00f3mo obtener la posici\u00f3n de un elemento en la lista:</p> Java<pre><code>ArrayList&lt;Integer&gt; al = new ArrayList&lt;&gt;(); // declaraci\u00f3n y creaci\u00f3n del ArrayList de enteros.\nal.add(10); \nal.add(11); // a\u00f1adimos dos elementos a la lista.\nal.set(al.indexOf(11), 12); // sustituimos el 11 por el 12, primero lo buscamos y luego lo reemplazamos.\n</code></pre> <p>En el ejemplo anterior, se emplea tanto el m\u00e9todo <code>indexOf</code> para obtener la posici\u00f3n de un elemento, como el m\u00e9todo <code>set</code> para reemplazar el valor en una posici\u00f3n, una combinaci\u00f3n muy habitual. El ejemplo anterior generar\u00e1 un <code>ArrayList</code> que contendr\u00e1 dos n\u00fameros, el 10 y el 12. </p> <p>Veamos ahora un ejemplo algo m\u00e1s dif\u00edcil:</p> Text Only<pre><code>al.addAll(0, ll.subList(1, ll.size()));\n</code></pre> <p>Cuidado</p> <p><code>subList</code> ==&gt; Returns a view of the portion of this list between the specified <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive (API de Java).</p> <p>Este ejemplo es especial porque usa sublistas. Se usa el m\u00e9todo <code>size</code> para obtener el tama\u00f1o de la lista. Despu\u00e9s el m\u00e9todo <code>subList</code> para extraer una sublista de la lista (que inclu\u00eda en origen los n\u00fameros 2, 3 y 5), desde la posici\u00f3n 1 hasta el final de la lista (lo cual dejar\u00eda fuera al primer elemento). Y por \u00faltimo, se usa el m\u00e9todo <code>addAll</code> para a\u00f1adir todos los elementos de la sublista al <code>ArrayList</code> anterior desde su posici\u00f3n 0. Y quedar\u00eda:</p> Java<pre><code>3, 5, 10 y 12.\n</code></pre> <p>Debes saber que las operaciones aplicadas a una sublista repercuten sobre la lista original. Por ejemplo, si ejecutamos el m\u00e9todo <code>clear</code> sobre una sublista, se borrar\u00e1n todos los elementos de la sublista, pero tambi\u00e9n se borrar\u00e1n dichos elementos de la lista original:</p> Java<pre><code>al.subList(0, 2).clear();\n</code></pre> <p>Lo mismo ocurre al a\u00f1adir un elemento, se a\u00f1ade en la sublista y en la lista original.</p> Revisa este ejemplo 06 Java<pre><code>package UD07.P2_3_Listas;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedList;\n\npublic class Ejemplo06 {\n\n  private static void imprimirColeccion(Collection&lt;?&gt; c) {\n    for (Object i : c) {\n       System.out.print(i.toString() + \" \");\n    }\n    System.out.println(\"\");\n  }\n  public static void main(String[] args) {\n    LinkedList&lt;Integer&gt; t = new LinkedList&lt;&gt;(); //declaraci\u00f3n+creaci\u00f3n LinkedList\n    t.add(1); //a\u00f1ade un elemento al final de la lista\n    t.add(3); //a\u00f1ade otro elemento al final de la lista\n    t.add(1, 2); //a\u00f1ade en la posici\u00f3n 1 el elemento 2\n    t.add(t.get(1) + t.get(2)); //suma contendio de posici\u00f3n 1 y 2, y agrega al final\n    t.remove(0); //elimina el primer elementos de la lista\n    imprimirColeccion(t); //2 3 5 \n\n    ArrayList&lt;Integer&gt; al = new ArrayList&lt;&gt;(); //declaraci\u00f3n+creaci\u00f3n ArrayList\n    al.add(10);\n    al.add(11); //a\u00f1adimos dos elementos a la lista.\n    al.set(al.indexOf(11), 12); //sustituimos el 11 por el 12, primero lo buscamos y luego lo reemplazamos.\n\n    al.addAll(0, t.subList(1, t.size()));\n    imprimirColeccion(al); //3 5 10 12 \n\n    al.subList(0, 2).clear();\n    imprimirColeccion(al); //10 12 \n  }\n}\n</code></pre>"},{"location":"ud07/ud0702/#linkedlist-y-arraylist","title":"<code>LinkedList</code> y <code>ArrayList</code>","text":"<p>\u00bfY en qu\u00e9 se diferencia un <code>LinkedList</code> de un <code>ArrayList</code> ?</p> <p>Los <code>LinkedList</code> utilizan listas doblemente enlazadas, que son listas enlazadas (como se vio en un apartado anterior), pero que permiten ir hacia atr\u00e1s en la lista de elementos. Los elementos de la lista se encapsulan en los llamados nodos.</p> <p>Los nodos van enlazados unos a otros para no perder el orden y no limitar el tama\u00f1o de almacenamiento. Tener un doble enlace significa que en cada nodo se almacena la informaci\u00f3n de cu\u00e1l es el siguiente nodo y adem\u00e1s, de cu\u00e1l es el nodo anterior. Si un nodo no tiene nodo siguiente o nodo anterior, se almacena null (o nulo) para ambos casos.</p> <p>No es el caso de los <code>ArrayList</code>. Estos se implementan utilizando arrays que se van redimensionando conforme se necesita m\u00e1s espacio o menos. La redimensi\u00f3n es transparente a nosotros, no nos enteramos cu\u00e1ndo se produce, pero eso redunda en una diferencia de rendimiento notable dependiendo del uso. Los ArrayList son m\u00e1s r\u00e1pidos en cuanto a acceso a los elementos, acceder a un elemento seg\u00fan su posici\u00f3n es m\u00e1s r\u00e1pido en un array que en una lista doblemente enlazada (hay que recorrer la lista). En cambio, eliminar un elemento implica muchas m\u00e1s operaciones en un array que en una lista enlazada de cualquier tipo.</p> <p>\u00bfY esto qu\u00e9 quiere decir? Que si se van a realizar muchas operaciones de eliminaci\u00f3n de elementos sobre la lista, conviene usar una lista enlazada (<code>LinkedList</code>), pero si no se van a realizar muchas eliminaciones, sino que solamente se van a insertar y consultar elementos por posici\u00f3n, conviene usar una lista basada en arrays redimensionados (<code>ArrayList</code> ).</p> <p><code>LinkedList</code> tiene otras ventajas que nos puede llevar a su uso. Implementa las interfaces <code>java.util.Queue</code> y <code>java.util.Deque</code>. Dichas interfaces permiten hacer uso de las listas como si fueran una cola de prioridad o una pila, respectivamente.</p> <p>Las colas, tambi\u00e9n conocidas como colas de prioridad, son una lista pero que aportan m\u00e9todos para trabajar de forma diferente. \u00bfT\u00fa sabes lo que es hacer cola para que te atiendan en una ventanilla? Pues igual. Se trata de que el primero que llega es el primero en ser atendido (<code>FIFO</code>, First In First Out en ingl\u00e9s). Simplemente se aportan tres m\u00e9todos nuevos: meter en el final de la lista (<code>add</code> y <code>offer</code>), sacar y eliminar el elemento m\u00e1s antiguo (<code>poll</code>), y examinar el elemento al principio de la lista sin eliminarlo (<code>peek</code>). Dichos m\u00e9todos est\u00e1n disponibles en las listas enlazadas <code>LinkedList</code> :</p> <ul> <li><code>boolean add(E e)</code> y <code>boolean offer(E e)</code> : retornar\u00e1n true si se ha podido insertar el elemento al final de la <code>LinkedList</code>.</li> <li><code>E poll()</code> : retornar\u00e1 el primer elemento de la <code>LinkedList</code> y lo eliminar\u00e1 de la misma. Al insertar al final, los elementos m\u00e1s antiguos siempre est\u00e1n al principio. Retornar\u00e1 null si la lista est\u00e1 vac\u00eda.</li> <li><code>E peek()</code> : retornar\u00e1 el primer elemento de la <code>LinkedList</code> pero no lo eliminar\u00e1, permite examinarlo. Retornar\u00e1 null si la lista est\u00e1 vac\u00eda.</li> </ul> <p>Las pilas, mucho menos usadas, son todo lo contrario a las listas. Una pila es igual que una monta\u00f1a de hojas en blanco, para a\u00f1adir hojas nuevas se ponen encima del resto, y para retirar una se coge la primera que hay encima de todas. En las pilas el \u00faltimo en llegar es el primero en ser atendido (<code>LIFO</code>, Last In First Out en ingl\u00e9s). Para ello se proveen de tres m\u00e9todos: meter al principio de la pila (<code>push</code>), sacar y eliminar del principio de la pila (<code>pop</code>), y examinar el primer elemento de la pila (<code>peek</code>, igual que si usara la lista como una cola). Las pilas se usan menos y haremos menos hincapi\u00e9 en ellas. Simplemente ten en mente que, tanto las colas como las pilas, son una lista enlazada sobre la que se hacen operaciones especiales.</p>"},{"location":"ud07/ud0702/#a-tener-en-cuenta","title":"A tener en cuenta","text":"<p>A la hora de usar las listas, hay que tener en cuenta un par de detalles, \u00bfsabes cu\u00e1les? Es sencillo, pero importante.</p> <p>No es lo mismo usar las colecciones (listas y conjuntos) con objetos inmutables (<code>Strings</code>, <code>Integer</code>, etc.) que con objetos mutables. Los objetos inmutables no pueden ser modificados despu\u00e9s de su creaci\u00f3n, por lo que cuando se incorporan a la lista, a trav\u00e9s de los m\u00e9todos <code>add</code> , se pasan por copia (es decir, se realiza una copia de los mismos). En cambio los objetos mutables (como las clases que t\u00fa puedes crear), no se copian, y eso puede producir efectos no deseados.</p> <p>Imag\u00ednate la siguiente clase, que contiene un n\u00famero:</p> Java<pre><code>class Test {\n    public Integer num;\n    Test (int num) {\n        this.num = new Integer(num); \n    }\n}\n</code></pre> <p>La clase de antes es mutable, por lo que no se pasa por copia a la lista. Ahora imagina el siguiente c\u00f3digo en el que se crea una lista que usa este tipo de objeto, y en el que se insertan dos objetos:</p> Java<pre><code>Test p1 = new Test(11); // se crea un objeto Test donde el entero que contiene vale 11.\nTest p2 = new Test(12); // se crea otro objeto Test donde el entero que contiene vale 12.\nLinkedList&lt;Test&gt; lista = new LinkedList&lt;Test&gt;(); // creamos una lista enlazada para objetos tipo Test.\nlista.add(p1); // a\u00f1adimos el primero objeto test.\nlista.add(p2); // a\u00f1adimos el segundo objeto test.\nfor (Test p:lista){\n    System.out.println(p.num); // mostramos la lista de objetos.\n}\n</code></pre> <p>\u00bfQu\u00e9 mostrar\u00eda por pantalla el c\u00f3digo anterior? Simplemente mostrar\u00eda los n\u00fameros 11 y 12. Ahora bien, \u00bfqu\u00e9 pasa si modificamos el valor de uno de los n\u00fameros de los objetos test? \u00bfQu\u00e9 se mostrar\u00e1 al ejecutar el siguiente c\u00f3digo?</p> Java<pre><code>p1.num = 44;\nfor (Test p:lista){\n    System.out.println(p.num);\n}\n</code></pre> <p>El resultado de ejecutar el c\u00f3digo anterior es que se muestran los n\u00fameros 44 y 12. El n\u00famero ha sido modificado y no hemos tenido que volver a insertar el elemento en la lista para que en la lista se cambie tambi\u00e9n. Esto es porque en la lista no se almacena una copia del objeto Test, sino un apuntador a dicho objeto (solo hay una copia del objeto a la que se hace referencia desde distintos lugares).</p> <p>Cita</p> <p>Controlar la complejidad es la esencia de la programaci\u00f3n.\" Brian Kernighan</p> Revisa este ejemplo 07 <p>Tenemos la clase <code>Producto</code> con:</p> <ul> <li>Dos atributos: nombre (<code>String</code>) y cantidad (<code>int</code>).</li> <li>Un constructor con par\u00e1metros.</li> <li>Un constructor sin par\u00e1metros.</li> <li>M\u00e9todos <code>get</code> y <code>set</code> asociados a los atributos.</li> </ul> <p><code>Producto.java</code> Java<pre><code>package UD07.P2_3_Listas;\n\npublic class Producto {\n\n  //Atributos\n  private String nombre;\n  private int cantidad;\n\n  //M\u00e9todos\n  //Constructor con par\u00e1metros donde asignamos el valor dado a los atributos\n  public Producto(String nombre, int cantidad) {\n    this.nombre = nombre;\n    this.cantidad = cantidad;\n  }\n\n  //Constructor sin par\u00e1metros donde inicializamos los atributos\n  public Producto() {\n    //La palabra reservada null se utiliza para inicializar los objetos,\n    //indicando que el puntero del objeto no apunta a ninguna direcci\u00f3n\n    //de memoria. No hay que olvidar que String es una clase.\n    this.nombre = null;\n    this.cantidad = 0;\n  }\n\n  //Metodo get y set\n  public String getNombre() {\n    return nombre;\n  }\n\n  public void setNombre(String nombre) {\n    this.nombre = nombre;\n  }\n\n  public int getCantidad() {\n    return cantidad;\n  }\n\n  public void setCantidad(int cantidad) {\n    this.cantidad = cantidad;\n  }\n}\n</code></pre> En el programa principal creamos una lista de productos y realizamos operaciones sobre ella:</p> <p><code>Ejemplo06.java</code> Java<pre><code>package UD07.P2_3_Listas;\n\nimport java.util.ArrayList;\n\npublic class Ejemplo07 {\n\n  public static void main(String[] args) {\n\n    //Definimos 5 instancias de la clase Producto\n    Producto p1 = new Producto(\"Pan\", 6);\n    Producto p2 = new Producto(\"Leche\", 2);\n    Producto p3 = new Producto(\"Manzanas\", 5);\n    Producto p4 = new Producto(\"Brocoli\", 2);\n    Producto p5 = new Producto(\"Carne\", 2);\n\n    //Definir un ArrayList\n    ArrayList&lt;Producto&gt; lista = new ArrayList&lt;&gt;();\n\n    //Colocar instancias de producto en ArrayList\n    lista.add(p1);\n    lista.add(p2);\n    lista.add(p3);\n    lista.add(p4);\n\n    //A\u00f1adimos \"Carne\" en la posici\u00f3n 1 de la lista\n    lista.add(1, p5);\n\n    //A\u00f1adimos \"Carne\" en la \u00faltima posici\u00f3n\n    lista.add(p5);\n\n    //Imprimir el contenido del ArrayList\n    System.out.println(\" - Lista con \" + lista.size() + \" elementos\");\n\n    for (Producto p : lista) {\n      System.out.println(p.getNombre() + \" : \" + p.getCantidad());\n    }\n\n    p5.setCantidad(99); //cambiamos la cantidad al producto, cambiar\u00e1 la lista?\n\n    ((Producto)lista.get(1)).setCantidad(66); //\n\n    System.out.println(p5.getCantidad());\n\n    //Imprimir el contenido del ArrayList\n    System.out.println(\" - Lista con \" + lista.size() + \" elementos\");\n\n    for (Producto p : lista) {\n       System.out.println(p.getNombre() + \" : \" + p.getCantidad());\n    }\n\n    //Eliminar todos los valores del ArrayList\n    lista.clear();\n    System.out.println(\" - Lista final con \" + lista.size() + \" elementos\");\n  }\n}\n</code></pre></p>"},{"location":"ud07/ud0702/#mapas-conjuntos-de-pares-clavevalor","title":"Mapas - conjuntos de pares [clave/valor]","text":"<p>\u00bfC\u00f3mo almacenar\u00edas los datos de un diccionario? Tenemos por un lado cada palabra y por otro su significado. Para resolver este problema existen precisamente los arrays asociativos. Un tipo de array asociativo son los mapas o diccionarios, que permiten almacenar pares de valores conocidos como clave y valor. La clave se utiliza para acceder al valor, como una entrada de un diccionario permite acceder a su definici\u00f3n.</p> <p>En Java existe la interfaz <code>java.util.Map</code> que define los m\u00e9todos que deben tener los mapas, y existen tres implementaciones principales de dicha interfaz: <code>java.util.HashMap</code>, <code>java.util.TreeMap</code> y <code>java.util.LinkedHashMap</code>. \u00bfTe suenan? Claro que s\u00ed. Cada una de ellas, respectivamente, tiene caracter\u00edsticas similares a <code>HashSet</code> , <code>TreeSet</code> y <code>LinkedHashSet</code> , tanto en funcionamiento interno como en rendimiento.</p> <p>Los mapas utilizan clases gen\u00e9ricas para dar extensibilidad y flexibilidad, y permiten definir un tipo base para la clave, y otro tipo diferente para el valor. Veamos un ejemplo de c\u00f3mo crear un mapa, que es extensible a los otros dos tipos de mapas:</p> Java<pre><code>HashMap&lt;String,Integer&gt; t = new HashMap&lt;&gt;();\n</code></pre> <p>El mapa anterior permite usar cadenas como llaves y almacenar de forma asociada a cada llave, un n\u00famero entero. Veamos los m\u00e9todos principales de la interfaz <code>Map</code>, disponibles en todas las implementaciones. En los ejemplos, <code>V</code> es el tipo base usado para el valor (<code>Value</code>) y <code>K</code> el tipo base usado para la llave (<code>Key</code>):</p> M\u00e9todo. Descripci\u00f3n. <code>V put(K key, V value);</code> Inserta un par de objetos llave (key) y valor (value) en el mapa. Si la llave ya existe en el mapa, entonces retornar\u00e1 el valor asociado que ten\u00eda antes, si la llave no exist\u00eda, entonces retornar\u00e1 null. <code>V get(Object key);</code> Obtiene el valor asociado a una llave ya almacenada en el mapa. Si no existe la llave, retornar\u00e1 null. <code>V remove(Object key);</code> Elimina la llave y el valor asociado. Retorna el valor asociado a la llave, por si lo queremos utilizar para algo, o null, si la llave no existe. <code>boolean containsKey(Object key);</code> Retornar\u00e1 true si el mapa tiene almacenada la llave pasada por par\u00e1metro, false en cualquier otro caso. <code>boolean containsValue(Object value);</code> Retornar\u00e1 true si el mapa tiene almacenado el valor pasado por par\u00e1metro, false en cualquier otro caso. <code>int size();</code> Retornar\u00e1 el n\u00famero de pares llave y valor almacenado en el mapa. <code>boolean isEmpty();</code> Retornar\u00e1 true si el mapa est\u00e1 vac\u00edo, false en cualquier otro caso. <code>void clear();</code> Vac\u00eda el mapa. Revisa este ejemplo 08 Java<pre><code>package UD07.P2_4_Maps;\n\nimport java.util.HashMap;\n\npublic class Ejemplo08 {\n\n  public static void main(String[] args) {\n     HashMap&lt;String, Integer&gt; hashMap = new HashMap&lt;&gt;();\n     //Insertamos un solo elemento A con valor 1\n     hashMap.put(\"A\", 1);\n\n     //Busqueda por clave\n     if (hashMap.containsKey(\"A\")) {\n       System.out.printf(\"Contiene la clave A. Su valor es: %d\\n\", hashMap.get(\"A\"));\n     }\n\n     //Busqueda por valor\n     if (hashMap.containsValue(0)) {\n       System.out.println(\"Contiene el valor 0\");\n     }\n\n     //Eliminar el elemento con clave A\n     hashMap.remove(\"A\");\n\n     //Ahora a\u00f1adimos varios elementos para imprimirlos\n     hashMap.put(\"A\", 1);\n     hashMap.put(\"E\", 12);\n     hashMap.put(\"I\", 15);\n     hashMap.put(\"O\", 0);\n     hashMap.put(\"U\", 0);\n     //Recorremos el mapa y lo imprimimos\n     for (HashMap.Entry&lt;String, Integer&gt; elemento : hashMap.entrySet()) {\n       System.out.printf(\"Clave: %s. Valor: %d\\n\", elemento.getKey(), elemento.getValue());\n     }\n  }\n}\n</code></pre>"},{"location":"ud07/ud0703/","title":"7.3 Iteradores","text":"<p>\u00bfQu\u00e9 son los iteradores realmente? Son un mecanismo que nos permite recorrer todos los elementos de una colecci\u00f3n de forma sencilla, de forma secuencial, y de forma segura. </p> <p>Mapas</p> <p>Los mapas, como no derivan de la interfaz <code>Collection</code> realmente, no tienen iteradores, pero como veremos, existe un truco interesante.</p> <p>Los iteradores permiten recorrer las colecciones de dos formas: bucles <code>for\u2010each</code> (existentes en Java a partir de la versi\u00f3n 1.5) y a trav\u00e9s de un bucle normal creando un iterador. Como los bucles <code>for-each</code> ya los hemos visto antes (y ha quedado patente su simplicidad), nos vamos a centrar en el otro m\u00e9todo, especialmente \u00fatil en versiones antiguas de Java. Ahora la pregunta es, \u00bfc\u00f3mo se crea un iterador? Pues invocando el m\u00e9todo \"<code>iterator()</code>\" de cualquier colecci\u00f3n.</p> <p>Veamos un ejemplo (en el ejemplo <code>c</code> es una colecci\u00f3n cualquiera):</p> Java<pre><code>Iterator&lt;Integer&gt; it = c.iterator();\n</code></pre> <p>F\u00edjate que se ha especificado un par\u00e1metro para el tipo de dato gen\u00e9rico en el iterador (poniendo <code>&lt;Integer&gt;</code> despu\u00e9s de <code>Iterator</code>). Esto es porque los iteradores son tambi\u00e9n clases gen\u00e9ricas, y es necesario especificar el tipo base que contendr\u00e1 el iterador. Si no se especifica el tipo base del iterador, igualmente nos permitir\u00eda recorrer la colecci\u00f3n, pero retornar\u00e1 objetos tipo Object (clase de la que derivan todas las clases), con lo que nos veremos obligados a forzar la conversi\u00f3n de tipo.</p> <p>Para recorrer y gestionar la colecci\u00f3n, el iterador ofrece tres m\u00e9todos b\u00e1sicos:</p> <ul> <li><code>boolean hasNext()</code> : retornar\u00e1 true si le quedan m\u00e1s elementos a la colecci\u00f3n por visitar, false en caso contrario.</li> <li><code>E next()</code> : retornar\u00e1 el siguiente elemento de la colecci\u00f3n, si no existe siguiente elemento, lanzar\u00e1 una excepci\u00f3n ( <code>NoSuchElementException</code> para ser exactos), con lo que conviene chequear primero si el siguiente elemento existe.</li> <li><code>remove()</code> : elimina de la colecci\u00f3n el \u00faltimo elemento retornado en la \u00faltima invocaci\u00f3n de <code>next</code> (no es necesario pas\u00e1rselo por par\u00e1metro). Cuidado, si <code>next</code> no ha sido invocado todav\u00eda, saltar\u00e1 una inc\u00f3moda excepci\u00f3n.</li> </ul> <p>\u00bfC\u00f3mo recorrer\u00edamos una colecci\u00f3n con estos m\u00e9todos? Pues de una forma muy sencilla, un simple bucle mientras (<code>while</code>) con la condici\u00f3n <code>hasNext()</code> nos permite hacerlo:</p> Java<pre><code>while (it.hasNext()) { // mientras haya siguiente elemento, seguiremos en el bucle\n   Integer n = it.next(); // escogemos el siguiente elemento\n\n   if (n%2 == 0)\n      it.remove(); // si es par, eliminamos el elemento de la lista\n}\n</code></pre> <p>\u00bfQu\u00e9 elementos contendr\u00eda la lista despu\u00e9s de ejecutar el bucle? Efectivamente, solo n\u00fameros impares.</p> <p>Acceso posicional en las listas con m\u00e9todos <code>get</code> y <code>set</code></p> <p>Las listas permiten acceso posicional a trav\u00e9s de los m\u00e9todos <code>get</code> y <code>set</code>, y acceso secuencial a trav\u00e9s de iteradores, \u00bfcu\u00e1l es para t\u00ed la forma m\u00e1s c\u00f3moda de recorrer todos los elementos, un acceso posicional a trav\u00e9s un bucle <code>for (i=0; i&lt;lista.size(); i++)</code> o un acceso secuencial usando un bucle <code>while (iterador.hasNext())</code>?</p> <p>\u00bfQu\u00e9 inconvenientes tiene usar los iteradores sin especificar el tipo de objeto? En el siguiente ejemplo, se genera una lista con los n\u00fameros del 0 al 10. De la lista, se eliminan aquellos que son pares y solo se dejan los impares. En el primer ejemplo se especifica el tipo de objeto del iterador, en el segundo ejemplo no; observa el uso de la conversi\u00f3n de tipos en la l\u00ednea 7.</p> Ejemplo indicando el tipo de objeto del iterador Java<pre><code>ArrayList&lt;Integer&gt; lista = new ArrayList&lt;Integer&gt;();\nfor (int i=0; i&lt;10; i++){\n    lista.add(i); \n}\n//lista: [0,1,2,3,4,5,6,7,8,9]\nIterator&lt;Integer&gt; it = lista.iterator();\nwhile (it.hasNext()) {\n    Integer n = it.next();\n    if (n%2 == 0){\n        it.remove();\n    }\n}\n//lista: [1,3,5,7,9]\n</code></pre> Ejemplo no indicando el tipo de objeto del iterador Java<pre><code>ArrayList &lt;Integer&gt; lista = new ArrayList&lt;Integer&gt;();\nfor (int i=0; i&lt;10; i++){\n    lista.add(i); \n}\nIterator it = lista.iterator();\nwhile (it.hasNext()) {\n    Integer n = (Integer)it.next();\n    if (n%2 == 0){\n        it.remove();\n    }\n}\n</code></pre> <p>Un iterador es seguro porque esta pensado para no sobrepasar los l\u00edmites de la colecci\u00f3n, ocultando operaciones m\u00e1s complicadas que pueden repercutir en errores de software. Pero realmente se convierte en inseguro cuando es necesario hacer la operaci\u00f3n de conversi\u00f3n de tipos. Si la colecci\u00f3n no contiene los objetos esperados, al intentar hacer la conversi\u00f3n, saltar\u00e1 una inc\u00f3moda excepci\u00f3n.</p> <p>Usar gen\u00e9ricos aporta grandes ventajas, pero us\u00e1ndolos adecuadamente. </p> <p>Para recorrer los mapas con iteradores, hay que hacer un peque\u00f1o truco. Usamos el m\u00e9todo <code>entrySet</code> que ofrecen los mapas para generar un conjunto con las entradas (pares de llave\u2010valor), o bien, el m\u00e9todo <code>keySet</code> para generar un conjunto con las llaves existentes en el mapa. </p> Veamos como ser\u00eda para el segundo caso, el m\u00e1s sencillo\": Text Only<pre><code>```java\n</code></pre> <p>HashMap mapa = new HashMap&lt;&gt;(); for (int i=0; i&lt;10; i++){     mapa.put(i, i); // Insertamos datos de prueba en el mapa. } for (Integer elemento : mapa.keySet()){     // Recorremos el conjunto generado por keySet, contendr\u00e1 las llaves.     Integer valor = mapa.get(elemento); //Para cada llave, accedemos a su valor si es necesario.     System.out.println(valor); } ``` <p>Lo \u00fanico que tienes que tener en cuenta es que el conjunto generado por <code>keySet</code> no tendr\u00e1 obviamente el m\u00e9todo <code>add</code> para a\u00f1adir elementos al mismo, dado que eso tendr\u00e1s que hacerlo a trav\u00e9s del mapa.</p> <p>Eliminar elementos de una colecci\u00f3n con iteradores</p> <p>Si usas iteradores, y piensas eliminar elementos de la colecci\u00f3n (e incluso de un mapa), debes usar el m\u00e9todo <code>remove</code> del iterador y no el de la colecci\u00f3n. Si eliminas los elementos utilizando el m\u00e9todo <code>remove</code> de la colecci\u00f3n, mientras est\u00e1s dentro de un bucle de iteraci\u00f3n, o dentro de un bucle <code>for\u2010each</code>, los fallos que pueden producirse en tu programa son impredecibles. \u00bfLogras adivinar porqu\u00e9 se pueden producir dichos problemas? Los problemas son debidos a que el m\u00e9todo <code>remove</code> del iterador elimina el elemento de dos sitios: de la colecci\u00f3n y del iterador en s\u00ed (que mantiene interiormente informaci\u00f3n del orden de los elementos). Si usas el m\u00e9todo <code>remove</code> de la colecci\u00f3n, la informaci\u00f3n solo se elimina de un lugar, de la colecci\u00f3n.</p> Revisa este ejemplo 9 <p>Ejemplo que crea, rellena y recorre un <code>ArrayList</code> de dos formas diferentes. Cabe destacar que, por defecto, el m\u00e9todo <code>System.out.println()</code> invoca al m\u00e9todo <code>toString()</code> de los elementos que se le pasen como argumento, por lo que realmente no es necesario utilizar <code>toString()</code> dentro de <code>println()</code>. Java<pre><code>package UD07.P3.Iterators;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Ejemplo09 {\n\n  public static void main(String[] args) {\n    //creamos la lista\n    ArrayList l = new ArrayList();\n\n    //A\u00f1adimos elementos al final de la lista\n    l.add(\"uno\");\n    l.add(\"dos\");\n    l.add(\"tres\");\n    l.add(\"cuatro\");\n\n    //A\u00f1adimos el elemento en la posici\u00f3n 2\n    l.add(2, \"dos2\");\n\n    System.out.println(l.size()); //devuelve 5\n    System.out.println(l.get(0)); //devuelve uno\n    System.out.println(l.get(1)); //devuelve dos\n    System.out.println(l.get(2)); //devuelve dos2\n    System.out.println(l.get(3)); //devuelve tres\n    System.out.println(l.get(4)); //devuelve cuatro\n\n    //Recorremos la lista con un for y mostramos su contenido\n    for (int i = 0; i &lt; l.size(); i++) {\n       System.out.print(l.get(i));\n    }//imprime: unodosdos2trescuatro\n\n    System.out.println();\n\n    //Recorremos la lista con un Iterador\n    //creamos el iterador\n    Iterator it = l.iterator();\n\n    //mientras haya elementos\n    while (it.hasNext()) {\n       System.out.print(it.next()); //obtengo el siguiente elemento\n    }//imprime; unodosdos2trescuatro\n\n    System.out.println();\n\n    for (Object elemento : l) {\n       System.out.print(elemento);\n    }//imprime; unodosdos2trescuatro\n  }\n}\n</code></pre></p> Revisa este ejemplo 10 <p>Este ejemplo es la versi\u00f3n del ejemplo 07 con iteradores. Java<pre><code>package UD07.P3.Iterators;\n\nimport UD07.P2_3_Listas.Producto;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Ejemplo10 {\n\n  public static void main(String[] args) {\n\n    //Definimos 5 instancias de la clase Producto\n    Producto p1 = new Producto(\"Pan\", 6);\n    Producto p2 = new Producto(\"Leche\", 2);\n    Producto p3 = new Producto(\"Manzanas\", 5);\n    Producto p4 = new Producto(\"Brocoli\", 2);\n    Producto p5 = new Producto(\"Carne\", 2);\n\n    //Definir un ArrayList\n    ArrayList&lt;Producto&gt; lista = new ArrayList&lt;&gt;();\n\n    //Colocar instancias de producto en ArrayList\n    lista.add(p1);\n    lista.add(p2);\n    lista.add(p3);\n    lista.add(p4);\n\n    //A\u00f1adimos \"Carne\" en la posici\u00f3n 1 de la lista\n    lista.add(1, p5);\n\n    //A\u00f1adimos \"Carne\" en la \u00faltima posici\u00f3n\n    lista.add(p5);\n\n    //Imprimir el contenido del ArrayList\n    System.out.println(\" - Lista con \" + lista.size() + \" elementos\");\n\n    //Definir Iterator  para extraer/imprimir valores\n    //si queremos utilizar un for con el iterador no hace falta poner el incremento\n    for (Iterator&lt;Producto&gt; it = lista.iterator(); it.hasNext();) {\n       Producto p = it.next();\n       System.out.println(p.getNombre() + \" : \" + p.getCantidad());\n    }\n\n    p5.setCantidad(99); //cambiamos la cantidad al producto, cambiar\u00e1 la lista?\n\n    ((Producto)lista.get(1)).setCantidad(66); //\n\n    System.out.println(p5.getCantidad());\n\n    //Imprimir el contenido del ArrayList\n    System.out.println(\" - Lista con \" + lista.size() + \" elementos\");\n\n    //Definir Iterator  para extraer/imprimir valores\n    //si queremos utilizar un for con el iterador no hace falta poner el incremento\n    for (Iterator&lt;Producto&gt; it = lista.iterator(); it.hasNext();) {\n       Producto p = it.next();\n       System.out.println(p.getNombre() + \" : \" + p.getCantidad());\n    }\n\n    //Eliminar todos los valores del ArrayList\n    lista.clear();\n    System.out.println(\" - Lista final con \" + lista.size() + \" elementos\");\n  }\n}\n</code></pre></p>"},{"location":"ud07/ud0704/","title":"7.4 Comparadores","text":"<p>En Java hay dos mecanismos para cambiar la forma en la que los elementos se ordenan. Imagina que tienes los art\u00edculos almacenados en una lista llamada <code>articulos</code>, y que cada art\u00edculo se almacena en la siguiente clase <code>Articulo</code> (f\u00edjate que el c\u00f3digo de art\u00edculo es una cadena y no un n\u00famero):</p> Java<pre><code>class Articulo {\n    public String codArticulo; // c\u00f3digo de art\u00edculo\n    public String descripcion; // descripci\u00f3n del art\u00edculo\n    public int cantidad; // cantidad a proveer del art\u00edculo\n}\n</code></pre> <p>A) La primera forma de ordenar consiste en crear una clase que implemente la interfaz <code>java.util.Comparator</code>, y por ende, el m\u00e9todo <code>compare</code> definido en dicha interfaz. Esto se explic\u00f3 en el apartado de conjuntos, al explicar el <code>TreeSet</code>, as\u00ed que no vamos a profundizar en ello. No obstante, el comparador para ese caso podr\u00eda ser as\u00ed:</p> Java<pre><code>class comparadorArticulos implements Comparator&lt;Articulo&gt;{\n    @Override\n    public int compare( Articulo o1, Articulo o2) {\n        return o1.codArticulo.compareTo(o2.codArticulo);\n    }\n}\n</code></pre> <p>Una vez creada esta clase, ordenar los elementos es muy sencillo; simplemente se pasa como segundo par\u00e1metro del m\u00e9todo <code>sort</code> una instancia del comparador creado:</p> Java<pre><code>Collections.sort(articulos, new comparadorArticulos());\n</code></pre> <p>B) La segunda forma es quiz\u00e1s m\u00e1s sencilla cuando se trata de objetos cuya ordenaci\u00f3n no existe de forma natural, pero requiere modificar la clase <code>Articulo</code>. Consiste en hacer que los objetos que se insertan en la lista o array implementen la interfaz <code>java.util.Comparable</code>. Todos los objetos que implementan la interfaz <code>Comparable</code> son \"ordenables\" y se puede invocar el m\u00e9todo <code>sort</code> sin indicar un comparador para ordenarlos. La interfaz <code>comparable</code> solo requiere implementar el m\u00e9todo <code>compareTo</code>:</p> Java<pre><code>class Articulo implements Comparable&lt;Articulo&gt;{\n    public String codArticulo;\n    public String descripcion;\n    public int cantidad;\n\n    @Override\n    public int compareTo(Articulo o) {\n        return codArticulo.compareTo(o.codArticulo);\n    }\n}\n</code></pre> <p>Del ejemplo anterior se pueden denotar dos cosas importantes:</p> <p>1) que la interfaz <code>Comparable</code> es gen\u00e9rica y que para que funcione sin problemas es conveniente indicar el tipo base sobre el que se permite la comparaci\u00f3n (en este caso, el objeto <code>Articulo</code> debe compararse consigo mismo), y 2) que el m\u00e9todo <code>compareTo</code> solo admite un par\u00e1metro, dado que comparar\u00e1 el objeto con el que se pasa por par\u00e1metro.</p> <p>El funcionamiento del m\u00e9todo <code>compareTo</code> es el mismo que el m\u00e9todo <code>compare</code> de la interfaz <code>Comparator</code>: si la clase que se pasa por par\u00e1metro es igual al objeto, se tendr\u00eda que retornar 0; si es menor o anterior, se deber\u00eda retornar un n\u00famero menor que cero; si es mayor o posterior, se deber\u00eda retornar un n\u00famero mayor que 0.</p> <p>Ordenar ahora la lista de art\u00edculos es sencillo, f\u00edjate que f\u00e1cil: <code>Collections.sort(articulos);</code></p> Consulta el c\u00f3digo de ejemplo 11 <p>Ejercicio resuelto <code>Comparator1</code>. Imag\u00ednate que Objeto es una clase como la siguiente: Java<pre><code>package UD07.P4.Comparator1;\n\npublic class Objeto {\n\n  public int a;\n  public int b;\n\n  public Objeto(int a, int b) {\n    this.a = a;\n    this.b = b;\n  }\n\n  @Override\n  public String toString() {\n    return \"Objeto{\" + \"a=\" + a + \", b=\" + b + '}';\n  }\n\n}\n</code></pre> Imagina que ahora, al a\u00f1adirlos en un <code>TreeSet</code>, estos se tienen que ordenar de forma que la suma de sus atributos (a y b) sea descendente, \u00bfcomo ser\u00eda el comparador?</p> <p>Respuesta</p> <p>Una de las posibles soluciones a este problema podr\u00eda ser la siguiente: Java<pre><code>package UD07.P4.Comparator1;\n\nimport java.util.Comparator;\n\nclass ComparadorDeObjetos implements Comparator&lt;Objeto&gt; {\n\n  @Override\n  public int compare(Objeto o1, Objeto o2) {\n     int sumao1 = o1.a + o1.b;\n     int sumao2 = o2.a + o2.b;\n     return suma02 - suma01; // invertir la resta para descendientes\n  }\n}\n</code></pre></p> <p>Y para usarlo tendriamos: Java<pre><code>package UD07.P4.Comparator1;\n\nimport java.util.TreeSet;\n\npublic class Ejemplo11 {\n\n  public static void main(String[] args) {\n     TreeSet&lt;Objeto&gt; ts = new TreeSet&lt;Objeto&gt;(new ComparadorDeObjetos());\n\n     Objeto o1= new Objeto(0, 1);\n     ts.add(o1);\n\n     ts.add(new Objeto(1, 2));\n     ts.add(new Objeto(4, 5));\n     ts.add(new Objeto(2, 3));\n\n     for (Objeto elemento : ts) {\n        System.out.println(elemento);\n     }\n  }\n}\n</code></pre> Observa que la salida muestra los elementos correctamente ordenados, aunque se insertaron de manera \"aleatoria\": Bash<pre><code>Objeto{a=4, b=5}\nObjeto{a=2, b=3}\nObjeto{a=1, b=2}\nObjeto{a=0, b=1}\n</code></pre></p> Consulta el c\u00f3digo de ejemplo 12 <p>Ejercicio resuelto <code>Comparator2</code>. Ahora convertiremos la clase <code>Objeto</code> para que directamente implemente la interfaz <code>Comparable</code>: Java<pre><code>package UD07.P4.Comparator2;\n\npublic class Objeto implements Comparable&lt;Objeto&gt; {\n\n  public int a;\n  public int b;\n\n  public Objeto(int a, int b) {\n     this.a = a;\n     this.b = b;\n  }\n\n  @Override\n  public String toString() {\n     return \"Objeto{\" + \"a=\" + a + \", b=\" + b + '}';\n  }\n\n  @Override\n  public int compareTo(Objeto t) {\n     int sumao1 = this.a + this.b;\n     int sumao2 = t.a + t.b;\n     return suma02 - suma01; // invertir la resta para descendientes\n  }\n\n}\n</code></pre></p> <p>Y lo usamos directamente en la clase <code>Principal</code>: Java<pre><code>package UD07.P4.Comparator2;\n\nimport java.util.TreeSet;\n\npublic class Ejemplo12 {\n\n  public static void main(String[] args) {\n     TreeSet&lt;Objeto&gt; ts = new TreeSet&lt;Objeto&gt;();\n\n     ts.add(new Objeto(0, 1));\n     ts.add(new Objeto(1, 2));\n     ts.add(new Objeto(4, 5));\n     ts.add(new Objeto(2, 3));\n\n     for (Objeto elemento : ts) {\n        System.out.println(elemento);\n     }\n  }\n}\n</code></pre></p> <p>F\u00edjate que la salida sigue mostrando los elementos correctamente ordenados, aunque se insertaron de manera \"aleatoria\": Bash<pre><code>Objeto{a=4, b=5}\nObjeto{a=2, b=3}\nObjeto{a=1, b=2}\nObjeto{a=0, b=1}\n</code></pre></p>"},{"location":"ud07/ud0705/","title":"7.5 Extras","text":"<p>\u00bfQu\u00e9 m\u00e1s ofrece las clases <code>java.util.Collections</code> y <code>java.util.Arrays</code> de Java? Una vez vista la ordenaci\u00f3n, quiz\u00e1s lo m\u00e1s complicado, veamos algunas operaciones adicionales. En los ejemplos, la variable <code>array</code> es un array y la variable <code>lista</code> es una lista de cualquier tipo de elemento:</p> Operaci\u00f3n Descripci\u00f3n Ejemplos Desordenar una lista. Desordena una lista, este m\u00e9todo no est\u00e1 disponible para arrays. <code>Collections.shuffle (lista);</code> Rellenar una lista o array. Rellena una lista o array copiando el mismo valor en todos los elementos del array o lista. \u00datil para reiniciar una lista o array. <code>Collections.fill (lista,elemento);</code><code>Arrays.fill (array,elemento);</code> B\u00fasqueda binaria. Permite realizar b\u00fasquedas r\u00e1pidas en un una lista o array ordenados. Es necesario que la lista o array est\u00e9n ordenados, sino lo est\u00e1n, la b\u00fasqueda no tendr\u00e1 \u00e9xito. <code>Collections.binarySearch(lista,elemento);</code><code>Arrays.binarySearch(array, elemento);</code> Convertir un array a lista. Permite r\u00e1pidamente convertir un array a una lista de elementos, extremadamente \u00fatil. No se especifica el tipo de lista retornado (no es <code>ArrayList</code> ni <code>LinkedList</code>), solo se especifica que retorna una lista que implementa la interfaz <code>java.util.List</code>. <code>List lista = Arrays.asList(array);</code> Si el tipo de dato almacenado en el array es conocido (<code>Integer</code> por ejemplo), es conveniente especificar el tipo de objeto de la lista: <code>List&lt;Integer&gt; lista = Arrays.asList(array);</code> Convertir una lista a array. Permite convertir una lista en array. Esto se puede realizar en todas las colecciones, y no es un m\u00e9todo de la clase <code>Collections</code>, sino propio de la interfaz <code>Collection</code>. Es conveniente que sepas de su existencia. Para este ejemplo, supondremos que los elementos de la lista son n\u00fameros, dado que hay que crear un array del tipo almacenado en la lista, y del tama\u00f1o de la lista: <code>Integer[] array=new Integer[lista.size()];</code><code>lista.toArray(array);</code> Dar la vuelta. Da la vuelta a una lista, poni\u00e9ndola en orden inverso al que tiene. <code>Collections.reverse(lista);</code> Imprimir un array o lista lista.toString()Arrays.toString(array) <p>Otra operaci\u00f3n que ya se ha visto en alg\u00fan ejemplo anterior es la de dividir una cadena en partes. Cuando una cadena est\u00e1 formada internamente por trozos de texto claramente delimitados por un separador (una coma, un punto y coma o cualquier otro), es posible dividir la cadena y obtener cada uno de los trozos de texto por separado en un array de cadenas.</p> <p>Para poder realizar esta operaci\u00f3n, usaremos el m\u00e9todo <code>split</code> de la clase <code>String</code> . El delimitador o separador es una expresi\u00f3n regular, \u00fanico argumento del m\u00e9todo <code>split</code>, y puede ser obviamente todo lo complejo que sea necesario:</p> Java<pre><code>String texto=\"Z,B,A,X,M,O,P,U\";\nString[] partes=texto.split(\",\");\n//partes={\"Z\", \"B\", \"A\", \"X\", \"M\", \"O\", \"P\", \"U\"}\nArrays.sort(partes);//lo ordenamos\n//partes={\"A\", \"B\", \"M\", \"O\", \"P\", \"U\", \"X\", \"Z\"}\n</code></pre> <p>En el ejemplo anterior la cadena texto contiene una serie de letras separadas por comas. La cadena se ha dividido con el m\u00e9todo <code>split</code> , y se ha guardado cada car\u00e1cter por separado en un <code>array</code>. Despu\u00e9s se ha ordenado el <code>array</code>. \u00a1Incre\u00edble lo que se puede llegar a hacer con solo tres l\u00edneas de c\u00f3digo!</p>"},{"location":"ud07/ud0706/","title":"7.6 Programaci\u00f3n funcional","text":""},{"location":"ud07/ud0706/#que-es-la-programacion-funcional","title":"\u00bfQu\u00e9 es la programaci\u00f3n funcional?","text":"<p>Paradigma de programaci\u00f3n declarativo, no imperativo, se dice c\u00f3mo es el problema a resolver, en lugar de los pasos a seguir para resolverlo.</p> <p>La mayor\u00eda de lenguajes populares actuales no se pueden considerar funcionales, ni puros ni h\u00edbridos, pero han adaptado su sintaxis y funcionalidad para ofrecer parte de este paradigma.</p>"},{"location":"ud07/ud0706/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<p>Transparencia referencial: la salida de una funci\u00f3n debe depender s\u00f3lo de sus argumentos. Si la llamamos varias veces con los mismos argumentos, debe producir siempre el mismo resultado.</p> <p>Inmutabilidad de los datos: los datos deben ser inmutables para evitar posibles efectos colaterales.</p> <p>Composici\u00f3n de funciones: las funciones se tratan como datos, de modo que la salida de una funci\u00f3n se puede tomar como entrada para la siguiente.</p> <p>Funciones de primer orden: funciones que permiten tener otras funciones como par\u00e1metros, a modo de callbacks.</p> <p>.</p> <p>Si llamamos repetidamente a esta funci\u00f3n con el par\u00e1metro 1, cada vez producir\u00e1 un resultado distinto (3, 4, 5...). Java<pre><code>class Prueba{\n    static int valorExterno = 1;\n\n    static int unaFuncion(int parametro){\n        valorExterno++;\n        return valorExterno + parametro;\n    }\n}\n</code></pre></p> <p>Imperativo  vs  Declarativo</p> <p>Queremos obtener una sublista con los mayores de edad de entre una lista de personas:</p> <p>Imperativo: Java<pre><code>List&lt;Persona&gt; adultos = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; personas.size(); i++){\n    if (personas.get(i).getEdad() &gt;= 18)\n        adultos.add(personas.get(i));\n}\n</code></pre></p> <p>Declarativo: List adultos = personas.stream().filter(p -&gt; p.getEdad() &gt;= 18).collect(Collectors.toList()); Se puede observar que el ejemplo declarativo es m\u00e1s compacto, y menos propenso a errores. (Adem\u00e1s sirve de ejemplo a la composici\u00f3n de funciones)."},{"location":"ud07/ud0706/#funciones-lambda","title":"Funciones Lambda","text":"<p>Son expresiones breves que simplifican la implementaci\u00f3n de elementos m\u00e1s costosos en cuanto a l\u00edneas de c\u00f3digo. Tambi\u00e9n se las conoce como funciones an\u00f3nimas, no necesitan una clase/nombre. En java se pueden aplicar a la implementaci\u00f3n de interfaces, aunque tienen m\u00e1s utilidades pr\u00e1cticas. En algunos lenguajes se les suele denominar \"funciones flecha\" (arrow functions) ya que en su sintaxis es caracter\u00edstica una flecha, que separa la cabecera de la funci\u00f3n de su cuerpo.</p> <p>Comparaciones</p> <p>API del m\u00e9todo List.sort de Java: Java<pre><code>default void sort(Comparator&lt;? super E&gt; c)\n</code></pre> La interfaz <code>Comparator</code> pide implementar un m\u00e9todo <code>compare</code>, que recibe dos datos del tipo a tratar (T), y devuelve un entero indicando si el primero es menor, mayor, o son iguales (de forma similar al m\u00e9todo <code>compareTo</code> de la interfaz <code>Comparable</code>.) Java<pre><code>int compare (T o1, T o2)\n</code></pre> Imaginemos una clase <code>Persona</code>: Java<pre><code>class Persona{\n    private String nombre;\n    private int edad;\n    ...\n}\n</code></pre> Y un ArrayList <code>personas</code> formada por objetos de tipo <code>Persona</code>: Java<pre><code>...\nArrayList&lt;Persona&gt; personas = new ArrayList&lt;&gt;();\npersonas.add(new Persona(\"Nacho\", 52));\npersonas.add(new Persona(\"David\", 47));\npersonas.add(new Persona(\"Pepe\", 42));\npersonas.add(new Persona(\"Maria\", 22));\npersonas.add(new Persona(\"Marta\", 4));\n...\n</code></pre> Ahora queremos ordenar el <code>ArrayList</code> de <code>personas</code> de mayor a menor edad usando... Implementaci\u00f3n \"tradicional\" java: <code>Comparator</code> o<code>Comparable</code> Java<pre><code>...\nclass ComparadorPersona implements Comparator &lt;Persona&gt;{\n    @Override\n    public int compare(Persona p1, Persona p2){\n        return p2.getEdad() - p1.getEdad();\n    }\n}\n...\n</code></pre> Java<pre><code>...\npersonas.sort(new ComparadorPersona());\nfor (int i = 0; i &lt; personas.size(); i++){\n System.out.println(personas.get(i));\n}\n...     \n</code></pre> Sin embargo, implementado con funciones Lambda seria... Java<pre><code>...\npersonas.sort((p1, p2) -&gt; p2.getEdad() - p1.getEdad());\nfor (int i = 0; i &lt; personas.size(); i++){\n    System.out.println(personas.get(i));\n}\n...\n</code></pre></p>"},{"location":"ud07/ud0706/#estructura-de-una-expresion-lambda","title":"Estructura de una expresi\u00f3n lambda","text":"<p><code>(lista de parametros) -&gt; {cuerpo de la funci\u00f3n a implementar}</code></p> <ul> <li>El operador lambda (<code>-&gt;</code>) separa la declaraci\u00f3n de par\u00e1metros de la declaraci\u00f3n del cuerpo de la funci\u00f3n.</li> <li>Los par\u00e1metros del lado izquierdo de la flecha se pueden omitir si s\u00f3lo hay un par\u00e1metro. Cuando no se tienen par\u00e1metros, o cuando se tienen dos o m\u00e1s, es necesario utilizar par\u00e9ntesis.</li> <li>El cuerpo de la funci\u00f3n son las llaves de la parte derecha se pueden omitir si la \u00fanica operaci\u00f3n a realizar es un simple <code>return</code>.</li> </ul> <p>Funciones Lambda</p> <p>Las utilizaremos a fondo con las <code>Interfaces</code>. Java<pre><code>z -&gt; z + 2 //un s\u00f3lo par\u00e1metro\n</code></pre> Java<pre><code>() -&gt; System.out.println(\"Mensaje 1\") //sin par\u00e1metros\n</code></pre> Java<pre><code>(int longitud, int altura) -&gt; { return altura * longitud; } //dos par\u00e1metros\n</code></pre> Java<pre><code>(String x) -&gt; {\n String retorno = x;\n retorno = retorno.concat(\"***\");\n return retorno;\n} //un bloque de c\u00f3digo m\u00e1s elaborado\n</code></pre></p>"},{"location":"ud07/ud0706/#gestion-de-colecciones-con-streams-en-java","title":"Gesti\u00f3n de colecciones con streams en Java","text":"<p>Desde Java 8, permiten procesar grandes cantidades de datos aprovechando la paralelizaci\u00f3n que permita el sistema. No modifican la colecci\u00f3n original, sino que crean copias. </p> <p>Dos tipos de operaciones </p> <ul> <li>Intermedias: devuelven otro stream resultado de procesar el anterior de alg\u00fan modo (filtrado, mapeo), para ir enlazando operaciones </li> <li>Finales: cierran el stream devolviendo alg\u00fan resultado (colecci\u00f3n resultante, c\u00e1lculo num\u00e9rico, etc). </li> </ul> <p>Muchas de estas operaciones tienen como par\u00e1metro una interfaz, que puede implementarse muy brevemente empleando expresiones lambda</p>"},{"location":"ud07/ud0706/#filtrado","title":"Filtrado","text":"<p>El m\u00e9todo <code>filter</code> es una operaci\u00f3n intermedia que permite quedarnos con los datos de una colecci\u00f3n que cumplan el criterio indicado como par\u00e1metro. <code>filter</code> recibe como par\u00e1metro una interfaz <code>Predicate</code>, cuyo m\u00e9todo test recibe como par\u00e1metro un objeto y devuelve si ese objeto cumple o no una determinada condici\u00f3n.</p> Java<pre><code>[...]\nStream&lt;Persona&gt; adultos = personas.stream().filter(p -&gt; p.getEdad() &gt;= 18);\n//La funci\u00f3n lambda se podr\u00eda traducir como: \"Aquellas personas 'p' de la colecci\u00f3n cuya edad sea mayor o igual que 18 a\u00f1os\"\n</code></pre>"},{"location":"ud07/ud0706/#mapeo","title":"Mapeo","text":"<p>El m\u00e9todo <code>map</code> es una operaci\u00f3n intermedia que permite transformar la colecci\u00f3n original para quedarnos con cierta parte de la informaci\u00f3n o crear otros datos. <code>map</code> recibe como par\u00e1metro una interfaz <code>Function</code>, cuyo m\u00e9todo <code>apply</code> recibe como par\u00e1metro un objeto y devuelve otro objeto diferente, normalmente derivado del par\u00e1metro.</p> Java<pre><code>[...]\nStream&lt;Integer&gt; edades = personas.stream().map(p -&gt; p.getEdad());\n//La funci\u00f3n lambda hace que se a\u00f1adan al stream de enteros las edades de las personas 'p' de la colecci\u00f3n personas.\n</code></pre>"},{"location":"ud07/ud0706/#combinar","title":"Combinar","text":"<p>Se pueden combinar operaciones intermedias (composici\u00f3n de funciones) para producir resultados m\u00e1s complejos. Por ejemplo, las edades de las personas adultas.</p> Java<pre><code>[...]\nStream&lt;Integer&gt; edadesAdultos = personas.stream()\n    .filter(p -&gt; p.getEdad() &gt;= 18).map (p -&gt; p.getEdad());\n//A\u00f1adiriamos al stream solamente las edades, de aquellas personas que son mayores de edad.\n</code></pre>"},{"location":"ud07/ud0706/#ordenar","title":"Ordenar","text":"<p>El m\u00e9todo <code>sorted</code> es una operaci\u00f3n intermedia que permite ordenar los elementos de una colecci\u00f3n seg\u00fan cierto criterio. Por ejemplo, ordenar las personas adultas por edad. <code>sorted</code> recibe como par\u00e1metro una interfaz <code>Comparator</code>, que ya conocemos.</p> Java<pre><code>Stream&lt;Persona&gt; personasOrdenadas = personas.stream()\n    .filter(p -&gt; p.getEdad() &gt;= 18)\n    .sorted((p1, p2) -&gt; p1.getEdad() - p2.getEdad());\n//Para cada pareja de personas p1 y p2, ord\u00e9nalas en funcion de la resta de la edad de p1 menos la edad de p2 (lo que haciamos en el compareTo)\n</code></pre>"},{"location":"ud07/ud0706/#coleccion","title":"Colecci\u00f3n","text":"<p>El m\u00e9todo <code>collect</code> es una operaci\u00f3n final que permite obtener alg\u00fan tipo de colecci\u00f3n a partir de los datos procesados por las operaciones intermedias. Por ejemplo, una lista con las edades de las personas adultas.</p> Java<pre><code>List&lt;Integer&gt; edadesAdultos = personas.stream().filter(p -&gt; p.getEdad() &gt;= 18).map(p -&gt; p.getEdad()).collect(Collectors.toList());\n//similar a ejemplos anteriores, pero esta vez obtenemos una lista de enteros, en lugar de un stream.\n</code></pre> <p>El m\u00e9todo <code>collect</code> tambi\u00e9n permite obtener una cadena de texto que una los elementos resultantes, a trav\u00e9s de un separador com\u00fan. En la funci\u00f3n <code>Collectors.joining</code> se puede indicar tambi\u00e9n un prefijo y un sufijo para el texto.</p> Java<pre><code>String nombresAdultos = personas.stream().filter(p -&gt; p.getEdad() &gt;= 18)\n    .map(p -&gt; p.getNombre())\n    .collect(Collectors.joining(\", \",\"Adultos: \",\"\"));\n//genera una lista de nombres de personas, con un prefijo, separado y sufijo.\n</code></pre>"},{"location":"ud07/ud0706/#foreach","title":"<code>forEach</code>","text":"<p>El m\u00e9todo <code>forEach</code> permite recorrer cada elemento del stream resultante, y hacer lo que se necesite con \u00e9l. Por ejemplo, sacar por pantalla en l\u00edneas separadas los nombres de las personas adultas.</p> Java<pre><code>personas.stream().filter(p -&gt; p.getEdad() &gt;= 18)\n    .map(p -&gt; p.getNombre()).forEach(p -&gt; System.out.println(p));\n</code></pre>"},{"location":"ud07/ud0706/#media-aritmetica","title":"Media aritm\u00e9tica","text":"<p>El m\u00e9todo average permite, junto con la operaci\u00f3n intermedia mapToInt, obtener una media de un stream que haya producido una colecci\u00f3n resultante num\u00e9rica. Por ejemplo, la media de edades de las personas adultas.</p> Java<pre><code>double mediaAdultos = personas.stream().filter(p -&gt; p.getEdad() &gt;= 18)\n    .mapToInt(p -&gt; p.getEdad()).average().getAsDouble();\n</code></pre>"},{"location":"ud07/ud07ac/","title":"Actividades","text":""},{"location":"ud07/ud07ac/#ejercicios","title":"Ejercicios","text":""},{"location":"ud07/ud07ac/#ejercicio-01","title":"Ejercicio 01","text":"<p>Paquete: <code>_01_varios</code></p> <p>Dise\u00f1ar la clase Varios con los siguientes m\u00e9todos est\u00e1ticos que se har\u00e1n apoy\u00e1ndose en alguna clase de las vistas al estudiar las colecciones de Java:</p> <ul> <li><code>int[] quitarDuplicados (int[] v)</code>, que dado un array de enteros devuelva otro array con los mismos valores que el original pero sin duplicados.</li> <li><code>int[] union1(int[] v1, int[] v2)</code>, que dados dos arrays v1 y v2 devuelva otro array con los elementos que est\u00e1n en v1 o que est\u00e1n en v2, sin que ning\u00fan elemento se repita.</li> <li><code>int[] uni\u00f3n2(int v1[], int v2[])</code>, que dados dos arrays v1 y v2 devuelva otro array con los elementos que est\u00e1n en v1 o que est\u00e1n en v2. En este caso, si hay elementos duplicados se mantendr\u00e1n.</li> <li><code>int[] interseccion(int v1[], int v2[])</code>, que dados dos arrays v1 y v2 devuelva otro array con los elementos que aparecen en los dos arrays. Cada elemento com\u00fan aparecer\u00e1 una sola vez en el resultado.</li> <li><code>int[] diferencia1 (int v1[], int v2[])</code>, que dados dos arrays v1 y v2 devuelva otro array con los elementos que de v1 que no est\u00e1n en v2. En caso de haber elementos duplicados en v1 estos se mantendr\u00e1n en el resultado.</li> <li><code>int[] diferencia2 (int v1[], int v2[])</code>, que dados dos arrays v1 y v2 devuelva otro array con los elementos de v1 que no est\u00e1n en v2. El array resultante no tendr\u00e1 elementos duplicados.</li> </ul>"},{"location":"ud07/ud07ac/#ejercicio-02","title":"Ejercicio 02","text":"<p>Paquete: <code>_02_biblioteca</code></p> <p>Se quiere hacer una aplicaci\u00f3n en la que los usuarios van a hacer b\u00fasquedas de libros para saber si se  encuentran en los fondos de la biblioteca. El funcionamiento b\u00e1sico ser\u00eda algo as\u00ed: Al iniciarse la aplicaci\u00f3n todo el cat\u00e1logo de libros se cargar\u00eda en memoria y a partir de ese momento los usuarios pueden realizar b\u00fasquedas por t\u00edtulo, que interesa que sean lo m\u00e1s r\u00e1pidas posibles. Nunca se insertan nuevos libros durante la ejecuci\u00f3n de la aplicaci\u00f3n.</p> <p>a) Dise\u00f1a la clase <code>Libro</code> con los m\u00e9todos que consideres oportunos y los siguientes atributos:</p> <ul> <li>Titulo (String): es el dato que identifica al libro.</li> <li>Autor (String): autor del libro.</li> <li>Estanter\u00eda (String): estanter\u00eda de la biblioteca en la que se encuentra el libro.</li> </ul> <p>b) Dise\u00f1a la clase <code>CatalogoLibros</code> como una colecci\u00f3n de libros. Utiliza el tipo de colecci\u00f3n que crees que m\u00e1s se ajusta a los requisitos de la aplicaci\u00f3n justificando la elecci\u00f3n. Implementa los siguients m\u00e9todos:</p> <ul> <li> <p><code>public CatalogoLibros(Libro v[])</code>: constructor. Para simplificar, inicializa el cat\u00e1logo y lo rellena con los libros del array v, en lugar de obtenerlos de un fichero.</p> </li> <li> <p><code>public String buscar(Libro l)</code>: dado un libro, lo busca en el Cat\u00e1logo y devuelve la estanter\u00eda en la que se encuentra el libro o null si el libro no est\u00e1 en el Cat\u00e1logo.</p> </li> </ul>"},{"location":"ud07/ud07ac/#ejercicio-03","title":"Ejercicio 03","text":"<p>Paquete: <code>_03_academia</code></p> <p>Se quiere dise\u00f1ar una clase <code>Academia</code>. De una Academia se conoce  su nombre, direcci\u00f3n y las Aulas que tiene (necesitas tambi\u00e9n generar la clase <code>Aula</code>).  </p> <p>Definir la clase Academia utilizando una Collection para almacenar las aulas. El tipo de colecci\u00f3n a utilizar se decidir\u00e1 teniendo en cuenta que \u00e9stas se quieren mantener ordenadas seg\u00fan el criterio del m\u00e9todo compareTo de la clase Aula. Implementar los atributos, el constructor, y los siguientes m\u00e9todos:</p> <ul> <li> <p><code>void ampliar (Aula a)</code>, que a\u00f1ade un aula a la academia.</p> </li> <li> <p><code>void quitar (Aula a)</code>, que elimina un aula de la academia.</p> </li> <li> <p><code>int getNumAulas()</code>, que devuelva el n\u00famero de aulas que tiene.  </p> </li> <li> <p><code>toString()</code>, que muestre todas las aulas de la academia.</p> </li> </ul>"},{"location":"ud07/ud07ac/#ejercicio-04","title":"Ejercicio 04","text":"<p>Paquete: <code>_04_listaEspera</code></p> <p>Deseamos mantener la lista de espera de pacientes de un hospital. Se quiere poder:</p> <ul> <li> <p>A\u00f1adir pacientes a la lista.</p> </li> <li> <p>Mantener los pacientes por orden de inserci\u00f3n en la lista de espera.</p> </li> <li> <p>Obtener el paciente m\u00e1s prioritario (al que hay que atender de la lista de espera), es decir, el que m\u00e1s tiempo lleva esperando, el que antes entr\u00f3 en el hospital.</p> </li> </ul> <p>a) Dise\u00f1a la clase <code>Paciente</code> con los atributos nombre y gravedad. La gravedad es un valor aleatorio (entre 1: m\u00e1s grave y 5: menos grave) generado al crear el paciente.</p> <p>b) Realiza la implementaci\u00f3n de la clase <code>ListaEspera</code> con la estructura de datos elegida. A\u00f1ade los m\u00e9todos para insertar un paciente, obtener de la lista de espera al m\u00e1s prioritario y eliminar de la lista de espera al m\u00e1s prioritario. </p> <p>\u200b   \u00bfQu\u00e9 tipo de estructura de datos utilizar\u00edamos para almacenar los pacientes, un <code>List</code>, <code>Set</code> o <code>Map</code>? Justifica la respuesta mediante un comentario arriba de la implementaci\u00f3n de esta clase (puntos a favor de la que elijes y en contra de las que descartas).</p> <p>c) Implementa una <code>ListaEsperaPorGravedad</code>, en la que se atienda primero a los pacientes m\u00e1s graves, independientemente de si llegaron antes o despu\u00e9s.  </p>"},{"location":"ud07/ud07ac/#ejercicio-05","title":"Ejercicio 05","text":"<p>Paquete: <code>_05_diccionarioIngEsp</code></p> <p>a) Dise\u00f1ar la clase <code>DiccionarioBiling\u00fce</code> para almacenar pares formados por:</p> <ul> <li> <p>Palabra en castellano.</p> </li> <li> <p>Colecci\u00f3n de traducciones a ingles.</p> </li> </ul> <p>b) La clase dispondr\u00e1 de los siguientes m\u00e9todos:</p> <ul> <li> <p>constructor: crea el diccionario vacio.</p> </li> <li> <p><code>anyadirTraduccion(String cast, String ingl)</code>: a\u00f1ade la pareja (cast, ingl) al diccionario de forma que:</p> </li> <li> <p>Si la palabra cast no estaba en el diccionario la a\u00f1ade, junto con su traducci\u00f3n.</p> </li> <li>Si la palabra cast estaba ya en el diccionario pero no aparec\u00eda como traducci\u00f3n la palabra ing, a\u00f1ade ing a su colecci\u00f3n de traducciones.</li> <li>Si la palabra cast estaba y la traducci\u00f3n ing tambi\u00e9n, no se realizar\u00e1n cambios.</li> <li> <p>El m\u00e9todo devuelve true si se han realizado cambios en el diccionario y false en caso contrario.</p> </li> <li> <p><code>quitarTraduccion(String cast, String ingl)</code>: quita la traducci\u00f3n ingl a la palabra cast. Si la palabra en castellano se queda sin traducciones, se elimina del dicicionario. Si se han producido cambios se devuelve true y en caso contrario false.</p> </li> <li> <p><code>traduccionesDe(String cast)</code>: devuelve una colecci\u00f3n con las traducciones de la palabra indicada o null si la palabra no est\u00e1 en el diccionario.</p> </li> <li> <p><code>toString()</code>: devuelve un String con las palabras del diccionario y sus traducciones.  </p> </li> <li> <p>clase  <code>RepeticionPalabras</code> : escribe un programa que abra el fichero de texto que indique el usuario y muestre cu\u00e1ntas veces se repite cada palabra que contiene. Ayudarse de un Map. \u00bfSe podr\u00eda resolver con un Set? \u00bfY con un List?</p> </li> <li> <p>clase <code>TraductorSimple</code> : escribir un programa que solicite al usuario una frase y la muestre traducida a ingl\u00e9s, palabra a palabra. Para ello, se dispone de un fichero palabras.txt que contiene parejas (palabra en espa\u00f1ol, palabra en ingl\u00e9s) separadas por un tabulador. Cada pareja se encuentra en una l\u00ednea del fichero. El proceso ser\u00e1 el siguiente:</p> </li> <li> <p>Leer el fichero y cargar sus datos en una estructura de datos adecuada. Tener en cuenta que nos interesar\u00e1 buscar una palabra en castellano y obtener su correspondencia en ingl\u00e9s.</p> </li> <li>Solicitar al usuario una frase. Traducir, usando la estructura de datos anterior, cada palabra de la frase y formar con ellas la frase traducida.</li> <li>Mostrar la frase traducida al usuario.</li> </ul>"},{"location":"ud07/ud07ac/#ejercicio-06","title":"Ejercicio 06","text":"<p>Paquete: <code>_06_listaAdmitidos</code></p> <p>Una serie de personas han solicitado realizar un curso de ingl\u00e9s. De las que han sido admitidas se quiere almacenar su nif, su nombre y su nivel en un <code>HashSet</code>. En el <code>HashSet</code> se almacenar\u00e1n objetos de la clase <code>Inscripci\u00f3n</code>.</p> <ul> <li> <p>Implementa la clase <code>Incripci\u00f3n</code> para representar el nif, nombre y nivel de un solicitante. Adem\u00e1s de los atributos implementa aquellos m\u00e9todos que consideres necesarios.</p> </li> <li> <p>Escribe un programa (clase <code>ComprobarAdmision</code>) que:  </p> </li> <li> <p>Defina un <code>HashSet</code> de Inscripciones, llamado <code>admitidas</code>.</p> </li> <li> <p>A\u00f1ada varias inscripciones (inv\u00e9ntate los datos).</p> </li> <li> <p>Permita al usuario introducir un dni para comprobar si la persona indicada ha sido admitida. Indicarle si aparece o no en la lista y, en caso afirmativo, mostrar el nombre y el nivel en que ha sido admitido.</p> </li> </ul>"},{"location":"ud07/ud07ac/#ejercicio-07","title":"Ejercicio 07","text":"<p>Paquete: <code>_07_palabrasOrdenadas</code></p> <p>Escribe un programa que, dado un fichero de texto cuya ubicaci\u00f3n indica el usuario, muestre sus palabras ordenadas ascendentemente y, despu\u00e9s, descendentemente. Cada palabra se mostrar\u00e1 una sola vez, aunque en el texto aparezca varias. </p>"},{"location":"ud07/ud07ac/#ejercicio-08","title":"Ejercicio 08","text":"<p>Paquete: <code>_08_equipoDeFutbol</code></p> <p>Crear una clase Futbolista con los siguientes atributos y m\u00e9todos:</p> <ul> <li> <p>Atributos:</p> </li> <li> <p>Nombre: nombre del futbolista</p> </li> <li> <p>Edad: edad del futbolista</p> </li> <li> <p>Posici\u00f3n: Posici\u00f3n que ocupa en el campo el futbolista. Ser\u00e1 un tipo       enumerado. Podr\u00e1 ser cualquiera de las siguientes: Portero, Defensa, Centrocampista, Delantero. Cada posici\u00f3n tendr\u00e1 asociada un salario m\u00e1ximo y       un salario m\u00ednimo).</p> <ul> <li>Portero, entre 2000 y 3000 euros.</li> <li>Defensa, entre 2500 y 3500 euros.</li> <li>Centrocampista, entre 3500 y 4000 euros.</li> <li>Delantero, entre 4000 y 5000 euros.</li> </ul> </li> <li> <p>M\u00e9todos:</p> </li> <li> <p>getters y setters.</p> </li> <li><code>toString()</code>: imprimir\u00e1 la informaci\u00f3n asociada al Futbolista.</li> </ul> <p>b) Adem\u00e1s Futbolista implementar\u00e1 la interfaz Deportista. Esta interfaz poseer\u00e1 los siguientes m\u00e9todos:</p> <ul> <li><code>getAnyosProfesional</code> : retorna el n\u00famero de a\u00f1os que un deportista ha estado compitiendo en nivel profesional.</li> <li><code>getListadoEquipos</code> : devuelve un listado con el nombre de todos los equipos en los que ha estado el deportista.</li> <li><code>getTotalTrofeos</code> : obtiene el total de trofeos conseguidos por el deportista.</li> </ul> <p>c) Tambi\u00e9n se debe crear una clase Equipo que tenga como atributos:</p> <ul> <li>Nombre: nombre del equipo</li> <li>Listado de Futbolistas: Listado de futbolistas del equipo</li> <li>Y se deber\u00e1 controlar el n\u00famero m\u00e1ximo de futbolistas por posici\u00f3n. Que ser\u00e1n los que a continuaci\u00f3n se definen:</li> <li>Portero: 2 como m\u00e1ximo.</li> <li>Defensa: 5 como m\u00e1ximo.</li> <li>Centrocampista: 5 como m\u00e1ximo.</li> <li>Delantero: 4 como m\u00e1ximo.</li> </ul> <p>\u200b   Adem\u00e1s, constar\u00e1 de los siguientes m\u00e9todos:</p> <ul> <li> <p><code>agregarFutbolista</code> : a\u00f1adir\u00e1 un futbolista al equipo siempre que la posici\u00f3n de este no est\u00e9 completa. En caso contrario lanzar\u00e1 una excepci\u00f3n de tipo <code>RegistroFutbolistaException</code>.</p> </li> <li> <p><code>listarFormaci\u00f3nDelEquipo</code> : listar\u00e1 todos los miembros del equipo ordenados por    posici\u00f3n. Se mostrar\u00e1n en el siguiente orden:</p> </li> <li> <p>Porteros, Defensas, Centrocampistas, Delanteros.</p> </li> </ul> <p>La gesti\u00f3n se har\u00e1 en dos pasos:</p> <ul> <li>Primero generaremos el listado ordenado, para ello utilizar\u00e9is el m\u00e9todo sort asociado al ArrayList, y deber\u00e9is sobreescribir el m\u00e9todo compare.</li> <li>Luego recorreremos este con un iterator y mostraremos la informaci\u00f3n de cada elemento.</li> </ul> <p>d) Respecto a la clase Aplicaci\u00f3n <code>TestEquipo</code>, simplemente crear un equipo y a\u00f1adir futbolistas de diferente tipo, generar una soluci\u00f3n d\u00f3nde se pruebe todo lo implementado. Es decir, el hecho de superar el n\u00famero m\u00e1ximo de futbolistas en cada posici\u00f3n en cada equipo y tambi\u00e9n que se vea el funcionamiento del m\u00e9todo que ordena.</p>"},{"location":"ud07/ud07ac/#ejercicio-09","title":"Ejercicio 09","text":"<p>Paquete: <code>_09_sistemaAnalisisTextos</code></p> <p>Crear un sistema de an\u00e1lisis de texto que permita procesar y analizar cadenas de texto utilizando conceptos avanzaeos de colecciones en JAVA.</p> <p>a) Crea una clase de  nombre <code>AnalizadoDeTexto</code> que contenga los siguientes atributos y m\u00e9todos:</p> <ul> <li>atributos:</li> <li>texto (String)</li> <li>palabras (HashMap) <li>m\u00e9todos:</li> <li>constructor: que reciba el texto a analizar e inicialice el atributo <code>texto</code>.</li> <li><code>contarPalabras()</code>: m\u00e9todo que procese el texto, cuente la frecuencia de cada palabra y almacene los resultado en el atributo <code>palabras</code>. Ignora las diferencias entre may\u00fasculas y min\u00fasculas.</li> <li><code>palabrasMasFrecuentes(int n)</code>: m\u00e9todo que devuelva una lista de las <code>n</code> palabras m\u00e1s frecuentes en ele texto, junto con su frecuencia.</li> <li><code>palabrasMenosFrecuentes(int n)</code>: m\u00e9todo que devuelva una lista de las <code>n</code> palabras menos frecuentes en ele texto, junto con su frecuencia.</li> <li><code>palabrasPorLongitud()</code>: m\u00e9todo que devuelva un mapa (HashMap) en el que las claves sean las longitudes de las palabras y los valores sean listas (ArrayList) de palabras que tengan esa longitud. Ordena las listas de palabras alfab\u00e9ticamente.</li> <p>b) Realiza pruebas en un main <code>TestAnalizadorDeTexto</code>:</p> <ul> <li>Crea una instancia de un objeto de la clase <code>AnalizadoDeTexto</code> con un texto de prueba.</li> <li>Ejecuta el m\u00e9todo <code>contarPalabras()</code> para procesar el texto.</li> <li>Muestra las palabras m\u00e1s y menos frecuentes utilizando los m\u00e9todos <code>palabrasMasFrecuentes(int n)</code> y <code>palabrasMenosFrecuentes(int n)</code>.</li> <li>Muestra las palabras agrupadas por su longitud utilizando el m\u00e9todo <code>palabrasPorLongitud()</code>.</li> </ul>"},{"location":"ud07/ud07ac/#ejercicios-genericidad","title":"Ejercicios Genericidad","text":""},{"location":"ud07/ud07ac/#ejercicio-10","title":"Ejercicio 10","text":"<p>Paquete: <code>_10_genericos.genericos</code></p> <p>Crear una clase <code>Generico</code> que incorpore los m\u00e9todos gen\u00e9ricos que se indican a continuaci\u00f3n. Los m\u00e9todos creados ser\u00e1n public static. En el proyecto se crear\u00e1 adem\u00e1s la clase o clases necesarias para probar los m\u00e9todos desarrollados.</p> <ul> <li><code>Object minimo (Object o1, Object o2)</code>, que devuelva el m\u00ednimo de dos objetos cualesquiera (que se suponen del mismo tipo). Una vez desarrollado, prueba el m\u00e9todo para obtener el m\u00ednimo de dos objetos Integer. Pru\u00e9balo tambi\u00e9n para obtener el m\u00ednimo entre un Objeto Integer y un objeto String. En \u00e9ste \u00faltimo caso, el programa \u00bfda error de ejecuci\u00f3n? Si es as\u00ed, explica por qu\u00e9.</li> <li><code>Object maximo (Object o1, Object o2)</code>, que devuelva el maximo de dos objetos cualesquiera (que se suponen del mismo tipo).</li> <li><code>Object minimo (Object v[])</code>, que devuelva el m\u00ednimo de un array de objetos cualesquiera (que se suponen del mismo tipo). Al respecto de \u00e9ste \u00faltimo comentario, \u00bfSe puede poner en un array de Object objetos de distinto tipo, como por ejemplo Strings, Integer, ...? En caso afirmativo, \u00bffuncionar\u00eda el m\u00e9todo desarrollado con un array construido as\u00ed?</li> <li><code>Object maximo (Object v[])</code>, que devuelva el maximo de un array de objetos cualesquiera (que se suponen del mismo tipo).</li> <li><code>int numVeces(Object v[], Object x)</code> que devuelva el el numero de apariciones del objeto x en el array v.</li> <li><code>int numVecesOrdenado(Object v[], Object x)</code> que devuelva el el numero de apariciones del objeto x en el array v ordenado ascendentemente.</li> <li><code>int mayores(Object v[], Object x)</code> que, dado un array de Object v y un Object x devuelva el n\u00famero de elementos de v que son mayores que x.</li> <li><code>int mayoresOrdenado(Object v[], Object x)</code> que, dado un array de Object v ordenado ascendentemente y un Object x devuelva el n\u00famero de elementos de v que son mayores que x.</li> <li><code>int menores(Object v[], Object x)</code> que, dado un array de Object v y un Object x devuelva el n\u00famero de elementos de v que son menores que x.</li> <li><code>int menoresOrdenado(Object v[], Object x)</code> que, dado un array de Object v ordenado ascendentemente y un Object x devuelva el n\u00famero de elementos de v que son menores que x.</li> <li><code>boolean estaEn(Object v[], Object x)</code> que devuelva true si el Objeto x est\u00e1 en el array v.</li> <li><code>boolean estaEnOrdenado(Object v[], Object x)</code> que devuelva true si el Objeto x est\u00e1 en el array v, ordenado ascendentemente.</li> <li><code>int posici\u00f3nDe(Object v[], Object x)</code>, que devuelva la posici\u00f3n que ocupa x dentro del array v, o -1 si x no est\u00e1 en v.</li> <li><code>int posicionDeOrdenado(Object v[], Object x)</code>, que devuelva la posici\u00f3n que ocupa x dentro del array v ordenado ascendentemente, o -1 si x no est\u00e1 en v.</li> <li><code>boolean estaOrdenado(Object v[])</code>, que devuelva true si el array est\u00e1 ordenado ascendentemente.</li> </ul>"},{"location":"ud07/ud07ac/#ejercicio-11","title":"Ejercicio 11","text":"<p>Paquete: <code>_10_genericos.nevera</code></p> <p>Se quiere crear una aplicaci\u00f3n que controla una nevera inteligente de \u00faltima generaci\u00f3n. Los alimentos que contiene la nevera se van a representar como objetos de la clase <code>Alimento</code> y la clase <code>NeveraInteligente</code>, tiene un array de Alimentos entre sus atributos privados.</p> <p>Se pide implementar la clase Alimento teniendo en cuenta que uno de los m\u00e9todos de NeveraInteligente necesitar\u00e1 ordenar por calor\u00edas los Alimentos que contiene la nevera utilizando un m\u00e9todo de Ordenaci\u00f3n gen\u00e9rico. El dise\u00f1o de la clase Alimento ha de incluir, por tanto, determinados elementos que lo permitan. La clase Alimento tendr\u00e1 \u00fanicamente dos atributos (privados): nombre y calorias.</p>"},{"location":"ud07/ud07ac/#ejercicio-12","title":"Ejercicio 12","text":"<p>Paquete: <code>_10_genericos.academia</code></p> <p>Se quiere dise\u00f1ar una clase <code>Academia</code>. De una Academia se conoce su nombre, direcci\u00f3n y las Aulas que tiene (Aula es una clase implementada en un ejercicio de herencia que ya hicimos). </p> <ol> <li>Definir la clase <code>Academia</code> utilizando una colecci\u00f3n (que permita ordenaci\u00f3n) para almacenar las aulas.: Implementar los atributos, el constructor, y los siguientes m\u00e9todos:</li> <li><code>void ampliar (Aula a)</code>, que a\u00f1ade un aula a la academia.</li> <li><code>void quitar (Aula a)</code>, que elimina un aula de la academia.</li> <li><code>int getNumAulas()</code>, que devuelva el n\u00famero de aulas que tiene. </li> <li>m\u00e9todo <code>toString()</code></li> <li>Realiza en la clase <code>Aula</code> los cambios necesarios para que se pueda ordenar las aulas de la Academia usando un m\u00e9todo gen\u00e9rico de ordenaci\u00f3n. El orden ser\u00eda creciente por capacidad del aula., y a igual capacidad primero las aulas de mayor superficie</li> <li>A\u00f1ade a la clase <code>Academia</code> un m\u00e9todo <code>ordenar</code> que ordene las aulas con el criterio especificado. Para realizar la ordenaci\u00f3n se llamar\u00e1 a un m\u00e9todo de ordenaci\u00f3n.</li> </ol>"},{"location":"ud07/ud07ac/#ejercicio-13","title":"Ejercicio 13","text":"<p>Paquete: <code>_10_genericos.conjuntos</code></p> <ol> <li> <p>Dise\u00f1ar un interface <code>Conjunto</code> para modelizar conjuntos de elementos. Dise\u00f1ar (solo la cabecera) de los siguientes m\u00e9todos de la clase conjunto (prestar atenci\u00f3n a si los m\u00e9todos deben ser static o no):</p> </li> <li> <p><code>A\u00f1adir</code>, que a\u00f1ade un elemento al conjunto, provocando la excepci\u00f3n <code>ElementoDuplicado</code> si el elemento ya estaba en el conjunto.</p> </li> <li><code>Quitar</code>, que elimina el elemento indicado al conjunto. Provoca <code>ElementoNoEncontrado</code> si el elemento indicado no estaba en el conjunto.</li> <li> <p><code>Intersecci\u00f3n</code>\u00b8 que dados dos conjuntos que recibe como par\u00e1metro devuelve un tercer conjunto que es la intersecci\u00f3n de los dos dados.</p> </li> <li> <p><code>Pertenece</code>\u00b8 que dado un elemento devuelve si este pertenece o no al conjunto.</p> </li> <li> <p>Dise\u00f1ar una clase <code>ConjuntoArray</code> que implemente el interface <code>Conjunto</code>. Esta clase implementar\u00e1 los m\u00e9todos del interface <code>Conjunto</code>. Para ello utilizar\u00e1 un array <code>Object elementos[]</code> y un <code>int numElementos</code>, de manera que los elementos del conjunto se mantendr\u00e1n almacenados en el array. Adem\u00e1s de los m\u00e9todos del interface habr\u00e1 que crear un constructor para la clase y tambi\u00e9n vendr\u00e1 bien tener un m\u00e9todo <code>toString</code> para poder probarla.</p> </li> </ol> <p>Opci\u00f3n:</p> <p>Tambi\u00e9n lo puedes implementar con una Colecci\u00f3n de las vistas en el tema anterior.</p>"},{"location":"ud07/ud07ac/#actividades","title":"Actividades","text":""},{"location":"ud07/ud07ac/#actividad-01","title":"Actividad 01","text":"<p>Realizar las siguientes actividades relacionadas con <code>ArrayList</code>.</p> <ul> <li>Crear un <code>ArrayList</code> de enteros llamado misNumeros.</li> <li>A\u00f1adir los valores 1, 6, 3, 2, 0, 4, 5.</li> <li>Mostrar los datos del <code>ArrayList</code>.</li> <li>Mostrar el valor de la posici\u00f3n 5.</li> <li>A\u00f1adir el valor 8 en la posici\u00f3n 4.</li> <li>Cambiar el valor de la posici\u00f3n 1 por 9.</li> <li>Eliminar el valor 5. (<code>misNumeros.remove(new Integer(5))</code> )</li> <li>Eliminar el valor de la posici\u00f3n 3.</li> <li>Recorrer el array con un bucle for.</li> <li>Recorrer el array con un bucle <code>Iterator</code>.</li> <li>Comprobar si existe el elemento 0.</li> <li>Comprobar si existe el elemento 7.</li> <li>Clonar el <code>ArrayList</code> <code>misNumeros</code> en otro llamado <code>copiaArrayList</code>.</li> <li>A\u00f1adir el elemento 9.</li> <li>Mostrar la posici\u00f3n de la primera ocurrencia del elemento 9.</li> <li>Mostrar la posici\u00f3n de la \u00faltima ocurrencia del elemento 9.</li> <li>Borrar todos los elementos del <code>ArrayList</code> <code>copiaArrayList</code>.</li> <li>Comprobar si el <code>ArrayList</code> <code>copiaArrayList</code> est\u00e1 vacio.</li> <li>Convertir el <code>ArrayList</code> <code>misNumeros</code> en un <code>Array</code> y recorrerlo con un bucle mejorado.</li> </ul>"},{"location":"ud07/ud07ac/#actividad-02","title":"Actividad 02","text":"<p>Un cine precisa una aplicaci\u00f3n para controlar las personas de la cola para los estrenos de pel\u00edculas. Debemos crear una lista con la edad de las personas de la cola y tendremos que calcular la entrada seg\u00fan la edad de la persona (m\u00ednimo 5 a\u00f1os). Para la edad de la persona se generan aleatoriamente n\u00fameros entre 5 y 60 a\u00f1os. Al final, deberemos mostrar la cantidad total recaudada. El n\u00famero de personas de la cola se elige al azar entre 0 y 50.</p> <p>La lista de precios se basa en la siguiente tabla.</p> EDAD PRECIO Entre 5 y 10 a\u00f1os 5 \u20ac Entre 11 y 17 a\u00f1os 7.5 \u20ac Mayor de 18 a\u00f1os 9.5 \u20ac <p>Como comprobaci\u00f3n imprime el n\u00famero de personas, el precio total y la lista de edades. Por ejemplo:</p> Bash<pre><code>Hay un total de 6 personas en la cola.\nEl precio total es de 57,00 euros\n[18, 36, 50, 35, 28, 55]\n</code></pre>"},{"location":"ud07/ud07ac/#actividad-03","title":"Actividad 03","text":"<p>Un supermercado nos pide que hagamos una aplicaci\u00f3n que almacene los productos comprados. La aplicaci\u00f3n debe almacenar Productos (clase) y cada producto al crearse contiene una cantidad, un precio. </p> <p>El nombre del producto ser\u00e1 b\u00e1sico (producto1, producto2, producto3, etc.). </p> <p>La cantidad y el precio se generan autom\u00e1ticamente.</p> <p>Calcular el precio total de una lista de entre 1 y 10 productos (aleatorio).</p> <p>Mostrar un ticket con todo lo vendido y el precio final.</p>"},{"location":"ud07/ud07ac/#actividad-04","title":"Actividad 04","text":"<p>Desarrollar un sistema de gesti\u00f3n de pacientes. Tendremos un archivador d\u00f3nde iremos guardando todas las fichas de los pacientes. Las fichas contienen la siguiente informaci\u00f3n: nombre, apellidos y edad.</p> <p>Todas las fichas que vayamos creando, se podr\u00e1n guardar o eliminar del archivador. Al archivador tambi\u00e9n le podremos pedir un listado. Este listado consistir\u00e1 en visualizar por pantalla el n\u00famero de fichas guardadas, as\u00ed como el contenido de las fichas.</p> <p>La clase <code>GestionPacientes</code> tiene un m\u00e9todo <code>main</code> en el que se crea un archivador, dos o tres fichas que se guardar\u00e1n en el archivador, se listar\u00e1 el contenido, se eliminar\u00e1 alguna ficha y se volver\u00e1 a listar su contenido. Todas las clases se guardar\u00e1n en el paquete <code>gestionpacientes</code>.</p>"},{"location":"ud07/ud07ac/#actividad-05","title":"Actividad 05","text":"<p>Crear una estructura <code>Map</code> llamada divisas, que almacene pares de moneda y valor al cambio en euros. Por ejemplo D\u00f3lar: 0,81\u20ac.</p> <ul> <li>A\u00f1adir los siguientes pares moneda/valor al Map divisas:</li> </ul> Moneda Valor en \u20ac D\u00f3lar Americano 0.81 Franco Suizo 0.85 Libra Esterlina 1.14 Corona Danesa 0.13 Peso Mexicano 0.04 D\u00f3lar Singapur 0.62 Real Brasil 0.24 <ul> <li> <p>Mostrar el valor de la Libra Esterlina.</p> </li> <li> <p>Mostrar todas las divisas con las que se opera y su valor.</p> </li> <li> <p>Indicar el n\u00famero de divisas del Map.</p> </li> <li> <p>Eliminar la divisa Real Brasil y mostrar los datos del Map.</p> </li> <li> <p>Mostrar si existe la divisa Peso Mexicano.</p> </li> <li> <p>Mostrar si existe la divisa Euro.</p> </li> <li> <p>Mostrar si existe el valor al cambio 0.85 \u20ac.</p> </li> <li> <p>Mostrar si existe el valor al cambio 0.33 \u20ac.</p> </li> <li> <p>Indicar si el Map divisas est\u00e1 vac\u00edo.</p> </li> <li> <p>Borra todos los componentes del Map divisas.</p> </li> <li> <p>Volver a indicar si el Map divisas est\u00e1 vac\u00edo.</p> </li> </ul>"},{"location":"ud07/ud07pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li> <p>Curso Java. Programaci\u00f3n gen\u00e9rica. ArrayList I. V\u00eddeo 161</p> </li> <li> <p>Curso Java. Programaci\u00f3n gen\u00e9rica  ArrayList II. V\u00eddeo 162</p> </li> <li> <p>Curso Java  Programaci\u00f3n gen\u00e9rica. ArrayList III  Iteradores. V\u00eddeo 163</p> </li> <li> <p>Curso Java. Programaci\u00f3n gen\u00e9rica. Qu\u00e9 es  Por qu\u00e9 utilizarla. V\u00eddeo 164</p> </li> <li> <p>Curso Java. Colecciones I. V\u00eddeo 179</p> </li> <li> <p>Curso Java. Colecciones II. V\u00eddeo 180</p> </li> <li> <p>Curso Java. Colecciones III. M\u00e9todos equals y hashCode. V\u00eddeo 181</p> </li> <li> <p>Curso Java. Colecciones IV. M\u00e9todos  equals y hashCode II. V\u00eddeo 182</p> </li> <li> <p>Curso Java. Colecciones V  Iteradores. V\u00eddeo 183</p> </li> <li> <p>Curso Java. Colecciones VI  LinkedList I. V\u00eddeo 184</p> </li> <li> <p>Curso Java. Colecciones VII. LinkedList II. V\u00eddeo 185</p> </li> <li> <p>Curso Java. Colecciones VIII  TreeSet I. V\u00eddeo 186</p> </li> <li> <p>Curso Java. Colecciones IX. TreeSet II. V\u00eddeo 187</p> </li> <li> <p>Curso Java. Colecciones X  TreeSet III. V\u00eddeo 188</p> </li> <li> <p>Curso Java. Colecciones XI  Mapas. V\u00eddeo 189</p> </li> </ul>"},{"location":"ud07/ud07re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</p> </li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> <li>Apuntes Lionel</li> <li>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</li> </ul>"},{"location":"ud08/ud0801/","title":"8.1 Relaciones entre clases","text":"<p>Cuando estudiaste el concepto de clase, \u00e9sta fue descrita como una especie de mecanismo de definici\u00f3n (plantillas), en el que se basar\u00eda el entorno de ejecuci\u00f3n a la hora de construir un objeto: un mecanismo de definici\u00f3n de objetos.</p> <p>Por tanto, a la hora de dise\u00f1ar un conjunto de clases para modelar el conjunto de informaci\u00f3n cuyo tratamiento se desea automatizar, es importante establecer apropiadamente las posibles relaciones que puedan existir entre unas clases y otras.</p> <p>En algunos casos es posible que no exista relaci\u00f3n alguna entre unas clases y otras, pero lo m\u00e1s habitual es que s\u00ed exista: una clase puede ser una especializaci\u00f3n (relaci\u00f3n entre dos clases donde una de ellas, la subclase, es una versi\u00f3n m\u00e1s especializada que la otra, la superclase, compartiendo caracter\u00edsticas en com\u00fan pero a\u00f1adiendo ciertas caracter\u00edsticas espec\u00edficas que la especializan). El punto de vista inverso ser\u00eda la generalizaci\u00f3n (relaci\u00f3n entre dos clases donde una de ellas, la superclase, es una versi\u00f3n m\u00e1s gen\u00e9rica que la otra, la subclase, compartiendo caracter\u00edsticas en com\u00fan pero sin las propiedades espec\u00edficas que caracterizan a la subclase). Es decir, que entre unas clases y otras habr\u00e1 que definir cu\u00e1l es su relaci\u00f3n (si es que existe alguna).</p> <p>Se pueden distinguir diversos tipos de relaciones entre clases:</p> <ul> <li>Clientela. Cuando una clase utiliza objetos de otra clase (por ejemplo al pasarlos como par\u00e1metros a trav\u00e9s de un m\u00e9todo).</li> <li>Composici\u00f3n. Cuando alguno de los atributos de una clase es un objeto de otra clase.</li> <li>Anidamiento. Cuando se definen clases en el interior de otra clase.</li> <li>Herencia. Cuando una clase comparte determinadas caracter\u00edsticas con otra (clase base), a\u00f1adi\u00e9ndole alguna funcionalidad espec\u00edfica (especializaci\u00f3n).</li> </ul> <p>La relaci\u00f3n de clientela la llevas utilizando desde que has empezado a programar en Java, pues desde tu clase principal (clase con m\u00e9todo <code>main</code> ) has estado declarando, creando y utilizando objetos de otras clases. Por ejemplo, si utilizas un objeto <code>String</code> dentro de la clase principal de tu programa, \u00e9ste ser\u00e1 cliente de la clase <code>String</code> (como suceder\u00e1 con pr\u00e1cticamente cualquier programa que se escriba en Java). Es la relaci\u00f3n fundamental y m\u00e1s habitual entre clases (la utilizaci\u00f3n de unas clases por parte de otras) y, por supuesto, la que m\u00e1s vas a utilizar t\u00fa tambi\u00e9n; de hecho, ya la has estado utilizando y lo seguir\u00e1s haciendo.</p> <p>La relaci\u00f3n de composici\u00f3n es posible que ya la hayas tenido en cuenta si has definido clases que conten\u00edan (ten\u00edan como atributos) otros objetos en su interior, lo cual es bastante habitual. Por ejemplo, si escribes una clase donde alguno de sus atributos es un objeto de tipo <code>String</code> , ya se est\u00e1 produciendo una relaci\u00f3n de tipo composici\u00f3n (tu clase \"tiene\" un <code>String</code> , es decir, est\u00e1 compuesta por un objeto <code>String</code> y por algunos elementos m\u00e1s).</p> <p>La relaci\u00f3n de anidamiento (o anidaci\u00f3n) es quiz\u00e1 menos habitual, pues implica declarar unas clases dentro de otras (clases internas o anidadas). En algunos casos puede resultar \u00fatil para tener un nivel m\u00e1s de encapsulamiento (ocultamiento del estado de un objeto, de sus datos miembro o atributos) de manera que s\u00f3lo se puede cambiar mediante las operaciones (m\u00e9todos) definidas para ese objeto. Cada objeto est\u00e1 aislado del exterior de manera que se protegen los datos contra su modificaci\u00f3n por quien no tenga derecho a acceder a ellos, eliminando efectos secundarios y colaterales no deseados. Este modo de proceder permite que el usuario de una clase pueda obviar la implementaci\u00f3n de los m\u00e9todos y propiedades para concentrarse s\u00f3lo en c\u00f3mo usarlos. Por otro lado se evita que el usuario pueda cambiar su estado de manera imprevista e incontrolada, y oculta informaci\u00f3n (efecto que se consigue gracias a la encapsulaci\u00f3n: se evita la visibilidad de determinados miembros de una clase al resto del c\u00f3digo del programa para de ese modo comunicarse con los objetos de la clase \u00fanicamente a trav\u00e9s de su interfaz/m\u00e9todos).</p> <p>En el caso de la relaci\u00f3n de herencia tambi\u00e9n la has visto ya, pues seguro que has utilizado unas clases que derivaban de otras, sobre todo, en el caso de los objetos que forman parte de las interfaces gr\u00e1ficas. Lo m\u00e1s probable es que hayas tenido que declarar clases que derivaban de alg\u00fan componente gr\u00e1fico (<code>JFrame</code>, <code>JDialog</code>, etc.).</p> <p>Podr\u00eda decirse que tanto la composici\u00f3n como la anidaci\u00f3n son casos particulares de clientela, pues en realidad en todos esos casos una clase est\u00e1 haciendo uso de otra (al contener atributos que son objetos de la otra clase, al definir clases dentro de otras clases, al utilizar objetos en el paso de par\u00e1metros, al declarar variables locales utilizando otras clases, etc.).</p> <p>A lo largo de la unidad, ir\u00e1s viendo distintas posibilidades de implementaci\u00f3n de clases haciendo uso de todas estas relaciones, centr\u00e1ndonos especialmente en el caso de la herencia, que es la que permite establecer las relaciones m\u00e1s complejas.</p>"},{"location":"ud08/ud0801/#composicion","title":"Composici\u00f3n","text":"<p>Cuando en un sistema de informaci\u00f3n, una determinada entidad <code>A</code> contiene a otra <code>B</code> como una de sus partes, se suele decir que se est\u00e1 produciendo una relaci\u00f3n de composici\u00f3n. Es decir, el objeto de la clase <code>A</code> contiene a uno o varios objetos de la clase <code>B</code>.</p> <p>Por ejemplo, si describes una entidad <code>Pa\u00eds</code> compuesta por una serie de atributos, entre los cuales se encuentra una lista de comunidades aut\u00f3nomas, podr\u00edas decir que los objetos de la clase <code>Pa\u00eds</code> contienen varios objetos de la clase <code>ComunidadAutonoma</code>. Por otro lado, los objetos de la clase <code>ComunidadAutonoma</code> podr\u00edan contener como atributos objetos de la clase <code>Provincia</code>, la cual a su vez tambi\u00e9n podr\u00eda contener objetos de la clase <code>Municipio</code>.</p> <p>Como puedes observar, la composici\u00f3n puede encadenarse todas las veces que sea necesario hasta llegar a objetos b\u00e1sicos del lenguaje o hasta tipos primitivos que ya no contendr\u00e1n otros objetos en su interior. \u00c9sta es la forma m\u00e1s habitual de definir clases: mediante otras clases ya definidas anteriormente. Es una manera eficiente y sencilla de gestionar la reutilizaci\u00f3n de todo el c\u00f3digo ya escrito. Si se definen clases que describen entidades distinguibles y con funciones claramente definidas, podr\u00e1n utilizarse cada vez que haya que representar objetos similares dentro de otras clases.</p> <p>Anotaci\u00f3n</p> <p>La composici\u00f3n se da cuando una clase contiene alg\u00fan atributo que es una referencia a un objeto de otra clase.</p> <p>Una forma sencilla de plantearte si la relaci\u00f3n que existe entre dos clases A y B es de composici\u00f3n podr\u00eda ser mediante la expresi\u00f3n idiom\u00e1tica \"tiene un\": \"la clase A tiene uno o varios objetos de la clase B\", o visto de otro modo: \"Objetos de la clase B pueden formar parte de la clase A\". </p> Algunos ejemplos ... <ul> <li>Un coche tiene un motor y tiene cuatro ruedas.</li> <li>Una persona tiene un nombre, una fecha de nacimiento, una cuenta bancaria asociada para ingresar la n\u00f3mina, etc.</li> <li>Un cocodrilo bajo investigaci\u00f3n cient\u00edfica que tiene un n\u00famero de dientes determinado, una edad, unas coordenadas de ubicaci\u00f3n geogr\u00e1fica (medidas con GPS), etc.</li> </ul> Recuperando algunos ejemplos de clases que ya hemos utilizado anteriormente ... <ul> <li>Una clase <code>Rectangulo</code> podr\u00eda contener en su interior dos objetos de la clase <code>Punto</code> para almacenar los v\u00e9rtices inferior izquierdo y superior derecho.</li> <li>Una clase <code>Empleado</code> podr\u00eda contener en su interior un objeto de la clase <code>DNI</code> para almacenar su DNI/NIF, y otro objeto de la clase <code>CuentaBancaria</code> para guardar la cuenta en la que se realizan los ingresos en n\u00f3mina.</li> </ul> <p>\u00bfPodr\u00eda decirse que la relaci\u00f3n que existe entre la clase <code>Ave</code> y la clase <code>Loro</code> es una relaci\u00f3n de composici\u00f3n?</p> <p>No. Aunque claramente existe alg\u00fan tipo de relaci\u00f3n entre ambas, no parece que sea la de composici\u00f3n. No parece que se cumpla la expresi\u00f3n \"tiene un\": \"Un loro tiene un ave\". Se cumplir\u00eda m\u00e1s bien una expresi\u00f3n del tipo \"es un\": \"Un loro es un ave\". Algunos objetos que cumplir\u00edan la relaci\u00f3n de composici\u00f3n podr\u00edan ser <code>Pico</code> o <code>Alas</code>, pues \"un loro tiene un pico y dos alas\", del mismo modo que \"un ave tiene pico y dos alas\". Este tipo de relaci\u00f3n parece m\u00e1s de herencia (un loro es un tipo de ave).</p>"},{"location":"ud08/ud0801/#herencia","title":"Herencia","text":"<p>El mecanismo que permite crear clases bas\u00e1ndose en otras que ya existen es conocido como herencia. Como ya has visto en unidades anteriores, Java implementa la herencia mediante la utilizaci\u00f3n de la palabra reservada <code>extends</code>.</p> <p>El concepto de herencia es algo bastante simple y sin embargo muy potente: cuando se desea definir una nueva clase y ya existen clases que, de alguna manera, implementan parte de la funcionalidad que se necesita, es posible crear una nueva clase derivada de la que ya tienes. Al hacer esto se posibilita la reutilizaci\u00f3n de todos los atributos y m\u00e9todos de la clase que se ha utilizado como base (clase madre o superclase), sin la necesidad de tener que escribirlos de nuevo.</p> <p>Una subclase hereda todos los miembros de su clase madre (atributos, m\u00e9todos y clases internas). Los constructores no se heredan, aunque se pueden invocar desde la subclase.</p> Algunos ejemplos ... <ul> <li>Un coche es un veh\u00edculo (heredar\u00e1 atributos como la velocidad m\u00e1xima o m\u00e9todos como parar y arrancar).</li> <li>Un empleado es una persona (heredar\u00e1 atributos como el nombre o la fecha de nacimiento).</li> <li>Un rect\u00e1ngulo es una figura geom\u00e9trica en el plano (heredar\u00e1 m\u00e9todos como el c\u00e1lculo de la superficie o de su per\u00edmetro).</li> <li>Un cocodrilo es un reptil (heredar\u00e1 atributos como por ejemplo el n\u00famero de dientes).</li> </ul> <p>En este caso la expresi\u00f3n idiom\u00e1tica que puedes usar para plantearte si el tipo de relaci\u00f3n entre dos clases A y B es de herencia podr\u00eda ser \"es un\": \"la clase B es un tipo espec\u00edfico de la clase A\" (especializaci\u00f3n), o visto de otro modo: \"la clase A es un caso general de la clase B\" (generalizaci\u00f3n).</p> Recuperando algunos ejemplos de clases que ya hemos utilizado anteriormente ... <ul> <li>Una ventana en una aplicaci\u00f3n gr\u00e1fica puede ser una clase que herede de <code>JFrame</code> (componente <code>Swing</code>: <code>javax.swing.JFrame</code>), de esta manera esa clase ser\u00e1 un marco que dispondr\u00e1 de todos los m\u00e9todos y atributos de <code>JFrame</code> m\u00e1s aquellos que t\u00fa decidas incorporarle al rellenarlo de componentes gr\u00e1ficos.</li> <li>Una caja de di\u00e1logo puede ser un tipo de <code>JDialog</code> (otro componente <code>Swing</code>: <code>javax.swing.JDialog</code>).</li> </ul> <p>En Java, la clase <code>Object</code> (dentro del paquete <code>java.lang</code>) define e implementa el comportamiento com\u00fan a todas las clases (incluidas aquellas que t\u00fa escribas). Como recordar\u00e1s, ya se dijo que en Java cualquier clase deriva en \u00faltima instancia de la clase <code>Object</code>.</p> <p>Todas las clases tienen una clase madre, que a su vez tambi\u00e9n posee una superclase, y as\u00ed sucesivamente hasta llegar a la clase <code>Object</code> . De esta manera, se construye lo que habitualmente se conoce como una jerarqu\u00eda de clases, que en el caso de Java tendr\u00eda a la clase <code>Object</code> en la ra\u00edz.</p> <p>Anotaci\u00f3n</p> <p>Cuando escribas una clase en Java, puedes hacer que herede de una determinada clase madre (mediante el uso de <code>extends</code>) o bien no indicar ninguna herencia. En tal caso, aunque no indiques expl\u00edcitamente ning\u00fan tipo de herencia, el compilador asumir\u00e1 entonces de manera impl\u00edcita que tu clase hereda de la clase <code>Object</code>, que define e implementa el comportamiento com\u00fan a todas las clases.</p>"},{"location":"ud08/ud0801/#herencia-o-composicion","title":"\u00bfHerencia o composici\u00f3n?","text":"<p>Cuando escribas tus propias clases, debes intentar tener claro en qu\u00e9 casos utilizar la composici\u00f3n y cu\u00e1ndo la herencia:</p> <ul> <li>Composici\u00f3n: cuando una clase est\u00e1 formada por objetos de otras clases. En estos casos se incluyen objetos de esas clases, pero no necesariamente se comparten caracter\u00edsticas con ellos (no se heredan caracter\u00edsticas de esos objetos, sino que directamente se utilizar\u00e1n sus atributos y sus m\u00e9todos). Esos objetos incluidos no son m\u00e1s que atributos miembros de la clase que se est\u00e1 definiendo.</li> <li>Herencia: cuando una clase cumple todas las caracter\u00edsticas de otra. En estos casos la clase derivada es una especializaci\u00f3n (o particularizaci\u00f3n, extensi\u00f3n o restricci\u00f3n) de la clase base. Desde otro punto de vista se dir\u00eda que la clase base es una generalizaci\u00f3n de las clases derivadas.</li> </ul> Ejemplo <p>Imagina que dispones de una clase Punto (ya la has utilizado en otras ocasiones) y decides definir una nueva clase llamada C\u00edrculo. Dado que un punto tiene como atributos sus coordenadas en plano (x1, y1), decides que es buena idea aprovechar esa informaci\u00f3n e incorporarla en la clase Circulo que est\u00e1s escribiendo. Para ello utilizas la herencia, de manera que al derivar la clase C\u00edrculo de la clase Punto, tendr\u00e1s disponibles los atributos x1 e y1. Ahora solo faltar\u00eda a\u00f1adirle algunos atributos y m\u00e9todos m\u00e1s como por ejemplo el radio del c\u00edrculo, el c\u00e1lculo de su \u00e1rea y su per\u00edmetro, etc. </p> <p>En principio parece que la idea pueda funcionar pero es posible que m\u00e1s adelante, si contin\u00faas construyendo una jerarqu\u00eda de clases, observes que puedas llegar a conclusiones incongruentes al suponer que un c\u00edrculo es una especializaci\u00f3n de un punto (un tipo de punto). \u00bfTodas aquellas figuras que contengan uno o varios puntos deber\u00edan ser tipos de punto? \u00bfY si tienes varios puntos? \u00bfC\u00f3mo accedes a ellos? \u00bfUn rect\u00e1ngulo tambi\u00e9n tiene sentido que herede de un punto? No parece muy buena idea.</p> <p>Parece que en este caso habr\u00eda resultado mejor establecer una relaci\u00f3n de composici\u00f3n. Anal\u00edzalo detenidamente: \u00bfcu\u00e1l de estas dos situaciones te suena mejor?</p> <ol> <li>\"Un c\u00edrculo es un punto (su centro)\", y por tanto heredar\u00e1 las coordenadas x1 e y1 que tiene todo punto. Adem\u00e1s tendr\u00e1 otras caracter\u00edsticas espec\u00edficas como el radio o m\u00e9todos como el c\u00e1lculo de la longitud de su per\u00edmetro o de su \u00e1rea.</li> <li>\"Un c\u00edrculo tiene un punto (su centro)\", junto con algunos atributos m\u00e1s como por ejemplo el radio. Tambi\u00e9n tendr\u00e1 m\u00e9todos para el c\u00e1lculo de su \u00e1rea o de la longitud de su per\u00edmetro.</li> </ol> <p>Parece que en este caso la composici\u00f3n refleja con mayor fidelidad la relaci\u00f3n que existe entre ambas clases. Normalmente suele ser suficiente con plantearse las preguntas \"\u00bfB es un tipo de A?\" o \"\u00bfB contiene elementos de tipo A?\".</p>"},{"location":"ud08/ud0802/","title":"8.2 Composici\u00f3n","text":""},{"location":"ud08/ud0802/#sintaxis-de-la-composicion","title":"Sintaxis de la composici\u00f3n","text":"<p>Para indicar que una clase contiene objetos de otra clase no es necesaria ninguna sintaxis especial. Cada uno de esos objetos no es m\u00e1s que un atributo y, por tanto, debe ser declarado como tal:</p> Java<pre><code>class &lt;nombreClase&gt; {\n  [modificadores] &lt;NombreClase1&gt; nombreAtributo1;\n  [modificadores] &lt;NombreClase2&gt; nombreAtributo2;\n  &lt;NombreClase3&gt;[] listado;\n  ...    \n}\n</code></pre> <p>En unidades anteriores has trabajado con la clase <code>Punto</code>, que defin\u00eda las coordenadas de un punto en el plano, y con la clase <code>Rectangulo</code>, que defin\u00eda una figura de tipo rect\u00e1ngulo tambi\u00e9n en el plano a partir de dos de sus v\u00e9rtices (inferior izquierdo y superior derecho). Tal y como hemos formalizado ahora los tipos de relaciones entre clases, parece bastante claro que aqu\u00ed tendr\u00edas un caso de composici\u00f3n: \"un rect\u00e1ngulo contiene puntos\". Por tanto, podr\u00edas ahora redefinir los atributos de la clase <code>Rectangulo</code> (cuatro n\u00fameros reales) como dos objetos de tipo <code>Punto</code>:</p> Java<pre><code>class Rectangulo {\n  private Punto vertice1;\n  private Punto vertice2;\n  ...\n}\n</code></pre> <p>Ahora los m\u00e9todos de esta clase deber\u00e1n tener en cuenta que ya no hay cuatro atributos de tipo <code>double</code>, sino dos atributos de tipo <code>Punto</code> (cada uno de los cuales contendr\u00e1 en su interior dos atributos de tipo <code>double</code>).</p> Revisa con cuidado el siguiente ejemplo <p>Intenta reescribir los siguientes los m\u00e9todos de la clase <code>Rectangulo</code> teniendo en cuenta ahora su nueva estructura de atributos (dos objetos de la clase <code>Punto</code>, en lugar de cuatro elementos de tipo <code>double</code>):</p> <ul> <li> <p>M\u00e9todo <code>calcularSuperfice</code>, que calcula y devuelve el \u00e1rea de la superficie encerrada por la figura.</p> </li> <li> <p>M\u00e9todo <code>calcularPerimetro</code>, que calcula y devuelve la longitud del per\u00edmetro de la figura.</p> </li> </ul> <p>SOLUCI\u00d3N En ambos casos la interfaz no se ve modificada en absoluto (desde fuera su funcionamiento es el mismo), pero internamente deber\u00e1s tener en cuenta que ya no existen los atributos <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>, de tipo <code>double</code>, sino los atributos <code>vertice1</code> y <code>vertice2</code> de tipo <code>Punto</code>.</p> Java<pre><code>public class Punto {\n    private double x;\n    private double y;\n\n    public Punto(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public double getX() {\n        return x;\n    }\n\n    public void setX(double x) {\n        this.x = x;\n    }\n\n    public double getY() {\n        return y;\n    }\n\n    public void setY(double y) {\n        this.y = y;\n    }\n}\n</code></pre> <p>En la siguiente presentaci\u00f3n puedes observar detalladamente el proceso completo de elaboraci\u00f3n de la clase <code>Rectangulo</code> haciendo uso de la clase <code>Punto</code>:</p> <p>1) Objetos de tipo <code>Rectangulo</code> compuesto por objetos de tipo <code>Punto</code>:</p> <p>  2) Clase <code>Rectangulo</code> y su m\u00e9todo <code>calcularSuperficie</code>:  </p> Java<pre><code>public class Rectangulo {\n    // Atributos de objeto\n    private Punto vertice1;  // V\u00e9rtice inferior izquierdo\n    private Punto vertice2;  // V\u00e9rtice superior derecho\n\n    public double calcularSuperficie (){\n        // c\u00e1lculo de la base\n        double base = vertice2.obtenerX() - vertice1.obtenerX();\n        // c\u00e1lculo de la altura\n        double altura = vertice2.obtenerY() - vertice1.obtenerY();\n        // c\u00e1lculo del \u00e1rea\n        double area = base * altura;\n        return area;   // valor de retorno\n    }\n}\n</code></pre>"},{"location":"ud08/ud0802/#uso-de-la-composicion","title":"Uso de la composici\u00f3n","text":""},{"location":"ud08/ud0802/#preservacion-de-la-ocultacion","title":"Preservaci\u00f3n de la ocultaci\u00f3n","text":"<p>Como ya has observado, la relaci\u00f3n de composici\u00f3n no tiene m\u00e1s misterio a la hora de implementarse que simplemente declarar atributos de las clases que necesites dentro de la clase que est\u00e9s dise\u00f1ando.</p> <p>Ahora bien, cuando escribas clases que contienen objetos de otras clases (lo cual ser\u00e1 lo m\u00e1s habitual) deber\u00e1s tener un poco de precauci\u00f3n con aquellos m\u00e9todos que devuelvan informaci\u00f3n acerca de los atributos de la clase (m\u00e9todos consultores o de tipo get). </p> <p>Como ya viste en la unidad dedicada a la creaci\u00f3n de clases, lo normal suele ser declarar los atributos como privados (o protegidos, como veremos un poco m\u00e1s adelante) para ocultarlos a los posibles clientes de la clase (otros objetos que en el futuro har\u00e1n uso de la clase). Para que otros objetos puedan acceder a la informaci\u00f3n contenida en los atributos, o al menos a una parte de ella, deber\u00e1n hacerlo a trav\u00e9s de m\u00e9todos que sirvan de interfaz, de manera que s\u00f3lo se podr\u00e1 tener acceso a aquella informaci\u00f3n que el creador de la clase haya considerado oportuna. Del mismo modo, los atributos solamente ser\u00e1n modificados desde los m\u00e9todos de la clase, que decidir\u00e1n c\u00f3mo y bajo qu\u00e9 circunstancias deben realizarse esas modificaciones. Con esa metodolog\u00eda de acceso se ten\u00eda perfectamente separada la parte de manipulaci\u00f3n interna de los atributos de la interfaz con el exterior.</p> <p>Hasta ahora los m\u00e9todos de tipo get devolv\u00edan tipos primitivos, es decir, copias del contenido (a veces con alg\u00fan tipo de modificaci\u00f3n o de formato) que hab\u00eda almacenado en los atributos, pero los atributos segu\u00edan \"a salvo\" como elementos privados de la clase. Pero, a partir de este momento, al tener objetos dentro de las clases y no s\u00f3lo tipos primitivos, es posible que en un determinado momento interese devolver un objeto completo.</p> <p>Cuidado al devolver atributos de tipo objeto</p> <p>Ahora bien, cuando vayas a devolver un objeto habr\u00e1s de obrar con mucha precauci\u00f3n. Si en un m\u00e9todo de la clase devuelve directamente un objeto que es un atributo, estar\u00e1s ofreciendo directamente una referencia a un objeto atributo que probablemente has definido como privado. \u00a1De esta forma est\u00e1s volviendo a hacer p\u00fablico un atributo que inicialmente era privado! </p> <p>Para evitar ese tipo de situaciones (ofrecer al exterior referencias a objetos privados) puedes optar por diversas alternativas, procurando siempre evitar la devoluci\u00f3n directa de un atributo que sea un objeto:</p> <p>\u200b   1) Una opci\u00f3n podr\u00eda ser devolver siempre tipos primitivos.</p> <p>\u200b   2) Dado que esto no siempre es posible, o como m\u00ednimo poco pr\u00e1ctico, otra posibilidad es crear un nuevo objeto que sea una copia del atributo que quieres devolver y utilizar ese objeto como valor de retorno. Es decir, crear una copia del objeto especialmente para devolverlo. De esta manera, el c\u00f3digo cliente de ese m\u00e9todo podr\u00e1 manipular a su antojo ese nuevo objeto, pues no ser\u00e1 una referencia al atributo original, sino un nuevo objeto con el mismo contenido.</p> <p>\u200b   3) Por \u00faltimo, debes tener en cuenta que es posible que en algunos casos s\u00ed se necesite realmente la referencia al atributo original (algo muy habitual en el caso de atributos est\u00e1ticos). En tales casos, no habr\u00e1 problema en devolver directamente el atributo para que el c\u00f3digo llamante (cliente) haga el uso que estime oportuno de \u00e9l.</p> <p>Evitar la devoluci\u00f3n de un atributo objeto</p> <p>Debes evitar por todos los medios la devoluci\u00f3n de un atributo que sea un objeto, pues estar\u00edas dando directamente una referencia al atributo, visible y manipulable desde fuera; salvo que se trate de un caso en el que deba ser as\u00ed.</p> <p>Para entender estas situaciones un poco mejor, podemos volver a la clase <code>Rectangulo</code> y observar sus nuevos m\u00e9todos de tipo get.</p> Revisa con cuidado el siguiente ejemplo <p>Dada la clase <code>Rectangulo</code>, escribe sus nuevos m\u00e9todos <code>getVertice1</code> y <code>getVertice2</code> para que devuelvan los v\u00e9rtices inferior izquierdo y superior derecho del rect\u00e1ngulo (objetos de tipo <code>Punto</code>), teniendo en cuenta su nueva estructura de atributos (dos objetos de la clase <code>Punto</code>, en lugar de cuatro elementos de tipo <code>double</code>):</p> <p>SOLUCI\u00d3N (no correcta) Los m\u00e9todos de obtenci\u00f3n de v\u00e9rtices devolver\u00e1n objetos de la clase <code>Punto</code>:</p> Java<pre><code>public Punto getVertice1 (){\n    return vertice1;\n}\n\npublic Punto getVertice2 (){\n    return vertice2;\n}\n</code></pre> <p>Esto funcionar\u00eda perfectamente, pero deber\u00edas tener cuidado con este tipo de m\u00e9todos que devuelven directamente una referencia a un objeto atributo que probablemente has definido como privado. Cuidado!! est\u00e1s de alguna manera haciendo p\u00fablico un atributo que fue declarado como privado.</p> <p>SOLUCI\u00d3N (correcta) Para evitar que esto suceda bastar\u00eda con crear un nuevo objeto que fuera una copia del atributo que se desea devolver (en este caso un objeto de la clase <code>Punto</code>).</p> <p>Aqu\u00ed tienes la soluci\u00f3n para la nueva clase <code>Rectangulo</code>:</p> Java<pre><code>class Rectangulo {\n    private Punto vertice1;\n    private Punto vertice2;\n\n    public double calcularSuperficie() {\n        double area, base, altura; // Variables locales\n        base = vertice2.getX() - vertice1.getX(); // Antes era x2 - x1\n        altura = vertice2.getY() - vertice1.getY(); // Antes era y2 - y1\n        area = base * altura;\n        return area;\n    }\n\n    public double CalcularPerimetro() {\n        double perimetro, base, altura; // Variables locales\n        base = vertice2.getX() - vertice1.getX(); // Antes era x2 - x1\n        altura = vertice2.getY() - vertice1.getY(); // Antes era y2 - y1\n        perimetro = 2 * base + 2 * altura;\n        return perimetro;\n    }\n\n    /*\n    * AS\u00cd NO!!\n    *\n    *public Punto getVertice1mal() {\n    *    return vertice1;\n    *}\n    *\n    *public Punto getVertice2mal() {\n    *    return vertice2;\n    *}  \n    */\n\n    //Mejor de este modo:\n    public Punto getVertice1() {\n        // Creaci\u00f3n de un nuevo punto extrayendo sus atributos:\n        double x, y;\n        Punto p;\n        x = this.vertice1.getX();\n        y = this.vertice1.getY();\n        p = new Punto(x, y);\n        return p;\n    }\n\n    // O, mucho mejor, as\u00ed:\n    public Punto getVertice2() {\n        // Utilizando el constructor copia de Punto (si es que est\u00e1 definido)\n\n        // Punto p;\n        // p = new Punto(this.vertice2); \n        // return p;\n\n        // o m\u00e1s corto:\n        // Uso del constructor copia\n        return new Punto(this.vertice2);\n    }\n\n    public Rectangulo(Punto vertice1, Punto vertice2) {\n        this.vertice1 = vertice1;\n        this.vertice2 = vertice2;\n    }\n\n    public static void main(String[] args) {\n        Punto puntoA = new Punto(0, 0);\n        Punto puntoB = new Punto(5, 5);\n\n        Rectangulo rectA = new Rectangulo(puntoA, puntoB);\n        System.out.println(\"Per\u00edmetro del rectanculo A: \" + rectA.CalcularPerimetro());  //20\n\n        puntoA.setX(4);\n        puntoA.setY(4);\n\n        Rectangulo rectB = new Rectangulo(puntoA, puntoB);\n        System.out.println(\"Creo un nuevo rectangulo, pero cambia el Per\u00edmetro del anterior\");\n        System.out.println(\"Per\u00edmetro del rectanculo A: \" + rectA.CalcularPerimetro());  //20\n        System.out.println(\"Per\u00edmetro del rectanculo B: \" + rectB.CalcularPerimetro());  //4\n    }\n}\n</code></pre> <p>De esta manera, se devuelve un punto totalmente nuevo que podr\u00e1 ser manipulado sin ning\u00fan temor por parte del c\u00f3digo cliente de la clase pues es una copia para \u00e9l.</p>"},{"location":"ud08/ud0802/#llamadas-a-constructores","title":"Llamadas a constructores","text":"<p>Otro factor que debes considerar, a la hora de escribir clases que contengan como atributos objetos de otras clases, es su comportamiento a la hora de instanciarse. Durante el proceso de creaci\u00f3n de un objeto (constructor) de la clase contenedora habr\u00e1 que tener en cuenta tambi\u00e9n la creaci\u00f3n (llamadas a constructores) de aquellos objetos que son contenidos.</p> <p>A tener en cuenta</p> <p>El constructor de la clase contenedora debe invocar a los constructores de las clases de los objetos contenidos.</p> <p>En este caso hay que tener cuidado con las referencias a objetos que se pasan como par\u00e1metros para rellenar el contenido de los atributos. Es conveniente hacer una copia de esos objetos y utilizar esas copias para los atributos pues si se utiliza la referencia que se ha pasado como par\u00e1metro, el c\u00f3digo cliente de la clase podr\u00eda tener acceso a ella sin necesidad de pasar por la interfaz de la clase (volver\u00edamos a dejar abierta una puerta p\u00fablica a algo que quiz\u00e1 sea privado).</p> <p>Adem\u00e1s, si el objeto par\u00e1metro que se pas\u00f3 al constructor formaba parte de otro objeto, esto podr\u00eda ocasionar un desagradable efecto colateral si esos objetos son modificados en el futuro desde el c\u00f3digo cliente de la clase, ya que no sabes de d\u00f3nde provienen esos objetos, si fueron creados especialmente para ser usados por el nuevo objeto creado o si pertenecen a otro objeto que podr\u00eda modificarlos m\u00e1s tarde. Es decir, correr\u00edas el riesgo de estar \"compartiendo\" esos objetos con otras partes del c\u00f3digo, sin ning\u00fan tipo de control de acceso y con las nefastas consecuencias que eso podr\u00eda tener: cualquier cambio de ese objeto afectar\u00eda a partes del programa supuestamente independientes, que entienden ese objeto como suyo.</p> <p>A tener en cuenta</p> <p>En el fondo, los objetos no son m\u00e1s que variables de tipo referencia a la zona de memoria en la que se encuentra toda la informaci\u00f3n del objeto en s\u00ed mismo. Esto es, puedes tener un \u00fanico objeto y m\u00faltiples referencias a \u00e9l. Pero s\u00f3lo se trata de un objeto, y cualquier modificaci\u00f3n desde una de sus referencias afectar\u00eda a todas las dem\u00e1s, pues estamos hablando del mismo objeto.</p> <p>Recuerda tambi\u00e9n que s\u00f3lo se crean objetos cuando se llama a un constructor (uso de <code>new</code>). Si realizas asignaciones o pasos de par\u00e1metros, no se est\u00e1n copiando o pasando copias de los objetos, sino simplemente de las referencias, y por tanto se tratar\u00e1 siempre del mismo objeto. </p> <p>Se trata de un efecto similar al que suced\u00eda en los m\u00e9todos de tipo get, pero en este caso en sentido contrario (en lugar de que nuestra clase \"regale\" al exterior uno de sus atributos objeto mediante una referencia, en esta ocasi\u00f3n se \"adue\u00f1a\" de un par\u00e1metro objeto que probablemente pertenezca a otro objeto y que es posible que en el futuro haga uso de \u00e9l).</p> <p>Para entender mejor estos posibles efectos podemos continuar con el ejemplo de la clase <code>Rectangulo</code> que contiene en su interior dos objetos de la clase <code>Punto</code>. En los constructores del rect\u00e1ngulo habr\u00e1 que incluir todo lo necesario para crear dos instancias de la clase <code>Punto</code> evitando las referencias a par\u00e1metros (haciendo copias).</p> Revisa con cuidado el siguiente ejemplo <p>Intenta reescribir los constructores de la clase <code>Rectangulo</code> teniendo en cuenta ahora su nueva estructura de atributos (dos objetos de la clase <code>Punto</code>, en lugar de cuatro elementos de tipo <code>double</code>): 1\u00ba) Un constructor sin par\u00e1metros (para sustituir al constructor por defecto) que haga que los valores iniciales de las esquinas del rect\u00e1ngulo sean (0,0) y (1,1). 2\u00ba) Un constructor con cuatro par\u00e1metros, <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>, que cree un rect\u00e1ngulo con los v\u00e9rtices (<code>x1</code>, <code>y1</code>) y (<code>x2</code>, <code>y2</code>). 3\u00ba) Un constructor con dos par\u00e1metros, <code>punto1</code>, <code>punto2</code>, que rellene los valores iniciales de los atributos del rect\u00e1ngulo con los valores proporcionados a trav\u00e9s de los par\u00e1metros. 4\u00ba) Un constructor con dos par\u00e1metros, <code>base</code> y <code>altura</code>, que cree un rect\u00e1ngulo donde el v\u00e9rtice inferior derecho est\u00e9 ubicado en la posici\u00f3n (0,0) y que tenga una base y una altura tal y como indican los dos par\u00e1metros proporcionados. 5\u00ba) Un constructor copia.</p> <p>SOLUCI\u00d3N Durante el proceso de creaci\u00f3n de un objeto (constructor) de la clase contenedora (en este caso <code>Rectangulo</code>) hay que tener en cuenta tambi\u00e9n la creaci\u00f3n (llamada a constructores) de aquellos objetos que son contenidos (en este caso objetos de la clase <code>Punto</code>). 1\u00ba) En el caso del primer constructor, habr\u00e1 que crear dos puntos con las coordenadas (0,0) y (1,1) y asignarlos a los atributos correspondientes (<code>vertice1</code> y <code>vertice2</code>):</p> <p>Java<pre><code>public Rectangulo (){\n    this.vertice1 = new Punto (0,0);\n    this.vertice2 = new Punto (1,1);\n}\n</code></pre>  2\u00ba) Para el segundo constructor habr\u00e1 que crear dos puntos con las coordenadas x1, y1, x2, y2 que han sido pasadas como par\u00e1metros:</p> <p>Java<pre><code>public Rectangulo (double x1, double y1, double x2, double y2){\n    this.vertice1 = new Punto (x1, y1);\n    this.vertice2 = new Punto (x2, y2);\n}\n</code></pre>  3\u00ba) En el caso del tercer constructor puedes utilizar directamente los dos puntos que se pasan como par\u00e1metros para construir los v\u00e9rtices del rect\u00e1ngulo.</p> Java<pre><code>public Rectangulo (Punto vertice1, Punto vertice2) {\n    this.vertice1 = vertice1;\n    this.vertice2 = vertice2;\n}\n</code></pre> <p>Ahora bien, esto podr\u00eda ocasionar un efecto colateral no deseado si esos objetos de tipo <code>Punto</code> son modificados en el futuro desde el c\u00f3digo cliente del constructor (no sabes si esos puntos fueron creados especialmente para ser usados por el rect\u00e1ngulo o si pertenecen a otro objeto que podr\u00eda modificarlos m\u00e1s tarde).</p> <p>Por tanto, para este caso quiz\u00e1 fuera recomendable crear dos nuevos puntos a imagen y semejanza de los puntos que se han pasado como par\u00e1metros. Para ello tendr\u00edas dos opciones:</p> <p>a) Llamar al constructor de la clase <code>Punto</code> con los valores de los atributos (x, y).</p> <p>Java<pre><code>public Rectangulo(Punto vertice1, Punto vertice2) {\n    this.vertice1 = new Punto(vertice1.getX(), vertice1.getY());\n    this.vertice2 = new Punto(vertice2.getX(), vertice2.getY());\n}\n</code></pre>  b) Llamar al constructor copia de la clase <code>Punto</code>, si es que se dispone de \u00e9l.</p> <p>Java<pre><code>public Rectangulo (Punto vertice1, Punto vertice2) {\n    this.vertice1 = new Punto (vertice1);\n    this.vertice2 = new Punto (vertice2);\n}\n</code></pre>  4\u00ba) Para el cuarto caso, el caso del constructor que recibe como par\u00e1metros la base y la altura, habr\u00e1 que crear sendos v\u00e9rtices con valores (0,0) y (0 + base, 0 + altura), o lo que es lo mismo: (0,0) y (base, altura).</p> <p>Java<pre><code>public Rectangulo(double base, double altura) {\n    this.vertice1 = new Punto(0,0);\n    this.vertice2 = new Punto(base, altura);\n}\n</code></pre>  5\u00ba) Quedar\u00eda finalmente por implementar el constructor copia, quinto caso:</p> Java<pre><code>public Rectangulo (Rectangulo r) {\n    this.vertice1 = new Punto (r.getVertice1());\n    this.vertice2 = new Punto (r.getVertice2());\n}\n</code></pre> <p>En este caso nuevamente volvemos a clonar los atributos <code>vertice1</code> y <code>vertice2</code> del objeto <code>r</code> que se ha pasado como par\u00e1metro para evitar tener que compartir esos atributos en los dos rect\u00e1ngulos. As\u00ed ahora el m\u00e9todo <code>main</code> que comprueba la clase <code>Rectangulo</code> funciona correctamente:</p> Java<pre><code>public static void main(String[] args) {\n    Punto puntoA = new Punto(0, 0);\n    Punto puntoB = new Punto(5, 5);\n\n    Rectangulo rectA = new Rectangulo(puntoA, puntoB);\n    System.out.println(\"Per\u00edmetro del rectanculo A: \" + rectA.CalcularPerimetro());//20\n\n    puntoA.setX(4);\n    puntoA.setY(4);\n\n    Rectangulo rectB = new Rectangulo(puntoA, puntoB);\n    System.out.println(\"Creo un nuevo rectangulo, pero cambia el Per\u00edmetro del anterior\");\n    System.out.println(\"Per\u00edmetro del rectanculo A: \" + rectA.CalcularPerimetro());//20\n    System.out.println(\"Per\u00edmetro del rectanculo B: \" + rectB.CalcularPerimetro());//4\n}\n</code></pre>"},{"location":"ud08/ud0802/#clases-anidadas-o-internas","title":"Clases anidadas o internas","text":"<p>En algunos lenguajes, es posible definir una clase dentro de otra clase (clases internas):</p> Java<pre><code>class ClaseContenedora {\n  // Cuerpo de la clase\n  ...\n  class ClaseInterna {\n    // Cuerpo de la clase interna\n    ...\n  }\n}\n</code></pre> <p>Se pueden distinguir varios tipos de clases internas:</p> <ul> <li> <p>Clases internas est\u00e1ticas (o clases anidadas), declaradas con el modificador <code>static</code>.</p> <p>Estas clases anidadas, como miembros de una clase que son (miembros de <code>ClaseContenedora</code>), pueden ser declaradas con los modificadores <code>public</code>, <code>protected</code>, <code>private</code> o de <code>paquete</code>, como el resto de miembros.</p> </li> <li> <p>Clases internas miembro, conocidas habitualmente como clases internas. Declaradas al m\u00e1ximo nivel de la clase contenedora y no est\u00e1ticas.</p> <p>Estas clases internas (no est\u00e1ticas) tienen acceso a otros miembros de la clase dentro de la que est\u00e1 definida aunque sean privados (se trata en cierto modo de un miembro m\u00e1s de la clase), mientras que las anidadas (est\u00e1ticas) no.</p> <p>Las clases internas se utilizan en algunos casos para: - Agrupar clases que s\u00f3lo tiene sentido que existan en el entorno de la clase en la que han sido definidas, de manera que se oculta su existencia al resto del c\u00f3digo. - Incrementar el nivel de encapsulaci\u00f3n y ocultamiento. - Proporcionar un c\u00f3digo fuente m\u00e1s legible y f\u00e1cil de mantener (el c\u00f3digo de las clases internas y anidadas est\u00e1 m\u00e1s cerca de donde es usado).</p> </li> <li> <p>Clases internas locales, que se declaran en el interior de un bloque de c\u00f3digo (normalmente dentro de un m\u00e9todo).</p> </li> <li> <p>Clases an\u00f3nimas, similares a las internas locales, pero sin nombre (s\u00f3lo existir\u00e1 un objeto de ellas y, al no tener nombre, no tendr\u00e1n constructores). Se suelen usar en la gesti\u00f3n de eventos en los interfaces gr\u00e1ficos.</p> </li> </ul> Java<pre><code>class ClaseContenedora {\n  ...\n  static class ClaseAnidadaEstatica {\n     ...\n  }\n  class ClaseInterna {\n    ...\n  }\n}\n</code></pre> <p>Nota</p> <p>En Java es posible definir clases internas y anidadas, permitiendo todas esas posibilidades. Aunque para los ejemplos con los que vas a trabajar no las vas a necesitar por ahora. </p> Ejemplo de ClaseContenedora y ClaseInterna <p>Java<pre><code>public class ClaseContenedora {\n    private int valorExterno;\n\n    // Constructor de la clase contenedora\n    public ClaseContenedora(int valorExterno) {\n        this.valorExterno = valorExterno;\n    }\n\n    // M\u00e9todo de la clase contenedora para imprimir el valor externo\n    public void imprimirValorExterno() {\n        System.out.println(\"Valor externo: \" + valorExterno);\n    }\n\n    // Clase interna dentro de la clase contenedora\n    public class ClaseInterna {\n        private int valorInterno;\n\n        // Constructor de la clase interna\n        public ClaseInterna(int valorInterno) {\n            this.valorInterno = valorInterno;\n        }\n\n        // M\u00e9todo de la clase interna para imprimir el valor interno y externo\n        public void imprimirValores() {\n            System.out.println(\"Valor externo: \" + valorExterno);\n            System.out.println(\"Valor interno: \" + valorInterno);\n        }\n    }\n}\n</code></pre> Java<pre><code>public class Ejemplo {\n    public static void main(String[] args) {\n        // Crear una instancia de la clase contenedora\n        ClaseContenedora contenedor = new ClaseContenedora(5);\n\n        // Crear una instancia de la clase interna utilizando la instancia de la clase contenedora\n        ClaseContenedora.ClaseInterna interna = contenedor.new ClaseInterna(10);\n\n        // Llamar al m\u00e9todo para imprimir el valor interno y externo desde la clase interna\n        interna.imprimirValores();\n    }\n}\n</code></pre></p>"},{"location":"ud08/ud0803/","title":"8.3 Herencia","text":"<p>Como ya has estudiado, la herencia es el mecanismo que permite definir una nueva clase a partir de otra, pudiendo a\u00f1adir nuevas caracter\u00edsticas, sin tener que volver a escribir todo el c\u00f3digo de la clase base.</p> <p>La clase de la que se hereda suele ser llamada clase base, clase madre o superclase (de la que hereda otra clase, y se heredar\u00e1n todas aquellas caracter\u00edsticas que la clase madre permita). A la clase que hereda se le suele llamar clase hija, clase derivada o subclase (que hereda de otra clase, y se heredan todas aquellas caracter\u00edsticas que la clase madre permita).</p> <p>Una clase derivada puede ser a su vez clase madre de otra que herede de ella y as\u00ed sucesivamente dando lugar a una jerarqu\u00eda de clases, excepto aquellas que est\u00e9n en la parte de arriba de la jerarqu\u00eda (s\u00f3lo ser\u00e1n clases madre) o en la parte de abajo (s\u00f3lo ser\u00e1n clases hijas). </p> <p>Una clase hija no tiene acceso a los miembros privados de su clase madre, tan solo a los p\u00fablicos (como cualquier parte del c\u00f3digo tendr\u00eda) y a los protegidos (a los que s\u00f3lo tienen acceso las clases derivadas y las del mismo paquete). Aquellos miembros que sean privados en la clase base tambi\u00e9n habr\u00e1n sido heredados, pero el acceso a ellos estar\u00e1 restringido al propio funcionamiento de la superclase y s\u00f3lo se podr\u00e1 acceder a ellos si la superclase ha dejado alg\u00fan medio indirecto para hacerlo (por ejemplo a trav\u00e9s de alg\u00fan m\u00e9todo). </p> <p>Todos los miembros de la superclase, tanto atributos como m\u00e9todos, son heredados por la subclase. Algunos de estos miembros heredados podr\u00e1n ser redefinidos o sobrescritos (overriden) y tambi\u00e9n podr\u00e1n a\u00f1adirse nuevos miembros. De alguna manera podr\u00eda decirse que est\u00e1s \"ampliando\" la clase base con caracter\u00edsticas adicionales o modificando algunas de ellas (proceso de especializaci\u00f3n).</p> <p>A tener en cuenta</p> <p>Una clase derivada extiende la funcionalidad de la clase base sin tener que volver a escribir el c\u00f3digo de la clase base.</p>"},{"location":"ud08/ud0803/#sintaxis-de-la-herencia","title":"Sintaxis de la herencia","text":"<p>En Java la herencia se indica mediante la palabra reservada <code>extends</code>:</p> Java<pre><code>[modificador] class ClaseMadre {\n  // Cuerpo de la clase\n  ...\n}\n\n[modificador] class ClaseHija extends ClaseMadre {\n  // Cuerpo de la clase\n  ...\n}\n</code></pre> <p>Imagina que tienes una clase <code>Persona</code> que contiene atributos como <code>nombre</code>, <code>apellidos</code> y <code>fecha de nacimiento</code>:</p> Java<pre><code>public class Persona {\n  String nombre;\n  String apellidos;\n  LocalDate fechaNacim;\n  ...\n}\n</code></pre> <p>Es posible que, m\u00e1s adelante, necesites una clase <code>Alumno</code> que compartir\u00e1 esos atributos (dado que todo alumno es una persona, pero con algunas caracter\u00edsticas espec\u00edficas que lo especializan). En tal caso tendr\u00edas la posibilidad de crear una clase <code>Alumno</code> que repitiera todos esos atributos o bien heredar de la clase <code>Persona</code>:</p> Java<pre><code>public class Alumno extends Persona {\n  String grupo;\n  double notaMedia;\n  ...\n}\n</code></pre> <p>A partir de ahora, un objeto de la clase <code>Alumno</code> contendr\u00e1 los atributos <code>grupo</code> y <code>notaMedia</code> (propios de la clase <code>Alumno</code>), pero tambi\u00e9n <code>nombre</code>, <code>apellidos</code> y <code>fechaNacim</code> (propios de su clase base <code>Persona</code> y que por tanto ha heredado).</p> Revisa con cuidado el siguiente ejemplo <p>Imagina que tambi\u00e9n necesitas una clase <code>Profesor</code>, que contar\u00e1 con atributos como nombre, apellidos, fecha de nacimiento, salario y especialidad. \u00bfC\u00f3mo crear\u00edas esa nueva clase y qu\u00e9 atributos le a\u00f1adir\u00edas?</p> <p>SOLUCI\u00d3N Est\u00e1 claro que un <code>Profesor</code> es otra especializaci\u00f3n de <code>Persona</code>, al igual que lo era <code>Alumno</code>, as\u00ed que podr\u00edas crear otra clase derivada de <code>Persona</code> y as\u00ed aprovechar los atributos gen\u00e9ricos (nombre, apellidos, fecha de nacimiento) que posee todo objeto de tipo <code>Persona</code>. Tan solo faltar\u00eda a\u00f1adirle sus atributos espec\u00edficos (salario y especialidad):</p> Java<pre><code>public class Profesor extends Persona {\n    String especialidad;\n    double salario;\n    ...\n}\n</code></pre>"},{"location":"ud08/ud0803/#acceso-a-miembros-heredados","title":"Acceso a miembros heredados","text":"<p>Como ya has visto anteriormente, no es posible acceder a miembros privados de una superclase. Para poder acceder a ellos podr\u00edas pensar en hacerlos p\u00fablicos, pero entonces estar\u00edas dando la opci\u00f3n de acceder a ellos a cualquier objeto externo y es probable que tampoco sea eso lo deseable. Para ello se invent\u00f3 el modificador <code>protected</code> (protegido) que permite el acceso desde clases heredadas, pero no desde fuera de las clases (estrictamente hablando, desde fuera del paquete), que ser\u00edan como miembros privados.</p> <p>En la unidad dedicada a la utilizaci\u00f3n de clases ya estudiaste los posibles modificadores de acceso que pod\u00eda tener un miembro: sin modificador (acceso de paquete), p\u00fablico, privado o protegido.</p> <p>Aqu\u00ed tienes de nuevo el resumen:</p> modificador Misma clase Mismo paquete Subclase Otro paquete <code>public</code> \u2714 \u2714 \u2714 \u2714 <code>protected</code> \u2714 \u2714 \u2714 \u274c Sin modificador (<code>package</code>) \u2714 \u2714 \u274c \u274c <code>private</code> \u2714 \u274c \u274c \u274c <p>Los modificadores de acceso son excluyentes</p> <p>S\u00f3lo se puede utilizar uno de ellos en la declaraci\u00f3n de un atributo.</p> <p>Si en el ejemplo anterior de la clase <code>Persona</code> se hubieran definido sus atributos como <code>private</code>:</p> Java<pre><code>public class Persona {\n  private String nombre;\n  private String apellidos;\n  ...\n}\n</code></pre> <p>Al definir la clase <code>Alumno</code> como heredera de <code>Persona</code>, no habr\u00edas tenido acceso a esos atributos, pudiendo ocasionar un grave problema de operatividad al intentar manipular esa informaci\u00f3n. Por tanto, en estos casos lo m\u00e1s recomendable habr\u00eda sido declarar esos atributos como <code>protected</code> o bien sin modificador (para que tambi\u00e9n tengan acceso a ellos otras clases del mismo paquete, si es que se considera oportuno):</p> Java<pre><code>public class Persona {\n  protected String nombre;\n  protected String apellidos;\n  ...\n}\n</code></pre> <p>Privacidad de atributos</p> <p>S\u00f3lo en aquellos casos en los que se desea expl\u00edcitamente que un miembro de una clase no pueda ser accesible desde una clase derivada deber\u00eda utilizarse el modificador <code>private</code>. En el resto de casos es recomendable utilizar <code>protected</code>, o bien no indicar modificador (acceso a nivel de paquete).</p> Revisa con cuidado el siguiente ejemplo <p>Reescribe las clases <code>Alumno</code> y <code>Profesor</code> utilizando el modificador protected para sus atributos del mismo modo que se ha hecho para su superclase <code>Persona</code>.</p> <p>SOLUCI\u00d3N 1) Clase <code>Alumno</code>. Se trata simplemente de a\u00f1adir el modificador de acceso protected a los nuevos atributos que a\u00f1ade la clase: Java<pre><code>public class Alumno extends Persona {\n    protected String grupo;\n    protected double notaMedia;\n    ...\n}\n</code></pre></p> <p>2) Clase <code>Profesor</code> (exactamente igual que en la clase <code>Alumno</code>): Java<pre><code>public class Profesor extends Persona {\n    protected String especialidad;\n    protected double salario;\n    ...\n}\n</code></pre></p>"},{"location":"ud08/ud0803/#utilizacion-de-miembros-heredados","title":"Utilizaci\u00f3n de miembros heredados","text":""},{"location":"ud08/ud0803/#atributos","title":"Atributos","text":"<p>Los atributos heredados por una clase son, a efectos pr\u00e1cticos, iguales que aquellos que sean definidos espec\u00edficamente en la nueva clase derivada.</p> <p>En el ejemplo anterior la clase <code>Persona</code> dispon\u00eda de tres atributos y la clase <code>Alumno</code>, que heredaba de ella, a\u00f1ad\u00eda dos atributos m\u00e1s. Desde un punto de vista funcional podr\u00edas considerar que la clase <code>Alumno</code> tiene cinco atributos: tres por ser <code>Persona</code> (nombre, apellidos, fecha de nacimiento) y otros dos m\u00e1s por ser <code>Alumno</code> (grupo y nota media).</p> Revisa con cuidado el siguiente ejemplo <p>Dadas las clases <code>Alumno</code> y <code>Profesor</code> que has utilizado anteriormente, implementa m\u00e9todos get y set en las clases <code>Alumno</code> y <code>Profesor</code> para trabajar con sus cinco atributos (tres heredados m\u00e1s dos espec\u00edficos).</p> <p>SOLUCI\u00d3N</p> <p>1) Clase <code>Alumno</code>.Se trata de heredar de la clase <code>Persona</code> y por tanto utilizar con normalidad sus atributos heredados como si pertenecieran a la propia clase (de hecho se puede considerar que le pertenecen, dado que los ha heredado). Java<pre><code>import java.time.LocalDate;\n\npublic class Alumno extends Persona {\n\n    protected String grupo;\n    protected double notaMedia;\n\n    // M\u00e9todo getXXXXX\n    public String getNombre() {\n        return nombre;\n    }\n\n    public String getApellidos() {\n        return apellidos;\n    }\n\n    public LocalDate getFechaNacimiento() {\n        return this.fechaNacimiento;\n    }\n\n    public String getGrupo() {\n        return grupo;\n    }\n\n    public double getNotaMedia() {\n        return notaMedia;\n    }\n\n    // M\u00e9todos setXXXXX\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void setApellidos(String apellidos) {\n        this.apellidos = apellidos;\n    }\n\n    public void setFechaNacimiento(LocalDate fechaNacimiento) {\n        this.fechaNacimiento = fechaNacimiento;\n    }\n\n    public void setGrupo(String grupo) {\n        this.grupo = grupo;\n    }\n\n    public void setNotaMedia(double notaMedia) {\n        this.notaMedia = notaMedia;\n    }\n}\n</code></pre></p> <p>Si te fijas, puedes utilizar sin problema la referencia <code>this</code> a la propia clase con esos atributos heredados, pues pertenecen a la clase: <code>this.nombre</code>, <code>this.apellidos</code>, etc.</p> <p>2) Clase <code>Profesor</code>.Seguimos exactamente el mismo procedimiento que con la clase <code>Alumno</code>. Java<pre><code>import java.time.LocalDate;\n\npublic class Profesor extends Persona {\n    String especialidad;\n    double salario;\n\n    // M\u00e9todos getXXXXX\n    public String getNombre() {\n        return nombre;\n    }\n\n    public String getApellidos() {\n        return apellidos;\n    }\n\n    public LocalDate getFechaNacimiento() {\n        return this.fechaNacimiento;\n    }\n\n    public String getEspecialidad() {\n        return especialidad;\n    }\n\n    public double getSalario() {\n        return salario;\n    }\n\n    // M\u00e9todos setXXXXX\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void setApellidos(String apellidos) {\n        this.apellidos = apellidos;\n    }\n\n    public void setFechaNacimiento(LocalDate fechaNacimiento) {\n        this.fechaNacimiento = fechaNacimiento;\n    }\n\n    public void setSalario(double salario) {\n        this.salario = salario;\n    }\n\n    public void setESpecialidad(String especialidad) {\n        this.especialidad = especialidad;\n    }\n}\n</code></pre></p> <p>Una conclusi\u00f3n que puedes extraer de este c\u00f3digo es que has tenido que escribir los m\u00e9todos <code>get</code> y <code>set</code> para los tres atributos heredados, pero \u00bfno habr\u00eda sido posible definir esos seis m\u00e9todos en la clase base y as\u00ed estas dos clases derivadas hubieran tambi\u00e9n heredado esos m\u00e9todos? La respuesta es afirmativa y de hecho es como lo vas a hacer a partir de ahora. De esa manera te habr\u00edas evitado tener que escribir seis m\u00e9todos en la clase <code>Alumno</code> y otros seis en la clase <code>Profesor</code>. </p> <p>As\u00ed que, recuerda! Se pueden heredar tanto los atributos como los m\u00e9todos.</p> <p>Aqu\u00ed tienes un ejemplo de c\u00f3mo podr\u00edas haber definido la clase <code>Persona</code> para que luego se hubieran podido heredar de ella sus m\u00e9todos (y no s\u00f3lo sus atributos):</p> <p>SOLUCI\u00d3N IMPLEMENTADA CORRECTAMENTE (I) Java<pre><code>import java.time.LocalDate;\n\npublic class Persona {\n    protected String nombre;\n    protected String apellidos;\n    protected LocalDate fechaNacimiento;\n\n    // M\u00e9todos getXXXXX\n    public String getNombre() {\n        return nombre;\n    }\n\n    public String getApellidos() {\n        return apellidos;\n}\n\n    public LocalDate getFechaNacimiento() {\n        return this.fechaNacimiento;\n    }\n\n    // M\u00e9todos setXXXXX\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void setApellidos(String apellidos) {\n        this.apellidos = apellidos;\n        }\n\n    public void setFechaNacimiento(LocalDate fechaNacimiento) {\n        this.fechaNacimiento = fechaNacimiento;\n    }\n}\n</code></pre></p>"},{"location":"ud08/ud0803/#metodos","title":"M\u00e9todos","text":"<p>As\u00ed que, visto el ejemplo del punto anterior, del mismo modo que se heredan los atributos, tambi\u00e9n se heredan los m\u00e9todos, convirti\u00e9ndose a partir de ese momento en otros m\u00e9todos m\u00e1s de la clase derivada, junto a los que hayan sido definidos espec\u00edficamente.</p> <p>En el ejemplo de la clase <code>Persona</code>, si dispusi\u00e9ramos de m\u00e9todos get y set para cada uno de sus tres atributos (nombre, apellidos, fechaNacim), tendr\u00edas seis m\u00e9todos que podr\u00edan ser heredados por sus clases derivadas. Podr\u00edas decir entonces que la clase <code>Alumno</code>, derivada de <code>Persona</code>, tiene diez m\u00e9todos:</p> <ul> <li>Seis por ser Persona (<code>getNombre</code>, <code>getApellidos</code>, <code>getFechaNacim</code>, <code>setNombre</code>, <code>setApellidos</code>, <code>setFechaNacim</code>).</li> <li>Oros cuatro m\u00e1s por ser Alumno (<code>getGrupo</code>, <code>setGrupo</code>, <code>getNotaMedia</code>, <code>setNotaMedia</code>).</li> </ul> <p>Sin embargo, solo tendr\u00edas que definir esos cuatro \u00faltimos (los espec\u00edficos) pues los gen\u00e9ricos ya los has heredado de la superclase.</p> Revisa con cuidado el siguiente ejemplo Java<pre><code>public class Profesor extends Persona {\n    String especialidad;\n    double salario;\n\n    // M\u00e9todos getXXXXX\n    public String getEspecialidad() {\n        return especialidad;\n    }\n\n    public double getSalario() {\n        return salario;\n    }\n\n    // M\u00e9todos setXXXXX\n    public void setSalario(double salario) {\n        this.salario = salario;\n    }\n\n    public void setESpecialidad(String especialidad) {\n        this.especialidad = especialidad;\n    }\n}    \n</code></pre>"},{"location":"ud08/ud0803/#redefinicion-de-metodos-heredados","title":"Redefinici\u00f3n de m\u00e9todos heredados","text":"<p>Una clase puede redefinir algunos de los m\u00e9todos que ha heredado de su clase base. El nuevo m\u00e9todo (especializado) sustituye al heredado. Esto se conoce como sobrescritura de m\u00e9todos.</p> <p>En cualquier caso, aunque un m\u00e9todo sea sobrescrito o redefinido, a\u00fan es posible acceder a \u00e9l a trav\u00e9s de la referencia <code>super</code>, aunque s\u00f3lo se podr\u00e1 acceder a m\u00e9todos de la clase madre y no a m\u00e9todos de clases superiores en la jerarqu\u00eda de herencia.</p> <p>Accesibilidad de los m\u00e9todos redefinidos</p> <p>Los m\u00e9todos redefinidos pueden ampliar su accesibilidad con respecto a la que ofrezca el m\u00e9todo original de la superclase, pero nunca restringirla. Por ejemplo, si un m\u00e9todo es declarado como protected o de paquete en la clase base, podr\u00eda ser redefinido como public en una clase derivada. </p> <p>M\u00e9todos est\u00e1ticos</p> <p>Los m\u00e9todos est\u00e1ticos o de clase no pueden ser sobrescritos. Los originales de la clase base permanecen inalterables a trav\u00e9s de toda la jerarqu\u00eda de herencia.</p> <p>En el ejemplo de la clase <code>Alumno</code>, podr\u00edan redefinirse algunos de los m\u00e9todos heredados. Por ejemplo, imagina que el m\u00e9todo getApellidos devuelva la cadena \"Alumno: \" junto con los apellidos del alumno. En tal caso habr\u00eda que reescribir ese m\u00e9todo para realizara esa modificaci\u00f3n:</p> Ejemplo: m\u00e9todo obtener atributo apellidos de <code>Alumno</code> Java<pre><code>public String getApellidos () {\n    return \"Alumno: \" + apellidos;\n}\n</code></pre> <p>Cuando sobrescribas un m\u00e9todo heredado en Java puedes (no es necesario) incluir la anotaci\u00f3n <code>@Override</code>. Esto indicar\u00e1 al compilador que tu intenci\u00f3n es sobrescribir el m\u00e9todo de la clase madre. De este modo, si te equivocas (por ejemplo, al escribir el nombre del m\u00e9todo) y no lo est\u00e1s realmente sobrescribiendo, el compilador producir\u00e1 un error y as\u00ed podr\u00e1s darte cuenta del fallo. En el caso del ejemplo anterior quedar\u00eda:</p> Ejemplo: m\u00e9todo obtener atributo apellidos de <code>Alumno</code> sobreescrito Java<pre><code>@Override\npublic String getApellidos () {\n    return \"Alumno: \" + apellidos;\n}\n</code></pre> Revisa con cuidado el siguiente ejemplo <p>Dadas las clases <code>Persona</code>, <code>Alumno</code> y <code>Profesor</code> que has utilizado anteriormente, redefine el m\u00e9todo <code>getNombre</code> para que devuelva la cadena \"Alumno: \", junto con el nombre del alumno, si se trata de un objeto de la clase <code>Alumno</code> o bien \"Profesor: \", junto con el nombre del profesor, si se trata de un objeto de la clase <code>Profesor</code>.</p> <p>SOLUCI\u00d3N 1) Clase <code>Alumno</code>.Al heredar de la clase <code>Persona</code> tan solo es necesario escribir m\u00e9todos para los nuevos atributos (m\u00e9todos especializados de acceso a los atributos especializados), pues los m\u00e9todos gen\u00e9ricos (de acceso a los atributos gen\u00e9ricos) ya forman parte de la clase al haberlos heredado. Esos son los m\u00e9todos que se implementaron en el ejercicio anterior (<code>getGrupo</code>, <code>setGrupo</code>, etc.).</p> <p>Ahora bien, hay que escribir otro m\u00e9todo m\u00e1s, pues tienes que redefinir el m\u00e9todo <code>getNombre</code> para que tenga un comportamiento un poco diferente al <code>getNombre</code> que se hereda de la clase base <code>Persona</code>: Java<pre><code>// M\u00e9todo getNombre\n@Override\npublic String getNombre (){\n    return \"Alumno: \" + this.nombre;\n}\n</code></pre></p> <p>En este caso podr\u00eda decirse que se \"renuncia\" al m\u00e9todo heredado para redefinirlo con un comportamiento m\u00e1s especializado y acorde con la clase derivada.</p> <p>2) Clase <code>Profesor</code>.Seguimos exactamente el mismo procedimiento que con la clase Alumno (redefinici\u00f3n del m\u00e9todo <code>getNombre</code>). Java<pre><code>// M\u00e9todo getNombre\n@Override\npublic String getNombre() {\n    return \"Profesor: \" + this.nombre;\n}\n</code></pre></p>"},{"location":"ud08/ud0803/#ampliacion-de-metodos-heredados","title":"Ampliaci\u00f3n de m\u00e9todos heredados","text":"<p>Hasta ahora, has visto que para redefinir o sustituir un m\u00e9todo de una superclase es suficiente con crear otro m\u00e9todo en la subclase que tenga el mismo nombre que el m\u00e9todo que se desea sobrescribir. Pero, en otras ocasiones, puede que lo que necesites no sea sustituir completamente el comportamiento del m\u00e9todo de la superclase, sino simplemente ampliarlo.</p> <p>Para poder hacer esto necesitas poder preservar el comportamiento antiguo (el de la superclase) y a\u00f1adir el nuevo (el de la subclase). Para ello, puedes invocar desde el m\u00e9todo \"ampliador\" de la clase derivada al m\u00e9todo \"ampliado\" de la clase superior (teniendo ambos m\u00e9todos el mismo nombre). \u00bfC\u00f3mo se puede conseguir eso? Puedes hacerlo mediante el uso de la referencia <code>super</code>.</p> <p>La palabra reservada <code>super</code> es una referencia a la clase madre de la clase en la que te encuentres en cada momento (es algo similar a <code>this</code>, que representaba una referencia a la clase actual). De esta manera, podr\u00edas invocar a cualquier m\u00e9todo de tu superclase (si es que se tiene acceso a \u00e9l).</p> Ejemplo: m\u00e9todo mostrarDatos de <code>Alumno</code> <p>Imagina que la clase <code>Persona</code> dispone de un m\u00e9todo que permite mostrar el contenido de algunos datos personales de los objetos de este tipo (nombre, apellidos, etc.). Por otro lado, la clase <code>Alumno</code> tambi\u00e9n necesita un m\u00e9todo similar, pero que muestre tambi\u00e9n su informaci\u00f3n especializada (grupo, nota media, etc.). \u00bfC\u00f3mo podr\u00edas aprovechar el m\u00e9todo de la superclase para no tener que volver a escribir su contenido en la subclase?</p> <p>SOLUCI\u00d3N Podr\u00eda hacerse de una manera tan sencilla como la siguiente: Java<pre><code>public void mostrarDatos () {\n  super.mostrarDatos();  // Llamada al m\u00e9todo \"mostrar\" de la superclase\n  // A continuaci\u00f3n mostramos la informaci\u00f3n \"especializada\" de esta subclase\n  System.out.printf (\"Grupo: %s\\n\", this.grupo);\n  System.out.printf (\"Nota media: %5.2f\\n\", this.notaMedia);\n}\n</code></pre></p> <p>Este tipo de ampliaciones de m\u00e9todos resultan especialmente \u00fatiles por ejemplo en el caso de los constructores, donde se podr\u00eda ir llamando a los constructores de cada superclase encadenadamente hasta el constructor de la clase en la c\u00faspide de la jerarqu\u00eda (el constructor de la clase <code>Object</code>).</p> Revisa con cuidado el siguiente ejemplo <p>Dadas las clases <code>Persona</code>, <code>Alumno</code> y <code>Profesor</code>, define un m\u00e9todo mostrar para la clase <code>Persona</code>, que muestre el contenido de los atributos (datos personales) de un objeto de la clase <code>Persona</code>. A continuaci\u00f3n, define sendos m\u00e9todos mostrar especializados para las clases <code>Alumno</code> y <code>Profesor</code> que \"ampl\u00eden\" la funcionalidad del m\u00e9todo mostrar original de la clase Persona.</p> <p>SOLUCI\u00d3N 1) M\u00e9todo mostrar de la clase <code>Persona</code>. Java<pre><code>public void mostrarDatos() {\n    DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    String stringFecha = formatoFecha.format(this.fechaNacimiento);\n\n    System.out.printf (\"%-18s%s\\n\", \"Nombre:\", this.nombre);\n    System.out.printf (\"%-18s%s\\n\", \"Apellidos:\", this.apellidos);\n    System.out.printf (\"%-18s%s\\n\", \"Fecha nacimiento:\", stringFecha);\n}\n</code></pre></p> <p>2) M\u00e9todo mostrar de la clase <code>Alumno</code>. Llamamos al m\u00e9todo mostrar de su clase madre (<code>Persona</code>) y luego a\u00f1adimos la funcionalidad espec\u00edfica para la subclase <code>Alumno</code>: Java<pre><code>public void mostrarDatos() {\n    super.mostrarDatos();  // Llamada al m\u00e9todo \"mostrarDatos\" de la superclase\n    // A continuaci\u00f3n mostramos la informaci\u00f3n \"especializada\" de esta subclase\n    System.out.printf (\"%-18s%s\\n\", \"Grupo:\", this.grupo);\n    System.out.printf (\"%-18s%-5.2f\\n\", \"Nota media:\", this.notaMedia);\n}\n</code></pre></p> <p>3) M\u00e9todo mostrar de la clase <code>Profesor</code>. Llamamos al m\u00e9todo mostrar de su clase madre (<code>Persona</code>) y luego a\u00f1adimos la funcionalidad espec\u00edfica para la subclase <code>Profesor</code>: Java<pre><code>public void mostrarDatos() {\n    super.mostrarDatos();\n\n    System.out.printf (\"%-18s%s\\n\", \"Especialidad:\", this.especialidad);\n    System.out.printf (\"%-18s%-7.2f \u20ac\\n\", \"Salario:\", this.salario);\n}\n</code></pre></p>"},{"location":"ud08/ud0803/#constructores-y-herencia","title":"Constructores y herencia","text":"<p>Recuerda que cuando estudiaste los constructores viste que un constructor de una clase puede llamar a otro constructor de la misma clase, previamente definido, a trav\u00e9s de la referencia <code>this</code>. En estos casos, la utilizaci\u00f3n de <code>this</code> s\u00f3lo pod\u00eda hacerse en la primera l\u00ednea de c\u00f3digo del constructor. </p> <p>Como ya has visto, un constructor de una clase derivada puede hacer algo parecido para llamar al constructor de su clase base mediante el uso de la palabra <code>super</code>. De esta manera, el constructor de una clase derivada puede llamar primero al constructor de su superclase para que inicialice los atributos heredados y posteriormente se inicializar\u00e1n los atributos espec\u00edficos de la clase: los no heredados.</p> <p>A tener en cuenta al utilizar <code>super</code> en un constructor</p> <p>Nuevamente, esta llamada tambi\u00e9n debe ser la primera sentencia de un constructor (con la \u00fanica excepci\u00f3n de que exista una llamada a otro constructor de la clase mediante <code>this</code>). </p> <p>Si no se incluye una llamada a <code>super()</code> dentro del constructor, el compilador incluye autom\u00e1ticamente una llamada al constructor por defecto de clase base (llamada a <code>super()</code>). Esto da lugar a una llamada en cadena de constructores de superclase hasta llegar a la clase m\u00e1s alta de la jerarqu\u00eda (que en Java es la clase <code>Object</code>).</p> <p>En el caso del constructor por defecto (el que crea el compilador si el programador no ha escrito ninguno), el compilador a\u00f1ade lo primero de todo, antes de la inicializaci\u00f3n de los atributos a sus valores por defecto, una llamada al constructor de la clase base mediante la referencia <code>super</code>.</p> <p>A la hora de destruir un objeto (m\u00e9todo <code>finalize</code>) es importante llamar a los finalizadores en el orden inverso a como fueron llamados los constructores (primero se liberan los recursos de la clase derivada y despu\u00e9s los de la clase base mediante la llamada <code>super.finalize()</code>).</p> Constructor de <code>Alumno</code> que hereda parte del constructor de <code>Persona</code> <p>Si la clase <code>Persona</code> tuviera un constructor de este tipo:</p> Java<pre><code>public Persona (String nombre, String apellidos, LocalDate fechaNacim) {\n    this.nombe = nombre;\n    this.apellidos = apellidos;\n    this.fechaNacim = new LocalDate (fechaNacim);\n}\n</code></pre> <p>Podr\u00edas llamarlo desde un constructor de una clase derivada (por ejemplo <code>Alumno</code>) de la siguiente forma:</p> Java<pre><code>public Alumno (String nombre, String apellidos, LocalDate fechaNacim, String grupo, double notaMedia) {\n    super (nombre, apellidos, fechaNacim);\n    this.grupo = grupo;\n    this.notaMedia = notaMedia;\n}\n</code></pre> <p>En realidad se trata de otro recurso m\u00e1s para optimizar la reutilizaci\u00f3n de c\u00f3digo, en este caso el del constructor, que aunque no es heredado, s\u00ed puedes invocarlo para no tener que reescribirlo.</p>"},{"location":"ud08/ud0803/#la-clase-object-en-java","title":"La clase <code>Object</code> en Java","text":"<p>Todas las clases en Java son descendentes (directos o indirectos) de la clase Object. Esta clase define los estados y comportamientos b\u00e1sicos que deben tener todos los objetos. Entre estos comportamientos, se encuentran:</p> <ul> <li>La posibilidad de compararse.</li> <li>La capacidad de convertirse a cadenas.</li> <li>La habilidad de devolver la clase del objeto.</li> </ul> <p>Entre los m\u00e9todos que incorpora la clase <code>Object</code> y que por tanto hereda cualquier clase en Java tienes:</p> <p>Principales m\u00e9todos de la clase <code>Object</code>:</p> M\u00e9todo Descripci\u00f3n <code>Object()</code> Constructor. <code>clone()</code> M\u00e9todo clonador: crea y devuelve una copia del objeto (\"clona\" el objeto). <code>boolean equals(Object obj)</code> Indica si el objeto pasado como par\u00e1metro es igual a este objeto. <code>void finalize()</code> M\u00e9todo llamado por el recolector de basura cuando \u00e9ste considera que no queda ninguna referencia a este objeto en el entorno de ejecuci\u00f3n. <code>int hashCode()</code> Devuelve un c\u00f3digo hash para el objeto. <code>toString()</code> Devuelve una representaci\u00f3n del objeto en forma de String. <p>La clase <code>Object</code> representa la superclase que se encuentra en la c\u00faspide de la jerarqu\u00eda de herencia en Java. Cualquier clase (incluso las que t\u00fa implementes) acaban heredando de ella.</p>"},{"location":"ud08/ud0803/#herencia-multiple","title":"Herencia m\u00faltiple","text":"<p>En determinados casos podr\u00edas considerar la posibilidad de que se necesite heredar de m\u00e1s de una clase, para as\u00ed disponer de los miembros de dos (o m\u00e1s) clases disjuntas (que no derivan una de la otra). La herencia m\u00faltiple permite hacer eso: recoger las distintas caracter\u00edsticas (atributos y m\u00e9todos) de clases diferentes formando una nueva clase derivada de varias clases base.</p> <p>El problema en estos casos es la posibilidad que existe de que se produzcan ambig\u00fcedades; as\u00ed, si tuvi\u00e9ramos miembros con el mismo identificador en clases base diferentes, en tal caso, \u00bfqu\u00e9 miembro se hereda? Para evitar esto, los compiladores suelen solicitar que ante casos de ambig\u00fcedad, se especifique de manera expl\u00edcita la clase de la cual se quiere utilizar un determinado miembro que pueda ser ambiguo.</p> <p>Ahora bien, la posibilidad de herencia m\u00faltiple no est\u00e1 disponible en todos los lenguajes orientados a objetos.</p> <p>...\u00bflo estar\u00e1 en Java?</p> <p>... no existe la herencia m\u00faltiple de clases.</p> <p> </p>"},{"location":"ud08/ud0804/","title":"8.4 Clases abstractas","text":"<p>En determinadas ocasiones, es posible que necesites definir una clase que represente un concepto lo suficientemente abstracto como para que nunca vayan a existir instancias de ella (objetos). \u00bfTendr\u00eda eso sentido? \u00bfQu\u00e9 utilidad podr\u00eda tener?</p> <p>Imagina una aplicaci\u00f3n para un centro educativo que utilice las clases de ejemplo <code>Alumno</code> y <code>Profesor</code>, ambas subclases de <code>Persona</code>. Es m\u00e1s que probable que esa aplicaci\u00f3n nunca llegue a necesitar objetos de la clase <code>Persona</code>, pues ser\u00edan demasiado gen\u00e9ricos como para poder ser utilizados (no contendr\u00edan suficiente informaci\u00f3n espec\u00edfica). Podr\u00edas llegar entonces a la conclusi\u00f3n de que la clase <code>Persona</code> ha resultado de utilidad como clase base para construir otras clases que hereden de ella, pero no como una clase instanciable de la cual vayan a existir objetos. A este tipo de clases se les llama clases abstractas.</p> <p>A tener en cuenta</p> <p>En algunos casos puede resultar \u00fatil disponer de clases que nunca ser\u00e1n instanciadas, sino que proporcionan un marco o modelo a seguir por sus clases derivadas dentro de una jerarqu\u00eda de herencia. Son las clases abstractas.</p> <p>La posibilidad de declarar clases abstractas es una de las caracter\u00edsticas m\u00e1s \u00fatiles de los lenguajes orientados a objetos, pues permiten dar unas l\u00edneas generales de c\u00f3mo es una clase sin tener que implementar todos sus m\u00e9todos o implementando solamente algunos de ellos. Esto resulta especialmente \u00fatil cuando las distintas clases derivadas deban proporcionar los mismos m\u00e9todos indicados en la clase base abstracta, pero su implementaci\u00f3n sea espec\u00edfica para cada subclase. </p> <p>Imagina que est\u00e1s trabajando en un entorno de manipulaci\u00f3n de objetos gr\u00e1ficos y necesitas trabajar con l\u00edneas, c\u00edrculos, rect\u00e1ngulos, etc. Estos objetos tendr\u00e1n en com\u00fan algunos atributos que representen su estado (ubicaci\u00f3n, color del contorno, color de relleno, etc.) y algunos m\u00e9todos que modelen su comportamiento (dibujar, rellenar con un color, escalar, desplazar, rotar, etc.). Algunos de ellos ser\u00e1n comunes para todos ellos (por ejemplo la ubicaci\u00f3n o el desplazamiento) y sin embargo otros (como por ejemplo dibujar) necesitar\u00e1n una implementaci\u00f3n espec\u00edfica dependiendo del tipo de objeto. Pero, en cualquier caso, todos ellos necesitan esos m\u00e9todos (tanto un c\u00edrculo como un rect\u00e1ngulo necesitan el m\u00e9todo dibujar, aunque se lleven a cabo de manera diferente). En este caso resultar\u00eda muy \u00fatil disponer de una clase abstracta objeto gr\u00e1fico donde se definir\u00edan las l\u00edneas generales (algunos atributos concretos comunes, algunos m\u00e9todos concretos comunes implementados y algunos m\u00e9todos gen\u00e9ricos comunes sin implementar) de un objeto gr\u00e1fico y m\u00e1s adelante, seg\u00fan se vayan definiendo clases especializadas (l\u00edneas, c\u00edrculos, rect\u00e1ngulos), se ir\u00e1n concretando en cada subclase aquellos m\u00e9todos que se dejaron sin implementar en la clase abstracta.</p>"},{"location":"ud08/ud0804/#declaracion-de-una-clase-abstracta","title":"Declaraci\u00f3n de una clase abstracta","text":"<p>Ya has visto que una clase abstracta es una clase que no se puede instanciar, es decir, que no se pueden crear objetos a partir de ella. La idea es permitir que otras clases deriven de ella, proporcionando un modelo gen\u00e9rico y algunos m\u00e9todos de utilidad general. Las clases abstractas se declaran mediante el modificador <code>abstract</code>:</p> Java<pre><code>[modificador_acceso] abstract class nombreClase [herencia] [interfaces] {\n  ...\n}\n</code></pre> <p>A tener en cuenta</p> <p>Una clase puede contener en su interior m\u00e9todos declarados como <code>abstract</code> (m\u00e9todos para los cuales s\u00f3lo se indica la cabecera, pero no se proporciona su implementaci\u00f3n). En tal caso, la clase tendr\u00e1 que ser necesariamente tambi\u00e9n <code>abstract</code>. Esos m\u00e9todos tendr\u00e1n que ser posteriormente implementados en sus clases derivadas.</p> <p>Por otro lado, una clase tambi\u00e9n puede contener m\u00e9todos totalmente implementados (no abstractos), los cuales ser\u00e1n heredados por sus clases derivadas y podr\u00e1n ser utilizados sin necesidad de definirlos (pues ya est\u00e1n implementados).</p> <p>Cuando trabajes con clases abstractas debes tener en cuenta:</p> <ul> <li>Una clase abstracta s\u00f3lo puede usarse para crear nuevas clases derivadas. No se puede hacer un <code>new</code> de una clase abstracta. Se producir\u00eda un error de compilaci\u00f3n.</li> <li>Una clase abstracta puede contener m\u00e9todos totalmente definidos (no abstractos) y m\u00e9todos sin definir (m\u00e9todos abstractos).</li> </ul> Revisa con cuidado el siguiente ejemplo <p>Bas\u00e1ndote en la jerarqu\u00eda de clases de ejemplo (<code>Persona</code>, <code>Alumno</code>, <code>Profesor</code>), que ya has utilizado en otras ocasiones, modifica lo que consideres oportuno para que <code>Persona</code> sea, a partir de ahora, una clase abstracta (no instanciable) y las otras dos clases sigan siendo clases derivadas de ella, pero s\u00ed instanciables.</p> <p>SOLUCI\u00d3N En este caso lo \u00fanico que habr\u00eda que hacer es a\u00f1adir el modificador <code>abstract</code> a la clase <code>Persona</code>. El resto de la clase permanecer\u00eda igual y las clases <code>Alumno</code> y <code>Profesor</code> no tendr\u00edan porqu\u00e9 sufrir ninguna modificaci\u00f3n.</p> Java<pre><code>public abstract class Persona {\n    protected String nombre;\n    protected String apellidos;\n    protected LocalDate fechaNacimiento;\n    ...\n}\n</code></pre> <p>A partir de ahora no podr\u00e1n existir objetos de la clase <code>Persona</code>. El compilador generar\u00eda un error.</p> Clases abstractas en la API <p>Localiza en la API de Java alg\u00fan ejemplo de clase abstracta.</p> <p>Existen una gran cantidad de clases abstractas en la API de Java. Aqu\u00ed tienes un par de ejemplos:</p> <ul> <li>La clase <code>AbstractList</code>: Java<pre><code>public abstract class AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements List&lt;E&gt; {\n    // ...\n\n    // M\u00e9todos abstractos\n    public abstract E get(int index);\n    public abstract int size();\n}\n</code></pre> De la que heredan clases instanciable como <code>Vector</code> o <code>ArrayList</code>. </li> <li>La clase <code>AbstractSequentialList</code>: Java<pre><code>public abstract class AbstractSequentialList&lt;E&gt; extends AbstractList&lt;E&gt;{\n    // ...\n\n    // M\u00e9todos abstractos\n    public abstract ListIterator&lt;E&gt; listIterator(int index);\n}\n</code></pre> Esta clase hereda de <code>AbstractList</code>, y de esta hereda la clase <code>LinkedList</code>.    </li> </ul>"},{"location":"ud08/ud0804/#metodos-abstractos","title":"M\u00e9todos abstractos","text":"<p>Un m\u00e9todo abstracto es un m\u00e9todo declarado en una clase para el cual esa clase no proporciona la implementaci\u00f3n. Si una clase dispone de, al menos, un m\u00e9todo abstracto se dice que es una clase abstracta. </p> <p>Implementar m\u00e9todos abstractos heredados</p> <p>Toda clase que herede (sea subclase) de una clase abstracta debe implementar todos los m\u00e9todos abstractos de su superclase o bien volverlos a declarar como abstractos (y por tanto tambi\u00e9n ser\u00eda abstracta).</p> <p>Para declarar un m\u00e9todo abstracto en Java se utiliza el modificador <code>abstract</code>. Es un m\u00e9todo cuya implementaci\u00f3n no se define, sino que se declara \u00fanicamente su interfaz (cabecera) para que su cuerpo sea implementado m\u00e1s adelante en una clase derivada.</p> <p>Un m\u00e9todo se declara como abstracto mediante el uso del modificador <code>abstract</code> (como en las clases abstractas):</p> Java<pre><code>[modificador_acceso] abstract &lt;tipo&gt; &lt;nombreMetodo&gt; ([par\u00e1metros]) [excepciones];\n</code></pre> <p>A tener en cuenta</p> <p>Cuando una clase contiene un m\u00e9todo abstracto tiene que declararse como abstracta obligatoriamente.</p> <p>Imagina que tienes una clase <code>Empleado</code> gen\u00e9rica para diversos tipos de empleado y tres clases derivadas: <code>EmpleadoFijo</code> (tiene un salario fijo m\u00e1s ciertos complementos), <code>EmpleadoTemporal</code> (salario fijo m\u00e1s otros complementos diferentes) y <code>EmpleadoComercial</code> (una parte de salario fijo y unas comisiones por cada operaci\u00f3n). La clase <code>Empleado</code> podr\u00eda contener un m\u00e9todo abstracto <code>calcularNomina</code>, pues sabes que se m\u00e9todo ser\u00e1 necesario para cualquier tipo de empleado (todo empleado cobra una n\u00f3mina). Sin embargo el c\u00e1lculo en s\u00ed de la n\u00f3mina ser\u00e1 diferente si se trata de un empleado fijo, un empleado temporal o un empleado comercial, y ser\u00e1 dentro de las clases especializadas de <code>Empleado</code> (<code>EmpleadoFijo</code> \u0327 <code>EmpleadoTemporal</code>, <code>EmpleadoComercial</code>) donde se implementen de manera espec\u00edfica el c\u00e1lculo de las mismas.</p> <p>Debes tener en cuenta al trabajar con m\u00e9todos abstractos:</p> <ul> <li>Un m\u00e9todo abstracto implica que la clase a la que pertenece tiene que ser abstracta, pero eso no significa que todos los m\u00e9todos de esa clase tengan que ser abstractos.</li> <li>Un m\u00e9todo abstracto no puede ser privado (no se podr\u00eda implementar, dado que las clases derivadas no tendr\u00edan acceso a \u00e9l).</li> <li>Los m\u00e9todos abstractos no pueden ser est\u00e1ticos, pues los m\u00e9todos est\u00e1ticos no pueden ser redefinidos (y los m\u00e9todos abstractos necesitan ser redefinidos).</li> </ul> Revisa con cuidado el siguiente ejemplo <p>Bas\u00e1ndote en la jerarqu\u00eda de clases <code>Persona</code>, <code>Alumno</code>, <code>Profesor</code>, crea un m\u00e9todo abstracto llamado <code>mostrarDatos</code> para la clase <code>Persona</code>. Dependiendo del tipo de persona (alumno o profesor) el m\u00e9todo <code>mostrarDatos</code> tendr\u00e1 que mostrar unos u otros datos personales (habr\u00e1 que hacer implementaciones espec\u00edficas en cada clase derivada). Una vez hecho esto, implementa completamente las tres clases (con todos sus atributos y m\u00e9todos) y util\u00edzalas en un peque\u00f1o programa de ejemplo que cree un objeto de tipo <code>Alumno</code> y otro de tipo <code>Profesor</code>, los rellene con informaci\u00f3n y muestre esa informaci\u00f3n en la pantalla a trav\u00e9s del m\u00e9todo mostrar. </p> <p>SOLUCI\u00d3N Dado que el m\u00e9todo <code>mostrarDatos</code> no va a ser implementado en la clase <code>Persona</code>, ser\u00e1 declarado como abstracto y no se incluir\u00e1 su implementaci\u00f3n: Java<pre><code>protected abstract void mostrarDatos ();\n</code></pre></p> <p>Recuerda que el simple hecho de que la clase <code>Persona</code> contenga un m\u00e9todo abstracto hace que la clase sea abstracta (y deber\u00e1 indicarse como tal en su declaraci\u00f3n): </p> Java<pre><code>public abstract class Persona {\n...\n</code></pre> <p>En el caso de la clase <code>Alumno</code> habr\u00e1 que hacer una implementaci\u00f3n espec\u00edfica del m\u00e9todo <code>mostrarDatos</code> y lo mismo para el caso de la clase <code>Profesor</code>.</p> <p>1) M\u00e9todo <code>mostrarDatos</code> para la clase <code>Alumno</code>: Java<pre><code>@Override\npublic void mostrarDatos() {\n    DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    String stringFecha = formatoFecha.format(this.fechaNacimiento);\n\n    System.out.printf (\"%-18s%s\\n\", \"Nombre:\", this.nombre);\n    System.out.printf (\"%-18s%s\\n\", \"Apellidos:\", this.apellidos);\n    System.out.printf (\"%-18s%s\\n\", \"Fecha nacimiento:\", stringFecha);\n    // A continuaci\u00f3n mostramos la informaci\u00f3n \"especializada\" de esta subclase\n    System.out.printf (\"%-18s%s\\n\", \"Grupo:\", this.grupo);\n    System.out.printf (\"%-18s%-5.2f\\n\", \"Nota media:\", this.notaMedia);    \n}\n</code></pre></p> <p>2) M\u00e9todo <code>mostrarDatos</code> para la clase <code>Profesor</code>: Java<pre><code>@Override\npublic void mostrarDatos() {\n    DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    String stringFecha = formatoFecha.format(this.fechaNacimiento);\n\n    System.out.printf (\"%-18s%s\\n\", \"Nombre:\", this.nombre);\n    System.out.printf (\"%-18s%s\\n\", \"Apellidos:\", this.apellidos);\n    System.out.printf (\"%-18s%s\\n\", \"Fecha nacimiento:\", stringFecha);\n    // A continuaci\u00f3n mostramos la informaci\u00f3n \"especializada\" de esta subclase\n    System.out.printf (\"%-18s%s\\n\", \"Especialidad:\", this.especialidad);\n    System.out.printf (\"%-18s%-7.2f \u20ac\\n\", \"Salario:\", this.salario);\n}\n</code></pre></p> <p>3) Un peque\u00f1o programa de ejemplo de uso del m\u00e9todo mostrar en estas dos clases podr\u00eda ser:</p> Java<pre><code>import java.time.LocalDate;\n\npublic class EjemploUso {\n\n    public static void main(String[] args) {\n        // Declaraci\u00f3n de objetos\n        Alumno alumno;\n        Profesor profesor;\n\n        // Creaci\u00f3n de objetos (llamada a constructores)\n        alumno = new Alumno(\"Juan\", \"Torres\", LocalDate.of(1990, 10, 6), \"1DAW\", 7.5);\n\n        profesor = new Profesor(\"Antonio\", \"Campos\", LocalDate.of(1970, 8, 15), \"Informatica\", 1750);\n\n        // Utilizaci\u00f3n del m\u00e9todo mostrar\n        alumno.mostrarDatos();\n        System.out.println();\n        profesor.mostrarDatos();\n    }\n}\n</code></pre> <p>La salida debe ser algo parecido a esto:</p> Bash<pre><code>Nombre:           Juan\nApellidos:        Torres\nFecha nacimiento: 6/10/1990\nGrupo:            1DAW\nNota media:       7,50\n\nNombre:           Antonio\nApellidos:        Campos\nFecha nacimiento: 15/08/1970\nEspecialidad:     Informatica\nSalario:          1750,00 \u20ac\n</code></pre>"},{"location":"ud08/ud0804/#clases-y-metodos-finales","title":"Clases y m\u00e9todos finales","text":"<p>En unidades anteriores has visto el modificador <code>final</code>, aunque s\u00f3lo lo has utilizado por ahora para atributos y variables (por ejemplo para declarar atributos constantes, que una vez que toman un valor ya no pueden ser modificados). Pero este modificador tambi\u00e9n puede ser utilizado con clases y con m\u00e9todos (con un comportamiento que no es exactamente igual, aunque puede encontrarse cierta analog\u00eda: no se permite heredar o no se permite redefinir).</p>"},{"location":"ud08/ud0804/#clases-final","title":"Clases final","text":"<p>Una clase declarada como <code>final</code> no puede ser heredada, es decir, no puede tener clases derivadas. La jerarqu\u00eda de clases a la que pertenece acaba en ella (no tendr\u00e1 clases hijas):</p> Java<pre><code>[modificador_acceso] final class nombreClase [herencia] [interfaces]\n</code></pre>"},{"location":"ud08/ud0804/#metodos-final","title":"M\u00e9todos final","text":"<p>Un m\u00e9todo tambi\u00e9n puede ser declarado como <code>final</code>, en tal caso, ese m\u00e9todo no podr\u00e1 ser redefinido en una clase derivada:</p> Java<pre><code>[modificador_acceso] final &lt;tipo&gt; &lt;nombreMetodo&gt; ([par\u00e1metros]) [excepciones]\n</code></pre> <p>Si intentas redefinir un m\u00e9todo <code>final</code> en una subclase se producir\u00e1 un error de compilaci\u00f3n.</p> <p>Distintos contextos en los que puede aparecer el modificador <code>final</code>:</p> Lugar Funci\u00f3n Como modificador de clase. La clase no puede tener subclases. Como modificador de atributo. El atributo no podr\u00e1 ser modificado una vez que tome un valor. Sirve para definir constantes. Como modificador al declarar un m\u00e9todo El m\u00e9todo no podr\u00e1 ser redefinido en una clase derivada. Como modificador al declarar una variable referencia. Una vez que la variable tome un valor referencia (un objeto), no se podr\u00e1 cambiar. La variable siempre apuntar\u00e1 al mismo objeto, lo cual no quiere decir que ese objeto no pueda ser modificado internamente a trav\u00e9s de sus m\u00e9todos. Pero la variable no podr\u00e1 apuntar a otro objeto diferente. Como modificador en un par\u00e1metro de un m\u00e9todo El valor del par\u00e1metro (ya sea un tipo primitivo o una referencia) no podr\u00e1 modificarse dentro del c\u00f3digo del m\u00e9todo. <p>Veamos un ejemplo de cada posibilidad:</p> 1) Modificador de una clase Java<pre><code>public final class ClaseSinDescendencia { // Clase \"no heredable\"\n...\n}\n</code></pre> 2) Modificador de un atributo Java<pre><code>public class ClaseEjemplo {\n// Valor constante conocido en tiempo de compilaci\u00f3n\nfinal double PI = 3.14159265;\n\n// Valor constante conocido solamente en tiempo de ejecuci\u00f3n\nfinal int SEMILLA = (int) Math.random()*10+1;\n    ...\n}\n</code></pre> 3) Modificador de un m\u00e9todo Java<pre><code>public final metodoNoRedefinible (int parametro1) { // M\u00e9todo \"no redefinible\"\n    ...\n} \n</code></pre> 4) Modificador en una variable referencia Java<pre><code>// Referencia constante: siempre se apuntar\u00e1 al mismo objeto Alumno\n// reci\u00e9n creado, aunque este objeto pueda sufrir modificaciones.\nfinal Alumno PRIMER_ALUMNO = new Alumno (\"Pepe\", \"Torres\", 9.55);\n\n// Si la variable no es una referencia (tipo primitivo), \n// ser\u00eda una constante m\u00e1s (como un atributo constante).\nfinal int NUMERO_DIEZ = 10; // Valor constante (dentro del \u00e1mbito de vida de la variable)\n</code></pre> 5) Modificador en un par\u00e1metro de un m\u00e9todo Java<pre><code>void metodoConParametrosFijos (final int par1, final int par2) {\n    // Los par\u00e1metros \"par1\" y \"par2\" no podr\u00e1n\n    // sufrir modificaciones aqu\u00ed dentro\n    ...\n}\n</code></pre>"},{"location":"ud08/ud0805/","title":"8.5 Interfaces","text":"<p>Has visto c\u00f3mo la herencia permite definir especializaciones (o extensiones) de una clase base que ya existe sin tener que volver a repetir todo el c\u00f3digo de \u00e9sta. Este mecanismo da la oportunidad de que la nueva clase especializada (o extendida) disponga de toda la interfaz que tiene su clase base.</p> <p>Tambi\u00e9n has estudiado c\u00f3mo los m\u00e9todos abstractos permiten establecer una interfaz para marcar las l\u00edneas generales de un comportamiento com\u00fan de superclase que deber\u00edan compartir de todas las subclases.</p> <p>Si llevamos al l\u00edmite esta idea de interfaz, podr\u00edas llegar a tener una clase abstracta donde todos sus m\u00e9todos fueran abstractos. De este modo estar\u00edas dando \u00fanicamente el marco de comportamiento, sin ning\u00fan m\u00e9todo implementado, de las posibles subclases que heredar\u00e1n de esa clase abstracta. La idea de una interfaz (o interface) es precisamente \u00e9sa: disponer de un mecanismo que permita especificar cu\u00e1l debe ser el comportamiento que deben tener todos los objetos que formen parte de una determinada clasificaci\u00f3n (no necesariamente jer\u00e1rquica).</p> <p>Una interfaz consiste principalmente en una lista de declaraciones de m\u00e9todos sin implementar, que caracterizan un determinado comportamiento. Si se desea que una clase tenga ese comportamiento, tendr\u00e1 que implementar esos m\u00e9todos establecidos en la interfaz. En este caso no se trata de una relaci\u00f3n de herencia (la clase B es una especializaci\u00f3n de la clase A, o la subclase B es del tipo de la superclase A), sino m\u00e1s bien una relaci\u00f3n \"de implementaci\u00f3n de comportamientos\" (la clase B implementa los m\u00e9todos establecidos en la interfaz A, o los comportamientos indicados por A son llevados a cabo por B; pero no que B sea de clase A).</p> <p>Imagina que est\u00e1s dise\u00f1ando una aplicaci\u00f3n que trabaja con clases que representan distintos tipos de animales. Algunas de las acciones que quieres que lleven a cabo est\u00e1n relacionadas con el hecho de que algunos animales sean depredadores (por ejemplo: observar una presa, perseguirla, com\u00e9rsela, etc.) o sean presas (observar, huir, esconderse, etc.). Si creas la clase <code>Le\u00f3n</code>, esta clase podr\u00eda implementar una interfaz <code>Depredador</code>, mientras que otras clases como <code>Gacela</code> implementar\u00edan las acciones de la interfaz <code>Presa</code>. Por otro lado, podr\u00edas tener tambi\u00e9n el caso de la clase <code>Rana</code>, que implementar\u00eda las acciones de la interfaz <code>Depredador</code> (pues es cazador de peque\u00f1os insectos), pero tambi\u00e9n la de <code>Presa</code> (pues puede ser cazado y necesita las acciones necesarias para protegerse).</p>"},{"location":"ud08/ud0805/#concepto-de-interfaz","title":"Concepto de interfaz","text":"<p>Una interfaz en Java consiste esencialmente en una lista de declaraciones de m\u00e9todos sin implementar, junto con un conjunto de constantes.</p> <p>Estos m\u00e9todos sin implementar indican un comportamiento, un tipo de conducta, aunque no especifican c\u00f3mo ser\u00e1 ese comportamiento (implementaci\u00f3n), pues eso depender\u00e1 de las caracter\u00edsticas espec\u00edficas de cada clase que decida implementar esa interfaz. Podr\u00eda decirse que una interfaz se encarga de establecer qu\u00e9 comportamientos hay que tener (qu\u00e9 m\u00e9todos), pero no dice nada de c\u00f3mo deben llevarse a cabo esos comportamientos (implementaci\u00f3n). Se indica s\u00f3lo la forma, no la implementaci\u00f3n.</p> <p>En cierto modo podr\u00edas imaginar el concepto de interfaz como un gui\u00f3n que dice: \"este es el protocolo de comunicaci\u00f3n que deben presentar todas las clases que implementen esta interfaz\". Se proporciona una lista de m\u00e9todos p\u00fablicos y, si quieres dotar a tu clase de esa interfaz, tendr\u00e1s que definir todos y cada uno de esos m\u00e9todos p\u00fablicos.</p> <p>En conclusi\u00f3n</p> <p>Una interfaz se encarga de establecer unas l\u00edneas generales sobre los comportamientos (m\u00e9todos) que deber\u00edan tener los objetos de toda clase que implemente esa interfaz; es decir, que no indican lo que el objeto es (de eso se encarga la clase y sus superclases), sino acciones (capacidades) que el objeto deber\u00eda ser capaz de realizar. Es por esto que el nombre de muchas interfaces en Java termina con sufijos del tipo \"\u2010able\", \"\u2010or\", \"\u2010ente\" y cosas del estilo, que significan algo as\u00ed como capacidad o habilidad para hacer o ser receptores de algo (configurable, serializable, modificable, clonable, ejecutable, administrador, servidor, buscador, etc.), dando as\u00ed la idea de que se tiene la capacidad de llevar a cabo el conjunto de acciones especificadas en la interfaz.</p> <p>Imag\u00ednate por ejemplo la clase <code>Coche</code>, subclase de <code>Veh\u00edculo</code>. Los coches son veh\u00edculos a motor, lo cual implica una serie de acciones como, por ejemplo, arrancar el motor o detener el motor. Esa acci\u00f3n no la puedes heredar de <code>Veh\u00edculo</code>, pues no todos los veh\u00edculos tienen porqu\u00e9 ser a motor (piensa por ejemplo en una clase <code>Bicicleta</code>), y no puedes heredar de otra clase pues ya heredas de <code>Veh\u00edculo</code>. Una soluci\u00f3n podr\u00eda ser crear una interfaz <code>Arrancable</code>, que proporcione los m\u00e9todos t\u00edpicos de un objeto a motor (no necesariamente veh\u00edculos). De este modo la clase <code>Coche</code> sigue siendo subclase de <code>Veh\u00edculo</code>, pero tambi\u00e9n implementar\u00eda los comportamientos de la interfaz <code>Arrancable</code>, los cuales podr\u00edan ser tambi\u00e9n implementados por otras clases, hereden o no de <code>Veh\u00edculo</code> (por ejemplo una clase <code>Motocicleta</code> o bien una clase <code>Motosierra</code>). La clase <code>Coche</code> implementar\u00e1 su m\u00e9todo arrancar de una manera, la clase <code>Motocicleta</code> lo har\u00e1 de otra (aunque bastante parecida) y la clase <code>Motosierra</code> de otra forma probablemente muy diferente, pero todos tendr\u00e1n su propia versi\u00f3n del m\u00e9todo arrancar como parte de la interfaz <code>Arrancable</code>.</p> <p>Seg\u00fan esta concepci\u00f3n, podr\u00edas hacerte la siguiente pregunta: \u00bfpodr\u00e1 una clase implementar varias interfaces? La respuesta en este caso s\u00ed es afirmativa.</p> <p>A tener en cuenta</p> <p>Una clase puede adoptar distintos modelos de comportamiento establecidos en diferentes interfaces. Es decir una clase puede implementar varias interfaces.</p>"},{"location":"ud08/ud0805/#clase-abstracta-o-interfaz","title":"\u00bfClase abstracta o interfaz?","text":"<p>Observando el concepto de interfaz que se acaba de proponer, podr\u00eda caerse en la tentaci\u00f3n de pensar que es pr\u00e1cticamente lo mismo que una clase abstracta en la que todos sus m\u00e9todos sean abstractos.</p> <p>Es cierto que en ese sentido existe un gran parecido formal entre una clase abstracta y una interfaz, pudi\u00e9ndose en ocasiones utilizar indistintamente una u otra para obtener un mismo fin. Pero, a pesar de ese gran parecido, existen algunas diferencias, no s\u00f3lo formales, sino tambi\u00e9n conceptuales, muy importantes:</p> <ul> <li>Una clase no puede heredar de varias clases, aunque sean abstractas (herencia m\u00faltiple). Sin embargo s\u00ed puede implementar una o varias interfaces y adem\u00e1s seguir heredando de una clase. </li> <li>Una interfaz no puede definir m\u00e9todos (no implementa su contenido), tan solo los declara o enumera.</li> <li>Una interfaz puede hacer que dos clases tengan un mismo comportamiento independientemente de sus ubicaciones en una determinada jerarqu\u00eda de clases (no tienen que heredar las dos de una misma superclase, pues no siempre es posible seg\u00fan la naturaleza y propiedades de cada clase).</li> <li>Una interfaz permite establecer un comportamiento de clase sin apenas dar detalles, pues esos detalles a\u00fan no son conocidos (depender\u00e1n del modo en que cada clase decida implementar la interfaz).</li> <li>Las interfaces tienen su propia jerarqu\u00eda, diferente e independiente de la jerarqu\u00eda de clases.</li> </ul> <p>De todo esto puede deducirse que una clase abstracta proporciona una interfaz disponible s\u00f3lo a trav\u00e9s de la herencia. S\u00f3lo quien herede de esa clase abstracta dispondr\u00e1 de esa interfaz. Si una clase no pertenece a esa misma jerarqu\u00eda (no hereda de ella) no podr\u00e1 tener esa interfaz. Eso significa que para poder disponer de la interfaz podr\u00edas:</p> <ol> <li>Volver a escribirla para esa jerarqu\u00eda de clases. Lo cual no parece una buena soluci\u00f3n.</li> <li>Hacer que la clase herede de la superclase que proporciona la interfaz que te interesa, sac\u00e1ndola de su jerarqu\u00eda original y convirti\u00e9ndola en clase derivada de algo de lo que conceptualmente no deber\u00eda ser una subclase. Es decir, estar\u00edas forzando una relaci\u00f3n \"es un\" cuando en realidad lo m\u00e1s probable es que esa relaci\u00f3n no exista. Tampoco parece la mejor forma de resolver el problema.</li> </ol> <p>Sin embargo, una interfaz s\u00ed puede ser implementada por cualquier clase, permitiendo que clases que no tengan ninguna relaci\u00f3n entre s\u00ed (pertenecen a distintas jerarqu\u00edas) puedan compartir un determinado comportamiento (una interfaz) sin tener que forzar una relaci\u00f3n de herencia que no existe entre ellas.</p> <p>A partir de ahora podemos hablar de otra posible relaci\u00f3n entre clases: la de compartir un determinado comportamiento (interfaz). Dos clases podr\u00edan tener en com\u00fan un determinado conjunto de comportamientos sin que necesariamente exista una relaci\u00f3n jer\u00e1rquica entre ellas. Tan solo cuando haya realmente una relaci\u00f3n de tipo \"es un\" se producir\u00e1 herencia.</p> <p>A tener en cuenta</p> <p>Si s\u00f3lo vas a proporcionar una lista de m\u00e9todos abstractos (interfaz), sin definiciones de m\u00e9todos ni atributos de objeto, suele ser recomendable definir una interfaz antes que clase abstracta. Es m\u00e1s, cuando vayas a definir una supuesta clase base, puedes comenzar declar\u00e1ndola como interfaz y s\u00f3lo cuando veas que necesitas definir m\u00e9todos o variables miembro, puedes entonces convertirla en clase abstracta (no instanciable) o incluso en una clase instanciable.</p>"},{"location":"ud08/ud0805/#definicion-de-interfaces","title":"Definici\u00f3n de interfaces","text":"<p>La declaraci\u00f3n de una interfaz en Java es similar a la declaraci\u00f3n de una clase, aunque con algunas variaciones:</p> <ul> <li>Se utiliza la palabra reservada <code>interface</code> en lugar de <code>class</code>.</li> <li>Puede utilizarse el modificador <code>public</code>. Si incluye este modificador la interfaz debe tener el mismo nombre que el archivo <code>.java</code> en el que se encuentra (exactamente igual que suced\u00eda con las clases). Si no se indica el modificador <code>public</code>, el acceso ser\u00e1 por omisi\u00f3n o \"de paquete\" (como suced\u00eda con las clases). </li> <li>Todos los miembros de la interfaz (atributos y m\u00e9todos) son <code>public</code> de manera impl\u00edcita. No es necesario indicar el modificador <code>public</code>, aunque puede hacerse.</li> <li>Todos los atributos son de tipo <code>final</code> y <code>public</code> (tampoco es necesario especificarlo), es decir, constantes y p\u00fablicos. Hay que darles un valor inicial.</li> <li>Todos los m\u00e9todos son abstractos tambi\u00e9n de manera impl\u00edcita (tampoco hay que indicarlo). No tienen cuerpo, tan solo la cabecera.</li> </ul> <p>Como puedes observar, una interfaz consiste esencialmente en una lista de atributos finales (constantes) y m\u00e9todos abstractos (sin implementar). Su sintaxis quedar\u00eda entonces:</p> Java<pre><code>[public] interface &lt;NombreInterfaz&gt; {\n  [public] [final] &lt;tipo1&gt; &lt;atributo1&gt; = &lt;valor1&gt;;\n  [public] [final] &lt;tipo2&gt; &lt;atributo2&gt; = &lt;valor2&gt;;\n  ...\n  [public] [abstract] &lt;tipo_devuelto1&gt; &lt;nombreMetodo1&gt; ([lista_par\u00e1metros]);\n  [public] [abstract] &lt;tipo_devuelto2&gt; &lt;nombreMetodo2&gt; ([lista_par\u00e1metros]);\n  ...\n}\n</code></pre> <p>Si te fijas, la declaraci\u00f3n de los m\u00e9todos termina en punto y coma, pues no tienen cuerpo, al igual que sucede con los m\u00e9todos abstractos de las clases abstractas. El ejemplo de la interfaz <code>Depredador</code> que hemos visto antes podr\u00eda quedar entonces as\u00ed:</p> Java<pre><code>public interface Depredador {\n  void perseguir (Animal presa);\n  void cazar (Animal presa);\n  ...\n}\n</code></pre> <p>Ser\u00e1n las clases que implementen esta interfaz (<code>Le\u00f3n</code>, <code>Leopardo</code>, <code>Cocodrilo</code>, <code>Rana</code>, <code>Lagarto</code>, <code>Hombre</code>, etc.) las que definan cada uno de los m\u00e9todos por dentro.</p> Revisa con cuidado el siguiente ejemplo <p>Crea una interfaz en Java cuyo nombre sea <code>Imprimible</code> y que contenga algunos m\u00e9todos \u00fatiles para mostrar el contenido de una clase:</p> <p>SOLUCI\u00d3N 1) M\u00e9todo <code>devolverContenidoString</code>, que crea un <code>String</code> con una representaci\u00f3n de todo el contenido p\u00fablico (o que se decida que deba ser mostrado) del objeto y lo devuelve. El formato ser\u00e1 una lista de pares \"nombre=valor\" de cada atributo separado por comas y la lista completa encerrada entre llaves: \"<code>{&lt;nombre_atributo_1&gt;=&lt;valor_atributo_1&gt;, ..., &lt;nombre_atributo_n&gt;=&lt;valor_atributo_n&gt;}</code>\".</p> <p>2) M\u00e9todo <code>devolverContenidoArrayList</code>, que crea un <code>ArrayList</code> de <code>String</code> con una representaci\u00f3n de todo el contenido p\u00fablico (o que se decida que deba ser mostrado) del objeto y lo devuelve.</p> <p>3) M\u00e9todo <code>devolverContenidoHashMap</code>, similar al anterior, pero en lugar devolver en un <code>ArrayList</code> los valores de los atributos, se devuelve en una <code>HashMap</code> en forma de pares (<code>nombre</code>, <code>valor</code>). Se trata simplemente de declarar la interfaz e incluir en su interior esos tres m\u00e9todos: Java<pre><code>import java.util.ArrayList;\nimport java.util.HashMap;\n\npublic interface Imprimible {\n    String devolverContenidoString();\n    ArrayList devolverContenidoArrayList();\n    HashMap devolverContenidoHashMap();\n}\n</code></pre></p> <p>El c\u00f3mo se implementar\u00e1n cada uno de esos m\u00e9todos depender\u00e1 exclusivamente de cada clase que decida implementar esta interfaz.</p>"},{"location":"ud08/ud0805/#implementacion-de-interfaces","title":"Implementaci\u00f3n de interfaces","text":"<p>Como ya has visto, todas las clases que implementan una determinada interfaz est\u00e1n obligadas a proporcionar una definici\u00f3n (implementaci\u00f3n) de los m\u00e9todos de esa interfaz, adoptando el modelo de comportamiento propuesto por \u00e9sta.</p> <p>Dada una interfaz, cualquier clase puede especificar dicha interfaz mediante el mecanismo denominado implementaci\u00f3n de interfaces. Para ello se utiliza la palabra reservada implements:</p> Java<pre><code>class NombreClase implements NombreInterfaz {\n</code></pre> <p>De esta manera, la clase est\u00e1 diciendo algo as\u00ed como \"la interfaz indica los m\u00e9todos que debo implementar, pero voy a ser yo (la clase) quien los implemente\".</p> <p>Es posible indicar varios nombres de interfaces separ\u00e1ndolos por comas:</p> Java<pre><code>class NombreClase implements NombreInterfaz1, NombreInterfaz2,... {\n</code></pre> <p>Cuando una clase implementa una interfaz, tiene que redefinir sus m\u00e9todos nuevamente con acceso p\u00fablico. Con otro tipo de acceso se producir\u00e1 un error de compilaci\u00f3n. Es decir, que del mismo modo que no se pod\u00edan restringir permisos de acceso en la herencia de clases, tampoco se puede hacer en la implementaci\u00f3n de interfaces.</p> <p>Una vez implementada una interfaz en una clase, los m\u00e9todos de esa interfaz tienen exactamente el mismo tratamiento que cualquier otro m\u00e9todo, sin ninguna diferencia, pudiendo ser invocados, heredados, redefinidos, etc.</p> <p>En el ejemplo de los depredadores, al definir la clase <code>Le\u00f3n</code>, habr\u00eda que indicar que implementa la interfaz <code>Depredador</code>:</p> Java<pre><code>class Leon implements Depredador {\n</code></pre> <p>En realidad la definici\u00f3n completa de la clase <code>Leon</code> deber\u00eda ser:</p> Java<pre><code>class Leon extends Felino implements Depredador {\n</code></pre> <p>Orden <code>extends</code> e <code>implements</code></p> <p>El orden de <code>extends</code> e <code>implements</code> es importante, primero se define la herencia y a continuaci\u00f3n la interfaces que implementa.</p> <p>Y en su interior habr\u00eda que implementar aquellos m\u00e9todos que contenga la interfaz:</p> Java<pre><code>void perseguir (Animal presa) {\n  // Implementaci\u00f3n del m\u00e9todo perseguir para un le\u00f3n\n  ...\n}\n</code></pre> <p>En el caso de clases que pudieran ser a la vez <code>Depredador</code> y <code>Presa</code>, tendr\u00edan que implementar ambas interfaces, como podr\u00eda suceder con la clase <code>Rana</code>:</p> Java<pre><code>class Rana implements Depredador, Presa {\n</code></pre> <p>Que de manera completa quedar\u00eda:</p> Java<pre><code>class Rana extends Anfibio implements Depredador, Presa {\n</code></pre> <p>Y en su interior habr\u00eda que implementar aquellos m\u00e9todos que contengan ambas interfaces, tanto las de <code>Depredador</code> (localizar, cazar, etc.) como las de <code>Presa</code> (observar, huir, etc.).</p> Revisa con cuidado el siguiente ejemplo <p>Haz que las clases <code>Alumno</code> y <code>Profesor</code> implementen la interfaz <code>Imprimible</code> que se ha escrito en el ejercicio anterior.</p> <p>SOLUCI\u00d3N La primera opci\u00f3n que se te puede ocurrir es pensar que en ambas clases habr\u00e1 que indicar que implementan la interfaz <code>Imprimible</code> y por tanto definir los m\u00e9todos que \u00e9sta incluye: <code>devolverContenidoString</code>, <code>devolverContenidoHashMap</code> y <code>devolverContenidoArrayList</code>.</p> <p>Si las clases <code>Alumno</code> y <code>Profesor</code> no heredaran de la misma clase habr\u00eda que hacerlo obligatoriamente as\u00ed, pues no comparten superclase y precisamente para eso sirven las interfaces: para implementar determinados comportamientos que no pertenecen a la estructura jer\u00e1rquica de herencia en la que se encuentra una clase (de esta manera, clases que no tienen ninguna relaci\u00f3n de herencia podr\u00edan compartir interfaz).</p> <p>Pero en este caso podr\u00edamos aprovechar que ambas clases s\u00ed son subclases de una misma superclase (heredan de la misma) y hacer que la interfaz <code>Imprimible</code> sea implementada directamente por la superclase (<code>Persona</code>) y de este modo ahorrarnos bastante c\u00f3digo. As\u00ed no har\u00eda falta indicar expl\u00edcitamente que <code>Alumno</code> y <code>Profesor</code> implementan la interfaz <code>Imprimible</code>, pues lo estar\u00e1n haciendo de forma impl\u00edcita al heredar de una clase que ya ha implementado esa interfaz (la clase <code>Persona</code>, que es padre de ambas).</p> <p>Una vez que los m\u00e9todos de la interfaz est\u00e9n implementados en la clase <code>Persona</code>, tan solo habr\u00e1 que redefinir o ampliar los m\u00e9todos de la interfaz para que se adapten a cada clase hija espec\u00edfica (<code>Alumno</code> o <code>Profesor</code>), ahorr\u00e1ndonos tener que escribir varias veces la parte de c\u00f3digo que obtiene los atributos gen\u00e9ricos de la clase <code>Persona</code>.</p> <p>1) Clase <code>Persona</code>. Indicamos que se va a implementar la interfaz <code>Imprimible</code>:</p> Java<pre><code>public abstract class Persona implements Imprimible {\n...\n</code></pre> <p>Definimos el m\u00e9todo <code>devolverContenidoHashMap</code> a la manera de como debe ser implementado para la clase Persona. Podr\u00eda quedar, por ejemplo, as\u00ed:</p> Java<pre><code>@Override\npublic HashMap devolverContenidoHashMap() {\n    // Creamos la HashMap que va a ser devuelta\n    HashMap contenido = new HashMap();\n    // A\u00f1adimos los atributos de la clase\n    DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n\n    String stringFecha = formatoFecha.format(this.fechaNacimiento);\n    contenido.put(\"nombre\", this.nombre);\n    contenido.put(\"apellidos\", this.apellidos);\n    contenido.put(\"fechaNacim\", stringFecha);\n    // Devolvemos la HashMap\n    return contenido;\n}\n</code></pre> <p>Del mismo modo, definimos tambi\u00e9n el m\u00e9todo <code>devolverContenidoArrayList</code>:</p> Java<pre><code>@Override\npublic ArrayList devolverContenidoArrayList() {\n    // Creamos la ArrayList que va a ser devuelta\n    ArrayList contenido = new ArrayList();\n    // A\u00f1adimos los atributos de la clase\n    DateTimeFormatter formato = DateTimeFormatter.ofPattern(\"d/MM/yyyy\");\n\n    String stringFecha = formato.format(this.fechaNacim);\n    contenido.add(this.nombre);\n    contenido.add(this.apellidos);\n    contenido.add(stringFecha);\n    // Devolvemos la ArrayList\n    return contenido;\n}\n</code></pre> <p>Y por \u00faltimo el m\u00e9todo <code>devolverContenidoString</code>:</p> Java<pre><code>@Override\npublic String devolverContenidoString() {\n    DateTimeFormatter formato = DateTimeFormatter.ofPattern(\"d/MM/yyyy\");\n    String stringFecha = formato.format(this.fechaNacim);\n    String contenido = \"{\" + this.nombre + \", \" + this.apellidos + \", \" + stringFecha + \"}\";\nreturn contenido;\n}\n</code></pre> <p>2) Clase <code>Alumno</code>.</p> <p>Esta clase hereda de la clase Persona, de manera que heredar\u00e1 los tres m\u00e9todos anteriores. Tan solo habr\u00e1 que redefinirlos para que, aprovechando el c\u00f3digo ya escrito en la superclase, se a\u00f1ada la funcionalidad espec\u00edfica que aporta esta subclase.</p> Java<pre><code>public class Alumno extends Persona {\n...\n</code></pre> <p>Como puedes observar no ha sido necesario incluir el <code>implements Imprimible</code>, pues el <code>extends Persona</code> lo lleva impl\u00edcito dado que <code>Persona</code> ya implementaba ese interfaz. Lo que haremos entonces ser\u00e1 llamar al m\u00e9todo que estamos redefiniendo utilizando la referencia a la superclase <code>super</code>.</p> <p>El m\u00e9todo <code>devolverContenidoHashMap</code> podr\u00eda quedar, por ejemplo, as\u00ed:</p> Java<pre><code>@Override\npublic HashMap devolverContenidoHashMap() {\n    // Llamada al m\u00e9todo de la superclase\n    HashMap contenido = super.devolverContenidoHashMap();\n    // A\u00f1adimos los atributos espec\u00edficos de la clase\n    contenido.put(\"grupo\", this.grupo);\n    contenido.put(\"notaMedia\", this.notaMedia);\n    // Devolvemos la HashMap rellena\n    return contenido;\n}\n</code></pre> <p>3) Clase <code>Profesor</code>. En este caso habr\u00eda que proceder exactamente de la misma manera que con la clase Alumno: redefiniendo los m\u00e9todos de la interfaz <code>Imprimible</code> para a\u00f1adir la funcionalidad espec\u00edfica que aporta esta subclase, en este caso mostraremos la redifinici\u00f3n del m\u00e9todo <code>devolverContenidoArrayList()</code>:</p> Java<pre><code>@Override\npublic ArrayList devolverContenidoArrayList() {\n    // Llamada al m\u00e9todo de la superclase\n    ArrayList contenido = super.devolverContenidoArrayList();\n    // A\u00f1adimos los atributos espec\u00edficos de la clase\n    contenido.add(this.especialidad);\n    contenido.add(this.salario);\n    // Devolvemos la ArrayList\n    return contenido;\n}\n</code></pre> <p>y la redefinici\u00f3n del m\u00e9todo <code>devolverContenidoString()</code>:</p> Java<pre><code>@Override\npublic String devolverContenidoString() {\n    // Llamada al m\u00e9todo de la superclase\n    String contenido = super.devolverContenidoString();\n    //Eliminamos el \u00faltimo car\u00e1cter, que contiene una llave de cierre.\n    contenido = contenido.substring(0, contenido.length() - 1);\n    contenido = contenido + \", \" + this.especialidad + \", \" + this.salario + \"}\";\n    // Devolvemos el String creado.\n    return contenido;\n}\n</code></pre>"},{"location":"ud08/ud0805/#un-ejemplo-de-implementacion-de-interfaces-la-interfaz-series","title":"Un ejemplo de implementaci\u00f3n de interfaces: la interfaz <code>Series</code>","text":"<p>En la forma tradicional de una interfaz, los m\u00e9todos se declaran utilizando solo su tipo de devoluci\u00f3n y firma. Son, esencialmente, m\u00e9todos abstractos. Por lo tanto, cada clase que incluye dicha interfaz debe implementar todos sus m\u00e9todos.</p> <p>A tener en cuenta</p> <p>En una interfaz, los m\u00e9todos son impl\u00edcitamente p\u00fablicos.</p> <p>A tener en cuenta</p> <p>Las variables declaradas en una interfaz no son variables de instancia. En cambio, son impl\u00edcitamente public, final, y static, y deben inicializarse. Por lo tanto, son esencialmente constantes.</p> <p>Aqu\u00ed hay un ejemplo de una definici\u00f3n de interfaz. Especifica la interfaz a una clase que genera una serie de n\u00fameros.</p> Java<pre><code>public interface Series {\n  int getSiguiente(); //Retorna el siguiente n\u00famero de la serie\n  void reiniciar();   //Reinicia\n  void setComenzar(int x); //Establece un valor inicial\n}\n</code></pre> <p>Esta interfaz se declara p\u00fablica para que pueda ser implementada por c\u00f3digo en cualquier paquete.</p> <p>Los m\u00e9todos que implementan una interfaz deben declararse p\u00fablicos. Adem\u00e1s, el tipo del m\u00e9todo de implementaci\u00f3n debe coincidir exactamente con el tipo especificado en la definici\u00f3n de la interfaz.</p> Ejemplo <p>Aqu\u00ed hay un ejemplo que implementa la interfaz de <code>Series</code> mostrada anteriormente. Crea una clase llamada <code>DeDos</code>, que genera una serie de n\u00fameros, cada uno mayor que el anterior.</p> <p>SOLUCI\u00d3N Java<pre><code>class DeDos implements Series {\n    int iniciar;\n    int valor;\n\n    DeDos(){\n        iniciar = 0;\n        valor = 0;\n    }\n\n    public int getSiguiente() {\n        valor += 2;\n        return valor;\n    }\n\n    public void reiniciar() {\n        valor = iniciar;\n    }\n\n    public void setComenzar(int x) {\n        iniciar = x;\n        valor = x;\n    }\n}\n</code></pre></p> <p>Observa que los m\u00e9todos <code>getSiguiente()</code>, <code>reiniciar()</code> y <code>setComenzar()</code> se declaran utilizando el especificador de acceso p\u00fablico (<code>public</code>). Esto es necesario. Siempre que implementes un m\u00e9todo definido por una interfaz, debe implementarse como p\u00fablico porque todos los miembros de una interfaz son impl\u00edcitamente p\u00fablicos.</p> Ejemplo <p>Aqu\u00ed hay una clase que demuestra <code>DeDos</code>:</p> <p>SOLUCI\u00d3N Java<pre><code>class SeriesDemo {\n    public static void main(String[] args) {\n        DeDos ob = new DeDos();\n        for (int i=0; i&lt;5; i++){\n            System.out.println(\"Siguiente valor es: \" + ob.getSiguiente());\n        }\n        System.out.println(\"\\nReiniciando\");\n        ob.reiniciar();\n        for (int i=0; i&lt;5; i++){\n            System.out.println(\"Siguiente valor es: \" + ob.getSiguiente());\n        }\n        System.out.println(\"\\nIniciando en 100\");\n        ob.setComenzar(100);\n        for (int i=0; i&lt;5; i++){\n            System.out.println(\"Siguiente valor es: \" + ob.getSiguiente());\n        }\n    }\n}\n</code></pre></p> <p>Salida:</p> Bash<pre><code>Siguiente valor es: 2\nSiguiente valor es: 4\nSiguiente valor es: 6\nSiguiente valor es: 8\nSiguiente valor es: 10\nReiniciando\nSiguiente valor es: 2\nSiguiente valor es: 4\nSiguiente valor es: 6\nSiguiente valor es: 8\nSiguiente valor es: 10\nIniciando en 100\nSiguiente valor es: 102\nSiguiente valor es: 104\nSiguiente valor es: 106\nSiguiente valor es: 108\nSiguiente valor es: 110\n</code></pre> <p>Est\u00e1 permitido y es com\u00fan para las clases que implementan interfaces definir miembros adicionales propios. Por ejemplo, la siguiente versi\u00f3n de <code>DeDos</code> agrega el m\u00e9todo <code>getAnterior()</code>, que devuelve el valor anterior:</p> Ejemplo <p>Aqu\u00ed hay una clase que demuestra <code>DeDos</code>:</p> <p>SOLUCI\u00d3N Java<pre><code>class DeDos implements Series {\n    int iniciar;\n    int valor;\n    int anterior;\n\n    DeDos(){\n        iniciar = 0;\n        valor = 0;\n    }\n\n    public int getSiguiente() {\n        anterior = valor;\n        valor += 2;\n        return valor;\n    }\n\n    public void reiniciar() {\n        valor = iniciar;\n        anterior = valor-2;\n    }\n\n    public void setComenzar(int x) {\n        iniciar = x;\n        valor = x;\n        anterior = x-2;\n    }\n\n    //A\u00f1adiendo un m\u00e9todo que no est\u00e1 definido en Series\n    int getAnterior(){\n        return anterior;\n    }\n}\n</code></pre></p> <p>Observa que la adici\u00f3n de <code>getAnterior()</code> requiri\u00f3 un cambio en las implementaciones de los m\u00e9todos definidos por <code>Series</code>. Sin embargo, dado que la interfaz con esos m\u00e9todos permanece igual, el cambio es continuo y no rompe el c\u00f3digo preexistente. Esta es una de las ventajas de las interfaces.</p> <p>Como se explic\u00f3, cualquier cantidad de clases puede implementar una interfaz. Por ejemplo, aqu\u00ed hay una clase llamada <code>DeTres</code> que genera una serie que consta de m\u00faltiplos de tres:</p> Java<pre><code>public class DeTres implements Series{\n    int iniciar;\n    int valor;\n\n    DeTres(){\n        iniciar = 0;\n        valor = 0;\n    }\n\n    public int getSiguiente() {\n        valor += 3;\n        return valor;\n    }\n\n    public void reiniciar() {\n        valor = iniciar;\n    }\n\n    public void setComenzar(int x) {\n        iniciar = x;\n        valor = x;\n    }\n}\n</code></pre>"},{"location":"ud08/ud0805/#simulacion-de-la-herencia-multiple-mediante-el-uso-de-interfaces","title":"Simulaci\u00f3n de la herencia m\u00faltiple mediante el uso de interfaces","text":"<p>Almacenamiento de una interfaz</p> <p>Una interfaz no tiene espacio de almacenamiento asociado (no se van a declarar objetos de un tipo de interfaz), es decir, no tiene implementaci\u00f3n.</p> <p>En algunas ocasiones es posible que interese representar la situaci\u00f3n de que \"una clase X es de tipo A, de tipo B, y de tipo C\", siendo A, B, C clases disjuntas (no heredan unas de otras). Hemos visto que ser\u00eda un caso de herencia m\u00faltiple que Java no permite.</p> <p>Para poder simular algo as\u00ed, podr\u00edas definir tres interfaces A, B, C que indiquen los comportamientos (m\u00e9todos) que se deber\u00edan tener seg\u00fan se pertenezca a una supuesta clase A, B, o C, pero sin implementar ning\u00fan m\u00e9todo concreto ni atributos de objeto (s\u00f3lo interfaz).</p> <p>De esta manera la clase X podr\u00eda a la vez:</p> <ol> <li>Implementar las interfaces A, B, C, que la dotar\u00edan de los comportamientos que deseaba heredar de las clases A, B, C.</li> <li>Heredar de otra clase Y, que le proporcionar\u00eda determinadas caracter\u00edsticas dentro de su taxonom\u00eda o jerarqu\u00eda de objeto (atributos, m\u00e9todos implementados y m\u00e9todos abstractos).</li> </ol> <p>En el ejemplo que hemos visto de las interfaces <code>Depredador</code> y <code>Presa</code>, tendr\u00edas un ejemplo de esto: la clase <code>Rana</code>, que es subclase de <code>Anfibio</code>, implementa una serie de comportamientos propios de un <code>Depredador</code> y, a la vez, otros m\u00e1s propios de una <code>Presa</code>. Esos comportamientos (m\u00e9todos) no forman parte de la superclase <code>Anfibio</code>, sino de las interfaces. Si se decide que la clase <code>Rana</code> debe de llevar a cabo algunos otros comportamientos adicionales, podr\u00edan a\u00f1adirse a una nueva interfaz y la clase <code>Rana</code> implementar\u00eda una tercera interfaz.</p> <p>De este modo, con el mecanismo \"una herencia pero varias interfaces\", podr\u00edan conseguirse resultados similares a los obtenidos con la herencia m\u00faltiple.</p> <p>Ahora bien, del mismo modo que suced\u00eda con la herencia m\u00faltiple, puede darse el problema de la colisi\u00f3n de nombres al implementar dos interfaces que tengan un m\u00e9todo con el mismo identificador. En tal caso puede suceder lo siguiente:</p> <ul> <li>Si los dos m\u00e9todos tienen diferentes par\u00e1metros no habr\u00e1 problema aunque tengan el mismo nombre pues se realiza una sobrecarga de m\u00e9todos.</li> <li>Si los dos m\u00e9todos tienen un valor de retorno de un tipo diferente, se producir\u00e1 un error de compilaci\u00f3n (al igual que sucede en la sobrecarga cuando la \u00fanica diferencia entre dos m\u00e9todos es \u00e9sa).</li> <li>Si los dos m\u00e9todos son exactamente iguales en identificador, par\u00e1metros y tipo devuelto, entonces solamente se podr\u00e1 implementar uno de los dos m\u00e9todos. En realidad se trata de un solo m\u00e9todo pues ambos tienen la misma interfaz (mismo identificador, mismos par\u00e1metros y mismo tipo    devuelto).</li> </ul> <p>Nombres id\u00e9nticos en diferentes interfaces</p> <p>La utilizaci\u00f3n de nombres id\u00e9nticos en diferentes interfaces que pueden ser implementadas a la vez por una misma clase puede causar, adem\u00e1s del problema de la colisi\u00f3n de nombres, dificultades de legibilidad en el c\u00f3digo, pudiendo dar lugar a confusiones. Si es posible intenta evitar que se produzcan este tipo de situaciones.</p>"},{"location":"ud08/ud0805/#herencia-de-interfaces","title":"Herencia de interfaces","text":"<p>Las interfaces, al igual que las clases, tambi\u00e9n permiten la herencia. Para indicar que una interfaz hereda de otra se indica nuevamente con la palabra reservada <code>extends</code>. Pero en este caso s\u00ed se permite la herencia m\u00faltiple de interfaces. Si se hereda de m\u00e1s de una interfaz se indica con la lista de interfaces separadas por comas.</p> <p>Por ejemplo, dadas las interfaces <code>InterfazUno</code> e <code>InterfazDos</code>:</p> Java<pre><code>public interface InterfazUno {\n  // M\u00e9todos y constantes de la interfaz Uno\n}\n\npublic interface InterfazDos {\n  // M\u00e9todos y constantes de la interfaz Dos\n}\n</code></pre> <p>Podr\u00eda definirse una nueva interfaz que heredara de ambas:</p> Java<pre><code>public interface InterfazCompleja extends InterfazUno, InterfazDos {\n  // M\u00e9todos y constantes de la interfaz compleja\n} \n</code></pre> \u00bfPuede una clase implementar varias interfaces diferentes a la vez? <p>Observa el siguiente esquema UML:  Las clases <code>Kangaroo</code> y <code>Lion</code> implementan varias clases:     - <code>Kangaroo</code> : <code>Herbivore</code>, <code>TwoLeggedMammal</code> y <code>Animal</code>     - <code>Lion</code> : <code>Animal</code>, <code>FourLeggedMammal</code>, <code>Hunter</code> y <code>Carnivore</code></p> Ejemplo 5.5 <p>\u00bfPuede una interfaz heredar de varias interfaces diferentes a la vez?</p> <p>Observa el anterior esquema UML: Lass interfaces <code>Human</code> y <code>Omnivore</code> heredan de varias interfaces: - <code>Human</code> : de <code>TwoLeggedMammal</code>, <code>Omnivore</code>, <code>Mammal</code> y <code>Hunter</code> - <code>Omnivore</code> : <code>Herbivore</code> y <code>Carnivore</code>.</p> Ejemplo 5.6 <p>Supongamos una situaci\u00f3n en la que nos interesa dejar constancia de que ciertas clases deben implementar una funcionalidad te\u00f3rica determinada, diferente en cada clase afectada. Estamos hablando, pues, de la definici\u00f3n de un m\u00e9todo te\u00f3rico que algunas clases deber\u00e1n implementar. Un ejemplo real puede ser el m\u00e9todo <code>calculoImporteJubilacion()</code> aplicable, de manera diferente, a muchas tipolog\u00edas de trabajadores y, por tanto, podr\u00edamos pensar en dise\u00f1ar una clase <code>Trabajador</code> en que uno de sus m\u00e9todos fuera <code>calculoImporteJubilacion()</code>. Esta soluci\u00f3n es v\u00e1lida si estamos dise\u00f1ando una jerarqu\u00eda de clases a partir de la clase <code>Trabajador</code> de la que cuelguen las clases correspondientes a las diferentes tipolog\u00edas de trabajadores (metal\u00fargicos, hosteler\u00eda, inform\u00e1ticos, profesores...). Adem\u00e1s, disponemos del concepto de clase abstracta que cada subclase implemente obligatoriamente el m\u00e9todo <code>calculoImporteJubilacion()</code>. Pero, \u00bfy si resulta que ya tenemos las clases <code>Profesor</code>, <code>Informatico</code>, <code>Hostelero</code> en otras jerarqu\u00edas de clases? La soluci\u00f3n consiste en hacer que estas clases derivaran de la clase <code>Trabajador</code>, sin abandonar la derivaci\u00f3n que pudieran tener, ser\u00eda factible en lenguajes orientados a objetos que soportaran la herencia m\u00faltiple, pero esto no es factible en el lenguaje Java. Para superar esta limitaci\u00f3n, Java proporciona las interfaces.</p> <p>Definici\u00f3n de interfaz</p> <p>Una interfaz es una maqueta contenedora de una lista de m\u00e9todos abstractos y datos miembro (de tipos primitivos o de clases). Los atributos, si existen, son impl\u00edcitamente considerados <code>static</code> y <code>final</code>. Los m\u00e9todos, si existen, son impl\u00edcitamente considerados <code>public</code>.</p> <p>Para entender en qu\u00e9 nos pueden ayudar las interface, necesitamos saber:     - Una interfaz puede ser implementada por m\u00faltiples clases, de manera similar a como una clase puede ser superclase de m\u00faltiples clases.     - Las clases que implementan una interfaz est\u00e1n obligadas a sobrescribir todos los m\u00e9todos definidos en la interfaz. Si la definici\u00f3n de alguno de los m\u00e9todos a sobrescribir coincide con la definici\u00f3n de alg\u00fan m\u00e9todo heredado, este desaparece de la clase.     - Una clase puede implementar m\u00faltiples interfaces, a diferencia de la derivaci\u00f3n, que s\u00f3lo se permite una \u00fanica clase base.     - Una interfaz introduce un nuevo tipo de dato, por la que nunca habr\u00e1 ninguna instancia, pero s\u00ed objetos usuarios de la interfaz (objetos de las clases que implementan la interfaz). Todas las clases que implementan una interfaz son compatibles con el tipo introducido por la interfaz.     - Una interfaz no proporciona ninguna funcionalidad a un objeto (ya que la clase que implementa la interfaz es la que debe definir la funcionalidad de todos los m\u00e9todos), pero en cambio proporciona la posibilidad de formar parte de la funcionalidad de otros objetos (pas\u00e1ndola por par\u00e1metro en m\u00e9todos de otras clases).     - La existencia de las interfaces posibilita la existencia de una jerarqu\u00eda de tipo (que no debe confundirse con la jerarqu\u00eda de clases) que permite la herencia m\u00faltiple.     - Una interfaz no se puede instanciar, pero s\u00ed se puede hacer referencia.     As\u00ed, si <code>I</code> es una interfaz y <code>C</code> es una clase que implementa la interfaz, se pueden declarar referencias al tipo <code>I</code> que apunten objetos de <code>C</code>:</p> Java<pre><code>I obj = new C (&lt;par\u00e1metros&gt;);\n</code></pre> <p>- Las interfaces pueden heredar de otras interfaces y, a diferencia de la derivaci\u00f3n de clases, pueden heredar de m\u00e1s de una interfaz.</p> <p>As\u00ed, si dise\u00f1amos la interfaz <code>Trabajador</code>, podemos hacer que las clases ya existentes (<code>Profesor</code>, <code>Informatico</code>, <code>Hostelero</code> ...) la implementen y, por tanto, los objetos de estas clases, adem\u00e1s de ser objetos de las superclases respectivas, pasan a ser considerados objetos usuarios del tipo <code>Trabajador</code>. Con esta actuaci\u00f3n nos veremos obligados a implementar el m\u00e9todo <code>calculoImporteJubilacion()</code> a todas las clases que implementen la interfaz.</p> <p>Alguien no experimentado en la gesti\u00f3n de interfaces puede pensar: \u00bfpor qu\u00e9 tanto revuelo con las interfaces si hubi\u00e9ramos podido dise\u00f1ar directamente un m\u00e9todo llamado <code>calculoImporteJubilacion()</code> en las clases afectadas sin necesidad de definir ninguna interfaz?</p> <p>La respuesta radica en el hecho de que la declaraci\u00f3n de la interfaz lleva impl\u00edcita la declaraci\u00f3n del tipo <code>Trabajador</code> y, por tanto, podremos utilizar los objetos de todas las clases que implementen la interfaz en cualquier m\u00e9todo de cualquier clase que tenga alg\u00fan argumento referencia al tipo <code>Trabajador</code> como, por ejemplo, en un hipot\u00e9tico m\u00e9todo de una hipot\u00e9tica clase llamada <code>Hacienda</code>:</p> Java<pre><code>public void enviarBorradorIRPF(Trabajador t) {...}\n</code></pre> <p>Por el hecho de existir la interfaz <code>Trabajador</code>, todos los objetos de las clases que la implementan (<code>Profesor</code>, <code>Informatico</code>, <code>Hostelero</code> ...) se pueden pasar como par\u00e1metro en las llamadas al m\u00e9todo <code>enviarBorradorIRPF(Trabajador t)</code>.</p> <p>La sintaxis para declarar una interfaz es:</p> Java<pre><code>[public] interface &lt;NombreInterfaz&gt; [extends &lt;Nombreinterfaz1&gt;, &lt;Nombreinterfaz2&gt;...] {\n    &lt;CuerpoInterfaz&gt;\n}\n</code></pre> <p>Las interfaces tambi\u00e9n se pueden asignar a un paquete. La inexistencia del modificador de acceso p\u00fablico hace que la interfaz sea accesible a nivel del paquete.</p> <p>Para los nombres de las interfaces, se aconseja seguir el mismo criterio que para los nombres de las clases. </p> <p>Interfaces en la documentaci\u00f3n de Java</p> <p>En la documentaci\u00f3n de Java, las interfaces se identifican r\u00e1pidamente entre las clases porque est\u00e1n en cursiva.</p> <p>La sintaxis para declarar una clase que implemente una o m\u00e1s interfaces es:</p> Java<pre><code>[final] [public] class &lt;NombreClase&gt; [extends &lt;NombreClaseBase&gt;] implements &lt;NombreInterfaz1&gt;, &lt;NomInterfaz2&gt;... {\n    &lt;CuerpoDeLaClase&gt;\n}\n</code></pre> <p>Los m\u00e9todos de las interfaces a implementar en la clase deben ser obligatoriamente de acceso p\u00fablico.</p> <p>As\u00ed, por ejemplo:</p> Java<pre><code>public interface DiasSemana {\n    int LUNES = 1, MARTES = 2, MIERCOLES = 3, JUEVES = 4;\n    int VIERNES = 5, SABADO = 6, DOMINGO = 7;\n    String[] NOMBRES_DIAS = {\"\", \"lunes\", \"martes\", \"mi\u00e9rcoles\", \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\"};\n}\n</code></pre> <p>Esta definici\u00f3n nos permite utilizar las constantes declaradas en cualquier clase que implemente la interfaz, de manera tan simple como:</p> Java<pre><code>System.out.println (DiasSemana.NOMBRES_DIAS[LUNES]);\n</code></pre> Ejemplo de dise\u00f1o de interfaz e implementaci\u00f3n en una clase <p>Se presentan un par de interfaces que incorporan datos (de tipo primitivo y de referencia en clase) y m\u00e9todos y una clase que las implementa. En la declaraci\u00f3n de la clase se ve que s\u00f3lo implementa la interfaz <code>B</code>, pero como esta interfaz deriva de la interfaz <code>A</code> resulta que la clase est\u00e1 implementando las dos interfaces.</p> Java<pre><code>import java.util.Date;\n\ninterface A {\n    Date ULTIMA_CREACION = new Date(0, 0, 1);\n    void metodoA();\n}\n\ninterface B extends A {\n    int VALOR_B = 20;\n    // 1 \u22121 \u22121900\n    void metodoB();\n}\n\npublic class Anexo5Interfaces implements B {\n    private long b;\n    private Date fechaCreacion = new Date();\n\n    public Anexo5Interfaces(int factor) {\n        b = VALOR_B * factor;\n        ULTIMA_CREACION.setTime(fechaCreacion.getTime());\n    }\n\n    @Override\n    public void metodoA() {\n        System.out.println(\"En metodoA, ULTIMA_CREACION = \" + ULTIMA_CREACION);\n    }\n\n    @Override\n    public void metodoB() {\n        System.out.println(\"En metodoB, b = \" + b);\n    }\n\n    public static void main(String args[]) {\n        System.out.println(\"Inicialmente, ULTIMA_CREACION = \" + ULTIMA_CREACION);\n        Anexo5Interfaces obj = new Anexo5Interfaces(5);\n        obj.metodoA();\n        obj.metodoB();\n        A pa = obj;\n        B pb = obj;\n    }\n}\n</code></pre> <p>Si lo ejecutamos obtendremos:</p> Bash<pre><code>Inicialmente, ULTIMA_CREACION = Mon Jan 01 00:00:00 CET 1900\nEn metodoA, ULTIMA_CREACION = Thu Aug 26 16:09:47 CEST 2021\nEn metodoB, b = 100\n</code></pre> <p>El ejemplo sirve para ilustrar algunos puntos:</p> <ul> <li>Comprobamos que los datos miembro de las interfaces son <code>static</code>, ya que en el m\u00e9todo <code>main()</code> hacemos referencia al dato miembro <code>ULTIMA_CREACION</code> sin indicar ning\u00fan objeto de la clase.</li> <li>Si hubi\u00e9ramos intentado modificar los datos <code>VALOR_B</code> o <code>ULTIMA_CREACION</code> no habr\u00edamos podido porque es final, pero en cambio s\u00ed podemos modificar el contenido del objeto <code>Date</code> apuntado por <code>ULTIMA_CREACION</code>, que corresponde al momento temporal de la \u00faltima creaci\u00f3n de un objeto ya cada nueva creaci\u00f3n se actualiza su contenido.</li> <li>En las dos \u00faltimas instrucciones del m\u00e9todo <code>main()</code> vemos que podemos declarar variables <code>pa</code> y <code>pb</code> de las interfaces y utilizarlas para hacer referencia a objetos de la clase <code>EjemploInterfaz()</code>.</li> <li>\u00bfPara qu\u00e9 podr\u00eda servirnos <code>A pa = obj</code>?<ul> <li>Abstracci\u00f3n: Si solo estamos interesados en los m\u00e9todos y propiedades de la interfaz A, podemos declarar la referencia como tipo A. Esto oculta la implementaci\u00f3n espec\u00edfica de la clase y solo nos permite interactuar con los m\u00e9todos definidos en A.</li> <li>Flexibilidad: Si m\u00e1s adelante cambiamos la implementaci\u00f3n para que obj sea una instancia de otra clase que implementa A, no necesitaremos cambiar el c\u00f3digo que sigue utilizando <code>pa</code>, ya que <code>pa</code> es solo de tipo A y puede apuntar a cualquier objeto que implemente esa interfaz.</li> <li>Programaci\u00f3n Orientada a Interfaces: Es una buena pr\u00e1ctica programar en funci\u00f3n de interfaces en lugar de implementaciones concretas. Esto facilita la creaci\u00f3n de c\u00f3digo m\u00e1s modular y flexible, ya que las clases pueden intercambiarse f\u00e1cilmente siempre que implementen la misma interfaz.</li> </ul> </li> </ul>"},{"location":"ud08/ud0805/#funciones-lambda","title":"Funciones Lambda","text":"<p>Tal y como vimos en la unidad anterior, la implementaci\u00f3n de los m\u00e9todos de interfaces es muy susceptible de serlo a trav\u00e9s de funciones lambda.</p> <p>Imaginemos una clase <code>Persona</code>:</p> Java<pre><code>class Persona{\n    private String nombre;\n    private int edad;\n    ...\n}\n</code></pre> <p>Y un ArrayList <code>personas</code> formada por objetos de tipo <code>Persona</code>:</p> Java<pre><code>...\nArrayList&lt;Persona&gt; personas = new ArrayList&lt;&gt;();\npersonas.add(new Persona(\"Nacho\", 52));\npersonas.add(new Persona(\"David\", 47));\npersonas.add(new Persona(\"Pepe\", 42));\npersonas.add(new Persona(\"Maria\", 22));\npersonas.add(new Persona(\"Marta\", 4));\n...\n</code></pre> <p>Ahora queremos ordenar el <code>ArrayList</code> de <code>personas</code> de mayor a menor edad usando... Implementaci\u00f3n \"tradicional\" java: <code>Comparator</code> o<code>Comparable</code></p> Java<pre><code>...\nclass ComparadorPersona implements Comparator &lt;Persona&gt;{\n    @Override\n    public int compare(Persona p1, Persona p2){\n        return p2.getEdad() - p1.getEdad();\n    }\n}\n...\n</code></pre> Java<pre><code>...\npersonas.sort(new ComparadorPersona());\nfor (int i = 0; i &lt; personas.size(); i++){\n    System.out.println(personas.get(i));\n}\n...\n</code></pre> <p>Sin embargo, implementado con funciones Lambda seria...</p> Java<pre><code>...\npersonas.sort((p1, p2) -&gt; p2.getEdad() - p1.getEdad());\nfor (int i = 0; i &lt; personas.size(); i++){\n    System.out.println(personas.get(i));\n}\n...\n</code></pre>"},{"location":"ud08/ud0806/","title":"8.6 Polimorfismo","text":"<p>El polimorfismo es otro de los grandes pilares sobre los que se sustenta la Programaci\u00f3n Orientada a Objetos (junto con la encapsulaci\u00f3n y la herencia). Se trata nuevamente de otra forma m\u00e1s de establecer diferencias entre interfaz e implementaci\u00f3n, es decir, entre el qu\u00e9 y el c\u00f3mo. </p> <p>La encapsulaci\u00f3n te ha permitido agrupar caracter\u00edsticas (atributos) y comportamientos (m\u00e9todos) dentro de una misma unidad (clase), pudiendo darles un mayor o menor componente de visibilidad, y permitiendo separar al m\u00e1ximo posible la interfaz de la implementaci\u00f3n.</p> <p>Por otro lado la herencia te ha proporcionado la posibilidad de tratar a los objetos como pertenecientes a una jerarqu\u00eda de clases. Esta capacidad va a ser fundamental a la hora de poder manipular muchos posibles objetos de clases diferentes como si fueran de la misma clase (polimorfismo).</p> <p>El polimorfismo te va a permitir mejorar la organizaci\u00f3n y la legibilidad del c\u00f3digo as\u00ed como la posibilidad de desarrollar aplicaciones que sean m\u00e1s f\u00e1ciles de ampliar a la hora de incorporar nuevas funcionalidades. Si la implementaci\u00f3n y la utilizaci\u00f3n de las clases es lo suficientemente gen\u00e9rica y extensible ser\u00e1 m\u00e1s sencillo poder volver a este c\u00f3digo para incluir nuevos requerimientos.</p>"},{"location":"ud08/ud0806/#concepto-de-polimorfismo","title":"Concepto de polimorfismo","text":"<p>El polimorfismo consiste en la capacidad de poder utilizar una referencia a un objeto de una determinada clase como si fuera de otra clase (en concreto una subclase). Es una manera de decir que una clase podr\u00eda tener varias (poli) formas (morfismo).</p> <p>Un m\u00e9todo \"polim\u00f3rfico\" ofrece la posibilidad de ser distinguido (saber a qu\u00e9 clase pertenece) en tiempo de ejecuci\u00f3n en lugar de en tiempo de compilaci\u00f3n. Para poder hacer algo as\u00ed es necesario utilizar m\u00e9todos que pertenecen a una superclase y que en cada subclase se implementan de una forma en particular. En tiempo de compilaci\u00f3n se invocar\u00e1 al m\u00e9todo sin saber exactamente si ser\u00e1 el de una subclase u otra (pues se est\u00e1 invocando al de la superclase). S\u00f3lo en tiempo de ejecuci\u00f3n (una vez instanciada una u otra subclase) se conocer\u00e1 realmente qu\u00e9 m\u00e9todo (de qu\u00e9 subclase) es el que finalmente va a ser invocado.</p> <p>Esta forma de trabajar te va a permitir hasta cierto punto \"desentenderte\" del tipo de objeto espec\u00edfico (subclase) para centrarte en el tipo de objeto gen\u00e9rico (superclase). De este modo podr\u00e1s manipular objetos hasta cierto punto \"desconocidos\" en tiempo de compilaci\u00f3n y que s\u00f3lo durante la ejecuci\u00f3n del programa se sabr\u00e1 exactamente de qu\u00e9 tipo de objeto (subclase) se trata.</p> <p>A tener en cuenta</p> <p>El polimorfismo ofrece la posibilidad de que toda referencia a un objeto de una superclase pueda tomar la forma de una referencia a un objeto de una de sus subclases. Esto te va a permitir escribir programas que procesen objetos de clases que formen parte de la misma jerarqu\u00eda como si todos fueran objetos de sus superclases.</p> <p>A tener en cuenta</p> <p>El polimorfismo puede llevarse a cabo tanto con superclases (abstractas o no) como con interfaces.</p> Ejemplo de polimorfismo <p>Dada una superclase <code>ClaseX</code>, con un m\u00e9todo <code>m</code>, y dos subclases <code>ClaseA</code> y <code>ClaseB</code>, que redefinen ese m\u00e9todo <code>m</code>, podr\u00edas declarar un objeto <code>objetoX</code> de tipo <code>ClaseX</code> que durante la ejecuci\u00f3n podr\u00e1 ser de tipo <code>ClaseA</code> o de tipo <code>ClaseB</code> (algo desconocido en tiempo de compilaci\u00f3n). Esto significa que al invocarse el m\u00e9todo <code>m</code> de <code>ClaseX</code> (superclase), se estar\u00e1 en realidad invocando al m\u00e9todo <code>m</code> de <code>ClaseA</code> o de <code>ClaseB</code> (alguna de sus subclases). Por ejemplo:</p> Java<pre><code>// Declaraci\u00f3n de una referencia a un objeto de ClaseX\nClaseX objetoX; // Objeto de tipo X (superclase)\n...\n\n// Zona del programa donde se instancia un objeto de ClaseA (subclase) y se le asigna a la referencia objetoX.\n// La variable obj adquiere la forma de la subclase ClaseA.\nobjetoX = new ClaseA();\n...\n\n// Otra zona del programa.\n// Aqu\u00ed se instancia un objeto de ClaseB (subclase) y se le asigna a la referencia objetoX.\n// La variable obj adquiere la forma de la subclase ClaseB.\nobjetoX = new ClaseB();\n...\n\n// Zona donde se utiliza el m\u00e9todo m sin saber realmente qu\u00e9 subclase se est\u00e1 utilizando.\n// (S\u00f3lo se sabr\u00e1 durante la ejecuci\u00f3n del programa)\n\nobjetoX.m()\n// Llamada al m\u00e9todo m (sin saber si ser\u00e1 el m\u00e9todo m de ClaseA o de ClaseB).\n...\n</code></pre> <p>Imagina que est\u00e1s trabajando con las clases <code>Alumno</code> y <code>Profesor</code> y que en determinada zona del c\u00f3digo podr\u00edas tener objetos, tanto de un tipo como de otro, pero eso s\u00f3lo se sabr\u00e1 seg\u00fan vaya discurriendo la ejecuci\u00f3n del programa. En algunos casos, es posible que un determinado objeto pudiera ser de la clase <code>Alumno</code> y en otros de la clase <code>Profesor</code>, pero en cualquier caso ser\u00e1n objetos de la clase <code>Persona</code>. Eso significa que la llamada a un m\u00e9todo de la clase <code>Persona</code> (por ejemplo <code>devolverContenidoString</code>) en realidad ser\u00e1 en unos casos a un m\u00e9todo (con el mismo nombre) de la clase <code>Alumno</code> y, en otros, a un m\u00e9todo (con el mismo nombre tambi\u00e9n) de la clase <code>Profesor</code>. Esto ser\u00e1 posible hacerlo gracias a la ligadura din\u00e1mica.</p>"},{"location":"ud08/ud0806/#ligadura-dinamica","title":"Ligadura din\u00e1mica","text":"<p>La conexi\u00f3n que tiene lugar durante una llamada a un m\u00e9todo suele ser llamada ligadura (conexi\u00f3n o vinculaci\u00f3n que tiene lugar durante una llamada a un m\u00e9todo para saber qu\u00e9 c\u00f3digo debe ser ejecutado. Puede ser est\u00e1tica o din\u00e1mica, vinculaci\u00f3n o enlace (en ingl\u00e9s binding). Si esta vinculaci\u00f3n se lleva a cabo durante el proceso de compilaci\u00f3n, se le suele llamar ligadura est\u00e1tica, y la vinculaci\u00f3n que se produce en la llamada a un m\u00e9todo con la clase a la que pertenece ese m\u00e9todo se realiza en tiempo de compilaci\u00f3n. Es decir, que antes de generar el c\u00f3digo ejecutable se conoce exactamente el m\u00e9todo (a qu\u00e9 clase pertenece) que ser\u00e1 llamado, tambi\u00e9n conocido como vinculaci\u00f3n temprana. En los lenguajes tradicionales, no orientados a objetos, \u00e9sta es la \u00fanica forma de poder resolver la ligadura (en tiempo de compilaci\u00f3n). Sin embargo, en los lenguajes orientados a objetos existe otra posibilidad: la ligadura din\u00e1mica, y en donde la vinculaci\u00f3n que se produce en la llamada a un m\u00e9todo con la clase a la que pertenece ese m\u00e9todo se realiza en tiempo de ejecuci\u00f3n. Es decir, que al generar el c\u00f3digo ejecutable no se conoce exactamente el m\u00e9todo (a qu\u00e9 clase pertenece) que ser\u00e1 llamado. S\u00f3lo se sabr\u00e1 cuando el programa est\u00e9 en ejecuci\u00f3n. Tambi\u00e9n conocida como vinculaci\u00f3n tard\u00eda, enlace tard\u00edo o late binding.</p> <p>La ligadura din\u00e1mica hace posible que sea el tipo de objeto instanciado (obtenido mediante el constructor finalmente utilizado para crear el objeto) y no el tipo de la referencia (el tipo indicado en la declaraci\u00f3n de la variable que apuntar\u00e1 al objeto) lo que determine qu\u00e9 versi\u00f3n del m\u00e9todo va a ser invocada. El tipo de objeto al que apunta la variable de tipo referencia s\u00f3lo podr\u00e1 ser conocido durante la ejecuci\u00f3n del programa y por eso el polimorfismo necesita la ligadura din\u00e1mica. </p> Ejemplo de polimorfismo anterior <p>En el ejemplo anterior de la clase <code>ClaseX</code> y sus subclases <code>ClaseA</code> y <code>ClaseB</code>, la llamada al m\u00e9todo <code>m</code> s\u00f3lo puede resolverse mediante ligadura din\u00e1mica, pues es imposible saber en tiempo de compilaci\u00f3n si el m\u00e9todo <code>m</code> que debe ser invocado ser\u00e1 el definido en la subclase <code>ClaseA</code> o el definido en la subclase <code>ClaseB</code>:</p> Java<pre><code>//Llamada al m\u00e9todo m (sin saber si ser\u00e1 el m\u00e9todo m de ClaseA o de ClaseB). \nobjetoX.m() // Esta llamada ser\u00e1 resuelta en tiempo de ejecuci\u00f3n (ligadura din\u00e1mica)\n</code></pre> Revisa con cuidado el siguiente ejemplo 2 <p>Imag\u00ednate una clase que represente a un instrumento musical gen\u00e9rico (<code>Instrumento</code>) y dos subclases que representen tipos de instrumentos espec\u00edficos (por ejemplo <code>Flauta</code> y <code>Piano</code>). Todas las clases tendr\u00e1n un m\u00e9todo <code>tocarNota</code>, que ser\u00e1 espec\u00edfico para cada subclase.</p> <p>Haz un peque\u00f1o programa de ejemplo en Java que utilice el polimorfismo (referencias a la superclase que se convierten en instancias espec\u00edficas de subclases) y la ligadura din\u00e1mica (llamadas a un m\u00e9todo que a\u00fan no est\u00e1n resueltas en tiempo de compilaci\u00f3n) con estas clases que representan instrumentos musicales. Puedes implementar el m\u00e9todo <code>tocarNota</code> mediante la escritura de un mensaje en pantalla.</p> <p>SOLUCI\u00d3N La clase Instrumento podr\u00eda tener un \u00fanico m\u00e9todo (<code>tocarNota</code>):</p> Java<pre><code>public abstract class Instrumento {\n\npublic void tocarNota(String nota) {\n    System.out.format(\"Instrumento: tocar nota %s.\\n\", nota);\n}\n}\n</code></pre> <p>En el caso de las clases <code>Piano</code> y <code>Flauta</code> puede ser similar, heredando de <code>Instrumento</code> y redefiniendo el m\u00e9todo <code>tocarNota</code>:</p> Java<pre><code>public class Flauta extends Instrumento {\n\n@Override\npublic void tocarNota(String nota) {\n    System.out.format(\"Flauta: tocar nota %s.\\n\", nota);\n}\n}\n</code></pre> Java<pre><code>public class Piano extends Instrumento {\n\n@Override\npublic void tocarNota(String nota) {\n    System.out.format(\"Piano: tocar nota %s.\\n\", nota);\n}\n}\n</code></pre> <p>Creamos una clase para comprobar su funcionamiento <code>EjemploUso</code>:</p> Java<pre><code>import java.util.Scanner;\n\npublic class EjemploUso {\n\n    public static void main(String[] args) {\n        Scanner teclado = new Scanner(System.in);\n        System.out.print(\"Deseas un Piano o una Flauta (p o f)?: \");\n        char respuesta = teclado.nextLine().toLowerCase().charAt(0);\n\n        Instrumento instrumento1; // Ejemplo de objeto polim\u00f3rfico (podr\u00e1 ser Piano o Flauta)\n        if (respuesta == 'p') {\n            // Ejemplo de objeto polim\u00f3rfico (en este caso va adquirir forma de Piano)\n            instrumento1 = new Piano();\n        } else {\n            // Ejemplo de objeto polim\u00f3rfico (en este caso va adquirir forma de Flauta)\n            instrumento1 = new Flauta();\n        }\n        // Interpretamos una nota con el objeto instrumento1\n        // No sabemos si se ejecutar\u00e1 el m\u00e9todo tocarNota de Piano o de Flauta (depender\u00e1 de la ejecuci\u00f3n)\n        instrumento1.tocarNota(\"do\"); // Ejemplo de ligadura din\u00e1mica (tiempo de ejecuci\u00f3n)\n    }\n}\n</code></pre> <p>paso 1) A la hora de declarar una referencia a un objeto de tipo instrumento, utilizamos la superclase (Instrumento):</p> Java<pre><code>Instrumento instrumento1; // Ejemplo de objeto polim\u00f3rfico (podr\u00e1 ser Piano o Flauta)\n</code></pre> <p>paso 2) Sin embargo, a la hora de instanciar el objeto, utilizamos el constructor de alguna de sus subclases (Piano, Flauta, etc.): Java<pre><code>if (respuesta == 'p') {\n    // Ejemplo de objeto polim\u00f3rfico (en este caso va adquirir forma de Piano)\n    instrumento1 = new Piano();\n} else {\n    // Ejemplo de objeto polim\u00f3rfico (en este caso va adquirir forma de Flauta)\n    instrumento1 = new Flauta();\n}\n</code></pre></p> <p>paso 3) Finalmente, a la hora de invocar el m\u00e9todo <code>tocarNota</code>, no sabremos a qu\u00e9 versi\u00f3n (de qu\u00e9 subclase) de <code>tocarNota</code> se estar\u00e1 llamando, pues depender\u00e1 del tipo de objeto (subclase) que se haya instanciado. Se estar\u00e1 utilizando por tanto la ligadura din\u00e1mica: </p> Java<pre><code>// Interpretamos una nota con el objeto instrumento1\n// No sabemos si se ejecutar\u00e1 el m\u00e9todo tocarNota de Piano o de Flauta (depender\u00e1 de la ejecuci\u00f3n)\ninstrumento1.tocarNota(\"do\"); // Ejemplo de ligadura din\u00e1mica (tiempo de ejecuci\u00f3n)\n</code></pre>"},{"location":"ud08/ud0806/#limitaciones-de-la-ligadura-dinamica","title":"Limitaciones de la ligadura din\u00e1mica","text":"<p>Como has podido comprobar, el polimorfismo se basa en la utilizaci\u00f3n de referencias de un tipo m\u00e1s \"amplio\" (superclases) que los objetos a los que luego realmente van a apuntar (subclases). Ahora bien, existe una importante restricci\u00f3n en el uso de esta capacidad, pues el tipo de referencia limita cu\u00e1les son los m\u00e9todos que se pueden utilizar y los atributos a los que se pueden acceder.</p> <p>Restricci\u00f3n a tener en cuenta</p> <p>No se puede acceder a los miembros espec\u00edficos de una subclase a trav\u00e9s de una referencia a una superclase. S\u00f3lo se pueden utilizar los miembros declarados en la superclase, aunque la definici\u00f3n que finalmente se utilice en su ejecuci\u00f3n sea la de la subclase.</p> Veamos un ejemplo <p>Si dispones de una clase <code>Profesor</code> que es subclase de <code>Persona</code> y declaras una variable como referencia un objeto de tipo <code>Persona</code>, aunque m\u00e1s tarde esa variable haga referencia a un objeto de tipo <code>Profesor</code> (subclase), los miembros a los que podr\u00e1s acceder sin que el compilador produzca un error ser\u00e1n los miembros de <code>Profesor</code> que hayan sido heredados de <code>Persona</code> (superclase). De este modo, se garantiza que los m\u00e9todos que se intenten llamar van a existir cualquiera que sea la subclase de <code>Persona</code> a la que se apunte desde esa referencia.</p> <p>En el ejemplo de las clases <code>Persona</code>, <code>Profesor</code> y <code>Alumno</code>, el polimorfismo nos permitir\u00eda declarar variables de tipo <code>Persona</code> y m\u00e1s tarde hacer con ellas referencia a objetos de tipo <code>Profesor</code> o <code>Alumno</code>, pero no deber\u00edamos intentar acceder con esa variable a m\u00e9todos que sean espec\u00edficos de la clase <code>Profesor</code> o de la clase <code>Alumno</code>, tan solo a m\u00e9todos que sabemos que van a existir seguro en ambos tipos de objetos (m\u00e9todos de la superclase <code>Persona</code>).</p> Revisa con cuidado el siguiente ejemplo <p>Haz un peque\u00f1o programa en Java en el que se declare una variable de tipo <code>Persona</code>, se pidan algunos datos sobre esa persona (nombre, apellidos y si es alumno o si es profesor), y se muestren nuevamente esos datos en pantalla, teniendo en cuenta que esa variable no puede ser instanciada como un objeto de tipo <code>Persona</code> (es una clase abstracta) y que tendr\u00e1s que instanciarla como <code>Alumno</code> o como <code>Profesor</code>. Recuerda que para poder recuperar sus datos necesitar\u00e1s hacer uso de la ligadura din\u00e1mica y que tan solo deber\u00edas acceder a m\u00e9todos que sean de la superclase.</p> <p>SOLUCI\u00d3N Si tuvi\u00e9ramos diferentes variables referencia a objetos de las clases <code>Alumno</code> y <code>Profesor</code> tendr\u00edas algo as\u00ed:</p> Java<pre><code>Alumno objA;\nProfesor objP;\n...\n// Si se dan ciertas condiciones el objeto ser\u00e1 de tipo Alumno y lo tendr\u00e1s en objA\nSystem.out.printf (\"Nombre: %s\\n\", objA.getNombre());\n// Si se dan otras condiciones el objeto ser\u00e1 de tipo Profesor y lo tendr\u00e1s en objP\nSystem.out.printf (\"Nombre: %s\\n\", objP.getNombre());\n</code></pre> <p>Pero si pudieras tratar de una manera m\u00e1s gen\u00e9rica la situaci\u00f3n, podr\u00edas intentar algo as\u00ed:</p> Java<pre><code>Persona obj;\n// Si se dan ciertas condiciones el objeto ser\u00e1 de tipo Alumno y por tanto lo instanciar\u00e1s como tal\nobj = new Alumno (&lt;par\u00e1metros&gt;);\n// Si se otras condiciones el objeto ser\u00e1 de tipo Profesor y por tanto lo instanciar\u00e1s como tal\nobj = new Profesor (&lt;par\u00e1metros&gt;);\n</code></pre> <p>De esta manera la variable obj podr\u00eda contener una referencia a un objeto de la superclase <code>Persona</code> de subclase <code>Alumno</code> o bien de subclase <code>Profesor</code> (polimorfismo).</p> <p>Esto significa que independientemente del tipo de subclase que sea (<code>Alumno</code> o <code>Profesor</code>), podr\u00e1s invocar a m\u00e9todos de la superclase <code>Persona</code> y durante la ejecuci\u00f3n se resolver\u00e1n como m\u00e9todos de alguna de sus subclases:</p> Java<pre><code>//En tiempo de compilaci\u00f3n no se sabr\u00e1 de qu\u00e9 subclase de Persona ser\u00e1 obj.\n//Habr\u00e1 que esperar la ejecuci\u00f3n para que el entorno lo sepa e invoque al m\u00e9todo adecuado.\nSystem.out.format(\"Contenido del objeto: %s\\n\", obj.devolverContenidoString());\n</code></pre> <p>Por \u00faltimo recuerda que debes de proporcionar constructores a las subclases <code>Alumno</code> y <code>Profesor</code> que sean \"compatibles\" con algunos de los constructores de la superclase <code>Persona</code>, pues al llamar a un constructor de una subclase, su formato debe coincidir con el de alg\u00fan constructor de la superclase (como debe suceder en general con cualquier m\u00e9todo que sea invocado utilizando la ligadura din\u00e1mica).</p> <p>Constructor \"compatible\" para <code>Alumno</code>:</p> Java<pre><code>public Alumno(String nombre, String apellidos, LocalDate fechaNacim){\n    super(nombre, apellidos, fechaNacim);\n}\n</code></pre> <p>y el constructor \"compatible\" para <code>Profesor</code>:</p> Java<pre><code>public Profesor(String nombre, String apellidos, LocalDate fechaNacim) {\n    super(nombre, apellidos, fechaNacim);\n}\n</code></pre> <p>Aqu\u00ed tienes el ejemplo completo de la clase <code>EjemploUso</code>:</p> Java<pre><code>import java.time.LocalDate;\nimport java.util.Scanner;\n\npublic class EjemploUso {\n\npublic static void main(String[] args) {\n    Persona obj;\n    Scanner teclado = new Scanner(System.in);\n    System.out.print(\"Deseas crear un Profesor o un Alumno ('p' o 'a')?: \");\n    char respuesta = teclado.nextLine().toLowerCase().charAt(0);\n\n    if (respuesta == 'a') {\n        // Ejemplo de objeto polim\u00f3rfico (en este caso va adquirir forma de Alumno)\n        obj = new Alumno(\"Alumno\", \"Apellidos\", LocalDate.of(1977, 3, 8));\n    } else {\n        // Ejemplo de objeto polim\u00f3rfico (en este caso va adquirir forma de Profesor)\n        obj = new Profesor(\"Profe\", \"Apellidos\", LocalDate.of(1977, 3, 8));\n    }\n    System.out.format(\"Contenido del objeto: %s\\n\", obj.devolverContenidoString());\n}\n}\n</code></pre>"},{"location":"ud08/ud0806/#interfaces-y-polimorfismo","title":"Interfaces y polimorfismo","text":"<p>Es posible tambi\u00e9n llevar a cabo el polimorfismo mediante el uso de interfaces. Un objeto puede tener una referencia cuyo tipo sea una interfaz, pero para que el compilador te lo permita, la clase cuyo constructor se utilice para crear el objeto deber\u00e1 implementar esa interfaz (bien por si misma o bien porque la implemente alguna superclase). Un objeto cuya referencia sea de tipo interfaz s\u00f3lo puede utilizar aquellos m\u00e9todos definidos en la interfaz, es decir, que no podr\u00e1n utilizarse los atributos y m\u00e9todos espec\u00edficos de su clase, tan solo los de la interfaz.</p> <p>Las referencias de tipo interfaz permiten unificar de una manera bastante estricta la forma de utilizarse de objetos que pertenezcan a clases muy diferentes (pero que todas ellas implementan la misma interfaz). De este modo podr\u00edas hacer referencia a diferentes objetos que no tienen ninguna relaci\u00f3n jer\u00e1rquica entre s\u00ed utilizando la misma variable (referencia a la interfaz). Lo \u00fanico que los distintos objetos tendr\u00edan en com\u00fan es que implementan la misma interfaz. </p> <p>A tener en cuenta</p> <p>En este caso s\u00f3lo podr\u00e1s llamar a los m\u00e9todos de la interfaz y no a los espec\u00edficos de las clases.</p> Ejemplo <p>Si ten\u00edas una variable de tipo referencia a la interfaz <code>Arrancable</code>, podr\u00edas instanciar objetos de tipo <code>Coche</code> o <code>Motosierra</code> y asignarlos a esa referencia (teniendo en cuenta que ambas clases no tienen una relaci\u00f3n de herencia). Sin embargo, tan solo podr\u00e1s usar en ambos casos los m\u00e9todos y los atributos de la interfaz <code>Arrancable</code> (por ejemplo <code>arrancar</code>) y no los de <code>Coche</code> o los de <code>Motosierra</code> (s\u00f3lo los gen\u00e9ricos, nunca los espec\u00edficos).</p> <p>En el caso de las clases <code>Persona</code>, <code>Alumno</code> y <code>Profesor</code>, podr\u00edas declarar, por ejemplo, variables del tipo <code>Imprimible</code>:</p> Java<pre><code>Imprimible obj; // Imprimible es una interfaz y no una clase\n</code></pre> <p>Con este tipo de referencia podr\u00edas luego apuntar a objetos tanto de tipo <code>Profesor</code> como de tipo <code>Alumno</code>, pues ambos implementan la interfaz <code>Imprimible</code>:</p> Java<pre><code>// En algunas circunstancias podr\u00eda suceder esto:\nobj = new Alumno (nombre, apellidos, fecha, grupo, nota); // Polimorfismo con interfaces\n...\n\n// En otras circunstancias podr\u00eda suceder esto:\nobj = new Profesor (nombre, apellidos, fecha, especialidad, salario); // Polimorfismo con interfaces\n...\n</code></pre> <p>Y m\u00e1s adelante hacer uso de la ligadura din\u00e1mica:</p> Java<pre><code>// Llamadas s\u00f3lo a m\u00e9todos de la interfaz\nString contenido;\ncontenido = obj.devolverContenidoString(); // Ligadura din\u00e1mica con interfaces\n</code></pre>"},{"location":"ud08/ud0806/#conversion-de-objetos","title":"Conversi\u00f3n de objetos","text":"<p>Como ya has visto, en principio no se puede acceder a los miembros espec\u00edficos de una subclase a trav\u00e9s de una referencia a una superclase. Si deseas tener acceso a todos los m\u00e9todos y atributos espec\u00edficos del objeto subclase tendr\u00e1s que realizar una conversi\u00f3n expl\u00edcita (casting) que convierta la referencia m\u00e1s general (superclase) en la del tipo espec\u00edfico del objeto (subclase).</p> <p>Para que puedas realizar conversiones entre distintas clases es obligatorio que exista una relaci\u00f3n de herencia entre ellas (una debe ser clase derivada de la otra). Se realizar\u00e1 una conversi\u00f3n impl\u00edcita o autom\u00e1tica de subclase a superclase siempre que sea necesario, pues un objeto de tipo subclase siempre contendr\u00e1 toda la informaci\u00f3n necesaria para ser considerado un objeto de la superclase.</p> <p>Ahora bien, la conversi\u00f3n en sentido contrario (de superclase a subclase) debe hacerse de forma expl\u00edcita y seg\u00fan el caso podr\u00eda dar lugar a errores por falta de informaci\u00f3n (atributos) o de m\u00e9todos. En tales casos se produce una excepci\u00f3n de tipo <code>ClassCastException</code>. </p> <p>Por ejemplo, imagina que tienes una clase <code>Animal</code> y una clase <code>Marmota</code>, subclase de <code>Animal</code>:</p> Java<pre><code>class Animal {\n    public String nombre;\n}\n\nclass Marmota extends Animal {\n    public double peso;\n}\n</code></pre> <p>A continuaci\u00f3n declaras una variable referencia a la clase <code>Animal</code> (superclase) pero sin embargo le asignas una referencia a un objeto de la clase <code>Marmota</code> (subclase) haciendo uso del polimorfismo:</p> Java<pre><code>Animal obj; // Referencia a objetos de la clase Animal\nobj = new Marmota(); // Referencia a objetos clase Animal, pero apunta realmente a objeto clase Marmota (polimorfismo)\n</code></pre> <p>El objeto que acabas de crear como instancia de la clase <code>Marmota</code> (subclase de <code>Animal</code>) contiene m\u00e1s informaci\u00f3n que la que la referencia <code>obj</code> te permite en principio acceder sin que el compilador genere un error (pues es de clase <code>Animal</code>). En concreto los objetos de la clase <code>Marmota</code> disponen de <code>nombre</code> y <code>peso</code>, mientras que los objetos de la clase <code>Animal</code> s\u00f3lo de <code>nombre</code>. Para acceder a esa informaci\u00f3n adicional de la clase especializada (<code>peso</code>) tendr\u00e1s que realizar una conversi\u00f3n expl\u00edcita (casting):</p> Java<pre><code>// Casting del tipo Animal al tipo Marmota (funcionar\u00e1 bien porque el objeto es realmente del tipo B)\nSystem.out.printf (\"obj.peso=%f\\n\", ((Marmota) obj).peso);\n</code></pre> <p>Sin embargo si se hubiera tratado de una instancia de la clase <code>Animal</code> y hubieras intentado acceder al miembro <code>peso</code>, se habr\u00eda producido una excepci\u00f3n de tipo <code>ClassCastException</code>:</p> Java<pre><code>Animal obj; // Referencia a objetos de la clase Animal\nobj = new Animal (); // Referencia a objetos de la clase Animal, y apunta realmente a un objeto de la clase Animal\n\n// Casting del tipo Animal al tipo Besugo (puede dar problemas porque el objeto es realmente del tipo Animal):\n// Funciona (la clase Animal tiene nombre)\nSystem.out.printf (\"obj.nombre=%s\\n\", ((Marmota) obj).nombre);\n\n// \u00a1Error en ejecuci\u00f3n! (la clase Animal no tiene peso). Producir\u00e1 una ClassCastException.\nSystem.out.printf (\"obj.peso=%f\\n\", ((Marmota) obj).peso);\n</code></pre>"},{"location":"ud08/ud08ac/","title":"Actividades","text":""},{"location":"ud08/ud08ac/#ejercicios-herencia","title":"Ejercicios Herencia","text":""},{"location":"ud08/ud08ac/#ejercicio01","title":"Ejercicio01","text":"<p>paquete: <code>_01_centroestudios</code>.</p> <p>Dise\u00f1ar una jerarqu\u00eda de clases para modelizar las aulas de un centro de estudios.</p> <p>De un <code>Aula</code> se conoce el <code>c\u00f3digo</code> (num\u00e9rico), la <code>longitud</code> y la <code>anchura</code>. Se desea un m\u00e9todo que devuelva la capacidad del aula sabiendo que esta se calcula a partir de la superficie a raz\u00f3n de 1 alumnos por cada 1.4 metros cuadrados de superficie.</p> <p>Adem\u00e1s de las aulas, digamos normales, existen aulas de inform\u00e1tica y aulas de m\u00fasica. En las aulas de m\u00fasica se necesita conocer si tienen o no piano. De las aulas de inform\u00e1tica se conoce el n\u00famero de ordenadores y su capacidad no se calcula en funci\u00f3n de la superficie, sino a raz\u00f3n de dos alumnos por ordenador.</p> <p>Implementar el m\u00e9todo <code>toString</code> de cada una de las clases dise\u00f1adas para que devuelva:</p> <ul> <li> <p>En las aulas normales, el <code>c\u00f3digo</code> y la <code>superficie</code> y la <code>capacidad</code>.</p> </li> <li> <p>En las aulas de m\u00fasica e inform\u00e1tica el texto ir\u00e1 precedido por \"Aula de m\u00fasica\" o \"Aula de inform\u00e1tica\", seg\u00fan corresponda.</p> </li> </ul> <p>Crea tambi\u00e9n una clase <code>TestAula</code> para probar las clases generadas.</p>"},{"location":"ud08/ud08ac/#ejercicio02","title":"Ejercicio02","text":"<p>paquete: <code>_02_videojuegos</code></p> <p>Un sal\u00f3n de VideoJuegos dispone de ordenadores en los que los clientes pueden jugar. Adem\u00e1s de jugar en el establecimiento, la empresa alquila y vende juegos.</p> <p>a) Dise\u00f1ar la clase <code>Juego</code> siguiendo las siguientes especificaciones: </p> <ul> <li>Atributos protected: <code>titulo</code> (String), <code>fabricante</code> (String), <code>a\u00f1o</code> (int).</li> <li>Constructor <code>public Juego(String t, String f, int a)</code>.</li> <li>Consultores de todos los atributos.</li> <li><code>public String toString()</code>, que devuelve un String con los datos del Juego.</li> <li><code>public boolean equals(Object o)</code>: Dos juegos son iguales si tienen el mismo t\u00edtulo, fabricante y a\u00f1o.</li> <li><code>public int compareTo(Object o)</code>: Un juego es menor que otro si su t\u00edtulo es menor. A igual t\u00edtulo, si su fabricante es menor. A igual t\u00edtulo y fabricante, si su a\u00f1o es menor.</li> </ul> <p>b) Dise\u00f1ar las clases <code>JuegoEnAlquiler</code> y <code>JuegoEnVenta</code> (y otras si se considera oportuno), sabiendo que, adem\u00e1s de los atributos descritos anteriormente, tienen.</p> <ul> <li> <p><code>precio</code>.</p> </li> <li> <p><code>n\u00ba de copias disponibles</code>.</p> </li> <li> <p><code>JuegoEnAlquiler</code>.</p> <ul> <li> <p>tiene un atributo que indica el n\u00famero de d\u00edas que se alquila. </p> </li> <li> <p>constructor que recibe todos sus datos.</p> </li> <li> <p>tiene un m\u00e9todo <code>alquilar</code> que decrementa el n\u00famero de copias disponibles.</p> </li> <li>tiene un m\u00e9todo <code>devolver</code> que incrementa el n\u00famero de copias disponibles.</li> <li><code>toString()</code> devuelve todos los datos del <code>JuegoEnAlquiler</code>.</li> </ul> </li> <li> <p><code>JuegoEnVenta</code></p> <ul> <li>constructor que recibe todos sus datos.</li> <li>tiene un m\u00e9todo <code>vender</code>, que decrementa el n\u00famero de copias disponibles.</li> <li><code>toString()</code> devuelve todos los datos del <code>JuegoEnVenta</code>.</li> </ul> </li> </ul> <p>c) Crea tambi\u00e9n una clase <code>TestJuego</code> para probar objetos de las clases <code>JuegoEnAlquiler</code> y <code>JuegoEnVenta</code>.</p>"},{"location":"ud08/ud08ac/#ejercicio03","title":"Ejercicio03","text":"<p>paquete: <code>_03_fnmt</code></p> <p>La Fabrica Nacional de Moneda y Timbre quiere almacenar cierta informaci\u00f3n t\u00e9cnica del dinero (billetes y monedas) que emite. En concreto, le interesa:</p> <ul> <li>Valor: Valor de la moneda o billete, en euros. (<code>double</code>).</li> <li>A\u00f1o de emisi\u00f3n: A\u00f1o en que fue emitida la moneda o billete. (<code>int</code>).</li> <li>De las monedas, <ul> <li>Di\u00e1metro: Di\u00e1metro de la moneda, en mil\u00edmetros. (<code>double</code>).</li> <li>Peso: Peso de la moneda, en gramos (<code>double</code>).</li> </ul> </li> <li>De los billetes,<ul> <li>Altura del billete, en mm (<code>double</code>).</li> <li>Anchura del billete, en mm (<code>double</code>).</li> </ul> </li> </ul> <p>a) Dise\u00f1ar la clase abstracta <code>Dinero</code> y sus subclases <code>Moneda</code> y <code>Billete</code>, desarrollando:</p> <ul> <li>Constructores que reciban los datos necesarios para inicializar los atributos de la clase correspondiente.</li> <li><code>equals</code>: Dos monedas o billetes son iguales si tienen el mismo a\u00f1o de emisi\u00f3n y valor.</li> <li><code>compareTo</code>: Es menor (mayor) el de menor (mayor) a\u00f1o, a igual a\u00f1o es menor (mayor) el de menor (mayor) valor.</li> <li><code>toString</code>: Que muestre todos los datos del billete o moneda. Los billetes ir\u00e1n precedidos por el texto \"BILLETE\" y las monedas por el texto \"MONEDA\".</li> </ul> <p>b) Dise\u00f1ar la clase <code>TestDinero</code> para probar las clases desarrolladas. Crear objetos de las clases <code>Moneda</code> y <code>Billete</code> y mostrarlos por pantalla.</p>"},{"location":"ud08/ud08ac/#ejercicio04","title":"Ejercicio04","text":"<p>paquete: <code>_04_centrocomercial</code></p> <p>Un centro comercial quiere mostrar cierta informaci\u00f3n sobre los televisores que vende. Los televisores pueden ser de dos tipos: de tubo o LCD. En concreto, de cada televisor le interesa mostrar:</p> <ul> <li>Marca (<code>String</code>).</li> <li>Modelo (<code>String</code>).</li> <li>Precio en euros.</li> <li>Pulgadas de la pantalla (<code>double</code>).</li> <li>Resoluci\u00f3n: La resoluci\u00f3n se mide de forma distinta en los televisores de tubo que en los televisores LCD.</li> <li>En los TV de tubo se mide en lineas.</li> <li>En los TV LCD se mide pixels horizontales x pixels verticales.</li> </ul> <p>a) Dise\u00f1ar la clase <code>Televisor</code> con los atributos y m\u00e9todos comunes a los dos tipos de televisores y sus subclases <code>TVTubo</code> y <code>TVLCD</code> con los atributos y m\u00e9todos que sea necesario:</p> <ul> <li>Constructor de cada clase que permita inicializar todos los datos de la clase.</li> <li><code>equals</code>: Dos televisiones son iguales si son de la misma marca y modelo.</li> <li><code>compareTo</code>: Se considera menor (mayor) la de menor (mayor) marca. A igual marca, menor (mayor) la de menor (mayor) modelo.</li> <li><code>public String resulucion()</code>: Devuelve un texto con la resoluci\u00f3n del televisor, como por ejemplo \"420 lineas\" o \"800 x 600 pixels\" dependiendo del tipo de televisor.</li> <li><code>public String toString()</code>: Devuelve un texto con la marca, modelo, precio, pulgadas y resoluci\u00f3n.</li> </ul> <p>b) Dise\u00f1ar la clase <code>TestTV</code> para probar las clases dise\u00f1adas. Crear algunos objetos de las clases <code>TVTubo</code> y <code>TVLCD</code> y mostrarlos por pantalla.</p>"},{"location":"ud08/ud08ac/#ejercicio05","title":"Ejercicio05","text":"<p>paquete: <code>_05_preguntas</code></p> <p>De cada pareja de afirmaciones indica cu\u00e1l es la verdadera:</p> <p>a) Se dice que instanciamos una clase cuando creamos objetos de dicha clase.    b) Se dice que instanciamos una clase cuando creamos una subclase de dicha clase.</p> <p>c) Si una clase es abstracta no se puede instanciar.    d) Si una clase es abstracta no se puede heredar de ella.</p> <p>e) Una clase abstracta tiene que tener m\u00e9todos abstractos.  f) Una clase puede ser abstracta y no tener m\u00e9todos abstractos.</p> <p>g) Si una clase tiene m\u00e9todos abstractos tiene que ser abstracta.   h) Una clase puede tener m\u00e9todos abstractos y no ser abstracta.</p> <p>i) Si una clase es abstracta sus subclases no pueden ser abstractas.    j) Una clase abstracta puede tener subclases que tambi\u00e9n sean abstractas.</p> <p>k) Si un m\u00e9todo es abstracto en una clase, tiene que ser no abstracto en la subclase, o bien, la subclase tiene que ser tambi\u00e9n abstracta.  l) Si un m\u00e9todo es abstracto en una clase, no puede ser abstracto en las subclases.</p> <p>m) Si un m\u00e9todo se define final se tiene que reescribir en las subclases.   n) Si un m\u00e9todo se define final no se puede reescribir en las subclases.</p> <p>o) Una clase puede tener un m\u00e9todo final y no ser una clase final.  p) Si una clase tiene un m\u00e9todo final tiene que ser una clase final.</p> <p>q) Si una clase se define final no se pueden definir subclases de ella. r) Si una clase se define final no se puede instanciar.</p> <p>s) Un m\u00e9todo definido final y abstract resultar\u00eda in\u00fatil, puesto que nunca se podr\u00eda implementar en las subclases.  t) Un m\u00e9todo definido final y abstract podr\u00eda resultar \u00fatil.</p> <p>u) Una clase definida final y abstract resultar\u00eda in\u00fatil, puesto que no se podr\u00eda instanciar ni heredar de ella.    v) Una clase definida final y abstract podr\u00eda resultar \u00fatil.</p>"},{"location":"ud08/ud08ac/#ejercicio06","title":"Ejercicio06","text":"<p>paquete: <code>_06_preguntas2</code></p> <p>Dada las siguientes definiciones de clases:</p> Java<pre><code>public class Persona {\n    private String nombre;\n    private int edad;\n\n    public Persona (){\n        this.nombre = \"\";\n        this.edad = 0;\n    }\n\n    public Persona(String n, int e){\n        this.nombre = n;\n        this.edad = e;\n    }\n\n    public String toString(){\n        return \"Nombre: \" + nombre + \"Edad \" + edad;\n    }\n\n    public final String getNombre (){\n        return nombre;\n    }\n\n    public final int getEdad(){\n        return edad;\n    }\n}\n</code></pre> Java<pre><code>class Estudiante extends Persona {\n    private double creditos;\n\n    public Estudiante(String n, int e, double c){\n        super(n,e);\n        this.creditos = c;\n    }\n\n    public String toString(){\n        return super.toString() + \"\\nCreditos: \"+ creditos;\n    }\n}\n</code></pre> Java<pre><code>class Empleado extends Persona {\n    private double salario;\n\n    public Empleado(String n, int e, double s){\n        super(n,e);\n        this.salario = s;\n    }\n\n    public String toString(){\n        return \"Nombre: \"+ this.nombre +\n        \"\\nSalario: \"+ this.salario;\n    }\n}\n</code></pre> Java<pre><code>class Test{\n    public static void main(String[] args) {\n        Estudiante e = new Estudiante(\"pepe\",18,100);\n        System.out.println(e.toString());\n    }\n}\n</code></pre> <p>Responde a las siguientes cuestiones justificando las respuestas. </p> <p>\u200b   a) \u00bfEs necesario el uso de <code>this</code> en el constructor de la clase <code>Estudiante</code>?</p> <p>\u200b   b) \u00bfEs necesario el uso de <code>super</code> en el m\u00e9todo <code>toString</code> de la clase <code>Estudiante</code>?</p> <p>\u200b   c) Si quit\u00e1semos el constructor de la clase <code>Estudiante</code> \u00bfdar\u00eda un error de compilaci\u00f3n?</p> <p>\u200b   d) En el m\u00e9todo <code>toString</code> de la clase <code>Empleado</code> \u00bfpor qu\u00e9 es incorrecto el acceso que se hace al atributo <code>nombre</code>? \u00bfC\u00f3mo se tendr\u00eda que definir <code>nombre</code> en la clase <code>Persona</code> para evitar el error?</p> <p>\u200b   e) \u00bfQu\u00e9 consecuencia tiene que algunos m\u00e9todos de la clase <code>Persona</code> se hayan definido <code>final</code>?</p> <p>\u200b   f) Si el m\u00e9todo <code>toString</code> no se hubiera definido en ninguna de las tres clases \u00bfdar\u00eda error el <code>sout</code> del m\u00e9todo <code>main</code>?</p>"},{"location":"ud08/ud08ac/#ejercicios-polimorfismo","title":"Ejercicios Polimorfismo","text":""},{"location":"ud08/ud08ac/#ejercicio07","title":"Ejercicio07","text":"<p>paquete: <code>_07_obra</code></p> <p>Dada la siguiente jerarqu\u00eda de clases:</p> Java<pre><code>public interface Montador{\n    void montar(String x);\n    void desmontar(String x);\n}\n\npublic class Obrero{\n    public Obrero(){System.out.println(\"Se crea Obrero\");}\n    public void saludar(){System.out.println(\"Hola, soy Obrero\");}\n    ...\n}\n\npublic class Carpintero extends Obrero implements Montador {\n    public Carpintero(){System.out.println(\"Se crea Carpintero\");}\n    public void montar(String x) {System.out.println(\"Montando \" + x);}\n    public void desmontar(String x) {System.out.println(\"Desmontando \" + x);}\n    public void clavar() {...}\n}\n\npublic class Alba\u00f1il extends Obrero {\n    public Alba\u00f1il() {\n        super();\n        System.out.println(\"Se crea Alba\u00f1il\");\n    }\n    public void levantarMuro(){ \n        System.out.println(\"Levantando muro \u2026\");\n    }\n}\n</code></pre> <p>a) Indicar qu\u00e9 l\u00edneas del siguiente fragmento de programa producir\u00e1n errores de compilaci\u00f3n,</p> Java<pre><code>public static void main(String[] args){\n    Montador m1 = new Carpintero();\n    Montador m2 = new Alba\u00f1il();\n    Obrero o1 = new Carpintero();\n    Obrero o2 = new Alba\u00f1il();\n    o1.montar(\"Mesa\");\n    o2.levantarMuro();\n    m1.saludar();\n    m1.montar(\"Silla\");\n    ((Alba\u00f1il)o2).levantarMuro();\n    ((Alba\u00f1il)o1).levantarMuro();\n}\n</code></pre> <p>b) Una vez eliminadas las l\u00edneas con error, indicar cu\u00e1l ser\u00eda la salida por pantalla del programa.</p> <p>c) \u00bfSer\u00eda correcta la instrucci\u00f3n siguiente?\"</p> Java<pre><code>Alba\u00f1il a = new Alba\u00f1il();\nSystem.out.println(a.toString());\n</code></pre>"},{"location":"ud08/ud08ac/#ejercicio08","title":"Ejercicio08","text":"<p>paquete: <code>_08_preguntas3</code></p> <p>Las clases siguientes implementan una jerarqu\u00eda de herencia</p> Java<pre><code>class Base {\n    String metodo1() {return \"Base.metodo1()\";}\n    String metodo2(String s) {return \"Base.metodo1(\" + s + \")\";}\n}\n\npublic interface TipoI{\n    String metodoIn2(String s);\n    String metodoIn3();\n}\n\nclass Derivada extends Base implements TipoI{\n    public String metodoIn2(String s) {return \"Derivada.metodoIn2()\";}\n    public String metodoIn3() {return \"Derivada.metodoIn3()\";}\n    String metodo1() {return \"Derivada.metodo1()\";}\n}\n\nclass Derivada2 extends Derivada{\n    String metodo2 (String s) {return \"Derivada2.metodo2(\" + s + \")\";}\n    String metodo4() {return \"Derivada2.metodo4()\";}\n}\n</code></pre> <p>Sea la clase <code>CuestionHerencia</code> que usa las anteriores:</p> Java<pre><code>public class CuestionHerencia{\n    public static void main (String a[]){\n        String tmp;\n        Derivada derivada;\n        Derivada2 derivada2;\n        Base base;\n\n        derivada2 = new Derivada2(); \n        base = derivada2;\n        tmp = derivada2.metodo1(); \n        System.out.println(\"1) \"+tmp);\n        tmp = derivada2.metodoIn2(\"EDA!!\"); \n        System.out.println(\"2) \"+tmp);\n        tmp = base.metodo1();\n        System.out.println(\"3) \"+tmp);\n        tmp = base.metodo2(\"EDA!!\"); \n        System.out.println(\"4) \"+tmp);\n        tmp = derivada2.metodoIn3();\n        System.out.println(\"5) \"+tmp);\n        tmp = derivada2.metodo4();\n        System.out.println(\"6) \"+tmp);\n        tmp = base.metodo3();\n        System.out.println(\"7) \"+tmp);\n        derivada = new Derivada();\n        derivada2 = new Derivada2();\n        base = new Base();\n        Distinta ref = new Distinta();\n        tmp = ref.prueba(derivada2); \n        System.out.println(\"8) \"+tmp);\n        tmp = ref.prueba(derivada); \n        System.out.println(\"9) \"+tmp);\n        tmp = ref.prueba(base); \n        System.out.println(\"10) \"+tmp); \n    }\n}\n</code></pre> <p>\u200b   a) Se\u00f1alar los errores existentes.</p> <p>\u200b   b) Una vez corregido el programa, escribir la salida por pantalla resultado de su ejecuci\u00f3n.</p>"},{"location":"ud08/ud08ac/#ejercicio09","title":"Ejercicio09","text":"<p>paquete: <code>_09_supermercado</code></p> <p>Pr\u00e1ctica con interfaces y polimorfismo.</p> <p>Supermercado. Creaci\u00f3n de Interfaces </p> <p>Sup\u00f3n que debe crear distintas clases Java para describir los productos que vende un supermercado. </p> <p>Para unificar el c\u00f3digo de los distintos programadores del equipo debes crear las siguientes Interfaces Java para describir algunas caracter\u00edsticas de los productos:</p> <ul> <li>Interfaz <code>EsLiquido</code> : Esta interfaz indica que los objetos creados a partir de la clase ser\u00e1n l\u00edquidos, y tendr\u00e1 los siguientes m\u00e9todos: </li> </ul> Java<pre><code>public void setVolumen(double v); \npublic double getVolumen(); \npublic void setTipoEnvase(String env); \npublic String getTipoEnvase();\n</code></pre> <ul> <li>Interfaz <code>EsAlimento</code> : Esta interfaz indica que los objetos creados a partir de la clase ser\u00e1n alimentos, y tendr\u00e1 los siguientes m\u00e9todos: </li> </ul> Java<pre><code>public void setCaducidad(LocalDate fc); \npublic LocalDate getCaducidad(); \npublic int getCalorias();\n</code></pre> <ul> <li>Interfaz <code>ConDescuento</code> : Esta interfaz indicar\u00e1 que el producto tiene descuento e incluir\u00e1 los siguientes m\u00e9todos: </li> </ul> Java<pre><code>public void setDescuento(double des); \npublic double getDescuento(); \npublic double getPrecioDescuento();\n</code></pre> <p>Creaci\u00f3n de clases de productos. Se pide que programes las siguientes clases de productos, implementando las interfaces que sean necesarias.</p> <p>a) Clase <code>Detergente</code> : Define una botella de detergente (debes tener en cuenta que este producto puede tener descuento).</p> <p>Sus propiedades principales ser\u00e1n: marca (String) y precio (double).</p> <p>Incluye otras propiedades seg\u00fan sea necesario a la hora de implementar las interfaces. </p> <ul> <li>Constructor: programa un constructor que reciba como par\u00e1metros una marca y un precio. </li> <li>M\u00e9todos set y get: programa m\u00e9todos set y get para la marca y el precio.</li> <li>M\u00e9todos de las interfaces: implementa los m\u00e9todos de las interfaces. </li> <li>M\u00e9todo <code>toString</code>: programa el m\u00e9todo toString con todas las caracter\u00edsticas del producto. </li> </ul> <p>b) Clase <code>Cereales</code> : Define el producto caja de cereales (este producto no tiene descuentos).</p> <p>Las propiedades del producto ser\u00e1n <code>marca</code>, <code>precio</code> y <code>tipo de cereal</code> (String).</p> <ul> <li>Programa un constructor que reciba como par\u00e1metros las tres propiedades anteriores. </li> <li>Programa los m\u00e9todos set y get para dichas propiedades. </li> <li>Implementa los m\u00e9todos de las interfaces implementadas (si es necesario a\u00f1ade m\u00e1s propiedades a la clase).</li> </ul> <p>A tener en cuenta</p> <p>Para el c\u00e1lculo del m\u00e9todo <code>getCalorias()</code> las calor\u00edas ser\u00e1n las siguientes: - 5 si el cereal es espelta,  - 8 si es ma\u00edz,  - 12 si es trigo, y  - 15 en los dem\u00e1s casos.</p> <ul> <li>Programa el m\u00e9todo <code>toString</code> para devolver una cadena con todas las caracter\u00edsticas del producto.</li> </ul> <p>c) Clase <code>Vino</code> : Esta clase describir\u00e1 el producto botella de vino (este producto es susceptible de tener descuento).</p> <p>El producto tendr\u00e1 como propiedades la marca, el tipo de vino, los grados de alcohol y el precio.</p> <ul> <li>Programa al igual que los productos anteriores un constructor con estas cuatro propiedades como par\u00e1metros.</li> <li>Programa tambi\u00e9n los m\u00e9todos set, get, toString y los m\u00e9todos de las interfaces. A\u00f1ada nuevas propiedades si es necesario. </li> </ul> <p>A tener en cuenta</p> <p>Para el c\u00e1lculo del m\u00e9todo <code>getCalorias()</code> las calor\u00edas se calcular\u00e1n multiplicando por 10 la graduaci\u00f3n alcoh\u00f3lica.</p> <p>d ) Programa de <code>TestSupermercado</code>: Realiza un programa de prueba donde crees varios productos de cada clase. Haz un ejemplo de polimorfismo creando un ArrayList de productos alimenticios y calculando la suma total de sus calor\u00edas.</p>"},{"location":"ud08/ud08ac/#ejercicio10","title":"Ejercicio10","text":"<p>paquete: <code>_10_facultad</code></p> <p>Realizar una aplicaci\u00f3n para la gesti\u00f3n de la informaci\u00f3n de las personas vinculadas a una Facultad, que se pueden clasificar en tres tipos: estudiantes, profesores y personal de servicio.</p> <p>A continuaci\u00f3n, se detalla qu\u00e9 tipo de informaci\u00f3n debe gestionar esta aplicaci\u00f3n:</p> <ul> <li>Por cada <code>Persona</code>, se debe conocer, al menos, su nombre y apellidos, su n\u00famero de identificaci\u00f3n y su estado civil.</li> <li>Con respecto a los <code>Empleados</code>, sean del tipo que sean, hay que saber su a\u00f1o de incorporaci\u00f3n a la facultad y qu\u00e9 n\u00famero de despacho tienen asignado.</li> <li>En cuanto a los <code>Estudiantes</code>, se requiere almacenar el curso en el que est\u00e1n matriculados.</li> <li>Por lo que se refiere a los <code>Profesores</code>, es necesario gestionar a qu\u00e9 departamento pertenecen (lenguajes, matem\u00e1ticas, arquitectura, ...).</li> <li>Sobre el <code>Personal de servicio</code>, hay que conocer a qu\u00e9 secci\u00f3n est\u00e1n asignados (biblioteca, decanato, secretar\u00eda, ...).</li> </ul> <p>El ejercicio consiste, en primer lugar, en definir la jerarqu\u00eda de clases de esta aplicaci\u00f3n. A continuaci\u00f3n, debe programar las clases definidas en las que, adem\u00e1s de los constructores, hay que desarrollar los m\u00e9todos correspondientes a las siguientes acciones:</p> <ul> <li>Cambio del estado civil de una persona.</li> <li>Reasignaci\u00f3n de despacho a un empleado.</li> <li>Matriculaci\u00f3n de un estudiante en un nuevo curso.</li> <li>Cambio de departamento de un profesor.</li> <li>Traslado de secci\u00f3n de un empleado del personal de servicio.</li> <li>Imprimir toda la informaci\u00f3n de cada tipo de individuo.</li> </ul> <p>En el m\u00e9todo <code>main</code> crear un array de personas. Crear diferentes instancias de las subclases e insertarlas en el array. Probar los diferentes m\u00e9todos desarrollados.</p>"},{"location":"ud08/ud08ac/#ejercicio11","title":"Ejercicio11","text":"<p>paquete: <code>_11_trabajadores</code></p> <p>Crea una clase <code>Empleado</code> y una subclase <code>Encargado</code>. Los encargados reciben un 10% m\u00e1s de sueldo base que un empleado normal. Implementa dichas clases en el paquete objetos y sobrescribe el m\u00e9todo <code>getSueldo()</code> para ambas clases.</p>"},{"location":"ud08/ud08ac/#ejercicio12","title":"Ejercicio12","text":"<p>paquete: <code>_12_juego</code></p> <p>a) Crear la clase <code>Dado</code>, la cual desciende de la clase <code>Sorteo</code>. La clase <code>Dado</code>, en la llamada <code>lanzar()</code> mostrar\u00e1 un n\u00famero aleatorio del 1 al 6. </p> <p>b) Crear la clase <code>Moneda</code>, la cual desciende de la clase <code>Sorteo</code>. Esta clase en la llamada al m\u00e9todo <code>lanzar()</code> mostrar\u00e1 las palabras cara o cruz. </p> <p>c) Realizar una clase con un m\u00e9todo <code>main</code> que compruebe todo lo realizado.</p>"},{"location":"ud08/ud08ac/#ejercicio13","title":"Ejercicio13","text":"<p>paquete: <code>_13_alimento</code></p> <p>a) Realiza una clase <code>Huevo</code> con un atributo <code>tama\u00f1o</code> (<code>S</code>, <code>M</code>, <code>L</code>, <code>XL</code>) con el m\u00e9todo <code>toString</code>. </p> <p>b) La clase <code>Huevo</code> est\u00e1 compuesta por dos clases internas, una <code>Clara</code> y otra <code>Yema</code>. Ambas clases tienen un atributo <code>color</code> y el m\u00e9todo <code>toString</code>. </p> <p>c) Realiza un m\u00e9todo <code>main</code> en el que se cree un objeto de tipo <code>Huevo</code>, <code>Clara</code> y <code>Yema</code>, se le asigne valor a sus atributos y se muestren los valores.</p>"},{"location":"ud08/ud08ac/#ejercicios-lionel","title":"Ejercicios Lionel","text":""},{"location":"ud08/ud08ac/#ejercicio14-astros","title":"Ejercicio14 - Astros","text":"<p>paquete: <code>_14_astros</code></p> <p>Define una jerarqu\u00eda de clases que permita almacenar datos sobre los planetas y sat\u00e9lites (lunas) que forman parte del sistema solar.</p> <p>Algunos atributos que necesitaremos almacenar son: </p> <ul> <li> <p>Nombre.</p> </li> <li> <p>Masa del cuerpo.</p> </li> <li>Di\u00e1metro medio.</li> <li>Per\u00edodo de rotaci\u00f3n sobre su propio eje.</li> <li>Per\u00edodo de traslaci\u00f3n alrededor del cuerpo que orbitan.</li> <li>Distancia media a ese cuerpo.</li> <li>etc.</li> </ul> <p>Define las clases necesarias conteniendo: </p> <ul> <li>Constructores. </li> <li>M\u00e9todos para recuperar y almacenas atributos.</li> <li>M\u00e9todo para mostrar la informaci\u00f3n del objeto. </li> </ul> <p>Define un m\u00e9todo, que dado un objeto del sistema solar (planeta o sat\u00e9lite), imprima toda la informaci\u00f3n que se dispone sobre el mismo (adem\u00e1s de su lista de sat\u00e9lites si los tuviera).</p> <p>El diagrama UML ser\u00eda:</p> <p></p> <p>Posible soluci\u00f3n</p> <p>Una posible soluci\u00f3n ser\u00eda crear una lista de objetos, insertar los planetas y sat\u00e9lites (directamente mediante c\u00f3digo o solicit\u00e1ndolos por pantalla) y luego mostrar un peque\u00f1o men\u00fa que permita al usuario imprimir la informaci\u00f3n del astro que elija.</p>"},{"location":"ud08/ud08ac/#ejercicio15-mascotas","title":"Ejercicio15 - Mascotas","text":"<p>paquete: <code>_15_mascotas</code></p> <p>Implementa una clase llamada <code>Inventario</code> que utilizaremos para almacenar referencias a todos los animales existentes en una tienda de mascotas. </p> <p>Esta clase debe cumplir con los siguientes requisitos: </p> <ul> <li>En la tienda existir\u00e1n 4 tipos de animales: perros, gatos, loros y canarios. </li> <li>Los animales deben almacenarse en un <code>ArrayList</code> privado dentro de la clase <code>Inventario</code>. </li> <li>La clase debe permitir realizar las siguientes acciones:<ul> <li>Mostrar la lista de animales (solo tipo y nombre, 1 l\u00ednea por animal).</li> <li>Mostrar todos los datos de un animal concreto.</li> <li>Mostrar todos los datos de todos los animales.</li> <li>Insertar animales en el inventario. </li> <li>Eliminar animales del inventario. </li> <li>Vaciar el inventario. </li> </ul> </li> </ul> <p>Implementa las dem\u00e1s clases necesarias para usar la clase <code>Inventario</code>.</p> <p>El diagrama UML ser\u00eda:</p> <p></p>"},{"location":"ud08/ud08ac/#ejercicio16-banco","title":"Ejercicio16 - Banco","text":"<p>paquete: <code>_16_banco</code></p> <p>Vamos a hacer una aplicaci\u00f3n que simule el funcionamiento de un banco.</p> <p>Crea una clase <code>CuentaBancaria</code> con los atributos: iban y saldo. Implementa m\u00e9todos para:</p> <ul> <li>Consultar los atributos. </li> <li>Ingresar dinero.</li> <li>Retirar dinero.</li> <li>Traspasar dinero de una cuenta a otra.</li> </ul> <p>Para los tres \u00faltimos m\u00e9todos puede utilizarse internamente un m\u00e9todo privado m\u00e1s general llamado <code>a\u00f1adir(...)</code> que a\u00f1ada una cantidad (positiva o negativa) al saldo.</p> <p>Tambi\u00e9n habr\u00e1 un atributo com\u00fan a todas las instancias llamado interesAnualBasico, que en principio puede ser constante.</p> <p>La clase tiene que ser abstracta y debe tener un m\u00e9todo <code>calcularIntereses()</code> que se dejar\u00e1 sin implementar.</p> <p>Tambi\u00e9n puede ser \u00fatil implementar un m\u00e9todo para mostrar los datos de la cuenta.</p> <p>De esta clase heredar\u00e1n dos subclases: <code>CuentaCorriente</code> y <code>CuentaAhorro</code>. La diferencia entre ambas ser\u00e1 la manera de calcular los intereses:</p> <ul> <li>A la primera se le incrementar\u00e1 el saldo teniendo en cuenta el inter\u00e9s anual b\u00e1sico.</li> <li>La segunda tendr\u00e1 una constante de clase llamada saldoMinimo. Si no se llega a este saldo el inter\u00e9s ser\u00e1 la mitad del inter\u00e9s b\u00e1sico. Si se supera el saldo m\u00ednimo el inter\u00e9s aplicado ser\u00e1 el doble del inter\u00e9s anual b\u00e1sico.</li> </ul> <p>Implementa una clase principal con funci\u00f3n main para probar el funcionamiento de las tres clases: Crea varias cuentas bancarias de distintos tipos, pueden estar en un ArrayList si lo deseas; prueba a realizar ingresos, retiradas y transferencias; calcula los intereses y mu\u00e9stralos por pantalla; etc.</p> <p>El diagrama UML ser\u00eda:</p> <p></p>"},{"location":"ud08/ud08ac/#ejercicio17-empresa-y-empleados","title":"Ejercicio17 - Empresa y empleados","text":"<p>paquete: <code>_17_empresaempleados</code></p> <p>Vamos a implementar dos clases que permitan gestionar datos de empresas y sus empleados.</p> <p>Los empleados tienen las siguientes caracter\u00edsticas:</p> <ul> <li>Un empleado tiene nombre, DNI, sueldo bruto (mensual), edad, tel\u00e9fono y direcci\u00f3n.</li> <li>El nombre y DNI de un empleado no pueden variar.</li> <li>Es obligatorio que todos los empleados tengan al menos definido su nombre, DNI y el sueldo bruto. Los dem\u00e1s datos no son obligatorios.</li> <li>Ser\u00e1 necesario un m\u00e9todo para imprimir por pantalla la informaci\u00f3n de un empleado.</li> <li>Ser\u00e1 necesario un m\u00e9todo para calcular el sueldo neto de un empleado. El sueldo neto se calcula descontando del sueldo bruto un porcentaje que depende del IRPF. El porcentaje del IRPF depende del sueldo bruto anual del empleado (sueldo bruto x 12 pagas).(*)</li> </ul> Sueldo bruto anual IRPF Inferior a 12.000 \u20ac 20% De 12.000 a 25.000 \u20ac 30% M\u00e1s de 25.000 \u20ac 40% <p>Por ejemplo, un empleado con un sueldo bruto anual de 17.000 \u20ac tendr\u00e1 un 30% de IRPF. Para calcular su sueldo neto mensual se descontar\u00e1 un 30% a su sueldo bruto mensual.</p> <p>Las empresas tienen las siguientes caracter\u00edsticas:</p> <ul> <li>Una empresa tiene nombre y CIF (datos que no pueden variar), adem\u00e1s de tel\u00e9fono, direcci\u00f3n y empleados. Cuando se crea una nueva empresa esta carece de empleados.</li> <li>Ser\u00e1n necesarios m\u00e9todos para:</li> <li>A\u00f1adir y eliminar empleados a la empresa.</li> <li>Mostrar por pantalla la informaci\u00f3n de todos los empleados.</li> <li>Mostrar por pantalla el DNI, sueldo bruto y neto de todos los empleados.</li> <li>Calcular la suma total de sueldos brutos de todos los empleados.</li> <li>Calcular la suma total de sueldos netos de todos los empleados.</li> </ul> <p>Implementa las clases Empleado y Empresa con los atributos oportunos, un constructor, los getters/setters oportunos y los m\u00e9todos indicados. Puedes a\u00f1adir m\u00e1s m\u00e9todos si lo ves necesario. Estas clases no deben realizar ning\u00fan tipo de entrada por teclado.</p> <p>Implementa tambi\u00e9n una clase Programa con una funci\u00f3n main para realizar pruebas: Crear una o varias empresas, crear empleados, a\u00f1adir y eliminar empleados a las empresas, listar todos los empleados, mostrar el total de sueldos brutos y netos, etc.</p> <p>(*)</p> <p>El IRPF realmente es m\u00e1s complejo pero se ha simplificado para no complicar demasiado este ejercicio.</p>"},{"location":"ud08/ud08ac/#ejercicio18-vehiculos","title":"Ejercicio18 - Veh\u00edculos","text":"<p>paquete: <code>_18_vehiculos</code></p> <p>Aconsejable</p> <p>Realizar el dise\u00f1o UML antes de empezar a programar.</p> <p>Debes crear varias clases para un software de una empresa de transporte. Implementa la jerarqu\u00eda de clases necesaria para cumplir los siguientes criterios:</p> <ul> <li>Los veh\u00edculos de la empresa de transporte pueden ser terrestres, acu\u00e1ticos y a\u00e9reos. Los veh\u00edculos terrestres pueden ser coches y motos. Los veh\u00edculos acu\u00e1ticos pueden ser barcos y submarinos. Los veh\u00edculos a\u00e9reos pueden ser aviones y helic\u00f3pteros.</li> <li>Todos los veh\u00edculos tienen matr\u00edcula y modelo (datos que no pueden cambiar). La matr\u00edcula de los coches terrestres deben estar formadas por 4 n\u00fameros y 3 letras. La de los veh\u00edculos acu\u00e1ticos por entre 3 y 10 letras. La de los veh\u00edculos a\u00e9reos por 4 letras y 6 n\u00fameros.</li> <li>Los veh\u00edculos terrestres tienen un n\u00famero de ruedas (dato que no puede cambiar).</li> <li>Los veh\u00edculos acu\u00e1ticos tienen eslora (dato que no puede cambiar).</li> <li>Los veh\u00edculos a\u00e9reos tienen un n\u00famero de asientos (dato que no puede cambiar).</li> <li>Los coches pueden tener aire acondicionado o no tenerlo.</li> <li>Las motos tienen un color.</li> <li>Los barcos pueden tener motor o no tenerlo.</li> <li>Los submarinos tienen una profundidad m\u00e1xima.</li> <li>Los aviones tienen un tiempo m\u00e1ximo de vuelo.</li> <li>Los helic\u00f3pteros tienen un n\u00famero de h\u00e9lices.</li> <li>No se permiten veh\u00edculos gen\u00e9ricos, es decir, no se deben poder instanciar objetos que sean veh\u00edculos sin m\u00e1s. Pero debe ser posible instanciar veh\u00edculos terrestres, acu\u00e1ticos o a\u00e9reos gen\u00e9ricos (es decir, que no sean coches, motos, barcos, submarinos, aviones o helic\u00f3pteros).</li> <li>El dise\u00f1o debe obligar a que todas las clases de veh\u00edculos tengan un m\u00e9todo imprimir() que imprima por pantalla la informaci\u00f3n del veh\u00edculo en una sola l\u00ednea.</li> </ul> <p>Implementa todas las clases necesarias con: atributos, constructor con par\u00e1metros, getters/setters y el m\u00e9todo imprimir. Utiliza abstracci\u00f3n y herencia de la forma m\u00e1s apropiada.</p> <p>Implementa tambi\u00e9n una clase Programa para hacer algunas pruebas: Instancia varios veh\u00edculos de todo tipo (coches, motos, barcos, submarinos, aviones y helic\u00f3pteros) as\u00ed como veh\u00edculos genericos (terrestres, acu\u00e1ticos y a\u00e9reos). Crea un ArrayList y a\u00f1ade todos los veh\u00edculos. Recorre la lista y llama al m\u00e9todo imprimir de todos los veh\u00edculos.</p>"},{"location":"ud08/ud08ac/#ejercicio19-figuras","title":"Ejercicio19 - Figuras","text":"<p>paquete: <code>_19_figuras</code></p> <p>Implementa una interface llamada <code>iFigura2D</code> que declare los m\u00e9todos:</p> <ul> <li><code>double perimetro()</code>: Para devolver el per\u00edmetro de la figura.</li> <li><code>double area()</code>: Para devolver el \u00e1rea de la figura.</li> <li><code>void escalar(double escala)</code>: Para escalar la figura (aumentar o disminuir su tama\u00f1o). Solo hay que multiplicar los atributos de la figura por la escala (&gt; 0).</li> <li><code>void imprimir()</code>: Para mostrar la informaci\u00f3n de la figura (atributos, per\u00edmetro y \u00e1rea) en una sola l\u00ednea.</li> </ul> <p>Existen 4 tipos de figuras.</p> <ul> <li>Cuadrado: Sus cuatro lados son iguales.</li> <li>Rect\u00e1ngulo: Tiene ancho y alto.</li> <li>Tri\u00e1ngulo: Tiene ancho y alto.</li> <li>C\u00edrculo: Tiene radio.</li> </ul> <p>Crea las 4 clases de figuras de modo que implementen la interface iFigura2D. Define sus m\u00e9todos.</p> <p>Crea una clase ProgramaFiguras con un main en el que realizar las siguientes pruebas:</p> <p>\u200b   a) Crea un ArrayList figuras.</p> <p>\u200b   b) A\u00f1ade figuras de varios tipos.</p> <p>\u200b   c) Muestra la informaci\u00f3n de todas las figuras.</p> <p>\u200b   d) Escala todas las figuras con escala = 2.</p> <p>\u200b   e) Muestra de nuevo la informaci\u00f3n de todas las figuras.</p> <p>\u200b   f) Escala todas las figuras con escala = 0.1.</p> <p>\u200b   g) Muestra de nuevo la informaci\u00f3n de todas las figuras.</p>"},{"location":"ud08/ud08pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li>Curso Java. Herencia I. V\u00eddeo 40</li> <li>Curso Java. Herencia II. V\u00eddeo 41</li> <li>Curso Java. Herencia III. Dise\u00f1ando la herencia. V\u00eddeo 42</li> <li>Curso Java. Polimorfismo y enlazado din\u00e1mico. V\u00eddeo 43</li> <li>Curso Java. Casting de objetos. Clases y m\u00e9todos final. V\u00eddeo 44</li> <li>Curso Java. Clases Abstractas I. V\u00eddeo 45</li> <li>Curso Java. Clases Abstractas II. V\u00eddeo 46</li> <li>Curso Java. Modificadores de acceso. Clase Object. V\u00eddeo 47</li> <li>Curso Java. Interfaces y clases internas. Interfaces I. V\u00eddeo 49</li> <li>Curso Java. Interfaces y clases internas Interfaces II. V\u00eddeo 50</li> <li>Curso Java. Interfaces y clases internas Interfaces III. V\u00eddeo 51</li> <li>Curso Java. Interfaces y clases internas Interfaces IV. V\u00eddeo 52</li> <li>Curso Java. Interfaces y clases internas. Clases internas I. V\u00eddeo 53</li> <li>Curso Java. Interfaces y clases internas. Clases internas II. V\u00eddeo 54</li> </ul>"},{"location":"ud08/ud08re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li>Wikipedia</li> <li>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> <li>Apuntes Lionel</li> </ul>"},{"location":"ud09/ud0901/","title":"9.1 Introducci\u00f3n","text":"<p>Hoy en d\u00eda, la mayor\u00eda de aplicaciones inform\u00e1ticas necesitan almacenar y gestionar gran cantidad de datos.</p> <p>Esos datos, se suelen guardar en bases de datos relacionales, ya que \u00e9stas son las m\u00e1s extendidas actualmente.</p> <p>Las bases de datos relacionales permiten organizar los datos en tablas y esas tablas y datos se relacionan mediante campos clave. Adem\u00e1s se trabaja con el lenguaje est\u00e1ndar conocido como SQL, para poder realizar las consultas que deseemos a la base de datos.</p> <p>Base de datos relacional</p> <p>Una base de datos relacional se puede definir de una manera simple como aquella que presenta la informaci\u00f3n en tablas con filas y columnas.</p> <p>Una tabla es una serie de filas y columnas , en la que cada fila es un registro y cada columna es un campo. Un campo representa un dato de los elementos almacenados en la tabla (NSS, nombre, etc.). Cada registro representa un elemento de la tabla (la persona Jose, la persona Carmen, etc.)</p> <p>No se permite que pueda aparecer dos o m\u00e1s veces el mismo registro, por lo que uno o m\u00e1s campos de la tabla forman lo que se conoce como clave primaria (atributo que se elige como identificador en una tabla, de manera que no haya dos registros iguales, sino que se diferencien al menos en esa clave). Por ejemplo, en el caso de una tabla que guarda datos de personas, el n\u00famero de la seguridad social, podr\u00eda elegirse como clave primaria, pues sabemos que aunque haya dos personas llamadas, por ejemplo, Juan P\u00e9rez P\u00e9rez, estamos seguros de que su n\u00famero de seguridad social ser\u00e1 distinto).</p> <p>El sistema gestor de bases de datos, en ingl\u00e9s conocido como: Database Management System (DBMS) , gestiona el modo en que los datos se almacenan, mantienen y recuperan.</p> <p>En el caso de una base de datos relacional, el sistema gestor de base de datos se denomina: Relational Database Management System (RDBMS).</p> <p>Tradicionalmente, la programaci\u00f3n de bases de datos ha sido como una Torre de Babel: gran cantidad de productos de bases de datos en el mercado, y cada uno \u201chablando\u201d en su lenguaje privado con las aplicaciones.</p> <p>Java, mediante JDBC ( Java Database Connectivity, API que permite la ejecuci\u00f3n de operaciones sobre bases de datos desde el lenguaje de programaci\u00f3n Java, independientemente del sistema operativo donde se ejecute o de la base de datos a la cual se accede), permite simplificar el acceso a base de datos , proporcionando un lenguaje mediante el cual las aplicaciones pueden comunicarse con motores de bases de datos. Sun desarroll\u00f3 este API para el acceso a bases de datos, con tres objetivos principales en mente:</p> <ul> <li>Ser un API con soporte de SQL: poder construir sentencias SQL e insertarlas dentro de llamadas al API de Java,</li> <li>Aprovechar la experiencia de los APIs de bases de datos existentes,</li> <li>Ser sencillo.</li> </ul>"},{"location":"ud09/ud0901/#conexion-a-las-bbdd-conectores","title":"Conexi\u00f3n a las BBDD: conectores","text":"<p>Dejemos de momento de lado el desfase Objeto-Relacional y centr\u00e9monos ahora en el acceso a Base de Datos Relacionales desde los lenguajes de programaci\u00f3n. Lo razonaremos en general y lo aplicaremos a Java.</p> <p>Desde la d\u00e9cada de los 80 que existen a pleno rendimiento las bases de datos relacionales. Casi todos los Sistemas Gestores de Bases de Datos (excepto los m\u00e1s peque\u00f1os como Access o Base de LibreOffice) utilizan la arquitectura cliente-servidor. Esto significa que hay un ordenador central donde est\u00e1 instalado el Sistema Gestor de Bases de Datos Relacional que act\u00faa como servidor, y habr\u00e1 muchos clientes que se conectar\u00e1n al servidor haciendo peticiones sobre la Base de Datos.</p> <p>Los Sistemas Gestores de Bases de Datos inicialmente dispon\u00edan de lenguajes de programaci\u00f3n propios para poder hacer los accesos desde los clientes. Era muy consistente, pero a base de ser muy poco operativo:</p> <ul> <li>La empresa desarrolladora del SGBD deb\u00edan mantener un lenguaje de programaci\u00f3n, que resultaba necesariamente muy costoso, si no quer\u00edan que quedara desfasado.</li> <li>Las empresas usuarias del SGBD, que se conectaban como clientes, se encontraban muy ligadas al servidor para tener que utilizar el lenguaje de programaci\u00f3n para acceder al servidor, lo que no siempre se ajustaba a sus necesidades. Adem\u00e1s, el plantearse cambiar de servidor, significaba que hab\u00eda que rehacer todos los programas, y por tanto una tarea de much\u00edsima envergadura.</li> </ul> <p>Para poder ser m\u00e1s operativos, hab\u00eda que desvincular los lenguajes de programaci\u00f3n de los Sistemas Gestores de Bases de Datos utilizando unos est\u00e1ndares de conexi\u00f3n.</p>"},{"location":"ud09/ud0902/","title":"9.2 JDBC","text":"<p>Java puede conectarse con distintos SGBD y en diferentes sistemas operativos. Independientemente del m\u00e9todo en que se almacenen los datos debe existir siempre un mediador entre la aplicaci\u00f3n y el sistema de base de datos y en Java esa funci\u00f3n la realiza JDBC. </p> <p>El API JDBC</p> <p>Para la conexi\u00f3n a las bases de datos utilizaremos el API est\u00e1ndar de JAVA denominada JDBC (Java Data Base Connectivity).</p> <p>JDBC es un API incluido dentro del lenguaje Java para el acceso a bases de datos. Consiste en un conjunto de clases e interfaces escritas en Java que ofrecen un completo API para la programaci\u00f3n con bases de datos, por lo tanto es la \u00fanica soluci\u00f3n 100% Java que permite el acceso a bases de datos.</p> <p>JDBC es una especificaci\u00f3n formada por una colecci\u00f3n de interfaces y clases abstractas, que todos los fabricantes de drivers deben implementar si quieren realizar una implementaci\u00f3n de su driver 100% Java y compatible con JDBC (JDBC-compliant driver). Debido a que JDBC est\u00e1 escrito completamente en Java tambi\u00e9n posee la ventaja de ser independiente de la plataforma. </p> <p>A tener en cuenta</p> <p>No ser\u00e1 necesario escribir un programa para cada tipo de base de datos, una misma aplicaci\u00f3n escrita utilizando JDBC podr\u00e1 manejar bases de datos Oracle, Sybase, SQL Server, etc.</p> <p>Adem\u00e1s podr\u00e1 ejecutarse en cualquier sistema operativo que posea una M\u00e1quina Virtual de Java, es decir, ser\u00e1n aplicaciones completamente independientes de la plataforma. Otras APIS que se suelen utilizar bastante para el acceso a bases de datos son DAO (Data Access Objects) y RDO (Remote Data Objects), y ADO (ActiveX Data Objects), pero el problema que ofrecen estas soluciones es que s\u00f3lo son para plataformas Windows.</p> <p>JDBC tiene sus clases en el paquete java.sql y otras extensiones en el paquete javax.sql.</p>"},{"location":"ud09/ud0902/#funciones-del-jdbc","title":"Funciones del JDBC","text":"<p>B\u00e1sicamente el API JDBC hace posible la realizaci\u00f3n de las siguientes tareas:</p> <ul> <li>Establecer una conexi\u00f3n con una base de datos.</li> <li>Enviar sentencias SQL.</li> <li>Manipular datos.</li> <li>Procesar los resultados de la ejecuci\u00f3n de las sentencias.</li> </ul>"},{"location":"ud09/ud0902/#drivers-jdbc","title":"Drivers JDBC","text":"<p>Los drivers nos permiten conectarnos con una base de datos determinada. Existen cuatro tipos de drivers JDBC, cada tipo presenta una filosof\u00eda de trabajo diferente. A continuaci\u00f3n se pasa a comentar cada uno de los drivers:</p> <ul> <li>JDBC-ODBC bridge plus ODBC driver (tipo 1): permite al programador acceder a fuentes de  datos ODBC existentes mediante JDBC. El JDBC-ODBC Bridge (puente JDBC-ODBC) implementa operaciones JDBC traduci\u00e9ndolas a operaciones ODBC, se encuentra dentro del paquete sun.jdbc.odbc y contiene librer\u00edas nativas para acceder a ODBC.</li> </ul> <p>Al ser usuario de ODBC depende de las dll de ODBC y eso limita la cantidad de plataformas en donde se puede ejecutar la aplicaci\u00f3n.</p> <ul> <li>Native-API partly-Java driver (tipo 2): son similares a los drivers de tipo1, en tanto en cuanto  tambi\u00e9n necesitan una configuraci\u00f3n en la m\u00e1quina cliente. Este tipo de driver convierte llamadas JDBC a llamadas de Oracle, Sybase, Informix, DB2 u otros SGBD. Tampoco se pueden utilizar dentro de applets al poseer c\u00f3digo nativo.</li> <li>JDBC-Net pure Java driver (tipo 3): Estos controladores est\u00e1n escritos en Java y se encargan de convertir las llamadas JDBC a un protocolo independiente de la base de datos y en la aplicaci\u00f3n servidora utilizan las funciones nativas del sistema de gesti\u00f3n de base de datos mediante el uso de una biblioteca JDBC en el servidor. La ventaja de esta opci\u00f3n es la portabilidad.</li> <li>JDBC de Java cliente (tipo 4): Estos controladores est\u00e1n escritos en Java y se encargan de convertir las llamadas JDBC a un protocolo independiente de la base de datos y en la aplicaci\u00f3n servidora utilizan las funciones nativas del sistema de gesti\u00f3n de base de datos sin necesidad de bibliotecas. La ventaja de esta opci\u00f3n es la portabilidad. Son como los drivers de tipo 3 pero sin la figura del intermediario y tampoco requieren ninguna configuraci\u00f3n en la m\u00e1quina cliente. Los drivers de tipo 4 se pueden utilizar para servidores Web de tama\u00f1o peque\u00f1o y medio, as\u00ed como para intranets.</li> </ul>"},{"location":"ud09/ud0902/#instalacion-controlador-mysql","title":"Instalaci\u00f3n controlador MySql","text":"<p>1) El primer paso es descargar desde https://www.mysql.com/products/connector/ el conector apropiado.</p> <p>2) Elegir Sistema Operativo y versi\u00f3n:</p> <p>3) Haz clic en Donwload y selecciona la opci\u00f3n: No thanks, just start download</p> <p>4) Ejecuta el fichero deb (en el caso de Ubuntu) descargado:</p> <p>5) Ahora deberemos a\u00f1adir la librer\u00eda JDBC a nuestro proyecto. Para ello copia el archivo <code>mysql-connector-java-x.x.x.jar</code> (en Ubuntu se encuentra en la ruta  <code>/usr/share/java</code>) en JAVA PROJECTS -&gt; Referenced Libraries de VS Code:</p>"},{"location":"ud09/ud0902/#carga-del-controlador-jdbc-y-conexion-con-la-bd","title":"Carga del controlador JDBC y conexi\u00f3n con la BD","text":"<p>El primer paso para conectarnos a una base de datos mediante JDBC es cargar el controlador apropiado. Estos controladores se distribuyen en un archivo <code>.jar</code> que provee el fabricante del SGBD y deben estar accesibles por la aplicaci\u00f3n.</p> <p>Para cargar el controlador se usan las siguientes sentencias:</p> Java<pre><code>import java.sql.*;\n\npublic class ConnectToMySql {\n    // JDBC URL, usuario y contrase\u00f1a de la base de datos  \n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/prueba\";\n    private static final String USUARIO = \"prueba\";\n    private static final String CONTRASE\u00d1A = \"1234\";\n\n    public static void main(String[] args) {\n        try {\n        // Dependiendo de a qu\u00e9 tipo de SGBD queramos conectar cargaremos un controlador u otro\n\n            // Paso 1: Cargar el controlador JDBC de MySQL\n            Class&lt;?&gt; c = Class.forName(\"com.mysql.jdbc.Driver\");\n            System.out.println(\"Cargado: \" + c.getName());\n\n            //Definir la url de conexi\u00f3n y los par\u00e1metros de usuario y contrase\u00f1a\n            // Paso 2: Establecer la conexi\u00f3n con la base de datos\n            Connection conexion = DriverManager.getConnection(JDBC_URL, USUARIO, CONTRASE\u00d1A);   \n            System.out.println(\"Conexi\u00f3n completada\");\n\n            // Paso 3: Aqu\u00ed puedes realizar operaciones en la base de datos\n            // ...\n\n            // Paso 4: Cerrar la conexi\u00f3n\n            conexion.close();\n            System.out.println(\"Conexi\u00f3n cerrada correctamente.\");\n\n        } catch (ClassNotFoundException cnfe) {\n            System.out.println(\"ERROR al no encontrarse la clase controlador JDBC: \" + cnfe.getMessage());\n        } catch (SQLException ex) {\n            System.out.println(\"ERROR al conectar: \" + ex.getMessage());\n        }\n    }\n}\n</code></pre> <p>Observamos las siguientes cuestiones:</p> <ul> <li>Como ya hemos comentado alguna vez, la sentencia <code>Class.forName()</code> no ser\u00eda necesaria en muchas aplicaciones. Pero nos asegura que hemos cargado el driver, y por tanto el <code>DriverManager</code> la sabr\u00e1 manejar.</li> <li>El <code>DriverManager</code> es capaz de encontrar el driver adecuado a trav\u00e9s de la url proporcionada (sobre todo si el driver est\u00e1 cargado en memoria), y es quien nos proporciona el objeto <code>Connection</code> por medio del m\u00e9todo <code>getConnection()</code>. Existe otra forma de obtener el <code>Connection</code> por medio del objeto <code>Driver</code>, como veremos m\u00e1s adelante, pero tambi\u00e9n ser\u00e1 pasando indirectamente por <code>DriverManager</code>.</li> <li>Si no se encuentra la clase del driver (por no tenerlo en las librer\u00edas del proyecto, o haber escrito mal su nombre) se producir\u00e1 la excepci\u00f3n <code>ClassNotFoundException</code>. Es conveniente tratarla con <code>try ... catch</code>.</li> <li>Si no se puede establecer la conexi\u00f3n por alguna raz\u00f3n se producir\u00e1 la excepci\u00f3n <code>SQLException</code>. Al igual que en el caso anterior, es conveniente tratarla con <code>try ... catch</code>.</li> <li>El objeto <code>Connection</code> mantendr\u00e1 una conexi\u00f3n con la Base de Datos desde el momento de la creaci\u00f3n hasta el momento de cerrarla con <code>close()</code>. Es muy importante cerrar la conexi\u00f3n, no s\u00f3lo para liberar la memoria de nuestro ordenador (que al cerrar la aplicaci\u00f3n liberar\u00eda), sino sobre todo para cerrar la sesi\u00f3n abierta en el Servidor de Bases de Datos.</li> </ul>"},{"location":"ud09/ud0902/#conexion-alternativa-mediante-driver","title":"Conexi\u00f3n alternativa mediante <code>Driver</code>","text":"<p>Una manera de conectar alternativa a las anteriores es utilizando el objeto <code>Driver</code>. La clase <code>java.sql.Driver</code> pertenece a la API JDBC, pero no es instanciable, y tan s\u00f3lo es una interfaz, para que las clases <code>Driver</code> de los contenedores hereden de ella e implementen la manera exacta de acceder al SGBD correspondiente. Como no es instanciable (no podemos hacer <code>new Driver()</code>) la manera de crearlo es a trav\u00e9s del m\u00e9todo <code>getDriver()</code> del <code>DriverManager</code>, que seleccionar\u00e1 el driver adecuado a partir de la url. Ya s\u00f3lo quedar\u00e1n definir algunas propiedades, como el usuario y la contrase\u00f1a, y obtener el <code>Connection</code> por medio del m\u00e9todo <code>connect()</code></p> <p>La manera de conectar a trav\u00e9s de un objeto <code>Driver</code> es m\u00e1s larga, pero m\u00e1s completa ya que se podr\u00edan especificar m\u00e1s cosas. Y quiz\u00e1s ayude a entender el montaje de los controladores de los diferentes SGBD en Java.</p> Java<pre><code>import java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\npublic class ConnectToMySqlDriver {\n    // JDBC URL, usuario y contrase\u00f1a de la base de datos  \n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/prueba\";\n    private static final String USUARIO = \"prueba\";\n    private static final String CONTRASE\u00d1A = \"1234\";\n\n    public static void main(String[] args)  {\n        try{\n            Driver driver = DriverManager.getDriver(JDBC_URL);\n\n            Properties properties = new Properties();\n            properties.setProperty(\"user\", USUARIO);\n            properties.setProperty(\"password\", CONTRASE\u00d1A);\n\n            Connection conexion = driver.connect(JDBC_URL, properties);\n            System.out.println(\"Conexi\u00f3n completada a trav\u00e9s de Driver\");\n\n            // Cerrar la conexi\u00f3n\n            conexion.close();\n            System.out.println(\"Conexi\u00f3n cerrada correctamente.\");\n        } catch (SQLException ex) {\n            System.out.println(\"ERROR al conectar: \" + ex.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"ud09/ud0902/#carga-del-controlador-y-de-la-conexion-mediante-el-patron-singleton","title":"Carga del controlador y de la conexi\u00f3n mediante el patr\u00f3n Singleton","text":"<p>Este patr\u00f3n de dise\u00f1o est\u00e1 dise\u00f1ado para restringir la creaci\u00f3n de objetos pertenecientes a una clase.</p> <p>El sino de <code>Singleton</code></p> <p>Su intenci\u00f3n consiste en garantizar que una clase s\u00f3lo tenga una instancia y proporcionar un punto de acceso global a ella.  El patr\u00f3n <code>Singleton</code> se implementa creando en nuestra clase un m\u00e9todo que crea una instancia del objeto s\u00f3lo si todav\u00eda no existe alguna. </p> <p>Para asegurar que la clase no puede ser instanciada nuevamente se regula el alcance del constructor haci\u00e9ndolo privado. Las situaciones m\u00e1s habituales de aplicaci\u00f3n de este patr\u00f3n son aquellas en las que dicha clase ofrece un conjunto de utilidades comunes para todas las capas (como puede ser el sistema de log, conexi\u00f3n a la base de datos, \u2026) o cuando cierto tipo de datos debe estar disponible para todos los dem\u00e1s objetos de la aplicaci\u00f3n (en java no hay variables globales) El patr\u00f3n Singleton provee una \u00fanica instancia global gracias a que:</p> <ul> <li>La propia clase es responsable de crear la \u00fanica instancia.</li> <li>Permite el acceso global a dicha instancia mediante un m\u00e9todo de clase.</li> <li>Declara el constructor de clase como privado para que no sea instanciable directamente.</li> </ul> Java<pre><code>/**\n @see https://stackoverflow.com/questions/6567839/if-i-use-a-singleton-class-for-a-database-connection-can-one-user-close-the-con\n Patron Singleton\n */\npublic class DatabaseConnection {\n    // JDBC URL, usuario y contrase\u00f1a de la base de datos  \n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/prueba\";\n    private static final String USUARIO = \"prueba\";\n    private static final String CONTRASE\u00d1A = \"1234\";\n\n    private static DatabaseConnection dbInstance; //Variable para almacenar la unica instancia de la clase\n    private static java.sql.Connection conexion;\n\n    private DatabaseConnection() {\n        // El Constructor es privado!!\n    }\n\n    public static DatabaseConnection getInstance(){\n        //Si no hay ninguna instancia...\n        if(dbInstance == null){\n            dbInstance = new DatabaseConnection();\n        }\n        return dbInstance;\n    }\n\n    public static java.sql.Connection getConnection(){\n        if(conexion == null){\n            try {\n                conexion = java.sql.DriverManager.getConnection(JDBC_URL, USUARIO, CONTRASE\u00d1A);\n                System.out.println(\"Conexi\u00f3n realizada\");\n\n            } catch (java.sql.SQLException ex) {\n                System.out.println(\"ERROR al conectar: \" + ex.getMessage());\n            }\n        }\n        return conexion;\n    }\n}\n</code></pre> <p>En el caso de BlueJ, se a\u00f1aden las librer\u00edas desde Herramientas -&gt; Preferencias -&gt; Librer\u00edas</p> <p>Creamos una nueva clase <code>DatabaseConnection</code> en BlueJ:</p> <p>Vamos a crear una nueva clase <code>Test</code> para probar la conexi\u00f3n:</p> Java<pre><code>import java.sql.*;\npublic class Test {\n    static java.sql.Connection con = DatabaseConnection.getInstance().getConnection();\n    public Test(){\n        //De momento no hace nada\n    }\n}\n</code></pre>"},{"location":"ud09/ud0903/","title":"9.3 Acceso a BBDD","text":""},{"location":"ud09/ud0903/#cargar-el-driver","title":"Cargar el Driver","text":"<p>En un proyecto Java que realice conexiones a bases de datos es necesario, antes que nada, utilizar <code>Class.forname(\u2026).newInstance()</code> para cargar din\u00e1micamente el Driver que vamos a utilizar. Esto solo es necesario hacerlo una vez en nuestro programa. Puede lanzar excepciones por lo que es necesario utilizar un bloque try-catch.</p> Java<pre><code>try {\n    Class.forName(\"com.mysql.cj.jdbc.Driver\").newInstance();    \n\n} catch (Exception e) {\n    // manejamos el error\n}\n</code></pre> <p>Hay que tener en cuenta que las clases y m\u00e9todos utilizados para conectarse a una base de datos (explicados m\u00e1s adelante) funcionan con todos los drivers disponibles para Java (JDBC es solo uno, hay muchos m\u00e1s). Esto es posible ya que el est\u00e1ndar de Java solo los define como interfaces (interface) y cada librer\u00eda driver los implementa (define las clases y su c\u00f3digo). Por ello es necesario utilizar <code>Class.forName(\u2026)</code> para indicarle a Java qu\u00e9 driver vamos a utilizar.</p> <p>Este nivel de asbtracci\u00f3n facilita el desarrollo de proyectos ya que si necesit\u00e1ramos utilizar otro sistema de base de datos (que no fuera MySQL) solo necesitar\u00edamos cambiar la l\u00ednea de c\u00f3digo que carga el driver y poco m\u00e1s. Si cada sistema de base de datos necesitara que utiliz\u00e1ramos distintas clases y m\u00e9todos todo ser\u00eda mucho m\u00e1s complicado.</p> <p>Las cuatro clases fundamentales que toda aplicaci\u00f3n Java necesita para conectarse a una base de datos y ejecutar sentencias son: <code>DriverManager</code>, <code>Connection</code>, <code>Statement</code> y <code>ResultSet</code>. </p>"},{"location":"ud09/ud0903/#clase-drivermanager","title":"Clase <code>DriverManager</code>","text":"<p>Paso 1: Establecer conexi\u00f3n con la BBDD</p> <p>Ejemplo de conexi\u00f3n seg\u00fan SGBD</p> Java<pre><code>/* Para MySQL:\n    jdbc  --&gt; driver\n    mysql --&gt; protocolo driver\n    localhost:3306/gestionPedidos --&gt; detalles de la conexi\u00f3n\n*/\njdbc:mysql://localhost:3306/gestionPedidos\n\njdbc:odbc:DSN_gestionPedidos                  // para SQL Server\n\njdbc:oracle:juan@servidor:3306:gestionPedidos // para Oracle\n</code></pre> <p>Vamos a necesitar informaci\u00f3n adicional como son los datos de usuario y contrase\u00f1a.</p> <p>La clase java.sql.DriverManager es la capa gestora del driver JDBC. Se encarga de manejar el Driver apropiado y permite crear conexiones con una base de datos mediante el m\u00e9todo est\u00e1tico <code>getConnection()</code> que tiene dos variantes:</p> Java<pre><code>DriveManager.getConnection(String url)\n// y\nDriveManager.getConnection(String url, String user, String password)\n</code></pre> <p>Este m\u00e9todo intentar\u00e1 establecer una conexi\u00f3n con la base de datos seg\u00fan la URL indicada. Opcionalmente se le puede pasar el usuario y contrase\u00f1a como argumento (tambi\u00e9n se puede indicar en la propia URL). Si la conexi\u00f3n es satisfactoria devolver\u00e1 un objeto Connection.</p> Ejemplo de conexi\u00f3n a la base de datos prueba en localhost Java<pre><code>String url = \"jdbc:mysql://localhost:3306/prueba\";\nConnection conexion = DriverManager.getConnection(url,\"root\",\"\");\n</code></pre> <p>Este m\u00e9todo puede lanzar dos tipos de excepciones (que habr\u00e1 que manejar con un try-catch):</p> <ul> <li>SQLException: la conexi\u00f3n no ha podido producirse. Puede ser por multitud de motivos como una URL mal formada, un error en la red, host o puerto incorrecto, base de datos no existente, usuario y contrase\u00f1a no v\u00e1lidos, etc.</li> <li>SQLTimeoutException: se ha superado el LoginTimeout sin recibir respuesta del servidor.</li> </ul>"},{"location":"ud09/ud0903/#clase-connection","title":"Clase <code>Connection</code>","text":"<p>Paso 2. Crear un objeto Statement</p> <p>Un objeto java.sql.Connection representa una sesi\u00f3n de conexi\u00f3n con una base de datos. Una aplicaci\u00f3n puede tener tantas conexiones como necesite, ya sea con una o varias bases de datos.</p> <p>El m\u00e9todo m\u00e1s relevante es <code>createStatement()</code> que devuelve un objeto Statement asociado a dicha conexi\u00f3n que permite ejecutar sentencias SQL.</p> <p>El m\u00e9todo createStatement() tambi\u00e9n puede lanzar excepciones de tipo SQLException.</p> Java<pre><code>Statement st = conexion.createStatement();\n</code></pre> <p>Cuando ya no la necesitemos es aconsejable cerrar la conexi\u00f3n con <code>close()</code> para liberar recursos:</p> Java<pre><code>conexion.close();\n</code></pre>"},{"location":"ud09/ud0903/#clase-statement","title":"Clase <code>Statement</code>","text":"<p>Paso 3. Ejecutar sentencia SQL</p> <p>Un objeto java.sql.Statement permite ejecutar sentencias SQL en la base de datos a trav\u00e9s de la conexi\u00f3n con la que se cre\u00f3 el Statement (ver Paso 2). Los tres m\u00e9todos m\u00e1s comunes de ejecuci\u00f3n de sentencias SQL son <code>executeQuery(\u2026)</code>, <code>executeUpdate(\u2026)</code> y <code>execute(\u2026)</code>.</p> <p>Estos tres m\u00e9todos pueden lanzar excepciones de tipo SQLException y SQLTimeoutException.</p> <ul> <li><code>ResultSet executeQuery(String sql)</code>: ejecuta la sentencia sql indicada (de tipo SELECT). Devuelve un objeto ResultSet con los datos proporcionados por el servidor.  </li> </ul> Java<pre><code>ResultSet rs = st.executeQuery(\"SELECT * FROM vendedores\");\n</code></pre> <ul> <li><code>int executeUpdate(String sql)</code>: ejecuta la sentencia sql indicada (de tipo DML como por ejemplo INSERT, UPDATE o DELETE).  Devuelve un n\u00famero de registros que han sido insertados, modificados o eliminados.</li> </ul> Java<pre><code>int nr = st.executeUpdate (\"INSERT INTO vendedores VALUES (1,'Pedro Gil', '2017-04-11', 15000);\")\n</code></pre> <p>Cuando ya no lo necesitemos es aconsejable cerrar el statement con <code>close()</code> para liberar recursos:</p> Java<pre><code> st.close();\n</code></pre> <p>Nota</p> <p>Podr\u00edamos decir que este resultset es una especie de tabla virtual que se almacena en memoria con la informaci\u00f3n en su interior.</p>"},{"location":"ud09/ud0903/#clase-resultset","title":"Clase <code>ResultSet</code>","text":"<p>Paso 4. Leer el resultset</p> <p>Un objeto java.sql.ResultSet contiene un conjunto de resultados (datos) obtenidos tras ejecutar una sentencia SQL, normalmente de tipo SELECT. Es una estructura de datos en forma de tabla con registros (filas) que podemos recorrer para acceder a la informaci\u00f3n de sus campos (columnas).</p> <p>ResultSet utiliza internamente un cursor que apunta al registro actual sobre el que podemos operar. Inicialmente dicho cursor est\u00e1 situado antes de la primera fila y disponemos de varios m\u00e9todos para desplazar el cursor. El m\u00e1s com\u00fan es <code>next()</code>:</p> <ul> <li><code>boolean next()</code>: mueve el cursor al siguiente registro. Devuelve true si fue posible y false en caso contrario (si ya llegamos al final de la tabla).</li> </ul> <p>Algunos de los m\u00e9todos para obtener los datos del registro actual son:</p> <ul> <li><code>String getString(String columnLabel)</code>: devuelve un dato String de la columna indicada por su nombre. </li> </ul> Por ejemplo Java<pre><code>rs.getString(\"nombre\");\n</code></pre> <ul> <li><code>String getString(int columnIndex)</code>: devuelve un dato String de la columna indicada por su nombre (la primera columna es la 1, no la cero). </li> </ul> Por ejemplo Java<pre><code>rs.getString(2);\n</code></pre> <p>Existen m\u00e9todos an\u00e1logos a los anteriores para obtener valores de tipo int, long, float, double, boolean, Date, Time, Array, etc. Pueden consultarse todos en la documentaci\u00f3n oficial de Java.</p> <ul> <li><code>int getInt(String columnLabel)</code></li> <li><code>int getInt(int columnIndex)</code></li> <li><code>double getDouble(String columnLabel)</code></li> <li><code>double getDouble(int columnIndex)</code></li> <li><code>boolean getBoolean(String columnLabel)</code></li> <li><code>boolean getBoolean(int columnIndex)</code></li> <li><code>Date getDate(String columnLabel)</code></li> <li><code>Date getDate(int columnIndex)</code></li> <li>etc.</li> </ul> <p>M\u00e1s adelante veremos c\u00f3mo se realiza la modificaci\u00f3n e inserci\u00f3n de datos.</p> <p>Todos estos m\u00e9todos pueden lanzar una SQLException.</p> Ejemplo para recorrer un ResultSet llamado rs y mostrarlo por pantalla Java<pre><code>while(rs.next()) {\n    int id = rs.getInt(\"id\");\n    String nombre = rs.getString(\"nombre\");\n    Date fecha = rs.getDate(\"fecha_ingreso\");\n    float salario = rs.getFloat(\"salario\");\n\n    System.out.println(id + \" \" + nombre + \" \" + fecha + \" \" + salario);\n}\n</code></pre>"},{"location":"ud09/ud0904/","title":"9.4 Navegabilidad y concurrencia","text":"<p>Cuando invocamos a <code>createStatement()</code> sin argumentos, como hemos visto anteriormente, al ejecutar sentencias SQL obtendremos un ResultSet por defecto en el que el cursor solo puede moverse hacia adelante y los datos son de solo lectura. A veces esto no es suficiente y necesitamos mayor funcionalidad.</p> <p>Por ello el m\u00e9todo createStatement() est\u00e1 sobrecargado (existen varias versiones de dicho m\u00e9todo) lo cual nos permite invocarlo con argumentos en los que podemos especificar el funcionamiento.</p> <ul> <li><code>Statement createStatement (int resultSetType, int resultSetConcurrency)</code>: devuelve un objeto Statement cuyos objetos ResultSet ser\u00e1n del tipo y concurrencia especificados. Los valores v\u00e1lidos son constantes definidas en ResultSet.</li> </ul> <p>El argumento resultSetType indica el tipo de ResultSet:</p> <ul> <li><code>ResultSet.TYPE_FORWARD_ONLY</code>: ResultSet por defecto, forward-only y no-actualizable.<ul> <li>Solo permite movimiento hacia delante con next().</li> <li>Sus datos NO se actualizan. Es decir, no reflejar\u00e1 cambios producidos en la base de datos. Contiene una instant\u00e1nea del momento en el que se realiz\u00f3 la consulta.</li> </ul> </li> <li><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>: ResultSet desplazable y no-actualizable.<ul> <li>Permite libertad de movimiento del cursor con otros m\u00e9todos como first(), previous(), last(), etc. adem\u00e1s de next().</li> <li>Sus datos NO se actualizan, como en el caso anterior.</li> </ul> </li> <li><code>ResultSet.TYPE_SCROLL_SENSITIVE</code>: ResultSet desplazable y actualizable.<ul> <li>Permite libertad de movimientos del cursor, como en el caso anterior.</li> <li>Sus datos S\u00cd se actualizan. Es decir, mientras el ResultSet est\u00e9 abierto se actualizar\u00e1 autom\u00e1ticamente con los cambios producidos en la base de datos. Esto puede suceder incluso mientras se est\u00e1 recorriendo el ResultSet, lo cual puede ser conveniente o contraproducente seg\u00fan el caso.</li> </ul> </li> </ul> <p>El argumento resultSet.Concurrency indica la concurrencia del ResultSet:</p> <ul> <li><code>ResultSet.CONCUR_READ_ONLY</code>: solo lectura. Es el valor por defecto.</li> <li><code>ResultSet.CONCUR_UPDATABLE</code>: permite modificar los datos almacenados en el ResultSet para luego aplicar los cambios sobre la base de datos (m\u00e1s adelante se ver\u00e1 c\u00f3mo).</li> </ul> <p>A tener en cuenta</p> <p>El ResultSet por defecto que se obtiene con createStatement() sin argumentos es el mismo que con createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY).</p>"},{"location":"ud09/ud0905/","title":"9.5 Consultas (Query)","text":""},{"location":"ud09/ud0905/#navegacion-de-un-resultset","title":"Navegaci\u00f3n de un <code>ResultSet</code>","text":"<p>Como ya se ha visto, en un objeto ResultSet se encuentran los resultados de la ejecuci\u00f3n de una sentencia SQL. Por lo tanto, un objeto ResultSet contiene las filas que satisfacen las condiciones de una sentencia SQL, y ofrece m\u00e9todos de navegaci\u00f3n por los registros como <code>next()</code> que desplaza el cursos al siguiente registro del ResultSet.</p> <p>Adem\u00e1s de este m\u00e9todo de desplazamiento b\u00e1sico, existen otros de desplazamiento libre que podremos utilizar siempre y cuando el ResultSet sea de tipo <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code> o <code>ResultSet.TYPE_SCROLL_SENSITIVE</code> como se ha dicho antes.</p> <p>Algunos de estos m\u00e9todos son:</p> <ul> <li> <p><code>void beforeFirst()</code>: mueve el cursor antes de la primera fila.</p> </li> <li> <p><code>boolean first()</code>: mueve el cursor a la primera fila.</p> </li> <li> <p><code>boolean next()</code>: mueve el cursor a la siguiente fila. Permitido en todos los tipos de ResultSet.</p> </li> <li> <p><code>boolean previous()</code>: mueve el cursor a la fila anterior.</p> </li> <li> <p><code>boolean last()</code>: mueve el cursor a la \u00faltima fila.</p> </li> <li> <p><code>void afterLast()</code>: mover el cursor despu\u00e9s de la \u00faltima fila.</p> </li> <li> <p><code>boolean absolute(int row)</code>: posiciona el cursor en el n\u00famero de registro indicado. Hay que tener en cuenta que el primer registro es el 1, no el cero. </p> </li> </ul> Ejemplo <code>absolute(n)</code> <p><code>absolute(7)</code> desplazar\u00e1 el cursor al s\u00e9ptimo registro. Si  valor es negativo se posiciona en el n\u00famero de registro indicado pero empezando a contar desde el final (el \u00faltimo es el -1). Por ejemplo si tiene 10 registros y llamamos absolute(-2) se desplazar\u00e1 al registro n.\u00ba 9.</p> <ul> <li><code>boolean relative(int registros)</code>: desplaza el cursor un n\u00famero relativo de registros, que puede ser positivo o negativo. </li> </ul> Ejemplo <code>relative(n)</code> <p>Si el cursor esr\u00e1 en el registro 5 y llamamos a <code>relative(10)</code> se desplazar\u00e1 al registro 15. Si luego llamamos a <code>relative(-4)</code> se desplazar\u00e1 al registro 11.</p> <p>Los m\u00e9todos que devuelven un tipo boolean devolver\u00e1n true si ha sido posible mover el cursor a un registro v\u00e1lido, y false en caso contrario, por ejemplo si no tiene ning\u00fan registro o hemos saltado a un n\u00famero de registro que no existe.</p> <p>Todos estos m\u00e9todos pueden producir una excepci\u00f3n de tipo SQLException.</p> <p>Tambi\u00e9n existen otros m\u00e9todos relacionados con la posici\u00f3n del cursor.</p> <ul> <li><code>int getRow()</code>: devuelve el n\u00famero de registro actual. Cero si no hay registro actual.</li> <li><code>boolean isBeforeFirst()</code>: devuelve \u2018true\u2019 si el cursor est\u00e1 antes del primer registro.</li> <li><code>boolean isFirst()</code>: devuelve \u2018true\u2019 si el cursor est\u00e1 en el primer registro.</li> <li><code>boolean isLast()</code>: devuelve \u2018true\u2019 si el cursor est\u00e1 en el \u00faltimo registro.</li> <li><code>boolean isAfterLast()</code>: devuelve \u2018true\u2019 si el cursor est\u00e1 despu\u00e9s del \u00faltimo registro.</li> </ul>"},{"location":"ud09/ud0905/#obteniendo-datos-del-resultset","title":"Obteniendo datos del <code>ResultSet</code>","text":"<p>Los m\u00e9todos getXXX() ofrecen los medios para recuperar los valores de las columnas (campos) de la fila (registro) actual del ResultSet. No es necesario que las columnas sean obtenidas utilizando un orden determinado.</p> <p>Para designar una columna podemos utilizar su nombre o bien su n\u00famero (empezando por 1).</p> <p>Por ejemplo si la segunda columna de un objeto ResultSet se llama t\u00edtulo y almacena datos de tipo String, se podr\u00e1 recuperar su valor de las dos formas siguientes:</p> Java<pre><code>// rs es un objeto ResultSet\nString valor = rs.getString(2);\nString valor = rs.getString(\"titulo\");\n</code></pre> <p>Es importante tener en cuenta que las columnas se numeran de izquierda a derecha y que la primera es la n\u00famero 1, no la cero. Tambi\u00e9n que las columnas no son case sensitive, es decir, no distinguen entre may\u00fasculas y min\u00fasculas.</p> <p>A tener en cuenta</p> <p>La informaci\u00f3n referente a las columnas de un ResultSet se puede obtener llamando al m\u00e9todo getMetaData() que devolver\u00e1 un objeto ResultSetMetaData que contendr\u00e1 el n\u00famero, tipo y propiedades de las columnas del ResultSet.</p> <p>Si conocemos el nombre de una columna, pero no su \u00edndice, el m\u00e9todo findColumn() puede ser utilizado para obtener el n\u00famero de columna, pas\u00e1ndole como argumento un objeto String que sea el nombre de la columna correspondiente, este m\u00e9todo nos devolver\u00e1 un entero que ser\u00e1 el \u00edndice correspondiente a la columna.</p>"},{"location":"ud09/ud0905/#tipos-de-datos-y-conversiones","title":"Tipos de datos y conversiones","text":"<p>Cuando se lanza un m\u00e9todo getXXX() determinado sobre un objeto ResultSet para obtener el valor de un campo del registro actual, el driver JDBC convierte el dato que se quiere recuperar al tipo Java especificado y entonces devuelve un valor Java adecuado. Por ejemplo si utilizamos el m\u00e9todo getString() y el tipo del dato en la base de datos es VARCHAR, el driver JDBC convertir\u00e1 el dato VARCHAR de tipo SQL a un objeto String de Java.</p> <p>Algo parecido sucede con otros tipos de datos SQL como por ejemplo DATE. Podremos acceder a \u00e9l tanto con getDate() como con getString(). La diferencia es que el primero devolver\u00e1 un objeto Java de tipo Date y el segundo devolver\u00e1 un String.</p> <p>Siempre que sea posible el driver JDBC convertir\u00e1 el tipo de dato almacenado en la base de datos al tipo solicitado por el m\u00e9todo getXXX(), pero hay conversiones que no se pueden realizar y lanzar\u00e1n una excepci\u00f3n, como por ejemplo si intentamos hacer un getInt() sobre un campo que no contiene un valor num\u00e9rico.</p>"},{"location":"ud09/ud0905/#sentencias-que-no-devuelven-datos","title":"Sentencias que no devuelven datos","text":"<p>Las ejecutamos con el m\u00e9todo <code>executeUpdate</code>. Ser\u00e1n todas las sentencias SQL excepto el SELECT, que es la de consulta. Es decir, nos servir\u00e1 para las siguientes sentencias:</p> <ul> <li>Sentencias que cambian las estructuras internas de la BD donde se guardan los datos (instrucciones conocidas con las siglas DDL, del ingl\u00e9s Data Definition Language), como por ejemplo <code>CREATE TABLE</code>, <code>CREATE VIEW</code>, <code>ALTER TABLE</code>, <code>DROP TABLE</code>, \u2026,</li> <li>Sentencias para otorgar permisos a los usuarios existentes o crear otros nuevos (subgrupo de instrucciones conocidas como DCL o Data Control Language), como por ejemplo <code>GRANT</code>.</li> <li>Y tambi\u00e9n las sentencias para modificar los datos guardados utilizando las instrucciones <code>INSERT</code>, <code>UPDATE</code> y <code>DELETE</code>.</li> </ul> <p>Aunque se trata de sentencias muy dispares, desde el punto de vista de la comunicaci\u00f3n con el SGBD se comportan de manera muy similar, siguiendo el siguiente patr\u00f3n:</p> <ol> <li>Instanciaci\u00f3n del <code>Statement</code> a partir de una conexi\u00f3n activa.</li> <li>Ejecuci\u00f3n de una sentencia SQL pasada por par\u00e1metro al m\u00e9todo <code>executeUpdate</code>.</li> <li>Cierre del objeto <code>Statement</code> instanciado.</li> </ol> <p>Miremos este ejemplo, en el que vamos a crear una tabla muy sencilla en la Base de Datos MySql/network.</p> Aqu\u00ed ten\u00e9is la clase DatabaseConnection Java<pre><code>/**\n &lt;br /&gt;* Write a description of class DatabaseConnection here.\n &lt;br /&gt;*\n &lt;br /&gt;* @author (Victor Ponz)\n &lt;br /&gt;* @see &lt;a href=\"https://stackoverflow.com/questions/6567839/if-i-use-a-singleton-class-for-a-database-connection-can-one-user-close-the-con\"&gt;Stackoverflow Singleton&lt;/a&gt;\n &lt;br /&gt;* Patron Singleton\n &lt;br /&gt;* ================\n &lt;br /&gt;* Este patr\u00f3n de dise\u00f1o est\u00e1 dise\u00f1ado para restringir la creaci\u00f3n de objetos pertenecientes a una clase. Su intenci\u00f3n consiste en garantizar que\n &lt;br /&gt;* una clase s\u00f3lo tenga una instancia y proporcionar un punto de acceso global a ella.\n &lt;br /&gt;* El patr\u00f3n Singleton se implementa creando en nuestra clase un m\u00e9todo que crea una instancia del objeto s\u00f3lo si todav\u00eda no existe alguna.\n &lt;br /&gt;* Para asegurar que la clase no puede ser instanciada nuevamente se regula el alcance del constructor haci\u00e9ndolo privado.\n &lt;br /&gt;* Las situaciones m\u00e1s habituales de aplicaci\u00f3n de este patr\u00f3n son aquellas en las que dicha clase ofrece un conjunto de utilidades comunes\n &lt;br /&gt;* para todas las capas (como puede ser el sistema de log, conexi\u00f3n a la base de datos, ...)\n &lt;br /&gt;* o cuando cierto tipo de datos debe estar disponible para todos los dem\u00e1s objetos de la aplicaci\u00f3n.\n &lt;br /&gt;* El patr\u00f3n Singleton provee una \u00fanica instancia global gracias a que:\n &lt;br /&gt;* - La propia clase es responsable de crear la \u00fanica instancia.\n &lt;br /&gt;* - Permite el acceso global a dicha instancia mediante un m\u00e9todo de clase.\n &lt;br /&gt;* - Declara el constructor de clase como privado para que no sea instanciable directamente.\n &lt;br /&gt;*/\npublic class DatabaseConnection {\n    private static DatabaseConnection dbInstance; //Variable para almacenar la unica instancia de la clase\n    private static java.sql.Connection con;\n\n    private DatabaseConnection() {\n        // El Constructor es privado!!\n    }\n\n    public static DatabaseConnection getInstance(){\n        //Si no hay ninguna instancia...\n        if(dbInstance==null){\n            dbInstance= new DatabaseConnection();\n        }\n        return dbInstance;\n    }\n\n    public static java.sql.Connection getConnection(){\n        if(con == null){\n            try {\n                String host = \"jdbc:mysql://localhost:3306/nombre-de-la-base-de-datos\";\n                String username = \"root\";\n                String password = \"sa\";\n                con = java.sql.DriverManager.getConnection( host, username, password );\n                System.out.println(\"Conexi\u00f3n realizada\");\n            } catch (java.sql.SQLException ex) {\n                System.out.println(\"Se ha producido un error al conectar: \" + ex.getMessage());\n            }\n        }\n        return con;\n    }\n}\n</code></pre> Java<pre><code>import java.sql.Connection; \nimport java.sql.DriverManager; \nimport java.sql.SQLException; \nimport java.sql.Statement; \n\npublic class Test {\n  static java.sql.Connection con = DatabaseConnection.getInstance().getConnection(); \n\n  public Test(){ \n      //De momento no hace nada \n  }\n\n  public void createTable() throws SQLException{ \n      Statement st = con.createStatement(); \n      st.executeUpdate(\"CREATE TABLE T1 (c1 varchar(50))\"); \n      st.close(); \n  }\n}\n</code></pre>"},{"location":"ud09/ud0905/#sentencias-que-devuelven-datos","title":"Sentencias que devuelven datos","text":"<p>Las ejecutamos con el m\u00e9todo <code>executeQuery</code>. Servir\u00e1 para la sentencia SELECT, que es la de consulta. Los datos que nos devuelva esta sentencia las tendremos que guardar en un objeto de la clase <code>java.sql.ResultSet</code>, es decir conjunto de resultado. Por lo tanto, la ejecuci\u00f3n de las consultas tendr\u00e1 un forma similar a la siguiente:</p> Java<pre><code>ResultSet rs = st.executeQuery(sentenciaSQL);\n</code></pre> <p>El objeto <code>ResultSet</code> contiene el resultado de la consulta organizado por filas, por lo que en cada momento se puede consultar una fila. Para ir visitando todas las filas de una a una, iremos llamando el m\u00e9todo <code>next()</code> del objeto <code>ResultSet</code>, ya que cada vez que se ejecute <code>next</code> avanzar\u00e1 a la siguiente fila. Inmediatamente despu\u00e9s de una ejecuci\u00f3n, el <code>ResultSet</code> se encuentra posicionado justo antes de la primera fila, por lo tanto para acceder a la primera fila ser\u00e1 necesario ejecutar <code>next</code> una vez. Cuando las filas se acaban, el m\u00e9todo <code>next</code> devolver\u00e1 falso.</p> <p>Desde cada fila se podr\u00e1 acceder al valor de sus columnas con ayuda de varios m\u00e9todos <code>get</code> disponibles seg\u00fan el tipo de datos a devolver y pasando por par\u00e1metro el n\u00famero de columna que deseamos obtener. El nombre de los m\u00e9todos comienza por <code>get</code> seguido del nombre del tipo de datos. As\u00ed, si queremos recuperar la segunda columna, sabiendo que es un dato de tipo <code>String</code> habr\u00e1 que ejecutar:</p> Java<pre><code>rs.getInt(1);\n</code></pre> <p>Las columnas se empiezan a contar a partir del valor 1 (no cero). La mayor parte de los SGDB soportan la posibilidad de pasar por par\u00e1metro el nombre de la columna, pero no todos, as\u00ed que normalmente se opta por el par\u00e1metro num\u00e9rico.</p> <p>Por ejemplo MySql s\u00ed que deja acceder por nombre, por tanto, suponiendo que el campo 1 se llama id, tambi\u00e9n se puede hacer:</p> Java<pre><code>rs.getInt(\"id\");\n</code></pre> <p>En este ejemplo accedemos a la tabla usuarios y mostramos todos sus registros</p> Java<pre><code>public void getAllUsers() throws SQLException{ \n    Statement st = con.createStaemnt(); \n    ResultSet rs = st.executeQuery(\"SELECT FROM usuarios\"); \n    while (rs.next()){ \n        System.out.print(rs.getInt(1) + \"\\t\"); \n        system.out.print(rs.getString(2) + \"\\t\"); \n        system.out.println(rs.getString(3)); \n    }\n    //Siempre se debe cerrar lodo lo Muerto \n    st.close(); \n    rs.close(); \n}\n</code></pre>"},{"location":"ud09/ud0905/#asegurar-la-liberacion-de-recursos","title":"Asegurar la liberaci\u00f3n de recursos","text":"<p>Las instancias de <code>Connection</code> y las de <code>Statement</code> guardan, en memoria, mucha informaci\u00f3n relacionada con las ejecuciones realizadas. Adem\u00e1s, mientras contin\u00faan activas mantienen en el SGBD una sesi\u00f3n abierta, que supondr\u00e1 un conjunto importante de recursos abiertos, destinados a servir de forma eficiente las peticiones de los clientes. Es importante cerrar estos objetos para liberar recursos tanto del cliente como del servidor.</p> <p>Si en un mismo m\u00e9todo debemos cerrar un objeto <code>Statement</code> y el <code>Connection</code> a partir del cual la hemos creado, se deber\u00e1 cerrar primero el <code>Statement</code> y despu\u00e9s el <code>Connection</code>. Si lo hacemos al rev\u00e9s, cuando intentamos cerrar el <code>Statement</code> nos saltar\u00e1 una excepci\u00f3n de tipo <code>SQLException</code>, ya que el cierre de la conexi\u00f3n le habr\u00eda dejado inaccesible.</p> <p>Adem\u00e1s de respetar el orden, asegurar la liberaci\u00f3n de los recursos situando las operaciones de cierre dentro de un bloque <code>finally</code>. De este modo, aunque se produzcan errores, no se dejar\u00e1n de ejecutar las instrucciones de cierre.</p> <p>Hay que tener en cuenta todav\u00eda un detalle m\u00e1s cuando sea necesario realizar el cierre de varios objetos a la vez. En este caso, aunque las situamos una tras otra, todas las instrucciones de cierre dentro del bloque <code>finally</code>, no ser\u00eda suficiente garant\u00eda para asegurar la ejecuci\u00f3n de todos los cierres, ya que, si mientras se produce el cierre de un los objetos se lanza una excepci\u00f3n, los objetos invocados en una posici\u00f3n posterior a la del que se ha producido el error no se cerrar\u00e1n.</p> <p>La soluci\u00f3n de este problema pasa por evitar el lanzamiento de cualquier excepci\u00f3n durante el proceso de cierre. Una posible forma es encapsular cada cierre entre sentencias <code>try-catch</code> dentro del <code>finally</code>.</p> Aqu\u00ed ten\u00e9is un ejemplo Java<pre><code>private void getAllUsers() {\n    Statement st = null;\n    ResultSet rs = null; \n\n    try { \n        st = con.createStatement(); \n        rs = st.executeQuery(\"SELECT * FROM usuarios\"); \n\n        while (rs.next()){ \n            System.out.print(rs.getInt(1) + \"\\t\"); \n            system.out.print(rs.getString(2) + \"\\t\"); \n            System.out.println(rs.getString(3)); \n        }\n    } catch(SQLException e){ \n        System.out.println \"Se ha producido un error al leer los usuarios. Mensaje: \" + e.getMessage());\n    } finally { \n        try{ \n            //Siempre se debe cerrar todo lo abierto\n            if (st != null) {\n                st.close();\n            }\n        } catch (java.sql.SQLException ex){ \n            System.out.printIn(\"Se ha producido un error: \" + ex.getMessage()); \n        }\n        try{ \n            //Siempre se debe cerrar todo lo abierto \n            if (rs != null) {\n                rs.close();\n            }\n        } catch (java.sql.SQLException ex){ \n            System.out.printIn(\"Se ha producido un error: \" + ex.getMessage()); \n        }\n    }\n}\n</code></pre>"},{"location":"ud09/ud0906/","title":"9.6 Modificaci\u00f3n (update)","text":"<p>Para poder modificar los datos que contiene un ResultSet necesitamos un ResultSet de tipo modificable. Para ello debemos utilizar la constante <code>ResultSet.CONCUR_UPDATABLE</code> al llamar al m\u00e9todo <code>createStatement()</code> como se ha visto antes.</p> <p>Para modificar los valores de un registro existente se utilizan una serie de m\u00e9todos <code>updateXXX()</code> de ResultSet. Las XXX indican el tipo del dato y hay tantos distintos como sucede con los m\u00e9todos getXXX() de este mismo interfaz: updateString(), updateInt(), updateDouble(), updateDate(), etc.</p> <p>La diferencia es que los m\u00e9todos <code>updateXXX()</code> necesitan dos argumentos:</p> <ul> <li>La columna que deseamos actualizar (por su nombre o por su n\u00famero de columna).</li> <li>El valor que queremos almacenar en dicha columna (del tipo que sea).</li> </ul> <p>Por ejemplo para modificar el campo \u2018edad\u2019 almacenando el entero 28 habr\u00eda que llamar al siguiente m\u00e9todo, suponiendo que rs es un objeto ResultSet:</p> Java<pre><code>rs.updateInt(\"edad\", 28);\n</code></pre> <p>Tambi\u00e9n podr\u00eda hacerse de la siguiente manera, suponiendo que la columna edad es la segunda:</p> Java<pre><code>rs.updateInt(2, 28);\n</code></pre> <p>Los m\u00e9todos updateXXX() no devuelven ning\u00fan valor (son de tipo void). Si se produce alg\u00fan error se lanzar\u00e1 una SQLException.</p> <p>Posteriormente hay que llamar a updateRow() para que los cambios realizados se apliquen sobre la base de datos. El Driver JDBC se encargar\u00e1 de ejecutar las sentencias SQL necesarias. Esta es una caracter\u00edstica muy potente ya que nos facilita enormemente la tarea de modificar los datos de una base de datos. Este m\u00e9todo devuelve void.</p> <p>En resumen, el proceso para realizar la modificaci\u00f3n de una fila de un ResultSet es el siguiente:</p> <ol> <li>Desplazamos el cursor al registro que queremos modificar.</li> <li>Llamamos a todos los m\u00e9todos updateXXX(...) que necesitemos.</li> <li>Llamamos a <code>updateRow()</code> para que los cambios se apliquen a la base de datos.</li> </ol> <p>Es importante entender que hay que llamar a updateRow() antes de desplazar el cursor. Si desplazamos el cursor antes de llamar a updateRow(), se perder\u00e1n los cambios.</p> <p>Si queremos cancelar las modificaciones de un registro del ResultSet podemos llamar a <code>cancelRowUpdates()</code>, que cancela todas las modificaciones realizadas sobre el registro actual.</p> <p>Si ya hemos llamado a updateRow() el m\u00e9todo cancelRowUpdates() no tendr\u00e1 ning\u00fan efecto.</p> <p>El siguiente c\u00f3digo de ejemplo muestra c\u00f3mo modificar el campo \u2018direcci\u00f3n\u2019 del \u00faltimo registro de un ResultSet que contiene el resultado de una SELECT sobre la tabla de clientes. Supondremos que conn es un objeto Connection previamente creado:</p> Java<pre><code>// Creamos un Statement scrollable y modificable\nStatement st = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n// Ejecutamos un SELECT y obtenemos la tabla clientes en un ResultSet\nString sql = \"SELECT * FROM clientes\";\nResultSet rs = st.executeQuery(sql);\n// Vamos al \u00faltimo registro, lo modificamos y actualizamos la base de datos\nrs.last();\nrs.updateString(\"direccion\", \"C/ Pepe Ciges, 3\");\nrs.updateRow();\n</code></pre>"},{"location":"ud09/ud0907/","title":"9.7 Inserci\u00f3n (insert)","text":"<p>Para insertar nuevos registros necesitaremos utilizar, al menos, estos dos m\u00e9todos:</p> <ul> <li><code>void moveToInsertRow()</code>: desplaza el cursor al registro de inserci\u00f3n. Es un registro especial utilizado para insertar nuevos registros en el ResultSet. Posteriormente tendremos que llamar a los m\u00e9todos updateXXX() ya conocidos para establecer los valores del registro de inserci\u00f3n. Para finalizar hay que llamar a insertRow().</li> <li><code>void insertRow()</code>: inserta el registro de inserci\u00f3n en el ResultSet, pasando a ser un registro normal m\u00e1s, y tambi\u00e9n lo inserta en la base de datos.</li> </ul> <p>El siguiente c\u00f3digo inserta un nuevo registro en la tabla clientes. Supondremos que conn es un objeto Connection previamente creado:</p> Java<pre><code>// Creamos un Statement scrollable y modificable\nStatement st = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n// Ejecutamos un SELECT y obtenemos la tabla clientes en un ResultSet\nString sql = \"SELECT * FROM clientes\";\nResultSet rs = st.executeQuery(sql);\n// Creamos un nuevo registro y lo insertamos\nrs.moveToInsertRow();\nrs.updateString(2,\"Killy Lopez\");\nrs.updateString(3,\"Wall Street 3674\");\nrs.insertRow();\n</code></pre> <p>Los campos cuyo valor no se haya establecido con updateXXX() tendr\u00e1n un valor NULL. Si en la base de datos dicho campo no est\u00e1 configurado para admitir nulos se producir\u00e1 una SQLException.</p> <p>Tras insertar nuestro nuevo registro en el objeto ResultSet podremos volver a la anterior posici\u00f3n en la que se encontraba el cursor (antes de invocar moveToInsertRow() ) llamando al m\u00e9todo <code>moveToCurrentRow()</code>. Este m\u00e9todo s\u00f3lo se puede utilizar en combinaci\u00f3n con moveToInsertRow().</p> Ejemplo 1 Java<pre><code>public void insertUser(){ \n    Statement st = null; \n    String sql = \"INSERT INTO usuarios (nombre, apellidos) VALUES ('Carlos', 'S\u00e1nchez')\";\n    try { \n        st = con.createStatement(); \n        st.executeUpdate(sql); \n    } catch (SQLException e)) {\n        System.out.println(\"Se ha producido un error al insertar el usuario. Mensaje: \" + e.getMessage()); \n    } finally { \n        try{ \n            //Siempre se debe cerrar todo lo abierta \n            if (st != null) {\n                st.close(); \n            }\n        } catch(java.sql.SQLException ex){ \n            System.out.println(\"Se ha producido un error. Mensaje: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> Ejemplo 2: m\u00e9todo pas\u00e1ndole nombre y apellidos Java<pre><code>public void insertUser(String nombre, String apellidos){ \n    Statement st = null; \n    String sql = \"INSERT INTO usuarios (nombre, apellidos) VALUES ('\" + nombre + \"', '\" + apellidos + \"')\";\n    try { \n        st = con.createStatement(); \n        st.executeUpdate(sql); \n    } catch (SQLException e)) {\n        System.out.println(\"Se ha producido un error al insertar el usuario. Mensaje: \" + e.getMessage()); \n    } finally { \n        try{ \n            //Siempre se debe cerrar todo lo abierta \n            if (st != null) {\n                st.close(); \n            }\n        } catch(java.sql.SQLException ex){ \n            System.out.println(\"Se ha producido un error. Mensaje: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"ud09/ud0908/","title":"9.8 Borrado (delete)","text":"<p>Para eliminar un registro solo hay que desplazar el cursor al registro deseado y llamar al m\u00e9todo:</p> <ul> <li><code>void deleteRow()</code>: elimina el registro actual del ResultSet y tambi\u00e9n de la base de datos.</li> </ul> <p>El siguiente c\u00f3digo borra el tercer registro de la tabla <code>clientes</code>:</p> Java<pre><code>// Creamos un Statement scrollable y modificable\nStatement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n// Ejecutamos un SELECT y obtenemos la tabla clientes en un ResultSet\nString sql = \"SELECT * FROM clientes\";\nResultSet rs = stmt.executeQuery(sql);\n// Desplazamos el cursor al tercer registro\nrs.absolute(3)\nrs.deleteRow();\n</code></pre>"},{"location":"ud09/ud0909/","title":"9.9 Sentencias predefinidas","text":"<p>Para solucionar el problema de crear sentencias sql complejas, se utiliza <code>PreparedStatement</code>.</p> <p>JDBC dispone de un objeto derivado del <code>Statement</code> que se llama <code>PreparedStatement</code>, al que se le pasa la sentencia SQL en el momento de crearlo, no en el momento de ejecutar la sentencia (como pasaba con <code>Statement</code>). Y adem\u00e1s esta sentencia puede admitir par\u00e1metros, lo que nos puede ir muy bien en determinadas ocasiones.</p> <p>De cualquier modo, <code>PreparedStatement</code> presenta ventajas sobre su antecesor <code>Statement</code> cuando nos toque trabajar con sentencias que se hayan de ejecutar varias veces. La raz\u00f3n es que cualquier sentencia SQL, cuando se env\u00eda al SGBD ser\u00e1 compilada antes de ser ejecutada.</p> <ul> <li>Utilizando un objeto <code>Statement</code>, cada vez que hacemos una ejecuci\u00f3n de una sentencia, ya sea v\u00eda <code>executeUpdate</code> o bien v\u00eda <code>executeQuery</code>, el SGBD la compilar\u00e1, ya que le llegar\u00e1 en forma de cadena de caracteres.</li> <li>En cambio, al <code>PreparedStament</code> la sentencia nunca var\u00eda y por lo tanto se puede compilar y guardar dentro del mismo objeto, por lo que las siguientes veces que se ejecute no habr\u00e1 que compilarse. Esto reducir\u00e1 sensiblemente el tiempo de ejecuci\u00f3n.</li> </ul> <p>En algunos sistemas gestores, adem\u00e1s, usar <code>PreparedStatements</code> puede llegar a suponer m\u00e1s ventajas, ya que utilizan la secuencia de bytes de la sentencia para detectar si se trata de una sentencia nueva o ya se ha servido con anterioridad. De esta manera se propicia que el sistema guarde las respuestas en la memoria cach\u00e9, de manera que se puedan entregar de forma m\u00e1s r\u00e1pida.</p> <p>La principal diferencia de los objetos <code>PreparedStatement</code> en relaci\u00f3n a los <code>Statement</code>, es que en los primeros se les pasa la sentencia SQL predefinida en el momento de crearlo. Como la sentencia queda predefinida, ni los m\u00e9todos <code>executeUpdate</code> ni <code>executeQuery</code> requerir\u00e1n ning\u00fan par\u00e1metro. Es decir, justo al rev\u00e9s que en el <code>Statement</code>.</p> <p>Los par\u00e1metros de la sentencia se marcar\u00e1n con el s\u00edmbolo de interrogaci\u00f3n (?) Y se identificar\u00e1n por la posici\u00f3n que ocupan en la sentencia, empezando a contar desde la izquierda a partir del n\u00famero 1. El valor de los par\u00e1metros se asignar\u00e1 utilizando el m\u00e9todo espec\u00edfico, de acuerdo con el tipo de datos a asignar. El nombre empezar\u00e1 por <code>set</code> y continuar\u00e1 con el nombre del tipo de datos (ejemplos: <code>setString</code>, <code>setInt</code>, <code>setLong</code>, <code>setBoolean</code> \u2026). Todos estos m\u00e9todos siguen la misma sintaxis:</p> Java<pre><code>setXXXX(&lt;posici\u00f3nEnLaSentenciaSQL&gt;, &lt;valor&gt;);\n</code></pre> <p>Este es el mismo m\u00e9todo para insertar un usuario pero usando <code>PreparedStatement</code>:</p> Java<pre><code>public void insertUserPrepared(String nombre, String apellidos){ \n    PreparedStatement st = null; \n    String sql = \"INSERT INTO usuarios (nombre, apellidos) VALUES (?, ?)\";\n\n    try { \n        st = con.preparedStatement(sql); \n        st.setString(1, nombre);\n        st.setString(2, apellidos);\n        st.executeUpdate(sql); \n\n    } catch (SQLException e)) {\n        System.out.println(\"Se ha producido un error al insertar el usuario. Mensaje: \" + e.getMessage()); \n\n    } finally { \n        try{ \n            //Siempre se debe cerrar todo lo abierto\n            if (st != null) {\n                st.close(); \n            }\n        } catch(java.sql.SQLException ex){ \n            System.out.println(\"Se ha producido un error. Mensaje: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>Fijaos que ahora, adem\u00e1s, la sentencia sql es mucho m\u00e1s f\u00e1cil de escribir.</p>"},{"location":"ud09/ud0910/","title":"9.10 Trabajar con Sqlite","text":"<p>Para poder trabajar en casa, vamos a utilizar Sqlite que es un una base de datos sencilla que se guarda en un \u00fanico archivo en disco.</p> <p>Lo primero es instalar SQLite, en Ubuntu:</p> Bash<pre><code>sudo apt install sqlite3\n</code></pre> <p>Si quer\u00e9is hacerlo en Windows, pod\u00e9is seguir las instrucciones en http://www.sqlitetutorial.net/download-install-sqlite/.</p> <p>Para poder trabajar en Java, hemos de descargar el conector, desde http://www.sqlitetutorial.net/sqlite-java/sqlite-jdbc-driver/.</p> <p>Lo primero que hemos de hacer es crear una base de datos, desde la l\u00ednea de comandos. Para ello nos situamos en el directorio del proyecto y la creamos en el directorio <code>bd</code> mediante el siguiente comando:</p> Bash<pre><code>cd directorio-del-proyecto\n# directorio-del-proyecto: src/sources\nmkdir bd\ncd bd\nsqlite network.bd\n</code></pre>"},{"location":"ud09/ud0910/#instalar-sqlitestudio","title":"Instalar SQLiteStudio","text":"<p>Desde estos enlaces:</p> <p>\u200b   https://sqlitestudio.pl/ (Ubuntu) y</p> <p>\u200b   https://github.com/pawelsalawa/sqlitestudio/releases (otras plataformas),</p> <p>podemos instalar una aplicaci\u00f3n gr\u00e1fica para trabajar (m\u00e1s f\u00e1cilmente) con SQLite.</p> <p>Mediante estos comandos creamos una base de datos en disco llamada prudb.bd.</p> <p>Ahora podemos crear las tablas mediante VSCode, a\u00f1adiendo una nueva <code>DataBaseConnection</code>, al igual que hicimos con MySql (previamente hemos de crear el <code>Driver Definition</code>).</p> SQL<pre><code>CREATE TABLE usuarios (\n id INTEGER PRIMARY KEY AUTOINCREMENT,\n  nombre VARCHAR(50) NOT NULL,\n  apellidos VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE posts (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  texto VARCHAR(255) NOT NULL,\n  likes INTEGER NOT NULL,\n  fecha timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  id_usuario INTEGER NOT NULL,\n  FOREIGN KEY (id_usuario) REFERENCES usuarios(id)\n);\n\n\nCREATE TABLE comentarios (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  texto VARCHAR(255) NOT NULL,\n  fecha timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  id_usuario INTEGER  NOT NULL,\n  id_post INTEGER  NOT NULL,\n  FOREIGN KEY (id_usuario) REFERENCES usuarios(id),\n  FOREIGN KEY (id_post) REFERENCES posts(id)\n);\n</code></pre> <p>Y vamos a a\u00f1adir el .jar que hemos descargado al Build path.</p> <p>As\u00ed que elegimos el jar desde Build Path -&gt; Libraries -&gt; Add External JARs.</p> <p>Y ahora modificamos <code>DatabaseConnection</code>:</p> Java<pre><code> String host = \"jdbc:sqlite:src/main/resources/network\";\n con = java.sql.DriverManager.getConnection( host);\n</code></pre> <p>Y hacemos una prueba para ver si funciona:</p> Java<pre><code>import java.sql.SQLException; \n\npublic class Main { \n\n      public static void main(String[] args) { \n          // TODO Aute-generated mettod stub \n          Test t = new Test(); \n          t.insertUser(); \n\n          try {\n              t.getellUsers(); \n          } catch (SQLException sqle) { \n              System.out.println(sqle.getMessage()); \n          }\n          t.closeConnection(); \n      }\n}\n</code></pre> <p>Y este debe ser el resultado:</p> Bash<pre><code>Conexi\u00f3n realizada\n1   Janet   Espinosa\n</code></pre>"},{"location":"ud09/ud0910/#ejemplos","title":"Ejemplos","text":"<p>Vamos a crear una peque\u00f1a base de datos para Empleados en Sqlite:</p> Num Nombre Departamento Edad Sueldo 1 Andreu 10 32 1000.00 2 Bernat 20 28 1200.00 3 Claudia 10 26 1100.00 4 Dami\u00e0 10 40 1500.00 <p>Primero creamos un nuevo Proyecto en VSCode llamado <code>EmpleadosBD</code> y le a\u00f1adimos la librer\u00eda sqlite al build path.</p> <p>Creamos tambi\u00e9n la base de datos mediante la l\u00ednea de comandos:</p> Bash<pre><code>cd directorio-del-proyecto\nmkdir bd\ncd bd\nsqlite empleados.bd\n</code></pre> <p>Copiamos el archivo <code>DatabaseConnection.java</code> del anterior proyecto y modificamos la cadena de conexi\u00f3n:</p> Java<pre><code>String host = \"jdbc:sqlite:./bd/empleados.bd\";\ncon = java.sql.DriverManager.getConnection( host);\n</code></pre>"},{"location":"ud09/ud0910/#crear-tabla","title":"Crear tabla","text":"<p>Creamos una clase <code>CreateTable</code> para poder crear la tabla:</p> Java<pre><code>import java.sql.SQLException; \nimport java.sql.Statement; \n\npublic class CreateTable {\n    static java.sql.Connection con = DatabaseConnection.getInstance().getConnection(); \n\n    public static vold main(String[] args) { \n        Statement st = null; \n        String sql = \"CREATE TABLE empleados ( \" + \n                     \" num INTEGER PRIMARY KEY, \" + \n                     \" nombre VARCHAR(255), \" +\n                     \" departamento INTEGER, \" + \n                     \" edad INTEGER, \" + \n                     \" sueldo REAL);\"; \n        try { \n            st = con.createStatement(); \n            st.executeUpdate(sql); \n        } catch (sQLException ex) { \n            system.out.println(\"Error \" + ex.getMessage()); \n        } finally {\n            try {\n                if (st != null &amp;&amp; !st.isClosed()) {\n                    st.close(); \n                }\n            } catch (SQLException ex) { \n                system.out.println (\"No se ha podido cerrar el Statement por alguna raz\u00f3n\");\n            }\n            try {\n                if (con != null &amp;&amp; !con.isClosed()) {\n                    con.close(); \n                }\n            } catch (SQLException ex) { \n                system.out.println (\"No se ha podido cerrar el Statement por alguna raz\u00f3n\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ud09/ud0910/#insertar-datos","title":"Insertar datos","text":"<p>Y creamos otra para insertar datos. Esta vez lo haremos con <code>PreparedStatement</code>:</p> Java<pre><code>import java.sql.PreparedStatement; \nimport java.sql.SQLException; \n\npublic class InsertData { \n  static java.sql.Connection con = DatabaseConnection.getInstance().getConnection(); \n\n  public static void main(String[] args) { \n      PreparedStatement st = null;\n      String sql = \"INSERT INTO empleados (num, nombre, departamento, edad, sueldo) VALUES (?, ?, ?, ?, ?)\"; \n      try { \n          st = con.prepareStatement(sql); \n          st.setlnt(1, 1); \n          st.setString(2, \"Andreu\"); \n          st.setlnt(3, 10); \n          st.setlnt(4, 32); \n          st.setDouble(5, 1000.0); \n          st.executeUpdate(); \n\n          st.setlnt(1, 2); \n          st.setString(2, \"Bernat\"); \n          st.setlnt(3, 20); \n          st.setlnt(4, 28); \n          st.setDouble(5, 1200.0); \n          st.executeUpdate(); \n\n          st.setlnt(1, 3); \n          st.setString(2, \"Claudia\"); \n          st.setlnt(3, 10); \n          st.setlnt(4, 26);\n          st.setDouble(5, 1400.0); \n          st.executeUpdate(); \n\n          st.setlnt(1, 4); \n          st.setString(2, \"Dami\u00e1n\"); \n          st.setlnt(3, 10); \n          st.setlnt(4, 40); \n          st.setDouble(5, 1300.0); \n          st.executeUpdate(); \n\n      } catch (SQLException ex) { \n          System.out.println(\"Error \" + ex.getMessage()); \n\n      } finally { \n          try { \n              if (st != null &amp;&amp; !st.isClosed()) { \n                  st.close(); \n              } \n          } catch (SQLException ex) { \n              System.out.println(\"No se ha podido cerrar el Statement por alguna raz\u00f3n\"); \n          } \n\n          try { \n              if (con != null &amp;&amp; !con.isClosed()) { \n                  con.close(); \n              } \n          } catch (SQLException ex) { \n              System.out.println(\"No se ha podido cerrar Connection por alguna raz\u00f3n\"); \n          } \n      }\n  }\n}\n</code></pre> <p>Esta es la versi\u00f3n con <code>Statement</code>:</p> Java<pre><code>import java.sql.Statement; \nimport java.sql.SQLException; \n\npublic class InsertDataStatement { \n  static java.sql.Connection con = Databaseconnection.getInstance().getConnection(); \n\n  public static void main(String[] args) { \n      Statement st = null; \n      String sql = \"\"; \n\n      try { \n          st = con.createStatement();\n          sql = \"INSERT INTO EMPLEADOS (num, nombre, departamento, edad, sueldo) VALUES (5, 'Arturo', 10, 32, 1088.8)\"; \n          st.executeUpdate(sql); \n\n          sql = \"INSERT INTO EMPLEADOS (num, nombre, departamento, edad, sueldo) VALSES (6, 'Juan', 28, 28, 1280.8)\";\n          st.executeUpdate(sql); \n\n          sql = \"INSERT INTO EMPLEADOS (num, nombre, departamento, edad, sueldo) VALUES (2, 'Mart\u00edn', 10, 26, 1488.8)\"; \n          st.executeUpdate(sql); \n\n      } catch (SQLEXCeptiOn ex) {\n          System.ont.println(\"Error: \"+ ex.getMesSege());\n\n      } finally {\n          try { \n              if (st != null &amp;&amp; !st.isClosed()) {\n                  st.close(); \n              }\n          } catch (SQLException ex) { \n              System.out.println(\"No se ha podido cerrar el Statement por alguna raz\u00f3n\");\n          }\n          try { \n              if (con != null &amp;&amp; !con.isClosed()) {\n                  con.close(); \n              }\n          } catch (SQLException ex) { \n              System.out.println(\"No se ha podido cerrar el Statement por alguna raz\u00f3n\");\n          }\n      }\n  }\n}\n</code></pre>"},{"location":"ud09/ud0910/#consultar-datos","title":"Consultar datos","text":"<p>Creamos una clase <code>getAllEmpleados</code> que nos devuelva todos los empleados:</p> Java<pre><code>import java.sql.Resultset; \nimport java.sql.SQLException; \nimport java.sql.Statement; \n\npublic class getAllEmpleados { \n    static java.sql.Connection con = DatabaseConnection.getInstance().getConnection(); \n\n    public static void main(String[] args) { \n        Statement st = null; \n        Resultset rs = null; \n\n        try {\n            st = con.createStatement(); \n            rs = st.executeQuery(\"SELECT * FROM empleados\"); \n            System.out.println(\"N\u00fam. \\tNombre \\tDep \\tEdad \\tSueldo\"); \n            System.out.println(\"------------------------------------------\");\n            while (rs.next()){ \n                System.out.print(rs.getInt(1) + \"\\t\"); \n                system.out.print(rs.getString(2) + \"\\t\"); \n                system.out.print(rs.getInt(3) + \"\\t\"); \n                system.out.print(rs.getInt(4) + \"\\t\"); \n                System.out.println(rs.getDouble(5)); \n\n        } catch(SQLException e) { \n                System.out.println(\"Se ha producido un error al leer los usuarios \" + e.getMessage());           \n\n        } finally { \n            try { \n                //Siempre se debe cerrar todo lo abierto \n                if (st != null) {\n                    st.close(); \n                }\n            } catch (java.sql.SQLException ex){\n                System.out.println(\"Se ha producido un error: \" + ex.getMessage()); \n            }\n            try { \n                //Siempre se debe cerrar todo lo abierto \n                if (rs != null) {\n                    rs.close(); \n                }\n            } catch (java.sql.SQLException ex){\n                System.out.println(\"Se ha producido un error: \" + ex.getMessage()); \n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ud09/ud0910/#modificar-datos","title":"Modificar datos","text":"<p>Ahora modificamos los datos. Simplemente aumentamos el sueldo un 5% y modificamos el departamento del empleado 3, poni\u00e9ndole el departamento 3.</p> Java<pre><code>import java.sql.Statement; \nimport java.sql.SQLException; \n\npublic class ModifyData { \n  static java.sql.Connection con = Databaseconnection.getInstance().getConnection(); \n\n  public static void main(String[] args) { \n      Statement st = null; \n      String sql = \"\";\n      try {\n          st = con.createStatement(); \n          sql = \"UPDATE EMPLEADOS SET sueldo = sueldo * 1.05\";\n          st.executeUpdate(sql);\n\n          sql = \"UPDATE EMPLEADOS SET departamento = 20 WHERE num = 3\";\n          st.executeUpdate(sql); \n\n      } catch (SQLException ex) { \n          system.out.printlnr(\"Error \"+ ex.getMessage());\n\n      } finally { \n          try { \n              if (st != null &amp;&amp; !st.isClosed()) { \n                  st.close(); \n              } \n          } catch (SQLException ex) { \n              system.out.println(\"No se ha podido cerrar el Statement por alguna raz\u00f3n\");\n          }\n          try { \n              if (con != null &amp;&amp; !con.isClosed()) { \n                  con.close(); \n              } \n          } catch (SQLException ex) { \n              system.out.println(\"No se ha podido cerrar el Statement por alguna raz\u00f3n\");\n          }\n      }\n  }\n}\n</code></pre>"},{"location":"ud09/ud0911/","title":"9.11 Repository pattern","text":"<p>Descarga</p> <p>Descarga la base de datos desde aqu\u00ed.</p> <p>En este apartado vamos a aprender a a\u00f1adir a un proyecto orientado a objetos la persistencia en base de datos, sin usar ninguna tecnolog\u00eda como Hibernate.</p> <p>Partimos de una aplicaci\u00f3n en la que los usuarios pueden escribir Posts y comentar Posts hechos por otros usuarios. Por lo que existen tres entidades: Users, Posts y Comments. En la siguiente imagen se muestran estas entidades representadas en una base de datos:</p> <p>En programaci\u00f3n existen una serie de est\u00e1ndares denominados Patrones de Dise\u00f1o que debes conocer para poder programar seg\u00fan estos patrones y no reinventar la rueda.</p> <p>Nota</p> <p>Nosotros vamos a implementar \u201cRepository Pattern\u201d porque tambi\u00e9n os va a servir para cualquier aplicaci\u00f3n tanto web, m\u00f3vil o de escritorio.</p> <p>Seg\u00fan la documentaci\u00f3n de Android.</p> <p>The repository pattern is a design pattern that isolates the data layer from the rest of the app. The data layer refers to the part of your app, separate from the UI, that handles the app\u2019s data and business logic, exposing consistent APIs for the rest of your app to access this data.</p>"},{"location":"ud09/ud0911/#database-connection","title":"Database Connection","text":"<p>Esta es la misma clase del apartado anterior:</p> Java<pre><code>/*\n * @see &lt;a href=\"https://stackoverflow.com/questions/6567839/if-i-use-a-singleton-class-for-a-database-connection-can-one-user-close-the-con\"&gt;Stackoverflow Singleton&lt;/a&gt;\n * Patron Singleton\n * ================\n * Este patr\u00f3n de dise\u00f1o est\u00e1 dise\u00f1ado para restringir la creaci\u00f3n de objetos pertenecientes a una clase. Su intenci\u00f3n consiste en garantizar que\n * una clase s\u00f3lo tenga una instancia y proporcionar un punto de acceso global a ella.\n * El patr\u00f3n Singleton se implementa creando en nuestra clase un m\u00e9todo que crea una instancia del objeto s\u00f3lo si todav\u00eda no existe alguna.\n * Para asegurar que la clase no puede ser instanciada nuevamente se regula el alcance del constructor haci\u00e9ndolo privado.\n * Las situaciones m\u00e1s habituales de aplicaci\u00f3n de este patr\u00f3n son aquellas en las que dicha clase ofrece un conjunto de utilidades comunes\n * para todas las capas (como puede ser el sistema de log, conexi\u00f3n a la base de datos, ...)\n * o cuando cierto tipo de datos debe estar disponible para todos los dem\u00e1s objetos de la aplicaci\u00f3n.\n * El patr\u00f3n Singleton provee una \u00fanica instancia global gracias a que:\n * - La propia clase es responsable de crear la \u00fanica instancia.\n * - Permite el acceso global a dicha instancia mediante un m\u00e9todo de clase.\n * - Declara el constructor de clase como privado para que no sea instanciable directamente.\n */\npublic class DatabaseConnection\n{\n    private static DatabaseConnection dbInstance; //Variable para almacenar la unica instancia de la clase\n    private static java.sql.Connection con;\n\n    private DatabaseConnection() {\n        // El Constructor es privado!!\n    }\n\n    public static DatabaseConnection getInstance(){\n        //Si no hay ninguna instancia...\n        if(dbInstance==null){\n            dbInstance= new DatabaseConnection();\n        }\n        return dbInstance;\n    }\n\n    public  static java.sql.Connection getConnection(){\n\n        if(con==null){\n            try {\n                String host = \"jdbc:sqlite:src/main/resources/network\";\n                con = java.sql.DriverManager.getConnection( host );\n                System.out.println(\"Conexi\u00f3n realizada\");\n            } catch (java.sql.SQLException ex) {\n                System.out.println(\"Se ha producido un error al conectar: \" + ex.getMessage());\n            }\n        }\n\n        return con;\n    }\n}\n</code></pre>"},{"location":"ud09/ud0911/#interfaz-irepository","title":"Interfaz IRepository","text":"<p>Vamos a empezar creando la interfaz <code>IRepository</code> que han de implementar todas las clases que accedan a datos.</p> Java<pre><code>import java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\npublic interface IRepository&lt;T&gt; {\n    List&lt;T&gt; findAll() throws SQLException;\n    T findById(int id) throws SQLException;\n    void save(T entity)  throws SQLException;\n    void delete(T entity) throws SQLException ;\n    T bdToEntity(ResultSet rs) throws SQLException ;\n}\n</code></pre> <p>Fijaos en la notaci\u00f3n <code>&lt;T&gt;</code>. Esto indica que vamos a usar tipos gen\u00e9ricos. Puede ser cualquier clase de java.</p> <ul> <li><code>findAll()</code> va a recuperar datos de la base de datos y va a crear una lista de objetos <code>T</code>, donde <code>T</code>ser\u00e1 usuario, post o comentario.</li> <li><code>findById(int id)</code> va a recuperar el objeto <code>T</code> con dicho <code>id</code></li> <li><code>save(T entity)</code> va a guardar el objeto <code>T</code> en la base de datos</li> <li><code>deleteById(User user)</code> va a borrar el objeto <code>user</code> en la base de datos</li> <li><code>bdToEntity(Resulset s)</code> va a encargarse de convertir un registro de la base de datos en una clase de tipo <code>T</code>, por ejemplo un usuario, un post o un comentario.</li> </ul>"},{"location":"ud09/ud0911/#socialnetworkservice","title":"SocialNetworkService","text":"<p>Un servicio es un tipo de clase que gestiona recursos que se usan en cualquier parte de la aplicaci\u00f3n. Es este caso estamos definiendo el recurso <code>java.sql.Connection</code>:</p> Java<pre><code>public class SocialNetworkService {\n\n    static  final java.sql.Connection connection = DatabaseConnection.getInstance().getConnection();\n    public static java.sql.Connection getConnection(){\n        return connection;\n    }\n}\n</code></pre> <p>M\u00e1s adelante lo usaremos en le m\u00e9todo <code>main</code></p>"},{"location":"ud09/ud0911/#user","title":"User","text":"<p>Esta es la clase que va a almacenar los datos de la base de datos. Es una clase <code>POJO (Plain Old Java Object)</code></p> Java<pre><code>import java.util.ArrayList;\n\npublic class User\n{\n    private int id;\n    private String name;\n    private String lastName;\n\n    public User()\n    {\n        this.name = \"\";\n        this.lastName = \"\";\n        this.id = -1;\n    }\n    public User(int id, String name, String lastName){\n        this.id = id;\n        this.name = name;\n        this.lastName = lastName;\n    }\n    public User(String name, String lastName)\n    {\n        this(-1, name, lastName);\n    }\n    public int getId(){\n        return id;\n    }\n    public void setId(int id){\n        this.id = id;\n    }\n    public String getName(){\n        return name;\n    }\n    public void setName(String name){\n        this.name = name;\n    }\n    public String getLastName(){\n        return lastName;\n    }\n    public void setLastName(String lastName){\n        this.lastName = lastName;\n    }\n\n    @Override\n    public String toString(){\n        return \"ID: \" + id + \" Name: \" + name + \" Lastname: \" + lastName;\n    }\n\n}\n</code></pre>"},{"location":"ud09/ud0911/#userrepositoryimpl","title":"UserRepositoryImpl","text":"<p>Esta clase va a ser la que realice el mapeo entre la base de datos y los objetos del modelo de datos de tal forma que va a corregir el llamado desfase objeto-relacional. B\u00e1sicamente consiste en convertir los registros de la base de datos en objetos y almacenar en la base de datos los objetos de mi modelo.</p> Java<pre><code>import java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserRepositoryImpl implements IRepository&lt;User&gt; {\n    private java.sql.Connection con;\n    public UserRepositoryImpl(){\n        this.con = SocialNetworkService.getConnection();\n    }\n\n    /**\n     * Se encarga de mapear um registro de la base de datos para converirlo en un objeto User\n     * @param rs\n     * @return Un objeto User\n     * @throws SQLException\n     */\n    public User bdToEntity(ResultSet rs) throws SQLException {\n        return new User(rs.getInt(\"id\"), rs.getString(\"name\"), rs.getString(\"lastName\"));\n    }\n\n    /**\n     * Consulta todos los registros de la tabla users\n     * @return Una lista de objetos User\n     * @throws SQLException\n     */\n    public List&lt;User&gt; findAll() throws SQLException {\n\n        List&lt;User&gt; users = new ArrayList&lt;&gt;();\n\n        Statement st = this.con.createStatement();\n        //Ejecutar la consulta, guardando los datos devueltos en un Resulset\n        ResultSet rs = st.executeQuery(\"SELECT * FROM users ORDER BY lastName, name\");\n\n        while(rs.next()){\n            //Mapeamos el registro de la BD en un User\n            User u =  bdToEntity(rs);\n            //A\u00f1adir el User al conjunto de users\n            users.add(u);\n        }\n        return users;\n    }\n    //De momento estos tres m\u00e9todos no hacen nada pero hacen falta para poder probar findAll\n    public User findById(int id) throws SQLException {\n        return new User();\n    }\n   public void save(User user) throws SQLException{\n\n    }\n\n    public void delete(User user) throws SQLException {\n\n    }\n}\n</code></pre> <p>Para que pueda compilar esta clase es necesario que est\u00e9n implementados (aunque no hagan nada) todos los m\u00e9todos de la interfaz <code>IRepository</code> por eso el cuerpo del m\u00e9todo no hace nada.</p>"},{"location":"ud09/ud0911/#socialnetwork","title":"SocialNetwork","text":"<p>Esta clase va a contener el m\u00e9todo <code>main</code>. De momento vamos a probar que podemos listar los usuarios de la aplicaci\u00f3n.</p> Java<pre><code>import java.sql.SQLException;\nimport java.util.List;\n\npublic class SocialNetwork {\n\n    public static void main(String[] args) throws SQLException {\n\n        UserRepositoryImpl userRepository = new UserRepositoryImpl();\n        List&lt;User&gt; userList = userRepository.findAll();\n        for (User u : userList){\n            System.out.println(u);\n        }\n    }\n}\n</code></pre> <p>Y la salida:</p> Bash<pre><code>ID: 4 Name: Janet Lastname: Espinosa\nID: 6 Name: Maria Lastname: Gallardo\nID: 3 Name: Andr\u00e9s Lastname: Garc\u00eda\nID: 8 Name: Alberto Lastname: Gracia\nID: 14 Name: Juan Lastname: Imedio\nID: 13 Name: Juan Lastname: Marqu\u00e9s\nID: 18 Name: Pedro Lastname: Mart\u00ednez\nID: 12 Name: Juan Lastname: Mar\u00eda\nID: 23 Name: Juan Pedro Lastname: Pascal\nID: 5 Name: Pepe Lastname: Ponz\n</code></pre>"},{"location":"ud09/ud0911/#userrepositoryimpl-ii","title":"UserRepositoryImpl II","text":"<p>Ya podemos finalizar <code>UserRepositoryImpl</code> con los m\u00e9todos que faltan.</p> Java<pre><code>/**\n * Busca un usuario por id en la tabla users\n * @param id\n * @return El objeto User o null si no existe\n * @throws SQLException\n */\n\npublic User findById(int id) throws SQLException {\n    PreparedStatement st = con.prepareStatement(\"SELECT * FROM users WHERE id = ? \");\n    st.setInt(1, id);\n\n    ResultSet rs = st.executeQuery();\n    User u = null;\n    //Si la consulta devuelve alg\u00fan resultado ...\n    if (rs.next()){\n        // ... lo mapeamos a un objeto Usuario\n        u = bdToEntity(rs);\n    }\n    //Devolvemos el Usuario ya mapeado\n    return u;\n}\n</code></pre> <p>Devolvemos el <code>User</code> si existe en la tabla users</p> Java<pre><code>/**\n     * Guarda el usuario User en la base de datos, insertando si id es distinto de -1 o actualizando aqu\u00e9l\n     * registro con dicho id\n     * @param user\n     * @throws SQLException\n     */\npublic void save(User user) throws SQLException{\n    if (user.getId() == -1){\n        ResultSet rs;\n        PreparedStatement st = null;\n        String query = \"INSERT INTO users (name, lastName) VALUES (?, ?)\";\n        //Fij\u00e1os en Statement.RETURN_GENERATED_KEYS. Permite recuperar el campo ID autogenerado por MySql\n        st = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);\n\n        st.setString(1, user.getName());\n        st.setString(2, user.getLastName());\n\n        st.executeUpdate();\n\n        //Recuperar el id autogenerado\n        rs = st.getGeneratedKeys();\n        //Este ResultSet solo puede contener un registro: el ID autogenerado\n\n        if (rs.next()){\n            //Ahora ya sabemos cu\u00e1l es el nuevo id del Usuario\n            user.setId(rs.getInt(1));\n            System.out.println(\"Autogenerated ID:  \" + user.getId());\n        }\n    }else{\n        PreparedStatement st = con.prepareStatement(\"UPDATE users SET name = ?, lastName = ? WHERE id = ?\");\n        st.setString(1, user.getName());\n        st.setString(2, user.getLastName());\n        st.setInt(3, user.getId());\n\n        st.executeUpdate();\n    }\n\n}\n</code></pre> <p>En esta caso estamos convirtiendo objetos <code>User</code> en registros de la base de datos users.</p> Java<pre><code>/**\n * Elimina de la base de datos el usuario user\n * @param user\n * @throws SQLException\n */\npublic void delete(User user) throws SQLException {\n    PreparedStatement st = con.prepareStatement(\"DELETE FROM users WHERE id = ?\");\n    st.setInt(1, user.getId());\n    st.executeUpdate();\n    st.close();\n}\n</code></pre> <p>Y por \u00faltimo, borramos un objeto de su correspondiente usuario en la base de datos.</p> <p>Nota:</p> <p>Estos ser\u00edan los componentes necesarios para implementar el patr\u00f3n repositorio.</p> <p>Resumiendo: - tenemos la interfaz <code>IRepository</code> - tenemos n clases <code>POJO</code> - por cada clase <code>POJO</code> creamos una clase <code>nombreDeClaseRepositoryImpl</code> que implemente la interfaz <code>IRepository</code> - Tambi\u00e9n creamos la clase <code>nombreDeClaseController</code> que se va a encargar de gestionar el interfaz de usuario</p>"},{"location":"ud09/ud0911/#usercontroller","title":"UserController","text":"<p>Por \u00faltimo vamos a implementar una clase llamada <code>UserController</code> que nos va a servir como User Interface UI para nuestra aplicaci\u00f3n. Esta clase ya no forma parte del patr\u00f3n repositorio y pasar\u00eda a forma parte m\u00e1s bien del patr\u00f3n Model View Controller (MVC) pues esta clase se encarga de la parte Controller (y en este caso, tambi\u00e9n View)</p> Java<pre><code>import java.sql.SQLException;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class UserController {\n\n    /**\n     * Imprime por pantalla todos los usuarios\n     * @throws SQLException\n     */\n    public static void prinAllUsers() throws SQLException {\n\n        UserRepositoryImpl userRepository = new UserRepositoryImpl();\n        List&lt;User&gt; users = userRepository.findAll();\n        for (User user : users){\n            System.out.println(user);\n        }\n\n    }\n    /**\n     * Muestra una interfaz  de usuario para a\u00f1adir un usuario\n     * @throws SQLException\n     */\n    public static void addUser() throws SQLException{\n        UserRepositoryImpl userRepository = new UserRepositoryImpl();\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Name: \");\n        String name = sc.nextLine();\n        System.out.print(\"Lastname: \");\n        String lastName = sc.nextLine();\n        User user = new User(name, lastName);\n        userRepository.save(user);\n    }\n\n    /**\n     * Muestra la UI para modificar un usuario\n     * @throws SQLException\n     */\n    public static void modifyUser() throws SQLException{\n        UserRepositoryImpl userRepository = new UserRepositoryImpl();\n        prinAllUsers();\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter User id to modify: \");\n        int userId = sc.nextInt();\n        sc.nextLine();\n        System.out.print(\"New name: \");\n        String name = sc.nextLine();\n        System.out.print(\"New lastname: \");\n        String lastName = sc.nextLine();\n        userRepository.save(new User(userId, name, lastName));\n    }\n\n    /**\n     * Muestra la UI para borrar un usuario.\n     * @throws SQLException\n     */\n    public static void deleteUser() throws SQLException{\n        UserRepositoryImpl userRepository = new UserRepositoryImpl();\n        prinAllUsers();\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter user id to delete: \");\n        User user = userRepository.findById(sc.nextInt());\n        userRepository.delete(user);\n    }\n}\n</code></pre> <p>En los m\u00e9todos <code>addUser</code>, <code>updateUser</code> y <code>deleteUser</code> se piden datos por pantalla y se llama al m\u00e9todo del repositorio correspondiente: <code>userRepository.save</code> o <code>userRepository.delete</code></p>"},{"location":"ud09/ud0911/#posts","title":"Posts","text":"<p>Crea las clases necesarias para poder trabajar con la entidad <code>Post</code>. Como ayuda, ten en cuenta que esta entidad tiene un objeto de la clase <code>User</code> que deber\u00e1s recuperar mediante <code>new UserRepositoryImpl().findById(rs.getInt(\"userId\"))</code></p> <p>Lo m\u00e1s complicado ser\u00e1 la parte <code>1</code> en <code>User</code> ya que debe tener un m\u00e9todo que fije los <code>Post</code> de dicho usuario.</p> <p>En principio ser\u00eda tan f\u00e1cil como hacer en el m\u00e9todo <code>bdToEntity</code> de <code>UserRepositoryImpl</code></p> <p><code>java PostRepositoryImpl repository = new PostRepositoryImpl(); user.setPosts(repository.findByUser(user));</code> </p> <p>Pero esto provoca un error en tiempo de ejecuci\u00f3n <code>StackOverflow</code> debido a que entra en un bucle infinito ya que el m\u00e9todo <code>bdToEntity</code> llama a <code>findByUser</code> que a su vez llama a <code>bdToEntity</code> y as\u00ed hasta el infinito.</p> <p>La soluci\u00f3n es guardar los elementos en cach\u00e9: cada vez que convierto una entidad a objeto la guardo en esta cach\u00e9. Cuando debo mapear alg\u00fan registro primero miro en cach\u00e9 y devuelvo la entidad o mapeo si no existe la entidad.</p> <p>Creamos una variable de instancia en cada Repositorio. Por ejemplo para UserRepositoryImpl</p> Java<pre><code>private Set&lt;User&gt; usersCached = new HashSet&lt;&gt;();\n</code></pre> <p>Creamos un m\u00e9todo para comprobar si est\u00e1 en cach\u00e9:</p> Java<pre><code>private User getUserCached(int i){\n    for(User user : usersCached){\n        if (user.getId() == i) \n            return user;\n    }\n    return null;\n}\n</code></pre> <p>Que usamos en <code>bdToEntity</code></p> Java<pre><code>public User bdToEntity(ResultSet rs) throws SQLException {\n    User user = getUserCached(rs.getInt(\"id\"));\n    if (user == null) {\n        user = new User(rs.getInt(\"id\"), rs.getString(\"name\"), rs.getString(\"lastName\"));\n        usersCached.add(user);\n        PostRepositoryImpl repository = new PostRepositoryImpl();\n        user.setPosts(repository.findByUser(user));\n    }\n    return user;\n}\n</code></pre> <p>Nota:</p> <p>No cre\u00e1is que en la pr\u00e1ctica es tan complicado. Para eso est\u00e1n los frameworks ORM (Object Relational Mapping) que nos facilitan mucho la vida y ellos mismos ya tratan todo el tema de cach\u00e9s, repositorios, CRUD, etc. Este apartado es simplemente para que cre\u00e9is desde cero un mini framework.</p> <p>Seguramente en la empresa utilizar\u00e9is Hibernate, Spring Boot, Doctrine, \u2026</p> <p>Comments</p> <p>Ahora ya puedes implementar la gesti\u00f3n del los comentarios.</p>"},{"location":"ud09/ud09ac/","title":"Actividades","text":"<p>A tener en cuenta</p> <p>Para la realizaci\u00f3n de los siguientes ejercicios utilizaremos:   - la base de datos <code>ejercicios</code>,    - usuario <code>dwes</code> y    - contrase\u00f1a <code>1234</code></p>"},{"location":"ud09/ud09ac/#ejercicio-1-paquete-gestionempleados","title":"Ejercicio 1: paquete <code>gestionEmpleados</code>","text":"<p>Tenemos una base de datos <code>ejercicios</code> que almacena informaci\u00f3n sobre empleados. La tabla <code>empleados</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del empleado (entero).</li> <li><code>nombre</code>: Nombre del empleado (cadena de texto).</li> <li><code>salario</code>: Salario del empleado (decimal).</li> </ul> <p>Es escribir un programa Java <code>gestionEmpleados</code> que realice las siguientes operaciones utilizando diferentes tipos de resultado y opciones de concurrencia:</p> <ol> <li><code>listarEmpleados (Connection conn)</code>: Mostrar en la consola todos los empleados y sus salarios.</li> <li><code>actualizarSalarios (Connection conn)</code>: Incrementar el salario de todos los empleados en un 10%.</li> <li><code>eliminarEmpleados (Connection conn)</code>: Eliminar todos los empleados cuyo salario sea menor que $2000.</li> </ol> <p>Para probar ...</p> <p>Puedes implementar cada operaci\u00f3n utilizando un tipo de resultado y opci\u00f3n de concurrencia diferente para familiarizarte con su uso. No olvides manejar las excepciones <code>SQLException</code> adecuadamente. Por ejemplo, podr\u00edas probarlas siguientes operaciones:  1. Lista todos los empleados junto con sus salarios utilizando un <code>ResultSet</code> de tipo <code>TYPE_SCROLL_SENSITIVE</code> y opci\u00f3n de concurrencia <code>CONCUR_READ_ONLY</code>. 2. Actualiza los salarios de todos los empleados increment\u00e1ndolos en un 10% utilizando un <code>ResultSet</code> de tipo <code>TYPE_FORWARD_ONLY</code> y opci\u00f3n de concurrencia <code>CONCUR_UPDATABLE</code>. 3. Elimina todos los empleados cuyo salario sea menor a $2000 utilizando un <code>Statement</code> est\u00e1ndar sin necesidad de un <code>ResultSet</code>.</p> <p>No olvides ...</p> <p>... manejar las excepciones <code>SQLException</code> adecuadamente.</p> <p>Recuerda ...</p> <p>... ajustar la cadena de conexi\u00f3n a tu base de datos y reemplazar \"usuario\" y \"contrase\u00f1a\" con las credenciales adecuadas. Adem\u00e1s, aseg\u00farate de manejar adecuadamente las excepciones.</p>"},{"location":"ud09/ud09ac/#ejercicio-2-paquete-gestionproductos","title":"Ejercicio 2: paquete <code>gestionProductos</code>","text":"<p>Supongamos que tienes una base de datos que almacena informaci\u00f3n sobre productos. La tabla <code>productos</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del producto (entero).</li> <li><code>nombre</code>: Nombre del producto (cadena de texto).</li> <li><code>precio</code>: Precio del producto (decimal).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li><code>mostrarProductosPorPagina()</code>: Mostrar una p\u00e1gina de productos cada vez que el usuario lo solicite. Cada p\u00e1gina debe contener 5 productos. Implementa las funciones para mover el cursor a la primera p\u00e1gina, p\u00e1gina siguiente, p\u00e1gina anterior, \u00faltima p\u00e1gina y una p\u00e1gina espec\u00edfica utilizando el m\u00e9todo <code>absolute(int row)</code>.</li> <li><code>buscarProductoPorNombre(String nombre)</code>: Permitir al usuario buscar un producto por su nombre. Utiliza el m\u00e9todo <code>relative(int registros)</code> para desplazar el cursor hacia adelante o hacia atr\u00e1s seg\u00fan la coincidencia del nombre.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-3-paquete-gestionalumnos","title":"Ejercicio 3: paquete <code>gestionAlumnos</code>","text":"<p>Supongamos que tienes una base de datos que almacena informaci\u00f3n sobre alumnos. La tabla <code>alumnos</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del alumno (entero).</li> <li><code>nombre</code>: Nombre del alumno (cadena de texto).</li> <li><code>edad</code>: Edad del alumno (entero).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li>Mostrar la informaci\u00f3n del alumno m\u00e1s joven y m\u00e1s viejo: Utiliza los m\u00e9todos <code>first()</code> y <code>last()</code> para mover el cursor a la primera y \u00faltima fila respectivamente y obtener la informaci\u00f3n del alumno m\u00e1s joven y m\u00e1s viejo.</li> <li>Desplazarse por los alumnos en orden inverso de edad: Muestra la informaci\u00f3n de los alumnos en orden inverso de edad. Utiliza el m\u00e9todo <code>previous()</code> para desplazarte hacia atr\u00e1s a trav\u00e9s de los registros.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-4-paquete-gestionlibros","title":"Ejercicio 4: paquete <code>gestionLibros</code>","text":"<p>Supongamos que tienes una base de datos que almacena informaci\u00f3n sobre libros. La tabla <code>libros</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del libro (entero).</li> <li><code>titulo</code>: T\u00edtulo del libro (cadena de texto).</li> <li><code>autor</code>: Nombre del autor del libro (cadena de texto).</li> <li><code>anio_publicacion</code>: A\u00f1o de publicaci\u00f3n del libro (entero).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li>Mostrar libros por d\u00e9cada: Permite al usuario ingresar una d\u00e9cada y mostrar todos los libros publicados en esa d\u00e9cada. Utiliza el m\u00e9todo <code>afterLast()</code> y <code>previous()</code> para mover el cursor al final y luego retroceder, as\u00ed puedes comenzar desde la \u00faltima fila.</li> <li>Buscar un libro por autor: Permite al usuario ingresar el nombre de un autor y muestra todos los libros escritos por ese autor. Utiliza el m\u00e9todo <code>relative(int registros)</code> para desplazarte a trav\u00e9s de los registros seg\u00fan las coincidencias del autor.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-5-paquete-gestionventas","title":"Ejercicio 5: paquete <code>gestionVentas</code>","text":"<p>Supongamos que tienes una base de datos que almacena informaci\u00f3n sobre ventas. La tabla <code>ventas</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico de la venta (entero).</li> <li><code>producto</code>: Nombre del producto vendido (cadena de texto).</li> <li><code>cantidad</code>: Cantidad de productos vendidos (entero).</li> <li><code>total</code>: Total de la venta (decimal).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li>Calcular el total de ventas: Utiliza el m\u00e9todo <code>next()</code> para recorrer todas las ventas y sumar los totales para obtener el total general de ventas.</li> <li>Buscar ventas por producto: Permite al usuario ingresar el nombre de un producto y muestra todas las ventas asociadas a ese producto. Utiliza el m\u00e9todo <code>relative(int registros)</code> para desplazarte a trav\u00e9s de los registros seg\u00fan las coincidencias del producto.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-6-paquete-gestionpedidos","title":"Ejercicio 6: paquete <code>gestionPedidos</code>","text":"<p>Supongamos que tienes una base de datos que almacena informaci\u00f3n sobre pedidos. La tabla <code>pedidos</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del pedido (entero).</li> <li><code>cliente</code>: Nombre del cliente que realiz\u00f3 el pedido (cadena de texto).</li> <li><code>producto</code>: Nombre del producto pedido (cadena de texto).</li> <li><code>cantidad</code>: Cantidad del producto solicitada en el pedido (entero).</li> <li><code>fecha</code>: Fecha en que se realiz\u00f3 el pedido (fecha).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li>Listar pedidos por cliente: Permite al usuario ingresar el nombre de un cliente y mostrar todos los pedidos realizados por ese cliente. Utiliza el m\u00e9todo <code>relative(int registros)</code> para desplazarte a trav\u00e9s de los registros seg\u00fan las coincidencias del cliente.</li> <li>Buscar pedidos por fecha: Permite al usuario ingresar una fecha y mostrar todos los pedidos realizados en esa fecha. Utiliza el m\u00e9todo <code>afterLast()</code> y <code>previous()</code> para mover el cursor al final y luego retroceder, as\u00ed puedes comenzar desde la \u00faltima fila.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-7-paquete-gestionempleados-continuacion","title":"Ejercicio 7: paquete <code>gestionEmpleados</code> (continuaci\u00f3n)","text":"<p>Continuando con el ejercicio de gesti\u00f3n de empleados del primer conjunto, vamos a agregar algunas funcionalidades adicionales:</p> <ol> <li>Mostrar informaci\u00f3n del empleado por ID: Permite al usuario ingresar el ID de un empleado y muestra toda la informaci\u00f3n relacionada con ese empleado. Utiliza el m\u00e9todo <code>absolute(int row)</code> para posicionarte en el registro del empleado especificado.</li> <li>Buscar empleados por salario: Permite al usuario ingresar un rango de salarios y mostrar todos los empleados cuyo salario est\u00e9 dentro de ese rango. Utiliza el m\u00e9todo <code>next()</code> para recorrer todas las filas y filtrar los empleados seg\u00fan el criterio de salario.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-8-paquete-gestionestudiantes","title":"Ejercicio 8: paquete <code>gestionEstudiantes</code>","text":"<p>Supongamos que tienes una base de datos que almacena informaci\u00f3n sobre estudiantes. La tabla <code>estudiantes</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del estudiante (entero).</li> <li><code>nombre</code>: Nombre del estudiante (cadena de texto).</li> <li><code>edad</code>: Edad del estudiante (entero).</li> <li><code>promedio</code>: Promedio de calificaciones del estudiante (decimal).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li>Mostrar la posici\u00f3n actual del estudiante: Muestra la posici\u00f3n del estudiante actual en el conjunto de resultados. Utiliza el m\u00e9todo <code>getRow()</code> para obtener el n\u00famero de registro actual.</li> <li>Validar la posici\u00f3n del cursor: Verifica si el cursor est\u00e1 antes del primer registro, en el primer registro, en el \u00faltimo registro o despu\u00e9s del \u00faltimo registro. Utiliza los m\u00e9todos <code>isBeforeFirst()</code>, <code>isFirst()</code>, <code>isLast()</code> e <code>isAfterLast()</code> para realizar estas verificaciones.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-9-paquete-gestionproductos-continuacion","title":"Ejercicio 9: paquete <code>gestionProductos</code> (continuaci\u00f3n)","text":"<p>Continuando con el ejercicio de gesti\u00f3n de productos del segundo conjunto, agreguemos algunas funcionalidades adicionales:</p> <ol> <li>Mostrar el n\u00famero total de productos: Muestra el n\u00famero total de productos en la base de datos. Utiliza el m\u00e9todo <code>getRow()</code> para obtener el n\u00famero de registro actual y <code>last()</code> para mover el cursor a la \u00faltima fila.</li> <li>Verificar si hay productos disponibles: Verifica si hay alg\u00fan producto disponible en la base de datos. Utiliza los m\u00e9todos <code>isBeforeFirst()</code> e <code>isAfterLast()</code> para determinar si el cursor est\u00e1 antes del primer registro o despu\u00e9s del \u00faltimo registro, respectivamente.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-10-paquete-gestionempleados-continuacion","title":"Ejercicio 10: paquete <code>gestionEmpleados</code> (continuaci\u00f3n)","text":"<p>Continuando con el ejercicio de gesti\u00f3n de empleados del tercer conjunto, agreguemos m\u00e1s funcionalidades:</p> <ol> <li>Verificar si hay empleados en la base de datos: Verifica si hay alg\u00fan empleado registrado en la base de datos. Utiliza los m\u00e9todos <code>isBeforeFirst()</code> e <code>isAfterLast()</code> para determinar si el cursor est\u00e1 antes del primer registro o despu\u00e9s del \u00faltimo registro, respectivamente.</li> <li>Mostrar el primer empleado: Muestra la informaci\u00f3n del primer empleado en la base de datos. Utiliza el m\u00e9todo <code>first()</code> para mover el cursor al primer registro y luego muestra la informaci\u00f3n del empleado.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-11-paquete-gestionclientes","title":"Ejercicio 11: paquete <code>gestionClientes</code>","text":"<p>Imagina que tienes una base de datos que almacena informaci\u00f3n sobre clientes. La tabla <code>clientes</code> tiene las siguientes columnas:</p> <ul> <li><code>id</code>: Identificador \u00fanico del cliente (entero).</li> <li><code>nombre</code>: Nombre del cliente (cadena de texto).</li> <li><code>correo</code>: Correo electr\u00f3nico del cliente (cadena de texto).</li> <li><code>telefono</code>: N\u00famero de tel\u00e9fono del cliente (cadena de texto).</li> </ul> <p>Tu tarea es escribir un programa Java que realice las siguientes operaciones utilizando los m\u00e9todos proporcionados:</p> <ol> <li>Mostrar la posici\u00f3n actual del cliente: Muestra la posici\u00f3n actual del cliente en el conjunto de resultados. Utiliza el m\u00e9todo <code>getRow()</code> para obtener el n\u00famero de registro actual.</li> <li>Mostrar informaci\u00f3n del \u00faltimo cliente: Muestra la informaci\u00f3n del \u00faltimo cliente en la base de datos. Utiliza el m\u00e9todo <code>last()</code> para mover el cursor al \u00faltimo registro y luego muestra la informaci\u00f3n del cliente.</li> </ol>"},{"location":"ud09/ud09ac/#ejercicio-12-completo","title":"Ejercicio 12 : completo","text":"<p>Veamos un ejemplo completo de conexi\u00f3n y acceso a una base de datos utilizando todos los elementos mencionados en este apartado.</p> Java<pre><code>try {\n  // Cargamos la clase que implementa el Driver\n  Class.forName(\"com.mysql.cj.jdbc.Driver\").newInstance();\n\n  // Creamos una nueva conexi\u00f3n a la base de datos 'prueba'\n  String url = \"jdbc:mysql://localhost:3306/prueba?serverTimezone=UTC\";\n\n  Connection conn = DriverManager.getConnection(url,\"root\",\"\");\n\n  // Obtenemos un Statement de la conexi\u00f3n\n  Statement st = conn.createStatement();\n\n  // Ejecutamos una consulta SELECT para obtener la tabla vendedores\n  String sql = \"SELECT * FROM vendedores\";\n\n  ResultSet rs = st.executeQuery(sql);\n\n  // Recorremos todo el ResultSet y mostramos sus datos\n\n  while(rs.next()) {\n    int id        = rs.getInt(\"id\");\n    String nombre = rs.getString(\"nombre\");\n    Date fecha    = rs.getDate(\"fecha_ingreso\");\n    float salario = rs.getFloat(\"salario\");\n    System.out.println(id + \" \" + nombre + \" \" + fecha + \" \" + salario);\n  }\n  // Cerramos el statement y la conexi\u00f3n\n  st.close();\n  conn.close();\n\n} catch (SQLException e) {\n    e.printStackTrace();\n\n} catch (Exception e) {\n    e.printStackTrace();\n}\n</code></pre>"},{"location":"ud09/ud09ac/#ejercicio-13","title":"Ejercicio 13","text":"<p>Crea una aplicaci\u00f3n que nos permita gestionar la base de datos redes. </p> <p>Debe tener un men\u00fa desde el que se puedan gestionar (Create, Read, Update, Delete) usuarios, posts y comentarios.</p>"},{"location":"ud09/ud09pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li>https://www.youtube.com/playlist?list=PLNjWMbvTJAIjLRW2qyuc4DEgFVW5YFRSR</li> <li>https://www.youtube.com/playlist?list=PLaxZkGlLWHGUWZxuadN3J7KKaICRlhz5-</li> </ul>"},{"location":"ud09/ud09re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li>Wikipedia</li> <li>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> <li>FXDocs</li> <li>https://openjfx.io/openjfx-docs/</li> </ul>"},{"location":"ud10/ud1001/","title":"10.1 Introducci\u00f3n","text":"<p>El proyecto de documentaci\u00f3n de JavaFX tiene como objetivo recopilar informaci\u00f3n \u00fatil para los desarrolladores de JavaFX de toda la web. El proyecto es de c\u00f3digo abierto y fomenta la participaci\u00f3n de la comunidad para garantizar que la documentaci\u00f3n sea lo m\u00e1s pulida y \u00fatil posible.</p>"},{"location":"ud10/ud1002/","title":"10.2 Gr\u00e1fico de escena","text":""},{"location":"ud10/ud1002/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>Un gr\u00e1fico de escena es una estructura de datos de \u00e1rbol que organiza (y agrupa) objetos gr\u00e1ficos para una representaci\u00f3n l\u00f3gica m\u00e1s sencilla. Tambi\u00e9n permite que el motor de gr\u00e1ficos represente los objetos de la manera m\u00e1s eficiente al omitir total o parcialmente los objetos que no se ver\u00e1n en la imagen final. La siguiente figura muestra un ejemplo de la arquitectura del gr\u00e1fico de escena JavaFX.</p> <p>En la parte superior de la arquitectura hay un <code>Stage</code>. Una etapa es una representaci\u00f3n JavaFX de una ventana de sistema operativo nativo. En un momento dado, un escenario puede tener un solo <code>Scene</code>adjunto. Una escena es un contenedor para el gr\u00e1fico de escena JavaFX.</p> <p>Todos los elementos en el gr\u00e1fico de escena JavaFX se representan como <code>Node</code>objetos. Hay tres tipos de nudos: ra\u00edz, rama y hoja. El nodo ra\u00edz es el \u00fanico nodo que no tiene un padre y est\u00e1 contenido directamente en una escena, que se puede ver en la figura anterior. La diferencia entre una rama y una hoja es que un nodo hoja no tiene hijos.</p> <p>En el gr\u00e1fico de escena, los nodos secundarios comparten muchas propiedades de un nodo principal. Por ejemplo, una transformaci\u00f3n o un evento aplicado a un nodo padre tambi\u00e9n se aplicar\u00e1 recursivamente a sus hijos. Como tal, una jerarqu\u00eda compleja de nodos se puede ver como un solo nodo para simplificar el modelo de programaci\u00f3n. Exploraremos transformaciones y eventos en secciones posteriores.</p> <p>En la siguiente figura se puede ver un ejemplo de un gr\u00e1fico de escena \"Hola Mundo\".</p> <p>Una posible implementaci\u00f3n que producir\u00e1 un gr\u00e1fico de escena que coincida con la figura anterior es la siguiente:  <code>E01_HolaMundo.java</code></p> Java<pre><code>import javafx.application.Application;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.text.Text;\nimport javafx.stage.Stage;\n\npublic class HolaMundo extends Application {\n\n    private Parent createContent() {\n        return new StackPane(new Text(\"Hola Mundo\"));\n    }\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        stage.setScene(new Scene(createContent(), 400, 400));\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre> <p>El resultado de ejecutar el c\u00f3digo se ve en la siguiente figura:</p> <p>Notas importantes:</p> <ul> <li>Un nodo puede tener un m\u00e1ximo de 1 padre.</li> <li>Un nodo en el gr\u00e1fico de escena \"activo\" (adjunto a una escena actualmente visible) solo se puede modificar desde el subproceso de la aplicaci\u00f3n JavaFX.</li> </ul>"},{"location":"ud10/ud1002/#transformaciones","title":"Transformaciones","text":"<p>Usaremos la siguiente aplicaci\u00f3n como ejemplo para demostrar las 3 transformaciones m\u00e1s comunes:  <code>E02_TransformApp.java</code></p> Java<pre><code>import javafx.application.Application;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Rectangle;\nimport javafx.stage.Stage;\n\npublic class E02_TransformApp extends Application {\n\n    private Parent createContent() {\n        Rectangle box = new Rectangle(100, 50, Color.BLUE);\n        transform(box);\n        return new Pane(box);\n    }\n\n    private void transform(Rectangle box) {\n        // we will apply transformations here:\n\n        //Uncomment for translate\n        box.setTranslateX(100);\n        box.setTranslateY(200);\n\n        //uncomment for scale\n        box.setScaleX(1.5);\n        box.setScaleY(1.5);\n\n        //uncomment for rotate\n        box.setRotate(30);\n    }\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        stage.setScene(new Scene(createContent(), 300, 300, Color.GRAY));\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre> <p>Ejecutar la aplicaci\u00f3n dar\u00e1 como resultado la siguiente imagen:</p> <p>En JavaFX, puede ocurrir una transformaci\u00f3n simple en uno de los 3 ejes:  X, Y o Z. La aplicaci\u00f3n de ejemplo est\u00e1 en 2D, por lo que solo consideraremos los ejes X e Y.</p>"},{"location":"ud10/ud1002/#translacion","title":"Translaci\u00f3n","text":"<p>En JavaFX y gr\u00e1ficos por computadora, <code>translate</code> significa moverse. </p> <p>Un ejemplo de esto es que podemos trasladar nuestra caja en 100 p\u00edxeles en el eje X y 200 p\u00edxeles en el eje Y:</p> Java<pre><code>private void transform(Rectangle box) {\n    box.setTranslateX(100);\n    box.setTranslateY(200);\n}\n</code></pre>"},{"location":"ud10/ud1002/#escala","title":"Escala","text":"<p>Puede aplicar la escala para hacer un nodo m\u00e1s grande o m\u00e1s peque\u00f1o. El valor de escala es una relaci\u00f3n. Por defecto, un nodo tiene un valor de escala de 1 (100%) en cada eje. </p> <p>Un ejemplo de esto es que podemos agrandar nuestra caja aplicando una escala de 1.5 en los ejes X e Y:</p> Java<pre><code>private void transform(Rectangle box) {\n    box.setScaleX(1.5);\n    box.setScaleY(1.5);\n}\n</code></pre>"},{"location":"ud10/ud1002/#rotacion","title":"Rotaci\u00f3n","text":"<p>La rotaci\u00f3n de un nodo determina el \u00e1ngulo en el que se representa el nodo. En 2D el \u00fanico eje de rotaci\u00f3n sensible es el eje Z. </p> <p>Un ejemplo de esto es que podemos girar la caja 30 grados:</p> Java<pre><code>private void transform(Rectangle box) {\n    box.setRotate(30);\n}\n</code></pre>"},{"location":"ud10/ud1002/#manejo-de-eventos","title":"Manejo de eventos","text":"<p>Un evento notifica que ha ocurrido algo importante. Los eventos suelen ser lo \"primitivo\" de un sistema de eventos (tambi\u00e9n conocido como bus de eventos). Generalmente, un sistema de eventos tiene las siguientes 3 responsabilidades:</p> <ul> <li><code>fire</code> (desencadenar) un evento,</li> <li>notificar <code>listeners</code> (a las partes interesadas) sobre el evento y</li> <li><code>handle</code> (procesar) el evento.</li> </ul> <p>El mecanismo de notificaci\u00f3n de eventos lo realiza la plataforma JavaFX autom\u00e1ticamente. Por lo tanto, solo consideraremos c\u00f3mo disparar eventos, escuchar eventos y c\u00f3mo manejarlos.</p> <p>Primero, vamos a crear un evento personalizado:  <code>E03_EventoUsuario.java</code></p> Java<pre><code>import javafx.event.Event;\nimport javafx.event.EventType;\n\npublic class E03_EventoUsuario extends Event {\n\n    public static final EventType&lt;E03_EventoUsuario&gt; ANY = new EventType&lt;&gt;(Event.ANY, \"ANY\");\n\n    public static final EventType&lt;E03_EventoUsuario&gt; LOGIN_SUCCEEDED = new EventType&lt;&gt;(ANY, \"LOGIN_SUCCEEDED\");\n\n    public static final EventType&lt;E03_EventoUsuario&gt; LOGIN_FAILED = new EventType&lt;&gt;(ANY, \"LOGIN_FAILED\");\n\n    public E03_EventoUsuario(EventType&lt;? extends Event&gt; eventType) {\n        super(eventType);\n    }\n    // cualquier otro atributo importante como la fecha, la hora...\n}\n</code></pre> <p>Dado que los tipos de eventos son fijos, generalmente se crean dentro del mismo archivo de origen que el evento. Podemos ver que hay 2 tipos espec\u00edficos de eventos: <code>LOGIN_SUCCEEDED</code>y <code>LOGIN_FAILED</code>. Podemos escuchar estos tipos espec\u00edficos de eventos:</p> Java<pre><code>Node node = ...\nnode.addEventHandler(UserEvent.LOGIN_SUCCEEDED, event -&gt; {\n    // handle event\n});\n</code></pre> <p>Alternativamente, podemos manejar cualquier <code>UserEvent</code>:</p> Java<pre><code>Node node = ...\nnode.addEventHandler(UserEvent.ANY, event -&gt; {\n    // handle event\n});\n</code></pre> <p>Finalmente, podemos construir y disparar nuestros propios eventos:</p> Java<pre><code>UserEvent event = new UserEvent(UserEvent.LOGIN_SUCCEEDED);\nNode node = ...\nnode.fireEvent(event);\n</code></pre> <p>Por ejemplo, <code>LOGIN_SUCCEEDED</code>o <code>LOGIN_FAILED</code> podr\u00eda activarse cuando un usuario intenta iniciar sesi\u00f3n en una aplicaci\u00f3n. Seg\u00fan el resultado del inicio de sesi\u00f3n, podemos permitir que el usuario acceda a la aplicaci\u00f3n o bloquearlo. Si bien se puede lograr la misma funcionalidad con una <code>if</code> declaraci\u00f3n simple, hay una ventaja significativa de un sistema de eventos. Los sistemas de eventos se dise\u00f1aron para permitir la comunicaci\u00f3n entre varios m\u00f3dulos (subsistemas) en una aplicaci\u00f3n sin acoplarlos estrechamente. Como tal,  un sistema de audio puede reproducir un sonido cuando el usuario inicia sesi\u00f3n. Por lo tanto, mantiene todo el c\u00f3digo relacionado con el audio en su propio m\u00f3dulo. Sin embargo, no profundizaremos en los estilos arquitect\u00f3nicos.</p>"},{"location":"ud10/ud1002/#eventos-de-entrada","title":"Eventos de entrada","text":"<p>Los eventos de teclado y rat\u00f3n son los tipos de eventos m\u00e1s comunes utilizados en JavaFX. Cada <code>Node</code> proporciona los llamados \"m\u00e9todos de conveniencia\" para manejar estos eventos. Por ejemplo, podemos ejecutar alg\u00fan c\u00f3digo cuando se presiona un bot\u00f3n:</p> Java<pre><code>Button button = ...\nbutton.setOnAction(event -&gt; {\n    // button was pressed\n});\n</code></pre> <p>Para mayor flexibilidad tambi\u00e9n podemos usar lo siguiente:</p> Java<pre><code>Button button = ...\nbutton.setOnMouseEntered(e -&gt; ...);\nbutton.setOnMouseExited(e -&gt; ...);\nbutton.setOnMousePressed(e -&gt; ...);\nbutton.setOnMouseReleased(e -&gt; ...);\n</code></pre> <p>El objeto <code>e</code> anterior es de tipo <code>MouseEvent</code> y se puede consultar para obtener informaci\u00f3n diversa sobre el evento, por ejemplo, <code>x</code> posiciones <code>y</code>, n\u00famero de clics, etc. Finalmente, podemos hacer lo mismo con las teclas:</p> Java<pre><code>Button button = ...\nbutton.setOnKeyPressed(e -&gt; ...);\nbutton.setOnKeyReleased(e -&gt; ...);\n</code></pre> <p>El objeto <code>e</code>aqu\u00ed es de tipo <code>KeyEvent</code> y lleva informaci\u00f3n sobre el c\u00f3digo de la tecla, que luego se puede asignar a una tecla f\u00edsica real en el teclado.</p>"},{"location":"ud10/ud1002/#sincronizacion","title":"Sincronizaci\u00f3n","text":"<p>Es importante comprender la diferencia de tiempo entre la creaci\u00f3n de controles de interfaz de usuario de JavaFX y la visualizaci\u00f3n de los controles. Al crear los controles de la interfaz de usuario, ya sea a trav\u00e9s de la creaci\u00f3n directa de objetos API o mediante FXML, es posible que te falten ciertos valores de geometr\u00eda de pantalla, como las dimensiones de una ventana. Eso est\u00e1 disponible m\u00e1s tarde, en el instante en que se muestra la pantalla al usuario. Ese evento de visualizaci\u00f3n, llamado OnShown, es el momento en que se ha asignado una ventana y se completan los c\u00e1lculos de dise\u00f1o final.</p> <p>Para demostrar esto, considere el siguiente programa que muestra las dimensiones de la pantalla mientras se crean los controles de la interfaz de usuario y las dimensiones de la pantalla cuando se muestra la pantalla. La siguiente captura de pantalla muestra la ejecuci\u00f3n del programa. Cuando se crean los controles de la interfaz de usuario (<code>new VBox()</code>, <code>new Scene()</code>, <code>primaryStage.setScene()</code>), no hay valores reales de alto y ancho de ventana disponibles como lo demuestran los valores \"NaN\"  indefinidos.</p> <p>Sin embargo, los valores de ancho y alto est\u00e1n disponibles una vez que se muestra la ventana. El programa registra un controlador de eventos para el evento <code>OnShown</code> y prepara la misma salida.</p> <p>La siguiente es la clase Java del programa de demostraci\u00f3n:  <code>E04_StartVsShown.java</code></p> Java<pre><code>public class StartVsShownJavaFXApp extends Application {\n\n    private DoubleProperty startX = new SimpleDoubleProperty();\n    private DoubleProperty startY = new SimpleDoubleProperty();\n    private DoubleProperty shownX = new SimpleDoubleProperty();\n    private DoubleProperty shownY = new SimpleDoubleProperty();\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label startLabel = new Label(\"Start Dimensions\");\n        TextField startTF = new TextField();\n        startTF.textProperty().bind(\n                Bindings.format(\"(%.1f, %.1f)\", startX, startY)\n        );\n\n        Label shownLabel = new Label(\"Shown Dimensions\");\n        TextField shownTF = new TextField();\n        shownTF.textProperty().bind(\n                Bindings.format(\"(%.1f, %.1f)\", shownX, shownY)\n        );\n\n        GridPane gp = new GridPane();\n        gp.add( startLabel, 0, 0 );\n        gp.add( startTF, 1, 0 );\n        gp.add( shownLabel, 0, 1 );\n        gp.add( shownTF, 1, 1 );\n        gp.setHgap(10);\n        gp.setVgap(10);\n\n        HBox hbox = new HBox(gp);\n        hbox.setAlignment(CENTER);\n\n        VBox vbox = new VBox(hbox);\n        vbox.setAlignment(CENTER);\n\n        Scene scene = new Scene( vbox, 480, 320 );\n\n        primaryStage.setScene( scene );\n\n        // before show()...I just set this to 480x320, right?\n        startX.set( primaryStage.getWidth() );\n        startY.set( primaryStage.getHeight() );\n\n        primaryStage.setOnShown( (evt) -&gt; {\n            shownX.set( primaryStage.getWidth() );\n            shownY.set( primaryStage.getHeight() );  // all available now\n        });\n\n        primaryStage.setTitle(\"Start Vs. Shown\");\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre> <p>A veces, conocer\u00e1 las dimensiones de la pantalla de antemano y puede usar esos valores en cualquier punto del programa JavaFX. Esto incluye antes del evento <code>OnShown</code>. Sin embargo, si su secuencia de inicializaci\u00f3n contiene l\u00f3gica que necesita estos valores, deber\u00e1 trabajar con el evento <code>OnShown</code>. Un caso de uso podr\u00eda ser trabajar con las \u00faltimas dimensiones guardadas o dimensiones basadas en la entrada del programa.</p>"},{"location":"ud10/ud1003/","title":"10.3 Controles de la interfa de usuario","text":""},{"location":"ud10/ud1003/#choicebox","title":"ChoiceBox","text":"<p>El <code>ChoiceBox</code>control es una lista de valores a partir de los cuales el usuario realiza una selecci\u00f3n. En esta implementaci\u00f3n particular, hay un valor vac\u00edo que hace que la selecci\u00f3n sea opcional.</p> <p>La siguiente captura de pantalla muestra la <code>ChoiceBox</code> aplicaci\u00f3n. Se hace una selecci\u00f3n de \"Muebles\" y <code>Button</code> se presiona Guardar. Si presionamos el <code>Button</code> <code>Guardar</code> invoca un <code>println()</code> que imprime el objeto.</p> <p>El uso m\u00e1s simple del <code>ChoiceBox</code> es llenarlo con Strings. Este <code>ChoiceBox</code> se basa en una clase JavaFX llamada <code>Pair</code>. <code>Pair</code> es un contenedor general para cualquier par clave/valor y se puede usar en lugar de un dominio u otro objeto de prop\u00f3sito especial. Las cadenas solo deben usarse si pueden usarse sin manipulaci\u00f3n o decodificarse de manera consistente.</p>"},{"location":"ud10/ud1003/#convertidor-de-cadenas","title":"Convertidor de cadenas","text":"<p>Cuando se usa un objeto complejo para respaldar un <code>ChoiceBox</code>, <code>StringConverter</code> se necesita a. Este objeto serializa un String hacia y desde el <code>ChoiceBox</code>. Para este programa, solo se necesita codificar toString(), que reemplaza el toString() predeterminado del <code>Pair</code> objeto. (Tanto toString como fromString necesitar\u00e1n una implementaci\u00f3n para compilar).</p> <p>Se utiliza un objeto vac\u00edo EMPTY_PAIR para evitar NullPointerExceptions. Se puede acceder al valor devuelto de assetClass().getValue() y compararlo de manera consistente sin agregar una l\u00f3gica especial de manejo de valores nulos.</p> <p>El ChoiceBox se utiliza para seleccionar de una lista de valores. Cuando la lista de valores es de tipo complejo, proporcione un StringFormatter para serializar un objeto de lista en algo presentable. Si es posible, use un objeto vac\u00edo (en lugar de un nulo) para admitir valores opcionales.</p>"},{"location":"ud10/ud1003/#codigo-completo","title":"C\u00f3digo completo","text":"<p>El c\u00f3digo se puede probar en un solo archivo .java.</p> <p><code>ChoicesApp.java</code></p> Java<pre><code>public class ChoicesApp extends Application {\n\n    private final ChoiceBox&lt;Pair&lt;String,String&gt;&gt; assetClass = new ChoiceBox&lt;&gt;();\n\n    private final static Pair&lt;String, String&gt; EMPTY_PAIR = new Pair&lt;&gt;(\"\", \"\");\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label label = new Label(\"Asset Class:\");\n        assetClass.setPrefWidth(200);\n        Button saveButton = new Button(\"Save\");\n\n        HBox hbox = new HBox(\n                            label,\n                            assetClass,\n                            saveButton);\n        hbox.setSpacing( 10.0d );\n        hbox.setAlignment(Pos.CENTER );\n        hbox.setPadding( new Insets(40) );\n\n        Scene scene = new Scene(hbox);\n\n        initChoice();\n\n        saveButton.setOnAction(\n            (evt) -&gt; System.out.println(\"saving \" + assetClass.getValue())\n        );\n\n        primaryStage.setTitle(\"ChoicesApp\");\n        primaryStage.setScene( scene );\n        primaryStage.show();\n\n    }\n\n    private void initChoice() {\n\n        List&lt;Pair&lt;String,String&gt;&gt; assetClasses = new ArrayList&lt;&gt;();\n        assetClasses.add( new Pair(\"Equipment\", \"20000\"));\n        assetClasses.add( new Pair(\"Furniture\", \"21000\"));\n        assetClasses.add( new Pair(\"Investment\", \"22000\"));\n\n        assetClass.setConverter( new StringConverter&lt;Pair&lt;String,String&gt;&gt;() {\n            @Override\n            public String toString(Pair&lt;String, String&gt; pair) {\n                return pair.getKey();\n            }\n\n            @Override\n            public Pair&lt;String, String&gt; fromString(String string) {\n                return null;\n            }\n        });\n\n        assetClass.getItems().add( EMPTY_PAIR );\n        assetClass.getItems().addAll( assetClasses );\n        assetClass.setValue( EMPTY_PAIR );\n\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1003/#combobox","title":"ComboBox","text":"<p>Un <code>ComboBox</code> es un control h\u00edbrido que presenta una lista de valores m\u00e1s un control de edici\u00f3n. Este art\u00edculo muestra una forma b\u00e1sica de la <code>ComboBox</code> cual es una lista no editable de elementos creados en una estructura de datos compleja.</p> <p>Esta captura de pantalla muestra una ComboBoxApp que contiene una lista de cuentas de gastos. Las cuentas se almacenan en una clase JavaFX de clave/valor <code>Pair</code>. La consola muestra el resultado de una operaci\u00f3n de guardado despu\u00e9s de que el usuario seleccione \"Gastos autom\u00e1ticos\".</p> <p>Este c\u00f3digo agrega una etiqueta, un cuadro combinado y un bot\u00f3n a un HBox. El ComboBox se instancia como un campo y se inicializa en un m\u00e9todo presentado m\u00e1s adelante initCombo(). Se coloca un controlador en el bot\u00f3n Guardar que genera un valor si se selecciona un elemento o un mensaje especial si no se selecciona ning\u00fan elemento.</p>"},{"location":"ud10/ud1003/#cellfactory","title":"CellFactory","text":"<p>El m\u00e9todo initCombo() agrega varias cuentas de gastos a un archivo <code>List</code>. Esto <code>List</code>se agrega a los <code>ComboBox</code>elementos despu\u00e9s de <code>Pair</code>agregar un objeto vac\u00edo. El valor inicial se establece en EMPTY_PAIR, que es una constante.</p> <p>Si no se especifica, <code>ComboBox</code>utilizar\u00e1 el m\u00e9todo toString() del objeto (en este art\u00edculo, a <code>Pair</code>) para representar un objeto de respaldo. Para cadenas, como una selecci\u00f3n de \"S\u00ed\" o \"No\", no se necesita c\u00f3digo adicional. Sin embargo, toString() de a <code>Pair</code>generar\u00e1 tanto la clave legible por humanos como el valor preferido por la m\u00e1quina. Los requisitos para esto <code>ComboBox</code>son usar solo las teclas legibles por humanos en la pantalla.</p> <p>Para ello, se proporciona un cellFactory que configurar\u00e1 un <code>ListCell</code>objeto con la <code>Pair</code>clave como contenido. El <code>Callback</code>tipo es detallado, pero la esencia de la f\u00e1brica es establecer el texto de a <code>ListCell</code>en el m\u00e9todo updateItem() de una clase interna an\u00f3nima. Tenga en cuenta que se debe llamar al m\u00e9todo de superclase.</p> <p>se usa en el <code>Callback</code>m\u00e9todo setButtonCell() para proporcionar una celda para el control de edici\u00f3n. Tenga en cuenta que este programa no es editable, que es el predeterminado. Sin embargo, se necesita factory.call(null), de lo contrario, solo se formatear\u00e1 correctamente el contenido del men\u00fa emergente y la vista del control en reposo recurrir\u00e1 a toString().</p> <p>Este art\u00edculo present\u00f3 un uso simple de <code>ComboBox</code>. Dado que este control no era editable, <code>ChoiceBox</code>se puede sustituir. Para representaciones gr\u00e1ficas no editables (por ejemplo, una forma codificada por colores para un valor de estado), <code>ComboBox</code>a\u00fan ser\u00eda necesario definir el <code>Node</code>uso espec\u00edfico en el control.</p>"},{"location":"ud10/ud1003/#codigo-completo_1","title":"C\u00f3digo completo","text":"<p>El c\u00f3digo se puede probar en un solo archivo .java.</p> <p><code>CombosApp.java</code></p> Java<pre><code>public class CombosApp extends Application {\n\n    private final ComboBox&lt;Pair&lt;String, String&gt;&gt; account = new ComboBox&lt;&gt;();\n\n    private final static Pair&lt;String, String&gt; EMPTY_PAIR = new Pair&lt;&gt;(\"\", \"\");\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label accountsLabel = new Label(\"Account:\");\n        account.setPrefWidth(200);\n        Button saveButton = new Button(\"Save\");\n\n        HBox hbox = new HBox(\n                accountsLabel,\n                account,\n                saveButton);\n        hbox.setSpacing( 10.0d );\n        hbox.setAlignment(Pos.CENTER );\n        hbox.setPadding( new Insets(40) );\n\n        Scene scene = new Scene(hbox);\n\n        initCombo();\n\n        saveButton.setOnAction( (evt) -&gt; {\n            if( account.getValue().equals(EMPTY_PAIR ) ) {\n                System.out.println(\"no save needed; no item selected\");\n            } else {\n                System.out.println(\"saving \" + account.getValue());\n            }\n        });\n\n        primaryStage.setTitle(\"CombosApp\");\n        primaryStage.setScene( scene );\n        primaryStage.show();\n    }\n\n    private void initCombo() {\n\n        List&lt;Pair&lt;String,String&gt;&gt; accounts = new ArrayList&lt;&gt;();\n\n        accounts.add( new Pair&lt;&gt;(\"Auto Expense\", \"60000\") );\n        accounts.add( new Pair&lt;&gt;(\"Interest Expense\", \"61000\") );\n        accounts.add( new Pair&lt;&gt;(\"Office Expense\", \"62000\") );\n        accounts.add( new Pair&lt;&gt;(\"Salaries Expense\", \"63000\") );\n\n        account.getItems().add( EMPTY_PAIR );\n        account.getItems().addAll( accounts );\n        account.setValue( EMPTY_PAIR );\n\n        Callback&lt;ListView&lt;Pair&lt;String,String&gt;&gt;, ListCell&lt;Pair&lt;String,String&gt;&gt;&gt; factory =\n            (lv) -&gt;\n                    new ListCell&lt;Pair&lt;String,String&gt;&gt;() {\n                        @Override\n                        protected void updateItem(Pair&lt;String, String&gt; item, boolean empty) {\n                            super.updateItem(item, empty);\n                            if( empty ) {\n                                setText(\"\");\n                            } else {\n                                setText( item.getKey() );\n                            }\n                        }\n                    };\n\n        account.setCellFactory( factory );\n        account.setButtonCell( factory.call( null ) );\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1003/#listview","title":"ListView","text":""},{"location":"ud10/ud1003/#filtrado-listview-en-javafx","title":"Filtrado ListView en JavaFX","text":"<p>Este art\u00edculo demuestra c\u00f3mo filtrar un ListView en una aplicaci\u00f3n JavaFX. La aplicaci\u00f3n gestiona dos listas. Una lista contiene todos los elementos del modelo de datos. La segunda lista contiene los elementos que se est\u00e1n visualizando actualmente. Un trozo de l\u00f3gica de comparaci\u00f3n almacenada como filtro media entre los dos.</p> <p>El enlace se usa mucho para mantener las estructuras de datos sincronizadas con lo que el usuario ha seleccionado.</p> <p>Esta captura de pantalla muestra la aplicaci\u00f3n que contiene una fila superior de ToggleButtons que configuran el filtro y un ListView que contiene los objetos.</p>"},{"location":"ud10/ud1003/#estructuras-de-datos","title":"Estructuras de datos","text":"<p>El programa comienza con un modelo de dominio Player y una matriz de objetos Player.</p> <p>La clase Player contiene un par de campos, team y playerName. Se proporciona un toString() para que cuando el objeto se agregue a ListView (que se presenta m\u00e1s adelante), no se necesite una clase ListCell personalizada.</p> <p>Los datos de prueba para este ejemplo son una lista de jugadores de b\u00e9isbol estadounidenses.</p> Java<pre><code>Player[] players = {new Player(\"BOS\", \"David Ortiz\"),\n                    new Player(\"BOS\", \"Jackie Bradley Jr.\"),\n                    new Player(\"BOS\", \"Xander Bogarts\"),\n                    new Player(\"BOS\", \"Mookie Betts\"),\n                    new Player(\"HOU\", \"Jose Altuve\"),\n                    new Player(\"HOU\", \"Will Harris\"),\n                    new Player(\"WSH\", \"Max Scherzer\"),\n                    new Player(\"WSH\", \"Bryce Harper\"),\n                    new Player(\"WSH\", \"Daniel Murphy\"),\n                    new Player(\"WSH\", \"Wilson Ramos\") };\n</code></pre>"},{"location":"ud10/ud1003/#modelo","title":"Modelo","text":"<p>Como se mencion\u00f3 al comienzo del art\u00edculo, el filtrado de ListView se centra en la gesti\u00f3n de dos listas. Todos los objetos se almacenan en una PlayerProperty de ObservableList envuelta y los objetos que se pueden ver actualmente se almacenan en una FilteredList envuelta, viewablePlayersProperty. viewablePlayersProperty se basa en playersProperty, por lo que las actualizaciones realizadas en los jugadores que cumplan con los criterios de FilteredList tambi\u00e9n se realizar\u00e1n en viewablePlayers.</p> <p>filterProperty() es una conveniencia para permitir que las personas que llaman se vinculen al Predicado subyacente.</p> <p>La ra\u00edz de la interfaz de usuario es un VBox que contiene un HBox de ToggleButtons y un ListView.</p>"},{"location":"ud10/ud1003/#accion-de-filtrado","title":"Acci\u00f3n de filtrado","text":"<p>Se adjunta un controlador a los ToggleButtons que modificar\u00e1n filterProperty. A cada ToggleButton se le proporciona un Predicado en el campo userData. toggleHandler utiliza este Predicado proporcionado al establecer la propiedad de filtro. Este c\u00f3digo establece el caso especial \"Mostrar todo\" ToggleButton.</p> <p>Los ToggleButtons que filtran un equipo espec\u00edfico se crean en tiempo de ejecuci\u00f3n en funci\u00f3n de la matriz Players. Este Stream hace lo siguiente.</p> <ol> <li>Reduzca la lista de jugadores a una lista distinta de cadenas de equipo</li> <li>Cree un ToggleButton para cada cadena de equipo</li> <li>Establezca un Predicado para que cada ToggleButton se use como filtro</li> <li>Recopile los ToggleButtons para agregarlos al contenedor HBox</li> </ol>"},{"location":"ud10/ud1003/#vista-de-la-lista","title":"Vista de la lista","text":"<p>El siguiente paso crea ListView y vincula ListView a viewablePlayersProperty. Esto permite que ListView reciba actualizaciones basadas en el cambio de filtro.</p> <p>El resto del programa crea una Escena y muestra el Escenario. onShown carga el conjunto de datos en las listas playersProperty y viewablePlayersProperty. Aunque ambas listas est\u00e1n sincronizadas en esta versi\u00f3n particular del programa, si el filtro de stock es diferente a \"sin filtro\", no ser\u00eda necesario modificar este c\u00f3digo.</p> <p>Este art\u00edculo us\u00f3 el enlace para vincular una lista de objetos Player visibles a un ListView. Los jugadores visibles se actualizaron cuando se seleccion\u00f3 un ToggleButton. La selecci\u00f3n aplic\u00f3 un filtro a un conjunto completo de jugadores que se mantuvo por separado como FilteredList (gracias @kleopatra_jx). El enlace se us\u00f3 para mantener la interfaz de usuario sincronizada y para permitir una separaci\u00f3n de preocupaciones en el dise\u00f1o.</p>"},{"location":"ud10/ud1003/#codigo-completo_2","title":"C\u00f3digo completo","text":"Java<pre><code>public class FilterListApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        //\n        // Test data\n        //\n        Player[] players = {new Player(\"BOS\", \"David Ortiz\"),\n                            new Player(\"BOS\", \"Jackie Bradley Jr.\"),\n                            new Player(\"BOS\", \"Xander Bogarts\"),\n                            new Player(\"BOS\", \"Mookie Betts\"),\n                            new Player(\"HOU\", \"Jose Altuve\"),\n                            new Player(\"HOU\", \"Will Harris\"),\n                            new Player(\"WSH\", \"Max Scherzer\"),\n                            new Player(\"WSH\", \"Bryce Harper\"),\n                            new Player(\"WSH\", \"Daniel Murphy\"),\n                            new Player(\"WSH\", \"Wilson Ramos\") };\n\n        //\n        // Set up the model which is two lists of Players and a filter criteria\n        //\n        ReadOnlyObjectProperty&lt;ObservableList&lt;Player&gt;&gt; playersProperty =\n                new SimpleObjectProperty&lt;&gt;(FXCollections.observableArrayList());\n\n        ReadOnlyObjectProperty&lt;FilteredList&lt;Player&gt;&gt; viewablePlayersProperty =\n                new SimpleObjectProperty&lt;FilteredList&lt;Player&gt;&gt;(\n                        new FilteredList&lt;&gt;(playersProperty.get()\n                                ));\n\n        ObjectProperty&lt;Predicate&lt;? super Player&gt;&gt; filterProperty =\n            viewablePlayersProperty.get().predicateProperty();\n\n\n        //\n        // Build the UI\n        //\n        VBox vbox = new VBox();\n        vbox.setPadding( new Insets(10));\n        vbox.setSpacing(4);\n\n        HBox hbox = new HBox();\n        hbox.setSpacing( 2 );\n\n        ToggleGroup filterTG = new ToggleGroup();\n\n        //\n        // The toggleHandler action wills set the filter based on the TB selected\n        //\n        @SuppressWarnings(\"unchecked\")\n        EventHandler&lt;ActionEvent&gt; toggleHandler = (event) -&gt; {\n                ToggleButton tb = (ToggleButton)event.getSource();\n                Predicate&lt;Player&gt; filter = (Predicate&lt;Player&gt;)tb.getUserData();\n                filterProperty.set( filter );\n            };\n\n        ToggleButton tbShowAll = new ToggleButton(\"Show All\");\n        tbShowAll.setSelected(true);\n        tbShowAll.setToggleGroup( filterTG );\n        tbShowAll.setOnAction(toggleHandler);\n        tbShowAll.setUserData( (Predicate&lt;Player&gt;) (Player p) -&gt; true);\n\n        //\n        // Create a distinct list of teams from the Player objects, then create\n        // ToggleButtons\n        //\n        List&lt;ToggleButton&gt; tbs = Arrays.asList( players)\n                .stream()\n                .map( (p) -&gt; p.getTeam() )\n                .distinct()\n                .map( (team) -&gt; {\n                    ToggleButton tb = new ToggleButton( team );\n                    tb.setToggleGroup( filterTG );\n                    tb.setOnAction( toggleHandler );\n                    tb.setUserData( (Predicate&lt;Player&gt;) (Player p) -&gt; team.equals(p.getTeam()) );\n                    return tb;\n                })\n                .collect(Collectors.toList());\n\n        hbox.getChildren().add( tbShowAll );\n        hbox.getChildren().addAll( tbs );\n\n        //\n        // Create a ListView bound to the viewablePlayers property\n        //\n        ListView&lt;Player&gt; lv = new ListView&lt;&gt;();\n        lv.itemsProperty().bind( viewablePlayersProperty );\n\n        vbox.getChildren().addAll( hbox, lv );\n\n        Scene scene = new Scene(vbox);\n\n        primaryStage.setScene( scene );\n        primaryStage.setOnShown((evt) -&gt; {\n            playersProperty.get().addAll( players );\n        });\n\n        primaryStage.show();\n\n    }\n\n    public static void main(String args[]) {\n        launch(args);\n    }\n\n    static class Player {\n\n        private final String team;\n        private final String playerName;\n        public Player(String team, String playerName) {\n            this.team = team;\n            this.playerName = playerName;\n        }\n        public String getTeam() {\n            return team;\n        }\n        public String getPlayerName() {\n            return playerName;\n        }\n        @Override\n        public String toString() { return playerName + \" (\" + team + \")\"; }\n    }\n}\n</code></pre>"},{"location":"ud10/ud1003/#tableview","title":"TableView","text":"<p>Para las aplicaciones comerciales de JavaFX, el <code>TableView</code> es un control esencial. Utilice a <code>TableView</code> cuando necesite presentar varios registros en una estructura plana de filas/columnas. Este ejemplo muestra los elementos b\u00e1sicos de a <code>TableView</code> y demuestra la potencia del componente cuando se aplica JavaFX Binding.</p> <p>La aplicaci\u00f3n de demostraci\u00f3n es un <code>TableView</code>y un par de botones. Tiene cuatro TableColumns <code>TableView</code>: SKU, Art\u00edculo, Precio, Impuesto. Muestra <code>TableView</code>tres objetos en tres filas: teclado mec\u00e1nico, documentos de productos, juntas t\u00f3ricas. La siguiente captura de pantalla muestra la aplicaci\u00f3n inmediatamente despu\u00e9s del inicio.</p> <p>La l\u00f3gica deshabilitada de los botones se basa en las selecciones del archivo <code>TableView</code>. Inicialmente, no se seleccionan elementos, por lo que ambos botones est\u00e1n deshabilitados. Si se selecciona cualquier elemento, el primer elemento en la siguiente captura de pantalla, el Inventario <code>Button</code>est\u00e1 habilitado. <code>Button</code>Tambi\u00e9n se habilita el Impuesto aunque requiere consultar el valor del Impuesto .</p> <p>Si el valor del impuesto para el elemento seleccionado es falso, el impuesto <code>Button</code>se desactivar\u00e1. Esta captura de pantalla muestra el segundo elemento seleccionado. El Inventario <code>Button</code>est\u00e1 habilitado pero el Impuesto <code>Button</code>no.</p>"},{"location":"ud10/ud1003/#modelo-y-declaraciones","title":"Modelo y Declaraciones","text":"<p>A <code>TableView</code> se basa en un modelo que es un POJO llamado Item.</p> <p>Los <code>TableView</code>y <code>TableColumn</code> usan gen\u00e9ricos en sus declaraciones. Para <code>TableView</code>, el par\u00e1metro de tipo es Art\u00edculo. Para TableColumns, los par\u00e1metros de tipo son Item y el tipo de campo. El constructor de <code>TableColumn</code>acepta un nombre de columna. En este ejemplo, los nombres de las columnas difieren ligeramente de los nombres de los campos reales.</p> <p>La adici\u00f3n de elementos de modelo a <code>TableView</code>se realiza mediante la adici\u00f3n de elementos a la colecci\u00f3n subyacente.</p> <p>En este punto, <code>TableView</code>se ha configurado y se han agregado los datos de prueba. Sin embargo, si fuera a ver el programa, ver\u00eda tres filas vac\u00edas. Esto se debe a que a JavaFX le falta el v\u00ednculo entre POJO y TableColumns. Ese enlace se agrega a TableColumns mediante cellValueFactory.</p> <p>En este punto mostrar\u00e1 los datos en las columnas correspondientes.</p>"},{"location":"ud10/ud1003/#seleccion","title":"Selecci\u00f3n","text":"<p>Para recuperar el elemento o elementos seleccionados en un <code>TableView</code>, use el objeto selectionModel separado. Llamar a tblItems.getSelectionModel() devuelve un objeto que incluye una propiedad \"selectedItem\". Esto se puede recuperar y usar en un m\u00e9todo, por ejemplo, para abrir una pantalla de detalles de edici\u00f3n. Como alternativa, getSelectionModel() puede devolver una propiedad JavaFX \"selectedItemProperty\" para expresiones vinculantes.</p> <p>En la aplicaci\u00f3n de demostraci\u00f3n, dos botones est\u00e1n vinculados al modelo de selecci\u00f3n del archivo <code>TableView</code>. Sin enlace, puede agregar oyentes que examinen la selecci\u00f3n y realicen una llamada como setDisabled() en un bot\u00f3n. Antes de la <code>TableView</code>selecci\u00f3n, tambi\u00e9n necesitar\u00eda l\u00f3gica de inicializaci\u00f3n para manejar el caso en el que no hay selecci\u00f3n. La sintaxis de vinculaci\u00f3n expresa esta l\u00f3gica en una declaraci\u00f3n declarativa que puede manejar tanto el oyente como la inicializaci\u00f3n en una sola l\u00ednea.</p> <p>La propiedad de desactivaci\u00f3n de btnInventory ser\u00e1 verdadera si no hay ning\u00fan elemento seleccionado (isNull()). Cuando se muestra la pantalla por primera vez, no se realiza ninguna selecci\u00f3n y <code>Button</code>se desactiva. Una vez que se realiza cualquier selecci\u00f3n, se habilita btnInventory (deshabilitar=falso).</p> <p>la l\u00f3gica btnCalcTax es un poco m\u00e1s compleja. btnCalcTax tambi\u00e9n est\u00e1 deshabilitado cuando no hay selecci\u00f3n. Sin embargo, btnCalcTax tambi\u00e9n considerar\u00e1 el contenido del elemento seleccionado. Se usa un enlace compuesto or() para unir estas dos condiciones. Como antes, hay una expresi\u00f3n isNull() para no seleccionar. Bindings.select() comprueba el valor de Item.taxable. Un art\u00edculo gravable verdadero habilitar\u00e1 btnCalcTax mientras que un art\u00edculo falso deshabilitar\u00e1 el <code>Button</code>.</p> <p>Bindings.select() es el mecanismo para extraer un campo de un objeto. selectedItemProperty() es el elemento seleccionado cambiante y \"sujeto a impuestos\" es la ruta de acceso de un solo salto al campo sujeto a impuestos.</p> <p>Este ejemplo mostr\u00f3 c\u00f3mo configurar un <code>TableView</code>basado en un POJO. Tambi\u00e9n presentaba un par de poderosas expresiones vinculantes que le permiten vincular controles relacionados sin escribir oyentes adicionales ni c\u00f3digo de inicializaci\u00f3n. Es <code>TableView</code>un control indispensable para el desarrollador de aplicaciones empresariales JavaFX. Ser\u00e1 el mejor y m\u00e1s conocido control para mostrar una lista de elementos estructurados.</p>"},{"location":"ud10/ud1003/#codigo-completo_3","title":"C\u00f3digo completo","text":"<p><code>Item.java</code></p> Java<pre><code>public class Item {\n\n    private final String sku;\n    private final String descr;\n    private final Float price;\n    private final Boolean taxable;\n\n    public Item(String sku, String descr, Float price, Boolean taxable) {\n        this.sku = sku;\n        this.descr = descr;\n        this.price = price;\n        this.taxable = taxable;\n    }\n\n    public String getSku() {\n        return sku;\n    }\n\n    public String getDescr() {\n        return descr;\n    }\n\n    public Float getPrice() {\n        return price;\n    }\n\n    public Boolean getTaxable() {\n        return taxable;\n    }\n}\n</code></pre> <p><code>TableSelectApp.java</code></p> Java<pre><code>public class TableSelectApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        TableView&lt;Item&gt; tblItems = new TableView&lt;&gt;();\n        tblItems.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);\n\n        VBox.setVgrow(tblItems, Priority.ALWAYS );\n\n        TableColumn&lt;Item, String&gt; colSKU = new TableColumn&lt;&gt;(\"SKU\");\n        TableColumn&lt;Item, String&gt; colDescr = new TableColumn&lt;&gt;(\"Item\");\n        TableColumn&lt;Item, Float&gt; colPrice = new TableColumn&lt;&gt;(\"Price\");\n        TableColumn&lt;Item, Boolean&gt; colTaxable = new TableColumn&lt;&gt;(\"Tax\");\n\n        colSKU.setCellValueFactory( new PropertyValueFactory&lt;&gt;(\"sku\") );\n        colDescr.setCellValueFactory( new PropertyValueFactory&lt;&gt;(\"descr\") );\n        colPrice.setCellValueFactory( new PropertyValueFactory&lt;&gt;(\"price\") );\n        colTaxable.setCellValueFactory( new PropertyValueFactory&lt;&gt;(\"taxable\") );\n\n        tblItems.getColumns().addAll(\n            colSKU, colDescr, colPrice, colTaxable\n        );\n\n        tblItems.getItems().addAll(\n            new Item(\"KBD-0455892\", \"Mechanical Keyboard\", 100.0f, true),\n            new Item( \"145256\", \"Product Docs\", 0.0f, false ),\n            new Item( \"OR-198975\", \"O-Ring (100)\", 10.0f, true)\n        );\n\n        Button btnInventory = new Button(\"Inventory\");\n        Button btnCalcTax = new Button(\"Tax\");\n\n        btnInventory.disableProperty().bind(\n            tblItems.getSelectionModel().selectedItemProperty().isNull()\n        );\n\n        btnCalcTax.disableProperty().bind(\n            tblItems.getSelectionModel().selectedItemProperty().isNull().or(\n                    Bindings.select(\n                        tblItems.getSelectionModel().selectedItemProperty(),\n                        \"taxable\"\n                    ).isEqualTo(false)\n            )\n        );\n\n        HBox buttonHBox = new HBox( btnInventory, btnCalcTax );\n        buttonHBox.setSpacing( 8 );\n\n        VBox vbox = new VBox( tblItems, buttonHBox );\n        vbox.setPadding( new Insets(10) );\n        vbox.setSpacing( 10 );\n\n        Scene scene = new Scene(vbox);\n\n        primaryStage.setTitle(\"TableSelectApp\");\n        primaryStage.setScene( scene );\n        primaryStage.setHeight( 376 );\n        primaryStage.setWidth( 667 );\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1003/#imageview","title":"ImageView","text":"<p>JavaFX proporciona las clases <code>Image</code>y <code>ImageView</code>para mostrar im\u00e1genes gr\u00e1ficas BMP, GIF, JPEG y PNG. Imagen es una clase que contiene los bytes de la imagen y, opcionalmente, la informaci\u00f3n de escala. El objeto Imagen se carga mediante un subproceso en segundo plano y la clase Imagen proporciona m\u00e9todos para interactuar con la operaci\u00f3n de carga. El objeto Imagen se usa independientemente de ImageView para crear cursores e \u00edconos de aplicaciones.</p> <p>ImageView es un JavaFX <code>Node</code>que contiene un objeto de imagen. ImageView hace que una imagen est\u00e9 disponible en todo el marco. Un ImageView se puede agregar a un contenedor solo o junto con otros controles de IU. Por ejemplo, se puede agregar una imagen <code>Label</code>configurando la propiedad gr\u00e1fica de la etiqueta.</p> <p>Las im\u00e1genes tambi\u00e9n se pueden mostrar y manipular usando JavaFX CSS.</p> <p>Esta captura de pantalla muestra un <code>TilePane</code>que contiene cuatro mosaicos del mismo tama\u00f1o. Cada mosaico contiene un ImageView de un teclado.</p> <p>La imagen superior izquierda se muestra con el tama\u00f1o de imagen original de 320x240. La imagen superior derecha est\u00e1 escalada proporcionalmente. Dado que la imagen superior derecha es un rect\u00e1ngulo y el mosaico que lo contiene es un cuadrado, hay espacios en la parte superior e inferior para mantener la proporci\u00f3n correcta al estirar el ancho.</p> <p>La imagen inferior izquierda llena el contenedor por completo. Sin embargo, al hacer que la imagen rectangular se ajuste al contenedor cuadrado, la imagen no se escala proporcionalmente sino que se estira en ambas direcciones.</p> <p>La imagen inferior derecha llena el contenedor utilizando una versi\u00f3n ampliada de la imagen. Se crea una ventana gr\u00e1fica cuadrada a partir de un Rectangle2D de 100x100 y se ampl\u00eda proporcionalmente. Si bien la imagen de baja calidad es borrosa, no se deforma.</p>"},{"location":"ud10/ud1003/#imagen","title":"Imagen","text":"<p>La clase de imagen proporciona constructores para crear un objeto de imagen a partir de las dimensiones del archivo de imagen o de un objeto transformado. Estas tres llamadas al constructor crean los objetos Image que se usan en los mosaicos de arriba a la derecha, de abajo a la izquierda y de abajo a la derecha, respectivamente.</p> <p>ImageApp.java        </p> Java<pre><code>public class ImageApp extends Application {\n\n    private final static String IMAGE_LOC = \"images/keyboard.jpg\";\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Image image2 = new Image(IMAGE_LOC, 360.0d, 360.0d, true, true );\n        Image image3 = new Image(IMAGE_LOC, 360.0d, 360.0d, false, true);\n        Image image4 = new Image(IMAGE_LOC);\n</code></pre> <p>La URL de cadena que se pasa a todas las formas del constructor de im\u00e1genes es relativa a la ruta de clase. Tambi\u00e9n se puede usar una URL absoluta como \"https://www.bekwam.com/images/bekwam_logo_hdr_rounded.png\". Tenga en cuenta que las URL absolutas no generar\u00e1n un error si no se encuentra su recurso.</p> <p>imagen2 e imagen3 especifican dimensiones, formando un cuadrado m\u00e1s grande que el rect\u00e1ngulo de la imagen original. image2 conservar\u00e1 la relaci\u00f3n de aspecto (\"verdadera\"). El constructor de image3 no conserva la relaci\u00f3n de aspecto y aparecer\u00e1 estirado.</p>"},{"location":"ud10/ud1003/#vista-de-imagen","title":"Vista de imagen","text":"<p>ImageView es un contenedor de nodo que permite que el objeto de imagen se use en contenedores JavaFX y controles de interfaz de usuario. En la imagen superior izquierda, se usa una forma abreviada de ImageView que pasa solo la URL de la imagen. Respetar\u00e1 las dimensiones originales y no requiere un objeto de imagen adicional.</p> <p>iv3 e iv3 se basan en los objetos image2 e image3. Recuerde que estos objetos produjeron im\u00e1genes transformadas que se ajustan al contenedor cuadrado.</p> <p>iv4 tambi\u00e9n se basa en un objeto de imagen transformado, pero en el caso de iv4, la transformaci\u00f3n se realiza a trav\u00e9s del objeto ImageView en lugar de la imagen. ImageView.setFitHeight se llama en lugar de Image.setFitHeight.</p> <p>Adem\u00e1s, se ajusta la ventana gr\u00e1fica de iv4. Viewport controla la parte visible de ImageView. En este caso, la ventana gr\u00e1fica se define como una secci\u00f3n de 100x100 de la imagen desplazada 20 p\u00edxeles a la izquierda y 50 p\u00edxeles hacia arriba.</p> <p>Esta secci\u00f3n mostr\u00f3 las clases Image e ImageView que se usan para mostrar una imagen en un contenedor u otro control de UI. Estas clases definen el comportamiento de escalado de la imagen y se pueden usar con una ventana gr\u00e1fica Rectangle2D para brindar una personalizaci\u00f3n adicional de la visualizaci\u00f3n de la imagen.</p>"},{"location":"ud10/ud1003/#fuente","title":"Fuente","text":"<p>El c\u00f3digo fuente completo y el proyecto Gradle se pueden encontrar en el siguiente enlace:  C\u00f3digo postal de origen de ImageApp</p>"},{"location":"ud10/ud1004/","title":"10.4 Dise\u00f1o","text":""},{"location":"ud10/ud1004/#vbox-y-hbox","title":"VBox y HBox","text":"<p>El dise\u00f1o en JavaFX comienza con la selecci\u00f3n de los controles de contenedor correctos. Los dos controles de dise\u00f1o que uso con m\u00e1s frecuencia son <code>VBox</code>y <code>HBox</code>. <code>VBox</code>es un contenedor que organiza a sus hijos en una pila vertical. <code>HBox</code>ordena a sus hijos en una fila horizontal. El poder de estos dos controles proviene de envolverlos y establecer algunas propiedades clave: alineaci\u00f3n, hgrow y vgrow.</p> <p>Este art\u00edculo demostrar\u00e1 estos controles a trav\u00e9s de un proyecto de ejemplo. Una maqueta del proyecto muestra una interfaz de usuario con lo siguiente:</p> <ul> <li>Una fila de controles superiores que contiene Actualizar <code>Button</code>y Cerrar sesi\u00f3n <code>Hyperlink</code>,</li> <li>A <code>TableView</code>que crecer\u00e1 para ocupar el espacio vertical adicional, y</li> <li>Un cierre <code>Button</code>.</li> </ul> <p>La interfaz de usuario tambi\u00e9n presenta un <code>Separator</code>panel que divide la parte superior de la pantalla con lo que puede convertirse en un panel inferior est\u00e1ndar (Guardar <code>Button</code>, Cancelar <code>Button</code>, etc.) para la aplicaci\u00f3n.</p>"},{"location":"ud10/ud1004/#estructura","title":"Estructura","text":"<p>A <code>VBox</code>es el contenedor m\u00e1s externo \"vbox\". Este ser\u00e1 el <code>Parent</code>proporcionado a la Escena. El simple hecho de colocar los controles de la interfaz de usuario en esto <code>VBox</code>permitir\u00e1 que los controles, sobre todo el <code>TableView</code>\u2009, se estiren para adaptarse al espacio horizontal disponible. Los controles superiores, Actualizar <code>Button</code>y Cerrar sesi\u00f3n <code>Hyperlink</code>, est\u00e1n envueltos en un archivo <code>HBox</code>. Del mismo modo, envuelvo el cierre inferior <code>Button</code>en un <code>HBox</code>, lo que permite botones adicionales.</p> Java<pre><code>VBox vbox = new VBox();\n\nButton btnRefresh = new Button(\"Refresh\");\n\nHBox topRightControls = new HBox();\ntopRightControls.getChildren().add( signOutLink );\n\ntopControls.getChildren().addAll( btnRefresh, topRightControls );\n\nTableView&lt;Customer&gt; tblCustomers = new TableView&lt;&gt;();\nSeparator sep = new Separator();\n\nHBox bottomControls = new HBox();\n\nButton btnClose = new Button(\"Close\");\n\nbottomControls.getChildren().add( btnClose );\n\nvbox.getChildren().addAll(\n    topControls,\n    tblCustomers,\n    sep,\n    bottomControls\n);\n</code></pre> <p>Esta imagen muestra la maqueta desglosada por contenedor. El padre <code>VBox</code>es el rect\u00e1ngulo azul m\u00e1s externo. Los HBoxes son los rect\u00e1ngulos interiores (rojo y verde).</p>"},{"location":"ud10/ud1004/#alineacion-y-hgrow","title":"Alineaci\u00f3n y Hgrow","text":"<p>Actualizar <code>Button</code>est\u00e1 alineado a la izquierda mientras que Cerrar sesi\u00f3n <code>Hyperlink</code>est\u00e1 alineado a la derecha. Esto se logra usando dos HBoxes. topControls es un <code>HBox</code>que contiene Actualizar <code>Button</code>y tambi\u00e9n contiene un <code>HBox</code>con Cerrar sesi\u00f3n <code>Hyperlink</code>. A medida que la pantalla se hace m\u00e1s ancha, Cerrar sesi\u00f3n <code>Hyperlink</code>se desplazar\u00e1 hacia la derecha, mientras que Actualizar <code>Button</code>mantendr\u00e1 su alineaci\u00f3n izquierda.</p> <p>La alineaci\u00f3n es la propiedad que le dice a un contenedor d\u00f3nde colocar un control. topControls establece la alineaci\u00f3n en BOTTOM_LEFT. topRightControls establece la alineaci\u00f3n con BOTTOM_RIGHT. \"BOTTOM\" se asegura de que la l\u00ednea de base del texto \"Actualizar\" coincida con la l\u00ednea de base del texto \"Cerrar sesi\u00f3n\".</p> <p>Para que el cierre de sesi\u00f3n <code>Hyperlink</code>se mueva hacia la derecha cuando la pantalla se ensancha, <code>Priority.ALWAYS</code>es necesario. Esta es una se\u00f1al para que JavaFX ampl\u00ede topRightControls. De lo contrario, topControls mantendr\u00e1 el espacio y topRightControls aparecer\u00e1 a la izquierda. Cerrar sesi\u00f3n <code>Hyperlink</code>todav\u00eda estar\u00eda alineado a la derecha pero en un contenedor m\u00e1s estrecho.</p> <p>Tenga en cuenta que <code>setHgrow()</code>es un m\u00e9todo est\u00e1tico y no se invoca en topControls <code>HBox</code>ni en s\u00ed mismo, topRightControls. Esta es una faceta de la API de JavaFX que puede resultar confusa porque la mayor\u00eda de las API establece propiedades a trav\u00e9s de setters en objetos.</p> Java<pre><code>topControls.setAlignment( Pos.BOTTOM_LEFT );\n\nHBox.setHgrow(topRightControls, Priority.ALWAYS );\ntopRightControls.setAlignment( Pos.BOTTOM_RIGHT );\n</code></pre> <p>Close <code>Button</code>se envuelve en un <code>HBox</code>y se posiciona usando la prioridad BOTTOM_RIGHT.</p> Java<pre><code>bottomControls.setAlignment(Pos.BOTTOM_RIGHT );\n</code></pre>"},{"location":"ud10/ud1004/#crecer","title":"crecer","text":"<p>Dado que el contenedor m\u00e1s externo es <code>VBox</code>, el ni\u00f1o <code>TableView</code>se expandir\u00e1 para ocupar espacio horizontal adicional cuando se ampl\u00ede la ventana. Sin embargo, cambiar el tama\u00f1o vertical de la ventana producir\u00e1 un espacio en la parte inferior de la pantalla. <code>VBox</code>no cambia autom\u00e1ticamente el tama\u00f1o de ninguno de sus elementos secundarios . Al igual que con topRightControls <code>HBox</code>, se puede configurar un indicador de crecimiento. En el caso del <code>HBox</code>, se trataba de una instrucci\u00f3n de cambio de tama\u00f1o horizontal setHgrow(). Para el <code>TableView</code>contenedor <code>VBox</code>, ser\u00e1 setVgrow().</p> Java<pre><code>VBox.setVgrow( tblCustomers, Priority.ALWAYS );\n</code></pre>"},{"location":"ud10/ud1004/#margen","title":"Margen","text":"<p>Hay algunas formas de espaciar los controles de la interfaz de usuario. Este art\u00edculo usa la propiedad margin en varios de los contenedores para agregar espacios en blanco alrededor de los controles. Estos se configuran individualmente en lugar de usar un espacio en el <code>VBox</code>para que el Separador abarque todo el ancho.</p> Java<pre><code>VBox.setMargin( topControls, new Insets(10.0d) );\nVBox.setMargin( tblCustomers, new Insets(0.0d, 10.0d, 10.0d, 10.0d) );\nVBox.setMargin( bottomControls, new Insets(10.0d) );\n</code></pre> <p>El <code>Insets</code> usado por tblCustomers omite cualquier espacio superior para mantener el espacio uniforme. JavaFX no consolida los espacios en blanco como en el dise\u00f1o web. Si el Recuadro superior se estableciera en 10.0d para el <code>TableView</code>, la distancia entre los controles superiores y el <code>TableView</code>ser\u00eda el doble de ancha que la distancia entre cualquiera de los otros controles.</p> <p>Tenga en cuenta que estos son m\u00e9todos est\u00e1ticos como el <code>Priority</code>.</p> <p>Esta imagen muestra la aplicaci\u00f3n cuando se ejecuta en su tama\u00f1o inicial de 800x600.</p> <p>Esta imagen muestra la aplicaci\u00f3n redimensionada a un alto y ancho m\u00e1s peque\u00f1os.</p>"},{"location":"ud10/ud1004/#seleccione-los-contenedores-correctos","title":"Seleccione los contenedores correctos","text":"<p>La filosof\u00eda del dise\u00f1o de JavaFX es la misma que la filosof\u00eda de Swing. Seleccione el contenedor adecuado para la tarea en cuesti\u00f3n. Este art\u00edculo present\u00f3 los dos contenedores m\u00e1s vers\u00e1tiles: <code>VBox</code>y HBox. Al establecer propiedades como alineaci\u00f3n, hgrow y vgrow, puede crear dise\u00f1os incre\u00edblemente complejos mediante el anidamiento. Estos son los contenedores que m\u00e1s uso y, a menudo, son los \u00fanicos contenedores que necesito.</p>"},{"location":"ud10/ud1004/#codigo-completo","title":"C\u00f3digo completo","text":"<p>El c\u00f3digo se puede probar en un par de archivos .java. Hay un POJO para el objeto Cliente utilizado por el<code>TableView</code></p> Java<pre><code>public class Customer {\n\n    private String firstName;\n    private String lastName;\n\n    public Customer(String firstName,\n                    String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n</code></pre> <p><code>Application</code> Esta es la subclase JavaFX completa y principal.</p> Java<pre><code>public class VBoxAndHBoxApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        VBox vbox = new VBox();\n\n        HBox topControls = new HBox();\n        VBox.setMargin( topControls, new Insets(10.0d) );\n        topControls.setAlignment( Pos.BOTTOM_LEFT );\n\n        Button btnRefresh = new Button(\"Refresh\");\n\n        HBox topRightControls = new HBox();\n        HBox.setHgrow(topRightControls, Priority.ALWAYS );\n        topRightControls.setAlignment( Pos.BOTTOM_RIGHT );\n        Hyperlink signOutLink = new Hyperlink(\"Sign Out\");\n        topRightControls.getChildren().add( signOutLink );\n\n        topControls.getChildren().addAll( btnRefresh, topRightControls );\n\n        TableView&lt;Customer&gt; tblCustomers = new TableView&lt;&gt;();\n        tblCustomers.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);\n        VBox.setMargin( tblCustomers, new Insets(0.0d, 10.0d, 10.0d, 10.0d) );\n        VBox.setVgrow( tblCustomers, Priority.ALWAYS );\n\n        TableColumn&lt;Customer, String&gt; lastNameCol = new TableColumn&lt;&gt;(\"Last Name\");\n        lastNameCol.setCellValueFactory(new PropertyValueFactory&lt;&gt;(\"lastName\"));\n\n        TableColumn&lt;Customer, String&gt; firstNameCol = new TableColumn&lt;&gt;(\"First Name\");\n        firstNameCol.setCellValueFactory(new PropertyValueFactory&lt;&gt;(\"firstName\"));\n\n        tblCustomers.getColumns().addAll( lastNameCol, firstNameCol );\n\n        Separator sep = new Separator();\n\n        HBox bottomControls = new HBox();\n        bottomControls.setAlignment(Pos.BOTTOM_RIGHT );\n        VBox.setMargin( bottomControls, new Insets(10.0d) );\n\n        Button btnClose = new Button(\"Close\");\n\n        bottomControls.getChildren().add( btnClose );\n\n        vbox.getChildren().addAll(\n            topControls,\n            tblCustomers,\n            sep,\n            bottomControls\n        );\n\n        Scene scene = new Scene(vbox );\n\n        primaryStage.setScene( scene );\n        primaryStage.setWidth( 800 );\n        primaryStage.setHeight( 600 );\n        primaryStage.setTitle(\"VBox and HBox App\");\n        primaryStage.setOnShown( (evt) -&gt; loadTable(tblCustomers) );\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    private void loadTable(TableView&lt;Customer&gt; tblCustomers) {\n        tblCustomers.getItems().add(new Customer(\"George\", \"Washington\"));\n        tblCustomers.getItems().add(new Customer(\"Abe\", \"Lincoln\"));\n        tblCustomers.getItems().add(new Customer(\"Thomas\", \"Jefferson\"));\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#stackpane","title":"StackPane","text":"<p><code>StackPane</code> coloca a sus hijos uno encima de otro. El \u00faltimo agregado <code>Node</code>es el m\u00e1s alto. Por defecto <code>StackPane</code>alinear\u00e1 los hijos usando <code>Pos.CENTER</code>, como se puede ver en la siguiente imagen, donde est\u00e1n los 3 hijos (en orden de suma): <code>Rectangle</code>, <code>Circle</code>y <code>Button</code>.</p> <p>Esta imagen fue producida por el siguiente fragmento:</p> Java<pre><code>public class StackPaneApp extends Application {\n    @Override\n    public void start(Stage stage) throws Exception {\n        StackPane pane = new StackPane(\n            new Rectangle(200, 100, Color.BLACK),\n            new Circle(40, Color.RED),\n            new Button(\"Hello StackPane\")\n        );\n\n        stage.setScene(new Scene(pane, 300, 300));\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre> <p>Podemos cambiar la alineaci\u00f3n predeterminada agregando <code>pane.setAlignment(Pos.CENTER_LEFT);</code>para producir el siguiente efecto:</p> Figura 23. StackPane alineado a la izquierda"},{"location":"ud10/ud1004/#posicionamiento-absoluto-con-panel","title":"Posicionamiento absoluto con panel","text":"<p>Contenedores como <code>VBox</code>o <code>BorderPane</code>alinear y distribuir a sus hijos. La superclase <code>Pane</code>tambi\u00e9n es un contenedor, pero no impone un orden a sus hijos. Los hijos se posicionan a s\u00ed mismos a trav\u00e9s de propiedades como x, centerX y layoutX. Esto se llama posicionamiento absoluto y es una t\u00e9cnica para colocar un <code>Shape</code>o un <code>Node</code>en un lugar determinado de la pantalla.</p> <p>Esta captura de pantalla muestra una vista Acerca de. La vista Acerca de contiene <code>Hyperlink</code>en el medio de la pantalla \"Acerca de esta aplicaci\u00f3n\". La vista Acerca de utiliza varias formas JavaFX para formar un dise\u00f1o que se recorta para que parezca una tarjeta de presentaci\u00f3n.      </p> Figura 24. Captura de pantalla de la vista Acerca de en PaneApp"},{"location":"ud10/ud1004/#tamano-del-panel","title":"Tama\u00f1o del panel","text":"<p>A diferencia de la mayor\u00eda de los contenedores, <code>Pane</code>cambia de tama\u00f1o para adaptarse a su contenido y no al rev\u00e9s. Esta imagen es una captura de pantalla de Scenic View tomada antes de agregar el Arco inferior derecho. El <code>Pane</code>es el \u00e1rea resaltada en amarillo. Tenga en cuenta que no ocupa la totalidad <code>Stage</code>.           </p> Figura 25. Vista esc\u00e9nica resaltando la pantalla parcialmente construida <p>Esta es una captura de pantalla tomada despu\u00e9s de agregar la esquina inferior derecha <code>Arc</code>. Esto <code>Arc</code>se coloc\u00f3 m\u00e1s cerca del borde inferior derecho del archivo <code>Stage</code>. Esto obliga al Panel a estirarse para acomodar los contenidos expandidos.        </p> Figura 26. Vista esc\u00e9nica resaltando el panel expandido"},{"location":"ud10/ud1004/#el-panel","title":"El panel","text":"<p>El contenedor m\u00e1s externo de la vista Acerca de es un <code>VBox</code>cuyo \u00fanico contenido es el archivo <code>Pane</code>. El <code>VBox</code>se utiliza para encajar en el conjunto <code>Stage</code>y proporciona un fondo.</p> Java<pre><code>VBox vbox = new VBox();\nvbox.setPadding( new Insets( 10 ) );\nvbox.setBackground(\n    new Background(\n        new BackgroundFill(Color.BLACK, new CornerRadii(0), new Insets(0))\n        ));\n\nPane p = new Pane();\n</code></pre>"},{"location":"ud10/ud1004/#las-formas","title":"Las formas","text":"<p>En la parte superior izquierda de la pantalla, hay un grupo de 4 'Arcos' y 1 'C\u00edrculo'. Este c\u00f3digo posiciona largeArc en (0,0) a trav\u00e9s de los argumentos centerX y centerY en el <code>Arc</code>constructor. Observe que backgroundArc tambi\u00e9n se coloca en (0,0) y aparece debajo de largeArc. <code>Pane</code>no intenta eliminar el conflicto de formas superpuestas y, en este caso, lo que se busca es la superposici\u00f3n. smArc1 se coloca en (0,160), que est\u00e1 abajo en el eje Y. smArc2 est\u00e1 posicionado en (160,0) que est\u00e1 justo en el eje X. smCircle se coloca a la misma distancia que smArc1 y smArc2, pero en un \u00e1ngulo de 45 grados.</p> Java<pre><code>Arc largeArc = new Arc(0, 0, 100, 100, 270, 90);\nlargeArc.setType(ArcType.ROUND);\n\nArc backgroundArc = new Arc(0, 0, 160, 160, 270, 90 );\nbackgroundArc.setType( ArcType.ROUND );\n\nArc smArc1 = new Arc( 0, 160, 30, 30, 270, 180);\nsmArc1.setType(ArcType.ROUND);\n\nCircle smCircle = new Circle(160/Math.sqrt(2.0), 160/Math.sqrt(2.0), 30,Color.web(\"0xF2A444\"));\n\nArc smArc2 = new Arc( 160, 0, 30, 30, 180, 180);\nsmArc2.setType(ArcType.ROUND);\n</code></pre> <p>La parte inferior derecha <code>Arc</code>se coloca en funci\u00f3n de la altura total del archivo <code>Stage</code>. Los 20 restados de la altura son los 10 p\u00edxeles <code>Insets</code>de <code>VBox</code>(10 para la izquierda + 10 para la derecha).</p> Java<pre><code>Arc medArc = new Arc(568-20, 320-20, 60, 60, 90, 90);\nmedArc.setType(ArcType.ROUND);\n\nprimaryStage.setWidth( 568 );\nprimaryStage.setHeight( 320 );\n</code></pre>"},{"location":"ud10/ud1004/#el-hipervinculo","title":"El hiperv\u00ednculo","text":"<p>El <code>Hyperlink</code>est\u00e1 posicionado compensado el centro (284,160) que es el ancho y alto de <code>Stage</code>ambos dividido por dos. Esto coloca el texto del <code>Hyperlink</code>en el cuadrante inferior derecho de la pantalla, por lo que se necesita un desplazamiento basado en el <code>Hyperlink</code>ancho y el alto. Las dimensiones no est\u00e1n disponibles <code>Hyperlink</code>hasta que se muestra la pantalla, por lo que realizo un ajuste posterior a la visualizaci\u00f3n de la posici\u00f3n.</p> Java<pre><code>Hyperlink hyperlink = new Hyperlink(\"About this App\");\n\nprimaryStage.setOnShown( (evt) -&gt; {\n     hyperlink.setLayoutX( 284 - (hyperlink.getWidth()/3) );\n     hyperlink.setLayoutY( 160 - hyperlink.getHeight() );\n});\n</code></pre> <p>El <code>Hyperlink</code>no est\u00e1 colocado en el verdadero centro de la pantalla. El valor de layoutX se basa en una operaci\u00f3n de divisi\u00f3n por tres que lo aleja del dise\u00f1o superior izquierdo.</p>"},{"location":"ud10/ud1004/#orden-z","title":"Orden Z","text":"<p>Como se mencion\u00f3 anteriormente, <code>Pane</code>admite la superposici\u00f3n de ni\u00f1os. Esta imagen muestra la vista Acerca de con profundidad a\u00f1adida al dise\u00f1o superior izquierdo. El m\u00e1s peque\u00f1o <code>Arcs</code>y <code>Circle</code>el cursor sobre backgroundArc al igual que largeArc.</p> <p>El orden z en este ejemplo est\u00e1 determinado por el orden en que se agregan los elementos secundarios al archivo <code>Pane</code>. backgroundArc est\u00e1 oscurecido por elementos agregados m\u00e1s tarde, m\u00e1s notablemente largeArc. Para reorganizar los elementos secundarios, use los m\u00e9todos toFront() y toBack() despu\u00e9s de agregar los elementos al archivo <code>Pane</code>.</p> Java<pre><code>p.getChildren().addAll( backgroundArc, largeArc, smArc1, smCircle, smArc2, hyperlink, medArc );\n\nvbox.getChildren().add( p );\n</code></pre> <p>Al iniciar JavaFX, es tentador construir un dise\u00f1o absoluto. Tenga en cuenta que los dise\u00f1os absolutos son fr\u00e1giles y, a menudo, se rompen cuando se cambia el tama\u00f1o de la pantalla o cuando se agregan elementos durante la fase de mantenimiento del software. Sin embargo, existen buenas razones para utilizar el posicionamiento absoluto. El juego es uno de esos usos. En un juego, puede ajustar la coordenada (x,y) de una 'Forma' para mover una pieza del juego por la pantalla. Este art\u00edculo demostr\u00f3 la clase JavaFX <code>Pane</code>que proporciona un posicionamiento absoluto a cualquier interfaz de usuario basada en formas.</p>"},{"location":"ud10/ud1004/#codigo-completado","title":"C\u00f3digo completado","text":"<p><code>Application</code> Esta es la subclase JavaFX completa y principal.</p> Java<pre><code>public class PaneApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        VBox vbox = new VBox();\n        vbox.setPadding( new Insets( 10 ) );\n        vbox.setBackground(\n            new Background(\n                new BackgroundFill(Color.BLACK, new CornerRadii(0), new Insets(0))\n                ));\n\n        Pane p = new Pane();\n\n        Arc largeArc = new Arc(0, 0, 100, 100, 270, 90);\n        largeArc.setFill(Color.web(\"0x59291E\"));\n        largeArc.setType(ArcType.ROUND);\n\n        Arc backgroundArc = new Arc(0, 0, 160, 160, 270, 90 );\n        backgroundArc.setFill( Color.web(\"0xD96F32\") );\n        backgroundArc.setType( ArcType.ROUND );\n\n        Arc smArc1 = new Arc( 0, 160, 30, 30, 270, 180);\n        smArc1.setFill(Color.web(\"0xF2A444\"));\n        smArc1.setType(ArcType.ROUND);\n\n        Circle smCircle = new Circle(\n            160/Math.sqrt(2.0), 160/Math.sqrt(2.0), 30,Color.web(\"0xF2A444\")\n            );\n\n        Arc smArc2 = new Arc( 160, 0, 30, 30, 180, 180);\n        smArc2.setFill(Color.web(\"0xF2A444\"));\n        smArc2.setType(ArcType.ROUND);\n\n        Hyperlink hyperlink = new Hyperlink(\"About this App\");\n        hyperlink.setFont( Font.font(36) );\n        hyperlink.setTextFill( Color.web(\"0x3E6C93\") );\n        hyperlink.setBorder( Border.EMPTY );\n\n        Arc medArc = new Arc(568-20, 320-20, 60, 60, 90, 90);\n        medArc.setFill(Color.web(\"0xD9583B\"));\n        medArc.setType(ArcType.ROUND);\n\n        p.getChildren().addAll( backgroundArc, largeArc, smArc1, smCircle,\n            smArc2, hyperlink, medArc );\n\n        vbox.getChildren().add( p );\n\n        Scene scene = new Scene(vbox);\n        scene.setFill(Color.BLACK);\n\n        primaryStage.setTitle(\"Pane App\");\n        primaryStage.setScene( scene );\n        primaryStage.setWidth( 568 );\n        primaryStage.setHeight( 320 );\n        primaryStage.setOnShown( (evt) -&gt; {\n             hyperlink.setLayoutX( 284 - (hyperlink.getWidth()/3) );\n             hyperlink.setLayoutY( 160 - hyperlink.getHeight() );\n        });\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#recorte","title":"Recorte","text":"<p>La mayor\u00eda de los contenedores de dise\u00f1o JavaFX (clase base Regi\u00f3n) posicionan y dimensionan autom\u00e1ticamente a sus elementos secundarios, por lo que recortar cualquier contenido secundario que pueda sobresalir m\u00e1s all\u00e1 de los l\u00edmites del dise\u00f1o del contenedor nunca es un problema. La gran excepci\u00f3n es Pane , una subclase directa <code>Region</code>y la clase base para todos los contenedores de dise\u00f1o con elementos secundarios de acceso p\u00fablico. A diferencia de sus subclases, Pane no intenta organizar a sus hijos,  sino que simplemente acepta el posicionamiento y el tama\u00f1o expl\u00edcitos del usuario.</p> <p>Esto lo hace <code>Pane</code>adecuado como una superficie de dibujo, similar a Canvas, pero representa elementos secundarios de Forma definidos por el usuario en lugar de comandos de dibujo directos. El problema es que normalmente se espera que las superficies de dibujo recorten autom\u00e1ticamente su contenido en sus l\u00edmites. <code>Canvas</code>hace esto por defecto pero <code>Pane</code>no lo hace. Desde el \u00faltimo p\u00e1rrafo de la entrada de Javadoc para <code>Pane</code>:</p> <p> </p> <p>El panel no recorta su contenido de forma predeterminada, por lo que es posible que los l\u00edmites de los elementos secundarios se extiendan m\u00e1s all\u00e1 de sus propios l\u00edmites, ya sea si los elementos secundarios se colocan en coordenadas negativas o si el panel se redimensiona m\u00e1s peque\u00f1o que su tama\u00f1o preferido.        </p> <p>Esta cita es algo enga\u00f1osa. Los elementos secundarios se representan (total o parcialmente) fuera de su elemento principal <code>Pane</code>'siempre que' su combinaci\u00f3n de posici\u00f3n y tama\u00f1o se extienda m\u00e1s all\u00e1 de los l\u00edmites del elemento principal, independientemente de si la posici\u00f3n es negativa o si <code>Pane</code>alguna vez se redimensiona. En pocas palabras, <code>Pane</code>solo proporciona un cambio de coordenadas a sus elementos secundarios, en funci\u00f3n de su esquina superior izquierda, pero sus l\u00edmites de dise\u00f1o se ignoran por completo al representar elementos secundarios. Tenga en cuenta que el Javadoc para todas las <code>Pane</code>subclases (que revis\u00e9) incluye una advertencia similar. Tampoco recortan su contenido, pero como se mencion\u00f3 anteriormente, esto no suele ser un problema para ellos porque organizan autom\u00e1ticamente a sus hijos.</p> <p>Entonces, para usarlo correctamente <code>Pane</code>como superficie de dibujo para <code>Shapes</code>, necesitamos recortar manualmente su contenido. Esto es algo complejo, especialmente cuando se trata de un borde visible. Escrib\u00ed una peque\u00f1a aplicaci\u00f3n de demostraci\u00f3n para ilustrar el comportamiento predeterminado y varios pasos para solucionarlo. Puede descargarlo como PaneDemo.zip que contiene un proyecto para NetBeans 8.2 y Java SE 8u112. Las siguientes secciones explican cada paso con capturas de pantalla y fragmentos de c\u00f3digo pertinentes.</p>"},{"location":"ud10/ud1004/#comportamiento-por-defecto","title":"Comportamiento por defecto","text":"<p>Al comenzar, PaneDemo muestra lo que sucede cuando coloca una <code>Ellipse</code>forma en un espacio <code>Pane</code>que es demasiado peque\u00f1o para contenerla por completo. <code>Pane</code> tiene un bonito borde grueso y redondeado para visualizar su \u00e1rea . La ventana de la aplicaci\u00f3n es redimensionable, con el <code>Pane</code>tama\u00f1o siguiendo el tama\u00f1o de la ventana. Los tres botones de la izquierda se utilizan para cambiar a los otros pasos de la demostraci\u00f3n; haga clic en Predeterminado (Alt+D) para volver a la salida predeterminada de un paso posterior.</p> Figura 28. Ni\u00f1o que se extiende fuera de los l\u00edmites del panel <p>Como puede ver, el <code>Ellipse</code>sobrescribe el de su padre <code>Border</code>y sobresale mucho m\u00e1s all\u00e1. El siguiente c\u00f3digo se utiliza para generar la vista predeterminada. Se divide en varios m\u00e9todos m\u00e1s peque\u00f1os y una constante para el <code>Border</code>radio de la esquina, ya que se har\u00e1 referencia a ellos en los siguientes pasos.</p> Java<pre><code>static final double BORDER_RADIUS = 4;\n\nstatic Border createBorder() {\n    return new Border(\n            new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID,\n            new CornerRadii(BORDER_RADIUS), BorderStroke.THICK));\n}\n\nstatic Shape createShape() {\n    final Ellipse shape = new Ellipse(50, 50);\n    shape.setCenterX(80);\n    shape.setCenterY(80);\n    shape.setFill(Color.LIGHTCORAL);\n    shape.setStroke(Color.LIGHTCORAL);\n    return shape;\n}\n\nstatic Region createDefault() {\n    final Pane pane = new Pane(createShape());\n    pane.setBorder(createBorder());\n    pane.setPrefSize(100, 100);\n    return pane;\n}\n</code></pre>"},{"location":"ud10/ud1004/#recorte-simple","title":"Recorte simple","text":"<p>Sorprendentemente, no hay una opci\u00f3n predefinida para hacer que un redimensionable <code>Region</code>recorte autom\u00e1ticamente a sus elementos secundarios a su tama\u00f1o actual. En su lugar, debe usar la propiedad clipProperty b\u00e1sica definida en <code>Node</code>y mantenerla actualizada manualmente para reflejar los cambios en los l\u00edmites del dise\u00f1o. El m\u00e9todo <code>clipChildren</code>a continuaci\u00f3n muestra c\u00f3mo funciona esto (con Javadoc porque es posible que desee reutilizarlo en su propio c\u00f3digo):</p> Java<pre><code>/**\n * Clips the children of the specified {@link Region} to its current size.\n * This requires attaching a change listener to the region\u2019s layout bounds,\n * as JavaFX does not currently provide any built-in way to clip children.\n *\n * @param region the {@link Region} whose children to clip\n * @param arc the {@link Rectangle#arcWidth} and {@link Rectangle#arcHeight}\n *            of the clipping {@link Rectangle}\n * @throws NullPointerException if {@code region} is {@code null}\n */\nstatic void clipChildren(Region region, double arc) {\n\n    final Rectangle outputClip = new Rectangle();\n    outputClip.setArcWidth(arc);\n    outputClip.setArcHeight(arc);\n    region.setClip(outputClip);\n\n    region.layoutBoundsProperty().addListener((ov, oldValue, newValue) -&gt; {\n        outputClip.setWidth(newValue.getWidth());\n        outputClip.setHeight(newValue.getHeight());\n    });\n}\n\nstatic Region createClipped() {\n    final Pane pane = new Pane(createShape());\n    pane.setBorder(createBorder());\n    pane.setPrefSize(100, 100);\n\n    // clipped children still overwrite Border!\n    clipChildren(pane, 3 * BORDER_RADIUS);\n\n    return pane;\n}\n</code></pre> <p>Elige Recortado (Alt+C) en PaneDemo para representar la salida correspondiente. As\u00ed es como se ve:     </p> Figura 29. Panel con clip aplicado <p>Eso es mejor. El <code>Ellipse</code>ya no sobresale m\u00e1s all\u00e1 del <code>Pane</code>\u2013 pero todav\u00eda sobrescribe su Borde. Tambi\u00e9n tenga en cuenta que tuvimos que especificar manualmente un redondeo de esquina estimado para el recorte <code>Rectangle</code>para reflejar las <code>Border</code>esquinas redondeadas. Esta estimaci\u00f3n es 3 * BORDER_RADIUS porque el radio de esquina especificado en <code>Border</code>realmente define su radio interior, y el radio exterior (que necesitamos aqu\u00ed) ser\u00e1 mayor dependiendo del <code>Border</code>grosor. (Podr\u00eda calcular el radio exterior exactamente si realmente quisiera, pero lo omit\u00ed para la aplicaci\u00f3n de demostraci\u00f3n).</p>"},{"location":"ud10/ud1004/#443-paneles-anidados","title":"4.4.3. Paneles anidados","text":"<p>\u00bfPodemos de alguna manera especificar una regi\u00f3n de recorte que excluya un 'Borde' visible? No en el dibujo <code>Pane</code>en s\u00ed, que yo sepa. La regi\u00f3n de recorte afecta <code>Border</code>tanto al contenido como a otros, por lo que si tuviera que reducir la regi\u00f3n de recorte para excluirla, ya no ver\u00eda nada <code>Border</code>. En su lugar, la soluci\u00f3n es crear dos paneles anidados: un dibujo interior <code>Pane</code>sin <code>Border</code>que se ajuste exactamente a sus l\u00edmites y otro exterior <code>StackPane</code>que defina lo visible <code>Border</code>y tambi\u00e9n cambie el tama\u00f1o del dibujo <code>Pane</code>. Aqu\u00ed est\u00e1 el c\u00f3digo final:</p> Java<pre><code>static Region createNested() {\n    // create drawing Pane without Border or size\n    final Pane pane = new Pane(createShape());\n    clipChildren(pane, BORDER_RADIUS);\n\n    // create sized enclosing Region with Border\n    final Region container = new StackPane(pane);\n    container.setBorder(createBorder());\n    container.setPrefSize(100, 100);\n    return container;\n}\n</code></pre> <p>Elige Anidado (Alt+N) en PaneDemo para representar la salida correspondiente. Ahora todo se ve como deber\u00eda:</p> <p>Como beneficio adicional, ya no necesitamos estimar un radio de esquina correcto para el recorte <code>Rectangle</code>. Ahora recortamos la circunferencia interior en lugar de la exterior de nuestro visible <code>Border</code>, para que podamos reutilizar directamente su radio de esquina interior. Si especifica m\u00faltiples radios de esquina diferentes o uno m\u00e1grandes que una sola s complejo <code>Border</code>, tendr\u00e1 que definir un recorte correspondientemente m\u00e1s complejo <code>Shape</code>.</p> <p>Hay una peque\u00f1a advertencia. La esquina superior izquierda del dibujo <code>Pane</code>con respecto a todas las coordenadas secundarias ahora comienza dentro del visible <code>Border</code>. Si cambia retroactivamente uno <code>Pane</code>con paneles visibles <code>Border</code>a anidados como se muestra aqu\u00ed, todos los ni\u00f1os exhibir\u00e1n un ligero cambio de posici\u00f3n correspondiente al <code>Border</code>grosor.</p>"},{"location":"ud10/ud1004/#gridpane","title":"GridPane","text":"<p>Los formularios en las aplicaciones comerciales a menudo usan un dise\u00f1o que imita un registro de base de datos. Para cada columna de una tabla, se agrega un encabezado en el lado izquierdo que coincide con un valor de fila en el lado derecho. JavaFX tiene un control de prop\u00f3sito especial llamado <code>GridPane</code>para este tipo de dise\u00f1o que mantiene los contenidos alineados por fila y columna. <code>GridPane</code>tambi\u00e9n admite expansi\u00f3n para dise\u00f1os m\u00e1s complejos.</p> <p><code>GridPane</code>Esta captura de pantalla muestra un dise\u00f1o b\u00e1sico . En el lado izquierdo del formulario, hay una columna de nombres de campo: Correo electr\u00f3nico, Prioridad, Problema, Descripci\u00f3n. En el lado derecho del formulario, hay una columna de controles que mostrar\u00e1 el valor del campo correspondiente. Los nombres de campo son de tipo <code>Label</code>y los controles de valor son una mezcla que incluye <code>TextField</code>, <code>TextArea</code>y <code>ComboBox</code>.</p> <p>El siguiente c\u00f3digo muestra los objetos creados para el formulario. \"vbox\" es la ra\u00edz del <code>Scene</code>y tambi\u00e9n contendr\u00e1 el <code>ButtonBar</code>en la base del formulario.</p> Java<pre><code>VBox vbox = new VBox();\n\nGridPane gp = new GridPane();\n\nLabel lblTitle = new Label(\"Support Ticket\");\n\nLabel lblEmail = new Label(\"Email\");\nTextField tfEmail = new TextField();\n\nLabel lblPriority = new Label(\"Priority\");\nObservableList&lt;String&gt; priorities = FXCollections.observableArrayList(\"Medium\", \"High\", \"Low\");\nComboBox&lt;String&gt; cbPriority = new ComboBox&lt;&gt;(priorities);\n\nLabel lblProblem = new Label(\"Problem\");\nTextField tfProblem = new TextField();\n\nLabel lblDescription = new Label(\"Description\");\nTextArea taDescription = new TextArea();\n</code></pre> <p>GridPane tiene un m\u00e9todo \u00fatil <code>setGridLinesVisible()</code>que muestra la estructura de la cuadr\u00edcula y los canalones. Es especialmente \u00fatil en dise\u00f1os m\u00e1s complejos donde se involucra la expansi\u00f3n porque los espacios en las asignaciones de filas/columnas pueden causar cambios en el dise\u00f1o.</p>"},{"location":"ud10/ud1004/#espaciado","title":"Espaciado","text":"<p>Como contenedor, <code>GridPane</code>tiene una propiedad de relleno que se puede configurar para rodear el <code>GridPane</code>contenido con espacios en blanco. \"relleno\" tomar\u00e1 un <code>Inset</code>objeto como par\u00e1metro. En este ejemplo, se aplican 10 p\u00edxeles de espacio en blanco a todos los lados, por lo que se usa un constructor de formato corto para <code>Inset</code>.</p> <p>Dentro de <code>GridPane</code>, vgap y hgap controlan los canalones. El hgap se establece en 4 para mantener los campos cerca de sus valores. vgap es un poco m\u00e1s grande para ayudar con la navegaci\u00f3n del mouse.</p> Java<pre><code>gp.setPadding( new Insets(10) );\ngp.setHgap( 4 );\ngp.setVgap( 8 );\n</code></pre> <p>Para mantener consistente la parte inferior del formulario, <code>Priority</code>se establece a en el VBox. Sin embargo , esto no cambiar\u00e1 el tama\u00f1o de las filas individuales. Para especificaciones de cambio de tama\u00f1o individuales, use <code>ColumnConstraints</code>y <code>RowConstraints</code>.</p> Java<pre><code>VBox.setVgrow(gp, Priority.ALWAYS );\n</code></pre>"},{"location":"ud10/ud1004/#adicion-de-elementos","title":"Adici\u00f3n de elementos","text":"<p>A diferencia de los contenedores como <code>BorderPane</code>o <code>HBox</code>, los nodos deben especificar su posici\u00f3n dentro del archivo <code>GridPane</code>. Esto se hace con el <code>add()</code>m\u00e9todo en <code>GridPane</code>y no con el m\u00e9todo add en una propiedad secundaria del contenedor. Esta forma del <code>GridPane</code> <code>add()</code>m\u00e9todo toma una posici\u00f3n de columna de base cero y una posici\u00f3n de fila de base cero. Este c\u00f3digo pone dos declaraciones en la misma l\u00ednea para facilitar la lectura.</p> Java<pre><code>gp.add( lblTitle,       1, 1); // empty item at 0,0\ngp.add( lblEmail,       0, 2); gp.add(tfEmail,        1, 2);\ngp.add( lblPriority,    0, 3); gp.add( cbPriority,    1, 3);\ngp.add( lblProblem,     0, 4); gp.add( tfProblem,     1, 4);\ngp.add( lblDescription, 0, 5); gp.add( taDescription, 1, 5);\n</code></pre> <p>lblTitle se coloca en la segunda columna de la primera fila. No hay ninguna entrada en la primera columna de la primera fila.</p> <p>Las adiciones posteriores se presentan por parejas. Los objetos de nombre de campo <code>Label</code>se colocan en la primera columna (\u00edndice de columna=0) y los controles de valor se colocan en la segunda columna (\u00edndice de columna=1). Las filas se agregan por el segundo valor incrementado. Por ejemplo, lblPriority se coloca en la cuarta fila junto con su <code>ComboBox</code>.</p> <p><code>GridPane</code>es un contenedor importante en el dise\u00f1o de aplicaciones empresariales JavaFX. Cuando tenga un requisito de pares de nombre/valor, <code>GridPane</code>ser\u00e1 una manera f\u00e1cil de admitir la fuerte orientaci\u00f3n de columna de un formulario tradicional.</p>"},{"location":"ud10/ud1004/#codigo-completado_1","title":"C\u00f3digo completado","text":"<p>La siguiente clase es el c\u00f3digo completo del ejemplo. Esto incluye la definici\u00f3n de la <code>ButtonBar</code>que no se present\u00f3 en las secciones anteriores enfocadas en <code>GridPane</code>.</p> Java<pre><code>public class GridPaneApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        VBox vbox = new VBox();\n\n        GridPane gp = new GridPane();\n        gp.setPadding( new Insets(10) );\n        gp.setHgap( 4 );\n        gp.setVgap( 8 );\n\n        VBox.setVgrow(gp, Priority.ALWAYS );\n\n        Label lblTitle = new Label(\"Support Ticket\");\n\n        Label lblEmail = new Label(\"Email\");\n        TextField tfEmail = new TextField();\n\n        Label lblPriority = new Label(\"Priority\");\n        ObservableList&lt;String&gt; priorities =\n            FXCollections.observableArrayList(\"Medium\", \"High\", \"Low\");\n        ComboBox&lt;String&gt; cbPriority = new ComboBox&lt;&gt;(priorities);\n\n        Label lblProblem = new Label(\"Problem\");\n        TextField tfProblem = new TextField();\n\n        Label lblDescription = new Label(\"Description\");\n        TextArea taDescription = new TextArea();\n\n        gp.add( lblTitle,       1, 1);  // empty item at 0,0\n        gp.add( lblEmail,       0, 2); gp.add(tfEmail,        1, 2);\n        gp.add( lblPriority,    0, 3); gp.add( cbPriority,    1, 3);\n        gp.add( lblProblem,     0, 4); gp.add( tfProblem,     1, 4);\n        gp.add( lblDescription, 0, 5); gp.add( taDescription, 1, 5);\n\n        Separator sep = new Separator(); // hr\n\n        ButtonBar buttonBar = new ButtonBar();\n        buttonBar.setPadding( new Insets(10) );\n\n        Button saveButton = new Button(\"Save\");\n        Button cancelButton = new Button(\"Cancel\");\n\n        buttonBar.setButtonData(saveButton, ButtonBar.ButtonData.OK_DONE);\n        buttonBar.setButtonData(cancelButton, ButtonBar.ButtonData.CANCEL_CLOSE);\n\n        buttonBar.getButtons().addAll(saveButton, cancelButton);\n\n        vbox.getChildren().addAll( gp, sep, buttonBar );\n\n        Scene scene = new Scene(vbox);\n\n        primaryStage.setTitle(\"Grid Pane App\");\n        primaryStage.setScene(scene);\n        primaryStage.setWidth( 736 );\n        primaryStage.setHeight( 414  );\n        primaryStage.show();\n\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#gridpane-spanning","title":"GridPane Spanning","text":"<p>Para formularios m\u00e1s complejos implementados con <code>GridPane</code>, se admite la expansi\u00f3n. La expansi\u00f3n permite que un control reclame el espacio de columnas vecinas (colspan) y filas vecinas (rowspan). Esta captura de pantalla muestra un formulario que ampl\u00eda el ejemplo de la secci\u00f3n anterior. El dise\u00f1o de dos columnas de la versi\u00f3n anterior se reemplaz\u00f3 por un dise\u00f1o de varias columnas. Los campos como Problema y Descripci\u00f3n conservan la estructura original. Pero se agregaron controles a las filas que anteriormente conten\u00edan solo Correo electr\u00f3nico y Prioridad.       </p> Figura 33. Columnas de expansi\u00f3n <p>Al activar las l\u00edneas de la cuadr\u00edcula, observe que la cuadr\u00edcula anterior de dos columnas se reemplaza con una cuadr\u00edcula de seis columnas. La tercera fila que contiene seis elementos (3 pares de nombre de campo/valor) dicta la estructura. El resto del formulario utilizar\u00e1 la expansi\u00f3n para completar el espacio en blanco.</p> Figura 34. L\u00edneas que resaltan la extensi\u00f3n <p>A continuaci\u00f3n se muestran los objetos contenedor <code>VBox</code>y <code>GridPane</code>utilizados en esta actualizaci\u00f3n. Hay un poco m\u00e1s de Vgap para ayudar al usuario a seleccionar los <code>ComboBox</code>controles.</p> Java<pre><code>GridPane gp = new GridPane();\ngp.setPadding( new Insets(10) );\ngp.setHgap( 4 );\ngp.setVgap( 10 );\n\nVBox.setVgrow(gp, Priority.ALWAYS );\n</code></pre> <p>Estas son declaraciones de creaci\u00f3n de control del ejemplo actualizado.</p> Java<pre><code>Label lblTitle = new Label(\"Support Ticket\");\n\nLabel lblEmail = new Label(\"Email\");\nTextField tfEmail = new TextField();\n\nLabel lblContract = new Label(\"Contract\");\nTextField tfContract = new TextField();\n\nLabel lblPriority = new Label(\"Priority\");\nObservableList&lt;String&gt; priorities =\n    FXCollections.observableArrayList(\"Medium\", \"High\", \"Low\");\nComboBox&lt;String&gt; cbPriority = new ComboBox&lt;&gt;(priorities);\n\nLabel lblSeverity = new Label(\"Severity\");\nObservableList&lt;String&gt; severities =\n    FXCollections.observableArrayList(\"Blocker\", \"Workaround\", \"N/A\");\nComboBox&lt;String&gt; cbSeverity = new ComboBox&lt;&gt;(severities);\n\nLabel lblCategory = new Label(\"Category\");\nObservableList&lt;String&gt; categories =\n    FXCollections.observableArrayList(\"Bug\", \"Feature\");\nComboBox&lt;String&gt; cbCategory = new ComboBox&lt;&gt;(categories);\n\nLabel lblProblem = new Label(\"Problem\");\nTextField tfProblem = new TextField();\n\nLabel lblDescription = new Label(\"Description\");\nTextArea taDescription = new TextArea();\n</code></pre> <p>Como en la versi\u00f3n anterior, los controles se agregan al <code>GridPane</code>m\u00e9todo <code>add()</code>. Se especifica una columna y una fila. En este fragmento, la indexaci\u00f3n no es sencilla, ya que se espera que se llenen los vac\u00edos mediante el contenido expandido.</p> Java<pre><code>gp.add( lblTitle,       1, 0); // empty item at 0,0\n\ngp.add( lblEmail,       0, 1);\ngp.add(tfEmail,         1, 1);\ngp.add( lblContract,    4, 1 );\ngp.add( tfContract,     5, 1 );\n\ngp.add( lblPriority,    0, 2);\ngp.add( cbPriority,     1, 2);\ngp.add( lblSeverity,    2, 2);\ngp.add( cbSeverity,     3, 2);\ngp.add( lblCategory,    4, 2);\ngp.add( cbCategory,     5, 2);\n\ngp.add( lblProblem,     0, 3); gp.add( tfProblem,     1, 3);\ngp.add( lblDescription, 0, 4); gp.add( taDescription, 1, 4);\n</code></pre> <p>Finalmente, las definiciones de expansi\u00f3n se establecen mediante un m\u00e9todo est\u00e1tico en <code>GridPane</code>. Hay un m\u00e9todo similar para hacer la expansi\u00f3n de filas. El t\u00edtulo ocupar\u00e1 5 columnas, al igual que el problema y la descripci\u00f3n. El correo electr\u00f3nico comparte una fila con el contrato, pero ocupar\u00e1 m\u00e1s columnas. La tercera fila de ComboBoxes es un conjunto de tres pares de campo/valor, cada uno de los cuales ocupa una columna.</p> Java<pre><code>GridPane.setColumnSpan( lblTitle, 5 );\nGridPane.setColumnSpan( tfEmail, 3 );\nGridPane.setColumnSpan( tfProblem, 5 );\nGridPane.setColumnSpan( taDescription, 5 );\n</code></pre> <p>Alternativamente, una variaci\u00f3n del m\u00e9todo add() tendr\u00e1 argumentos columnSpan y rowSpan para evitar la subsiguiente llamada al m\u00e9todo est\u00e1tico.</p> <p>Este ejemplo ampliado <code>GridPane</code>demostr\u00f3 la expansi\u00f3n de columnas. La misma capacidad est\u00e1 disponible para la expansi\u00f3n de filas, lo que permitir\u00eda que un control reclame espacio vertical adicional. La expansi\u00f3n mantiene los controles alineados incluso en los casos en que var\u00eda el n\u00famero de elementos en una fila (o columna) determinada. Para mantener el enfoque en el tema de expansi\u00f3n, esta cuadr\u00edcula permiti\u00f3 que variaran los anchos de las columnas. El art\u00edculo sobre <code>ColumnConstraints</code>y <code>RowConstraints</code>se centrar\u00e1 en la construcci\u00f3n de verdaderas cuadr\u00edculas tipogr\u00e1ficas modulares y de columnas mediante un mejor control de las columnas (y las filas).</p>"},{"location":"ud10/ud1004/#codigo-completado_2","title":"C\u00f3digo completado","text":"<p>El siguiente es el c\u00f3digo completo para el ejemplo de GridPane de expansi\u00f3n.</p> Java<pre><code>public class ComplexGridPaneApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        VBox vbox = new VBox();\n\n        GridPane gp = new GridPane();\n        gp.setPadding( new Insets(10) );\n        gp.setHgap( 4 );\n        gp.setVgap( 10 );\n\n        VBox.setVgrow(gp, Priority.ALWAYS );\n\n        Label lblTitle = new Label(\"Support Ticket\");\n\n        Label lblEmail = new Label(\"Email\");\n        TextField tfEmail = new TextField();\n\n        Label lblContract = new Label(\"Contract\");\n        TextField tfContract = new TextField();\n\n        Label lblPriority = new Label(\"Priority\");\n        ObservableList&lt;String&gt; priorities =\n            FXCollections.observableArrayList(\"Medium\", \"High\", \"Low\");\n        ComboBox&lt;String&gt; cbPriority = new ComboBox&lt;&gt;(priorities);\n\n        Label lblSeverity = new Label(\"Severity\");\n        ObservableList&lt;String&gt; severities = FXCollections.observableArrayList(\"Blocker\", \"Workaround\", \"N/A\");\n        ComboBox&lt;String&gt; cbSeverity = new ComboBox&lt;&gt;(severities);\n\n        Label lblCategory = new Label(\"Category\");\n        ObservableList&lt;String&gt; categories = FXCollections.observableArrayList(\"Bug\", \"Feature\");\n        ComboBox&lt;String&gt; cbCategory = new ComboBox&lt;&gt;(categories);\n\n        Label lblProblem = new Label(\"Problem\");\n        TextField tfProblem = new TextField();\n\n        Label lblDescription = new Label(\"Description\");\n        TextArea taDescription = new TextArea();\n\n        gp.add( lblTitle,       1, 0); // empty item at 0,0\n\n        gp.add( lblEmail,       0, 1);\n        gp.add(tfEmail,         1, 1);\n        gp.add( lblContract,    4, 1 );\n        gp.add( tfContract,     5, 1 );\n\n        gp.add( lblPriority,    0, 2);\n        gp.add( cbPriority,     1, 2);\n        gp.add( lblSeverity,    2, 2);\n        gp.add( cbSeverity,     3, 2);\n        gp.add( lblCategory,    4, 2);\n        gp.add( cbCategory,     5, 2);\n\n        gp.add( lblProblem,     0, 3); gp.add( tfProblem,     1, 3);\n        gp.add( lblDescription, 0, 4); gp.add( taDescription, 1, 4);\n\n        GridPane.setColumnSpan( lblTitle, 5 );\n        GridPane.setColumnSpan( tfEmail, 3 );\n        GridPane.setColumnSpan( tfProblem, 5 );\n        GridPane.setColumnSpan( taDescription, 5 );\n\n        Separator sep = new Separator(); // hr\n\n        ButtonBar buttonBar = new ButtonBar();\n        buttonBar.setPadding( new Insets(10) );\n\n        Button saveButton = new Button(\"Save\");\n        Button cancelButton = new Button(\"Cancel\");\n\n        buttonBar.setButtonData(saveButton, ButtonBar.ButtonData.OK_DONE);\n        buttonBar.setButtonData(cancelButton, ButtonBar.ButtonData.CANCEL_CLOSE);\n\n        buttonBar.getButtons().addAll(saveButton, cancelButton);\n\n        vbox.getChildren().addAll( gp, sep, buttonBar );\n\n        Scene scene = new Scene(vbox);\n\n        primaryStage.setTitle(\"Grid Pane App\");\n        primaryStage.setScene(scene);\n        primaryStage.setWidth( 736 );\n        primaryStage.setHeight( 414  );\n        primaryStage.show();\n\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#restricciones-de-fila-y-columna-de-gridpane","title":"Restricciones de fila y columna de GridPane","text":"<p>Los art\u00edculos anteriores sobre <code>GridPane</code>c\u00f3mo crear un dise\u00f1o de dos columnas con nombres de campo en el lado izquierdo y valores de campo en el lado derecho. Ese ejemplo se ampli\u00f3 para agregar m\u00e1s controles a una fila determinada y para usar espacios en el contenido del controlador de expansi\u00f3n. Este art\u00edculo presenta un par de clases JavaFX <code>ColumnConstraints</code>y <code>RowConstraints</code>. Estas clases dan especificaciones adicionales a una fila o columna. En este ejemplo, una fila que contiene un <code>TextArea</code>tendr\u00e1 todo el espacio adicional cuando se cambie el tama\u00f1o de la ventana. Las dos columnas se establecer\u00e1n en anchos iguales.</p> <p>Esta captura de pantalla muestra un ejemplo modificado de art\u00edculos anteriores. El programa de demostraci\u00f3n de este art\u00edculo tiene una sensaci\u00f3n rotativa en la que los nombres de los campos se emparejan con los valores de campo verticalmente (sobre los valores) en lugar de horizontalmente. La expansi\u00f3n de filas y columnas se usa para alinear elementos que son m\u00e1s grandes que una sola celda.</p> <p>Los rect\u00e1ngulos rojos y el texto no forman parte de la interfaz de usuario. Est\u00e1n identificando secciones de la pantalla que se abordar\u00e1n m\u00e1s adelante con ColumnConstraints y RowConstaints.</p> <p>Este c\u00f3digo es la creaci\u00f3n de la <code>Scene</code>ra\u00edz y los <code>GridPane</code>objetos.</p> Java<pre><code>VBox vbox = new VBox();\n\nGridPane gp = new GridPane();\ngp.setPadding( new Insets(10) );\ngp.setHgap( 4 );\ngp.setVgap( 10 );\n\nVBox.setVgrow(gp, Priority.ALWAYS );\n</code></pre> <p>Este c\u00f3digo crea los objetos de control de la interfaz de usuario que se usan en el art\u00edculo. Tenga en cuenta que Priority ahora se implementa como un <code>VBox</code>RadioButtons contenedor.</p> Java<pre><code>Label lblTitle = new Label(\"Support Ticket\");\n\nLabel lblEmail = new Label(\"Email\");\nTextField tfEmail = new TextField();\n\nLabel lblContract = new Label(\"Contract\");\nTextField tfContract = new TextField();\n\nLabel lblPriority = new Label(\"Priority\");\nRadioButton rbMedium = new RadioButton(\"Medium\");\nRadioButton rbHigh = new RadioButton(\"High\");\nRadioButton rbLow = new RadioButton(\"Low\");\nVBox priorityVBox = new VBox();\npriorityVBox.setSpacing( 2 );\nGridPane.setVgrow(priorityVBox, Priority.SOMETIMES);\npriorityVBox.getChildren().addAll( lblPriority, rbMedium, rbHigh, rbLow );\n\nLabel lblSeverity = new Label(\"Severity\");\nObservableList&lt;String&gt; severities =\n    FXCollections.observableArrayList(\"Blocker\", \"Workaround\", \"N/A\");\nComboBox&lt;String&gt; cbSeverity = new ComboBox&lt;&gt;(severities);\n\nLabel lblCategory = new Label(\"Category\");\nObservableList&lt;String&gt; categories =\n    FXCollections.observableArrayList(\"Bug\", \"Feature\");\nComboBox&lt;String&gt; cbCategory = new ComboBox&lt;&gt;(categories);\n\nLabel lblProblem = new Label(\"Problem\");\nTextField tfProblem = new TextField();\n\nLabel lblDescription = new Label(\"Description\");\nTextArea taDescription = new TextArea();\n</code></pre> <p>Los pares de control de etiqueta y valor de correo electr\u00f3nico, contrato,  problema y descripci\u00f3n se colocan en una sola columna. Deben tomar el ancho completo del de <code>GridPane</code>modo que cada uno tenga su columnSpan establecido en 2.</p> Java<pre><code>GridPane.setColumnSpan( tfEmail, 2 );\nGridPane.setColumnSpan( tfContract, 2 );\nGridPane.setColumnSpan( tfProblem, 2 );\nGridPane.setColumnSpan( taDescription, 2 );\n</code></pre> <p>Los nuevos botones de opci\u00f3n de prioridad se combinan horizontalmente con cuatro controles de gravedad y categor\u00eda. Esta configuraci\u00f3n de rowSpan le indica a JavaFX que coloque el VBox que contiene el RadioButton en una celda combinada que tiene cuatro filas de altura.</p> Java<pre><code>GridPane.setRowSpan( priorityVBox, 4 );\n</code></pre>"},{"location":"ud10/ud1004/#restricciones-de-fila","title":"Restricciones de fila","text":"<p>En este punto, el c\u00f3digo refleja la captura de pantalla de la interfaz de usuario que se presenta en Ejemplo de aplicaci\u00f3n que usa filas y columnas. Para reasignar el espacio adicional en la base del formulario, use un objeto RowConstraints para establecer Priority.ALWAYS en la fila del <code>TextArea</code>. Esto dar\u00e1 como resultado el <code>TextArea</code>crecimiento para llenar el espacio disponible con algo utilizable. </p> Figura 36. TextArea crece para llenar espacio adicional <p>Este c\u00f3digo es un <code>RowConstraints</code>objeto para el <code>GridPane</code>para el <code>TextArea</code>. Antes del colocador, <code>RowConstraints</code>se asignan objetos para todas las dem\u00e1s filas. El m\u00e9todo set de <code>getRowConstraints()</code>arrojar\u00e1 una excepci\u00f3n de \u00edndice cuando especifique la fila 12 sin asignar primero un objeto.</p> Java<pre><code>RowConstraints taDescriptionRowConstraints = new RowConstraints();\ntaDescriptionRowConstraints.setVgrow(Priority.ALWAYS);\n\nfor( int i=0; i&lt;13; i++ ) {\n    gp.getRowConstraints().add( new RowConstraints() );\n}\n\ngp.getRowConstraints().set( 12, taDescriptionRowConstraints );\n</code></pre> <p>Como sintaxis alternativa, hay un m\u00e9todo setConstraints() disponible en <code>GridPane</code>. Esto pasar\u00e1 varios valores y obviar\u00e1 la necesidad de la llamada dedicada columnSpan set para <code>TextArea</code>. El <code>RowConstraints</code>c\u00f3digo del listado anterior no aparecer\u00e1 en el programa terminado.</p> Java<pre><code>gp.setConstraints(taDescription,\n                  0, 12,\n                  2, 1,\n                  HPos.LEFT, VPos.TOP,\n                  Priority.SOMETIMES, Priority.ALWAYS);\n</code></pre> <p>Este c\u00f3digo identifica el <code>Node</code>at (0,12) que es el <code>TextArea</code>. El <code>TextArea</code>abarcar\u00e1 2 columnas pero solo 1 fila. Los HPos y Vpos est\u00e1n configurados en la PARTE SUPERIOR IZQUIERDA. Finalmente, el <code>Priority</code>de hgrow es A VECES y el de vgrow es SIEMPRE. Dado que <code>TextArea</code>es la \u00fanica fila con \"SIEMPRE\", obtendr\u00e1 el espacio adicional. Si hubiera otras configuraciones SIEMPRE, el espacio se compartir\u00eda entre varias filas.</p>"},{"location":"ud10/ud1004/#restricciones-de-columna","title":"Restricciones de columna","text":"<p>Para asignar correctamente el espacio que rodea los controles de Severidad y Categor\u00eda, se especificar\u00e1n ColumnConstraints. El comportamiento predeterminado asigna menos espacio a la primera columna debido a los botones de opci\u00f3n de prioridad m\u00e1s peque\u00f1os. La siguiente estructura al\u00e1mbrica muestra el dise\u00f1o deseado que tiene columnas iguales separadas por un margen de 4 p\u00edxeles (Hgap).           </p> Figura 37. Wireframe de la aplicaci\u00f3n de demostraci\u00f3n <p>Para que los anchos de las columnas sean iguales, defina dos <code>ColumnConstraint</code>objetos y use un especificador de porcentaje.</p> Java<pre><code>ColumnConstraints col1 = new ColumnConstraints();\ncol1.setPercentWidth( 50 );\nColumnConstraints col2 = new ColumnConstraints();\ncol2.setPercentWidth( 50 );\ngp.getColumnConstraints().addAll( col1, col2 );\n</code></pre> <p>Esta es una captura de pantalla del ejemplo terminado:</p> <p><code>GridPane</code>es un control importante en el desarrollo de aplicaciones empresariales JavaFX. Cuando trabaje en un requisito que involucre pares de nombre/valor y una sola vista de registro, use <code>GridPane</code>. Si bien <code>GridPane</code>es m\u00e1s f\u00e1cil de usar que el <code>GridBagLayout</code>de Swing, todav\u00eda encuentro que la API es un poco inconveniente (asignaci\u00f3n de \u00edndices propios, restricciones disociadas). Afortunadamente, existe Scene Builder que simplifica enormemente la construcci\u00f3n de este formulario.</p>"},{"location":"ud10/ud1004/#codigo-completado_3","title":"C\u00f3digo completado","text":"Java<pre><code>public class ConstraintsGridPaneApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        VBox vbox = new VBox();\n\n        GridPane gp = new GridPane();\n        gp.setPadding( new Insets(10) );\n        gp.setHgap( 4 );\n        gp.setVgap( 10 );\n\n        VBox.setVgrow(gp, Priority.ALWAYS );\n\n        Label lblTitle = new Label(\"Support Ticket\");\n\n        Label lblEmail = new Label(\"Email\");\n        TextField tfEmail = new TextField();\n\n        Label lblContract = new Label(\"Contract\");\n        TextField tfContract = new TextField();\n\n        Label lblPriority = new Label(\"Priority\");\n        RadioButton rbMedium = new RadioButton(\"Medium\");\n        RadioButton rbHigh = new RadioButton(\"High\");\n        RadioButton rbLow = new RadioButton(\"Low\");\n        VBox priorityVBox = new VBox();\n        priorityVBox.setSpacing( 2 );\n        GridPane.setVgrow(priorityVBox, Priority.SOMETIMES);\n        priorityVBox.getChildren().addAll( lblPriority, rbMedium, rbHigh, rbLow );\n\n        Label lblSeverity = new Label(\"Severity\");\n        ObservableList&lt;String&gt; severities = FXCollections.observableArrayList(\"Blocker\", \"Workaround\", \"N/A\");\n        ComboBox&lt;String&gt; cbSeverity = new ComboBox&lt;&gt;(severities);\n\n        Label lblCategory = new Label(\"Category\");\n        ObservableList&lt;String&gt; categories = FXCollections.observableArrayList(\"Bug\", \"Feature\");\n        ComboBox&lt;String&gt; cbCategory = new ComboBox&lt;&gt;(categories);\n\n        Label lblProblem = new Label(\"Problem\");\n        TextField tfProblem = new TextField();\n\n        Label lblDescription = new Label(\"Description\");\n        TextArea taDescription = new TextArea();\n\n        gp.add( lblTitle,       0, 0);\n\n        gp.add( lblEmail,       0, 1);\n        gp.add(tfEmail,         0, 2);\n\n        gp.add( lblContract,    0, 3 );\n        gp.add( tfContract,     0, 4 );\n\n        gp.add( priorityVBox,   0, 5);\n\n        gp.add( lblSeverity,    1, 5);\n        gp.add( cbSeverity,     1, 6);\n        gp.add( lblCategory,    1, 7);\n        gp.add( cbCategory,     1, 8);\n\n        gp.add( lblProblem,     0, 9);\n        gp.add( tfProblem,      0, 10);\n\n        gp.add( lblDescription, 0, 11);\n        gp.add( taDescription,  0, 12);\n\n        GridPane.setColumnSpan( tfEmail, 2 );\n        GridPane.setColumnSpan( tfContract, 2 );\n        GridPane.setColumnSpan( tfProblem, 2 );\n\n        GridPane.setRowSpan( priorityVBox, 4 );\n\n        gp.setConstraints(taDescription,\n                          0, 12,\n                          2, 1,\n                          HPos.LEFT, VPos.TOP,\n                          Priority.SOMETIMES, Priority.ALWAYS);\n\n        ColumnConstraints col1 = new ColumnConstraints();\n        col1.setPercentWidth( 50 );\n        ColumnConstraints col2 = new ColumnConstraints();\n        col2.setPercentWidth( 50 );\n        gp.getColumnConstraints().addAll( col1, col2 );\n\n        Separator sep = new Separator(); // hr\n\n        ButtonBar buttonBar = new ButtonBar();\n        buttonBar.setPadding( new Insets(10) );\n\n        Button saveButton = new Button(\"Save\");\n        Button cancelButton = new Button(\"Cancel\");\n\n        buttonBar.setButtonData(saveButton, ButtonBar.ButtonData.OK_DONE);\n        buttonBar.setButtonData(cancelButton, ButtonBar.ButtonData.CANCEL_CLOSE);\n\n        buttonBar.getButtons().addAll(saveButton, cancelButton);\n\n        vbox.getChildren().addAll( gp, sep, buttonBar );\n\n        Scene scene = new Scene(vbox);\n\n        primaryStage.setTitle(\"Grid Pane App\");\n        primaryStage.setScene(scene);\n        primaryStage.setWidth( 414 );\n        primaryStage.setHeight( 736  );\n        primaryStage.show();\n\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#anchorpane","title":"AnchorPane","text":"<p><code>AnchorPane</code>es un control contenedor que define su dise\u00f1o en t\u00e9rminos de bordes. Cuando se coloca en un contenedor, <code>AnchorPane</code>se estira para llenar el espacio disponible. Los hijos de <code>AnchorPane</code>expresan sus posiciones y tama\u00f1os como distancias desde los bordes: Arriba, Izquierda, Abajo, Derecha. Si se colocan una o dos configuraciones de anclaje en un <code>AnchorPane</code>ni\u00f1o, el ni\u00f1o se fijar\u00e1 a esa esquina de la ventana. Si se utilizan m\u00e1s de dos configuraciones de anclaje, el ni\u00f1o se estirar\u00e1  para llenar el espacio horizontal y vertical disponible.</p> <p>Esta maqueta muestra un <code>TextArea</code>rodeado por un conjunto de controles: un <code>Hyperlink</code>y dos indicadores de estado. Dado <code>TextArea</code>que contendr\u00e1 todo el contenido, deber\u00eda ocupar la mayor parte del espacio inicialmente y deber\u00eda adquirir cualquier espacio adicional de un cambio de tama\u00f1o. En la periferia, hay una <code>Hyperlink</code>en la parte superior derecha, una conexi\u00f3n <code>Label</code>y <code>Circle</code>en la parte inferior derecha y un estado <code>Label</code>en la parte inferior izquierda.           </p> Figura 39. AnchorPane con TextArea"},{"location":"ud10/ud1004/#anclas","title":"Anclas","text":"<p>Para comenzar el dise\u00f1o, cree un <code>AnchorPane</code> objeto y agr\u00e9guelo al archivo <code>Scene</code>.</p> Java<pre><code>AnchorPane ap = new AnchorPane();\nScene scene = new Scene(ap);\n</code></pre> <p>Los anclajes se establecen mediante m\u00e9todos est\u00e1ticos de la clase AnchorPane. Los m\u00e9todos, uno por borde, aceptan el <code>Node</code>y un desplazamiento. Para el <code>Hyperlink</code>, se establecer\u00e1 un ancla en el borde superior y otra en el borde derecho. Se establece un desplazamiento de 10,0 para cada borde para que el enlace no se comprima contra el lado.</p> Java<pre><code>Hyperlink signoutLink = new Hyperlink(\"Sign Out\");\n\nap.getChildren().add( signoutLink );\n\nAnchorPane.setTopAnchor( signoutLink, 10.0d );\nAnchorPane.setRightAnchor( signoutLink, 10.0d );\n</code></pre> <p>Cuando se cambia el tama\u00f1o de la pantalla, AnchorPane cambiar\u00e1 de tama\u00f1o y signoutLink mantendr\u00e1 su posici\u00f3n superior derecha. Debido a que no se especifican los anclajes izquierdo ni inferior, signoutLink no se estirar\u00e1.</p> <p>A continuaci\u00f3n, se a\u00f1aden la conexi\u00f3n <code>Label</code>y <code>Circle</code>. Estos controles est\u00e1n envueltos en un archivo <code>HBox</code>.</p> Java<pre><code>Circle circle = new Circle();\ncircle.setFill(Color.GREEN );\ncircle.setRadius(10);\n\nLabel connLabel = new Label(\"Connection\");\n\nHBox connHBox = new HBox();\nconnHBox.setSpacing( 4.0d );\nconnHBox.setAlignment(Pos.BOTTOM_RIGHT);\nconnHBox.getChildren().addAll( connLabel, circle );\n\nAnchorPane.setBottomAnchor( connHBox, 10.0d );\nAnchorPane.setRightAnchor( connHBox, 10.0d );\n\nap.getChildren().add( connHBox );\n</code></pre> <p>Al igual que con signoutLink, connHBox se fija en un lugar de la pantalla. connHBox se establece en 10 p\u00edxeles desde el borde inferior y 10 p\u00edxeles desde el borde derecho.</p> <p>Se agrega el estado inferior izquierdo <code>Label</code>. Los anclajes izquierdo e inferior est\u00e1n establecidos.</p> Java<pre><code>Label statusLabel = new Label(\"Program status\");\nap.getChildren().add( statusLabel );\n\nAnchorPane.setBottomAnchor( statusLabel, 10.0d );\nAnchorPane.setLeftAnchor( statusLabel, 10.0d );\n</code></pre> <p>Esta es una captura de pantalla de la aplicaci\u00f3n terminada. Las etiquetas de estado y control se encuentran en la parte inferior de la pantalla, fijadas a los bordes izquierdo y derecho respectivamente. est\u00e1 anclado en la <code>Hyperlink</code>parte superior derecha.      </p>"},{"location":"ud10/ud1004/#cambiar-el-tamano","title":"Cambiar el tama\u00f1o","text":"<p>Los controles en la periferia pueden variar en tama\u00f1o. Por ejemplo, un mensaje de estado o un mensaje de conexi\u00f3n puede ser m\u00e1s largo. Sin embargo, la longitud adicional se puede acomodar en este dise\u00f1o extendiendo el estado de la parte inferior izquierda <code>Label</code>hacia la derecha y extendiendo el estado de conexi\u00f3n de la parte inferior derecha <code>Label</code>hacia la izquierda. Cambiar el tama\u00f1o con este dise\u00f1o mover\u00e1 estos controles en t\u00e9rminos absolutos, pero se adherir\u00e1n a sus respectivos bordes m\u00e1s el desplazamiento.</p> <p>Ese no es el caso con el <code>TextArea</code>. Debido a que <code>TextArea</code>puede contener una gran cantidad de contenido, debe recibir cualquier espacio adicional que el usuario le d\u00e9 a la ventana. Este control estar\u00e1 anclado a las cuatro esquinas del <code>AnchorPane</code>. Esto har\u00e1 <code>TextArea</code>que cambie el tama\u00f1o cuando la ventana cambie de tama\u00f1o. se fija en la <code>TextArea</code>parte superior izquierda y, a medida que el usuario arrastra los controladores de la ventana hacia la parte inferior derecha, la esquina inferior derecha de los <code>TextArea</code>movimientos tambi\u00e9n.</p> <p>Esta imagen muestra el resultado de dos operaciones de cambio de tama\u00f1o. La captura de pantalla superior es un cambio de tama\u00f1o vertical al arrastrar el borde inferior de la ventana hacia abajo. La captura de pantalla inferior es un cambio de tama\u00f1o horizontal al arrastrar el borde derecho de la ventana hacia la derecha.      </p> Figura 41. \"Aplicaci\u00f3n AnchorPane redimensionada <p>Los cuadros resaltados muestran que los controles que bordean <code>TextArea</code>conservan sus posiciones relativas a los bordes. El <code>TextArea</code>mismo se redimensiona en funci\u00f3n del redimensionamiento de la ventana. Las compensaciones superior e inferior de la <code>TextArea</code>cuenta para los otros controles para que no se oculten.</p> Java<pre><code>TextArea ta = new TextArea();\n\nAnchorPane.setTopAnchor( ta, 40.0d );\nAnchorPane.setBottomAnchor( ta, 40.0d );\nAnchorPane.setRightAnchor( ta, 10.0d );\nAnchorPane.setLeftAnchor( ta, 10.0d );\n\nap.getChildren().add( ta );\n</code></pre> <p><code>AnchorPane</code>es una buena opci\u00f3n cuando tiene una mezcla de ni\u00f1os de tama\u00f1o variable y de posici\u00f3n fija. Se prefieren otros controles como <code>VBox</code>y <code>HBox</code>con una <code>Priority</code>configuraci\u00f3n si solo hay un ni\u00f1o que necesita cambiar el tama\u00f1o. Utilice estos controles en lugar de <code>AnchorPane</code>con un solo ni\u00f1o que tenga las cuatro anclas configuradas. Recuerda que para establecer un ancla en un ni\u00f1o, usas un m\u00e9todo est\u00e1tico de la clase contenedora como AnchorPane.setTopAnchor().</p>"},{"location":"ud10/ud1004/#codigo-completado_4","title":"C\u00f3digo completado","text":"<p>El siguiente es el c\u00f3digo completo para el <code>AnchorPane</code>ejemplo.</p> Java<pre><code>public class AnchorPaneApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        AnchorPane ap = new AnchorPane();\n\n        // upper-right sign out control\n        Hyperlink signoutLink = new Hyperlink(\"Sign Out\");\n\n        ap.getChildren().add( signoutLink );\n\n        AnchorPane.setTopAnchor( signoutLink, 10.0d );\n        AnchorPane.setRightAnchor( signoutLink, 10.0d );\n\n        // lower-left status label\n        Label statusLabel = new Label(\"Program status\");\n        ap.getChildren().add( statusLabel );\n\n        AnchorPane.setBottomAnchor( statusLabel, 10.0d );\n        AnchorPane.setLeftAnchor( statusLabel, 10.0d );\n\n        // lower-right connection status control\n        Circle circle = new Circle();\n        circle.setFill(Color.GREEN );\n        circle.setRadius(10);\n\n        Label connLabel = new Label(\"Connection\");\n\n        HBox connHBox = new HBox();\n        connHBox.setSpacing( 4.0d );\n        connHBox.setAlignment(Pos.BOTTOM_RIGHT);\n        connHBox.getChildren().addAll( connLabel, circle );\n\n        AnchorPane.setBottomAnchor( connHBox, 10.0d );\n        AnchorPane.setRightAnchor( connHBox, 10.0d );\n\n        ap.getChildren().add( connHBox );\n\n        // top-left content; takes up extra space\n        TextArea ta = new TextArea();\n        ap.getChildren().add( ta );\n\n        AnchorPane.setTopAnchor( ta, 40.0d );\n        AnchorPane.setBottomAnchor( ta, 40.0d );\n        AnchorPane.setRightAnchor( ta, 10.0d );\n        AnchorPane.setLeftAnchor( ta, 10.0d );\n\n        Scene scene = new Scene(ap);\n\n        primaryStage.setTitle(\"AnchorPaneApp\");\n        primaryStage.setScene( scene );\n        primaryStage.setWidth(568);\n        primaryStage.setHeight(320);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#tilepane-panel-de-mosaico","title":"TilePane (panel de mosaico)","text":"<p>A <code>TilePane</code>se utiliza para el dise\u00f1o de cuadr\u00edcula de celdas de igual tama\u00f1o. Las propiedades prefColumns y prefRows definen el n\u00famero de filas y columnas en la cuadr\u00edcula. Para agregar nodos a <code>TilePane</code>, acceda a la propiedad child y llame al m\u00e9todo add() o addAll(). Esto es m\u00e1s f\u00e1cil de usar que <code>GridPane</code>lo que requiere una configuraci\u00f3n expl\u00edcita de la posici\u00f3n de fila/columna de los nodos.</p> <p>Esta captura de pantalla muestra una <code>TilePane</code>cuadr\u00edcula definida como de tres por tres. El <code>TilePane</code>contiene nueve <code>Rectangle</code>objetos.</p> <p>A continuaci\u00f3n se muestra el c\u00f3digo completo para la cuadr\u00edcula de tres por tres. La propiedad children de <code>TilePane</code>proporciona el m\u00e9todo addAll() al que <code>Rectangle</code>se agregan los objetos. La propiedad tileAlignment coloca cada uno de los <code>Rectangle</code>objetos en el centro de su mosaico correspondiente.</p> Text Only<pre><code>ThreeByThreeApp.java\n</code></pre> Java<pre><code>public class ThreeByThreeApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        TilePane tilePane = new TilePane();\n        tilePane.setPrefColumns(3);\n        tilePane.setPrefRows(3);\n        tilePane.setTileAlignment( Pos.CENTER );\n\n        tilePane.getChildren().addAll(\n            new Rectangle(50, 50, Color.RED),\n            new Rectangle( 50, 50, Color.GREEN ),\n            new Rectangle( 50, 50, Color.BLUE ),\n            new Rectangle( 50, 50, Color.YELLOW ),\n            new Rectangle( 50, 50, Color.CYAN ),\n            new Rectangle( 50, 50, Color.PURPLE ),\n            new Rectangle( 50, 50, Color.BROWN ),\n            new Rectangle( 50, 50, Color.PINK ),\n            new Rectangle( 50, 50, Color.ORANGE )\n        );\n\n        Scene scene = new Scene(tilePane);\n        scene.setFill(Color.LIGHTGRAY);\n\n        primaryStage.setTitle(\"3x3\");\n        primaryStage.setScene( scene );\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {launch(args);}\n}\n</code></pre> <p>Dado que todo el <code>Node</code>contenido de los <code>TilePane</code>Rect\u00e1ngulos era del mismo tama\u00f1o, el dise\u00f1o est\u00e1 empaquetado y la configuraci\u00f3n de TileAlignment no se nota. Cuando las propiedades tilePrefHeight y tilePrefWidth se configuran para que sean m\u00e1s grandes que el contenido, digamos mosaicos de 100x100 que contienen rect\u00e1ngulos de 50x50, tileAlignment determinar\u00e1 c\u00f3mo se usar\u00e1  el espacio adicional.</p> <p>Consulte la siguiente clase ThreeByThreeApp modificada que establece el tilePrefHeight y el tilePrefWidth.</p> Java<pre><code>tilePane.setPrefTileHeight(100);\ntilePane.setPrefTileWidth(100);\n</code></pre> <p>En las capturas de pantalla anteriores, se proporcionaron nueve objetos Rectangle a la cuadr\u00edcula de tres por tres. Si el contenido no coincide con la <code>TilePane</code>definici\u00f3n, esas celdas colapsar\u00e1n. Esta modificaci\u00f3n agrega solo cinco Rect\u00e1ngulos en lugar de nueve. La primera fila contiene contenido para los tres mosaicos. La segunda fila tiene contenido solo para los dos primeros archivos. Falta la tercera fila por completo.</p> <p>Hay una propiedad de \"orientaci\u00f3n\" que indica <code>TilePane</code>agregar elementos fila por fila (HORIZONTAL, el valor predeterminado) o columna por columna (VERTICAL). Si se usa VERTICAL, la primera columna tendr\u00e1 tres elementos, la segunda columna tendr\u00e1 solo los dos superiores y faltar\u00e1 la tercera columna. Esta captura de pantalla muestra los cinco rect\u00e1ngulos que se agregan a la cuadr\u00edcula de tres por tres (nueve mosaicos) con orientaci\u00f3n VERTICAL.</p>"},{"location":"ud10/ud1004/#algoritmos","title":"Algoritmos","text":"<p>Es posible crear dise\u00f1os de cuadr\u00edcula JavaFX con otros contenedores como <code>GridPane</code>, <code>VBox</code>y <code>HBox</code>. TilePane es una conveniencia que define el dise\u00f1o de la cuadr\u00edcula de antemano y hace que agregar elementos a la cuadr\u00edcula sea una simple llamada add() o addAll(). A diferencia de un dise\u00f1o de cuadr\u00edcula creado con una combinaci\u00f3n de anidados <code>VBox</code>y <code>HBox</code>contenedores, los <code>TilePane</code>contenidos son elementos secundarios directos. Esto facilita el bucle sobre los ni\u00f1os durante el procesamiento de eventos, lo que ayuda a implementar ciertos algoritmos.</p> <p>Esta aplicaci\u00f3n de ejemplo coloca cuatro c\u00edrculos en un archivo <code>TilePane</code>. Se adjunta un controlador de eventos <code>TilePane</code>que busca una selecci\u00f3n de uno de los c\u00edrculos. Si se selecciona un C\u00edrculo, se aten\u00faa a trav\u00e9s de la configuraci\u00f3n de opacidad. Si se vuelve a seleccionar el C\u00edrculo, se restaura su color original. Esta captura de pantalla muestra la aplicaci\u00f3n con el azul <code>Circle</code>que aparece de color p\u00farpura porque se ha seleccionado.</p> <p>El programa comienza agregando los elementos y configurando una propiedad personalizada \"seleccionada\" utilizando la API de flujo de Java 8.</p> Text Only<pre><code>TileApp.java\n</code></pre> Java<pre><code>TilePane tilePane = new TilePane();\ntilePane.setPrefColumns(2);\ntilePane.setPrefRows(2);\ntilePane.setTileAlignment( Pos.CENTER );\n\nCircle redCircle = new Circle(50, Color.RED);\nCircle greenCircle = new Circle( 50, Color.GREEN );\nCircle blueCircle = new Circle( 50, Color.BLUE );\nCircle yellowCircle = new Circle( 50, Color.YELLOW );\n\nList&lt;Circle&gt; circles = new ArrayList&lt;&gt;();\ncircles.add( redCircle );\ncircles.add( greenCircle );\ncircles.add( blueCircle );\ncircles.add( yellowCircle );\n\ncircles\n    .stream()\n    .forEach( (c) -&gt; c.getProperties().put( \"selected\", Boolean.FALSE ));\n\ntilePane.getChildren().addAll(\n    circles\n);\n</code></pre> <p>A continuaci\u00f3n, el controlador de eventos se adjunta al evento del mouse. Esto tambi\u00e9n est\u00e1 usando Java 8 Streams. El m\u00e9todo filter() determina si <code>Circle</code>se selecciona o no usando el m\u00e9todo Node.contains() en las coordenadas convertidas. Si esa expresi\u00f3n pasa, se usa findFirst() para recuperar la primera (y en este caso, la \u00fanica) coincidencia. El bloque de c\u00f3digo en ifPresent() establece el indicador \"seleccionado\" para realizar un seguimiento del <code>Circle</code>estado y ajusta la opacidad.</p> Text Only<pre><code>TileApp.java\n</code></pre> Java<pre><code>tilePane.setOnMouseClicked(\n\n    (evt) -&gt; tilePane\n    .getChildren()\n    .stream()\n    .filter( c -&gt;\n            c.contains(\n                c.sceneToLocal(evt.getSceneX(), evt.getSceneY(), true)\n            )\n           )\n    .findFirst()\n    .ifPresent(\n        (c) -&gt; {\n            Boolean selected = (Boolean) c.getProperties().get(\"selected\");\n            if( selected == null || selected == Boolean.FALSE ) {\n                c.setOpacity(0.3d);\n                c.getProperties().put(\"selected\", Boolean.TRUE);\n            } else {\n                c.setOpacity( 1.0d );\n                c.getProperties().put(\"selected\", Boolean.FALSE);\n            }\n        }\n    )\n);\n</code></pre>"},{"location":"ud10/ud1004/#otro-controlador","title":"Otro controlador","text":"<p>Dado que el programa guarda los c\u00edrculos en colecciones de Java <code>List</code>, el <code>TilePane</code>contenido se puede reemplazar con llamadas allAll() repetidas. Este controlador de eventos se activa cuando el usuario presiona una \"S\" en el archivo <code>Scene</code>. El contenido del respaldo <code>List</code>se mezcla y se vuelve a agregar al archivo <code>TilePane</code>.</p> Text Only<pre><code>TileApp.java\n</code></pre> Java<pre><code>scene.setOnKeyPressed(\n    (evt) -&gt; {\n        if( evt.getCode().equals(KeyCode.S) ) {\n            Collections.shuffle( circles );\n            tilePane.getChildren().clear();\n            tilePane.getChildren().addAll( circles );\n        }\n    }\n);\n</code></pre> <p>Si bien es factible, una cuadr\u00edcula construida con VBoxes y HBoxes ser\u00eda un poco m\u00e1s dif\u00edcil debido a las estructuras anidadas. Adem\u00e1s, <code>TilePane</code>no estirar\u00e1 el contenido para llenar espacio adicional, lo que lo hace adecuado para controles compuestos que deben empaquetarse juntos por razones ergon\u00f3micas.</p> <p><code>TilePane</code>crea un dise\u00f1o basado en cuadr\u00edcula de celdas de igual tama\u00f1o. Los contenidos se agregan en <code>TilePane</code>funci\u00f3n de la configuraci\u00f3n de prefRows, prefColumns y orientaci\u00f3n. Si la cuadr\u00edcula contiene m\u00e1s mosaicos que nodos agregados, habr\u00e1 espacios en el dise\u00f1o y las filas y columnas pueden contraerse si no se proporcion\u00f3 contenido alguno. Esta publicaci\u00f3n mostr\u00f3 un par de algoritmos que se implementaron f\u00e1cilmente debido a la interfaz simple de TilePane.</p>"},{"location":"ud10/ud1004/#codigo-completo_1","title":"C\u00f3digo completo","text":"<p>A continuaci\u00f3n se muestra el c\u00f3digo completo de TileApp.</p> Text Only<pre><code>TileApp.java (completa)\n</code></pre> Java<pre><code>public class TileApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        TilePane tilePane = new TilePane();\n        tilePane.setPrefColumns(2);\n        tilePane.setPrefRows(2);\n        tilePane.setTileAlignment( Pos.CENTER );\n\n        Circle redCircle = new Circle(50, Color.RED);\n        Circle greenCircle = new Circle( 50, Color.GREEN );\n        Circle blueCircle = new Circle( 50, Color.BLUE );\n        Circle yellowCircle = new Circle( 50, Color.YELLOW );\n\n        List&lt;Circle&gt; circles = new ArrayList&lt;&gt;();\n        circles.add( redCircle );\n        circles.add( greenCircle );\n        circles.add( blueCircle );\n        circles.add( yellowCircle );\n\n        circles\n                .stream()\n                .forEach( (c) -&gt; c.getProperties().put( \"selected\", Boolean.FALSE ));\n\n        tilePane.getChildren().addAll(\n               circles\n        );\n\n        tilePane.setOnMouseClicked(\n\n            (evt) -&gt; tilePane\n                        .getChildren()\n                        .stream()\n                        .filter( c -&gt;\n                            c.contains(\n                              c.sceneToLocal(evt.getSceneX(), evt.getSceneY(), true)\n                            )\n                         )\n                        .findFirst()\n                        .ifPresent(\n                                (c) -&gt; {\n                                    Boolean selected = (Boolean) c.getProperties().get(\"selected\");\n                                    if( selected == null || selected == Boolean.FALSE ) {\n                                        c.setOpacity(0.3d);\n                                        c.getProperties().put(\"selected\", Boolean.TRUE);\n                                    } else {\n                                        c.setOpacity( 1.0d );\n                                        c.getProperties().put(\"selected\", Boolean.FALSE);\n                                    }\n                                }\n                        )\n        );\n\n        Scene scene = new Scene(tilePane);\n\n        scene.setOnKeyPressed(\n                (evt) -&gt; {\n                    if( evt.getCode().equals(KeyCode.S) ) {\n                        Collections.shuffle( circles );\n                        tilePane.getChildren().clear();\n                        tilePane.getChildren().addAll( circles );\n                    }\n                }\n        );\n\n        primaryStage.setTitle(\"TileApp\");\n        primaryStage.setScene( scene );\n        primaryStage.show();\n\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1004/#titledpane","title":"TitledPane","text":"<p>A <code>TitledPane</code>es un <code>Node</code>contenedor emparejado con a <code>Label</code>y un control opcional para mostrar y ocultar el contenido del contenedor. Dado que <code>TitledPane</code>est\u00e1 limitado a un solo <code>Node</code>, a menudo se combina con un contenedor que admite varios elementos secundarios como <code>VBox</code>. Funcionalmente, puede ocultar detalles no esenciales de un formulario o controles relacionados con grupos.</p> <p>Este ejemplo es una aplicaci\u00f3n de b\u00fasqueda web que acepta un conjunto de palabras clave en un archivo <code>TextField</code>. El usuario presiona el bot\u00f3n Buscar para ejecutar una b\u00fasqueda. El Avanzado <code>TitlePane</code>se expande para proporcionar argumentos de b\u00fasqueda adicionales.</p> <p>Esta captura de pantalla muestra el estado no expandido que es la vista para un usuario que ejecuta una b\u00fasqueda simple de palabras clave.     </p> Figura 47. TitledPane sin expandir <p>La siguiente captura de pantalla muestra la vista para un usuario que requiere par\u00e1metros de b\u00fasqueda avanzada. El Advanced TitledPane se expandi\u00f3 presionando la flecha en el <code>TitledPane</code>encabezado.</p> <p>Para crear un <code>TitledPane</code>, use el constructor para pasar un t\u00edtulo de cadena y un solo <code>Node</code>hijo. Tambi\u00e9n se puede usar el constructor predeterminado y el t\u00edtulo y <code>Node</code>establecer usando setters. Este c\u00f3digo usa el constructor parametrizado. A <code>VBox</code>es el \u00fanico hijo de <code>TitledPane</code>. Sin embargo, el <code>VBox</code>mismo contiene varios controles.</p> Text Only<pre><code>TitledPaneApp.java\n</code></pre> Java<pre><code>VBox advancedVBox = new VBox(\n    new Label(\"All Keywords\"),\n    new CheckBox(),\n    new Label(\"Domains\"),\n    new TextField(),\n    new Label(\"Time\"),\n    new ComboBox&lt;&gt;(\n        FXCollections.observableArrayList( \"Day\", \"Month\", \"Year\" )\n    )\n);\n\nTitledPane titledPane = new TitledPane(\n    \"Advanced\",\n    advancedVBox\n);\ntitledPane.setExpanded( false );\n</code></pre> <p>De forma predeterminada, <code>TitledPane</code>se expandir\u00e1. Esto no se ajusta al caso de uso de ocultar informaci\u00f3n no esencial, por lo que la propiedad expandida se establece despu\u00e9s de que se crea el objeto.</p>"},{"location":"ud10/ud1004/#plegable","title":"Plegable","text":"<p>Otra propiedad de <code>TitledPane</code>es plegable. De forma predeterminada, la <code>TitledPane</code>propiedad contra\u00edble se establece en verdadero. Sin embargo, se puede proporcionar una agrupaci\u00f3n r\u00e1pida a los controles que no son plegables. La siguiente captura de pantalla muestra este caso de uso.</p> Figura 49. Conjunto contra\u00edble en falso <p>Este c\u00f3digo establece la bandera contra\u00edble despu\u00e9s de llamar al constructor.</p> Java<pre><code>VBox securityVBox = new VBox(\n    new Label(\"Owner\"),\n    new TextField(),\n    new Label(\"Access Control\"),\n    new TextField()\n);\n\nTitledPane tp = new TitledPane(\"Security\", securityVBox);\ntp.setCollapsible( false );\n</code></pre>"},{"location":"ud10/ud1004/#codigo-completo_2","title":"C\u00f3digo completo","text":"<p>El siguiente es el c\u00f3digo completo para la primera demostraci\u00f3n que involucra los par\u00e1metros de b\u00fasqueda ocultos \"TitledPaneApp\".</p> Java<pre><code>public class TitledPaneApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        VBox vbox = new VBox(\n                new Label(\"Keywords\" ),\n                new TextField()\n        );\n\n        vbox.setPadding( new Insets(10) );\n        vbox.setSpacing( 10 );\n\n        VBox advancedVBox = new VBox(\n                new Label(\"All Keywords\"),\n                new CheckBox(),\n                new Label(\"Domains\"),\n                new TextField(),\n                new Label(\"Time\"),\n                new ComboBox&lt;&gt;(\n                    FXCollections.observableArrayList( \"Day\", \"Month\", \"Year\" )\n                )\n        );\n\n        TitledPane titledPane = new TitledPane(\n                \"Advanced\",\n                advancedVBox\n        );\n        titledPane.setExpanded( false );\n\n        vbox.getChildren().addAll(\n                titledPane,\n                new Button(\"Search\")\n        );\n\n        Scene scene = new Scene( vbox );\n\n        primaryStage.setTitle( \"TitledPaneApp\" );\n        primaryStage.setScene( scene );\n        primaryStage.setWidth( 568 );\n        primaryStage.setHeight( 320 );\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1005/","title":"10.5 Estructura de la aplicaci\u00f3n","text":""},{"location":"ud10/ud1005/#el-patron-mvvm","title":"El patr\u00f3n MVVM","text":"<p>Modelo-vista-controlador (MVC) es un patr\u00f3n de arquitectura de software, que separa los datos y principalmente lo que es la l\u00f3gica de negocio de una aplicaci\u00f3n de su representaci\u00f3n y el m\u00f3dulo encargado de  gestionar los eventos y las comunicaciones. Para ello MVC propone la  construcci\u00f3n de tres componentes distintos que son el modelo, la vista y el controlador, es decir, por un lado define componentes para la representaci\u00f3n de la  informaci\u00f3n, y por otro lado para la interacci\u00f3n del usuario. Este patr\u00f3n de arquitectura de software se basa en las ideas de reutilizaci\u00f3n de c\u00f3digo y la separaci\u00f3n de conceptos, caracter\u00edsticas que buscan facilitar la tarea de desarrollo de aplicaciones y su posterior mantenimiento.</p> <p>De manera gen\u00e9rica, los componentes de MVC se podr\u00edan definir como sigue:</p> <ul> <li> <p>El Modelo: Es la representaci\u00f3n de la informaci\u00f3n con la  cual el sistema opera, por lo tanto gestiona todos los accesos a dicha  informaci\u00f3n, tanto consultas como actualizaciones, implementando tambi\u00e9n los privilegios de acceso que se hayan descrito en las especificaciones de la aplicaci\u00f3n (l\u00f3gica de negocio). Env\u00eda a la 'vista' aquella parte de la informaci\u00f3n que en cada momento  se le solicita para que sea mostrada (t\u00edpicamente a un usuario). Las  peticiones de acceso o manipulaci\u00f3n de informaci\u00f3n llegan al 'modelo' a  trav\u00e9s del 'controlador'.</p> </li> <li> <p>El Controlador: Responde a eventos (usualmente acciones del  usuario) e invoca peticiones al 'modelo' cuando se hace alguna solicitud sobre la informaci\u00f3n (por ejemplo, editar un documento o un registro en una base de datos). Tambi\u00e9n puede enviar comandos a su 'vista' asociada si se solicita un cambio en la forma en que se presenta el 'modelo'  (por ejemplo, desplazamiento o scroll por un documento o por los  diferentes registros de una base de datos), por tanto se podr\u00eda decir  que el 'controlador' hace de intermediario entre la 'vista' y el  'modelo' (v\u00e9ase Middleware).</p> </li> <li> <p>La Vista: Presenta el 'modelo' (informaci\u00f3n y l\u00f3gica de negocio) en un formato adecuado para interactuar (usualmente la interfaz de usuario), por tanto requiere de dicho 'modelo' la informaci\u00f3n que debe representar como salida.</p> </li> </ul>"},{"location":"ud10/ud1005/#scene-builder","title":"Scene Builder","text":"<p>Scene Builder es una alternativa orientada al dise\u00f1o que puede ser m\u00e1s productiva. Adem\u00e1s es multiplataforma y est\u00e1 disponible para GNU/Linux, Windows y Mac. Scene Builder funciona con el ecosistema JavaFX: controles oficiales, proyectos comunitarios y ofertas de Gluon que incluyen Gluon Mobile, Gluon Desktop y Gluon CloudLink.</p> <p>El dise\u00f1o de la interfaz de usuario drag&amp;drop permite una iteraci\u00f3n r\u00e1pida. La separaci\u00f3n de los archivos de dise\u00f1o y l\u00f3gica permite que los miembros del equipo se concentren r\u00e1pida y f\u00e1cilmente en su capa espec\u00edfica de desarrollo de aplicaciones.</p> <p>Scene Builder es gratuito y de c\u00f3digo abierto, pero cuenta con el respaldo de Gluon. Est\u00e1n disponibles ofertas de soporte comercial, que incluyen formaci\u00f3n y servicios de consultor\u00eda personalizados.</p> <p>Descarga e informaci\u00f3n: https://gluonhq.com/products/scene-builder/</p>"},{"location":"ud10/ud1006/","title":"10.6 Mejoras pr\u00e1cticas","text":""},{"location":"ud10/ud1006/#propiedades-estilizables","title":"Propiedades estilizables","text":"<p>Se puede dise\u00f1ar una propiedad JavaFX a trav\u00e9s de css usando <code>StyleableProperty</code>. Esto es \u00fatil cuando los controles necesitan propiedades que se pueden configurar a trav\u00e9s de css.</p> <p>Para usar <code>StyleableProperty</code> en un Control, se necesita crear un nuevo <code>CssMetaData</code> usando <code>StyleableProperty</code>. Los <code>CssMetaData</code> creados para un control deben agregarse a <code>List&lt;CssMetaData&gt;</code> obtenidos del antecesor del control. Esta nueva lista luego se devuelve desde el archivo <code>getControlCssMetaData()</code>.</p> <p>Por convenci\u00f3n, las clases de control que tienen <code>CssMetaData</code> implementar\u00e1n un m\u00e9todo est\u00e1tico <code>getClassCssMetaData()</code> y es habitual que <code>getControlCssMetaData()</code> simplemente devuelva <code>getClassCssMetaData()</code>. El prop\u00f3sito de <code>getClassCssMetaData()</code> es permitir que las subclases incluyan f\u00e1cilmente los <code>CssMetaData</code> de alg\u00fan antepasado.</p> Java<pre><code>// StyleableProperty\nprivate final StyleableProperty&lt;Color&gt; color =\n    new SimpleStyleableObjectProperty&lt;&gt;(COLOR, this, \"color\");\n\n// Typical JavaFX property implementation\npublic Color getColor() {\n    return this.color.getValue();\n}\npublic void setColor(final Color color) {\n    this.color.setValue(color);\n}\npublic ObjectProperty&lt;Color&gt; colorProperty() {\n    return (ObjectProperty&lt;Color&gt;) this.color;\n}\n\n// CssMetaData\nprivate static final CssMetaData&lt;MY_CTRL, Paint&gt; COLOR =\n    new CssMetaData&lt;MY_CTRL, Paint&gt;(\"-color\", PaintConverter.getInstance(), Color.RED) {\n\n    @Override\n    public boolean isSettable(MY_CTRL node) {\n        return node.color == null || !node.color.isBound();\n    }\n\n    @Override\n    public StyleableProperty&lt;Paint&gt; getStyleableProperty(MY_CTRL node) {\n        return node.color;\n    }\n};\n\nprivate static final List&lt;CssMetaData&lt;? extends Styleable, ?&gt;&gt; STYLEABLES;\nstatic {\n    // Fetch CssMetaData from its ancestors\n    final List&lt;CssMetaData&lt;? extends Styleable, ?&gt;&gt; styleables =\n        new ArrayList&lt;&gt;(Control.getClassCssMetaData());\n    // Add new CssMetaData\n    styleables.add(COLOR);\n    STYLEABLES = Collections.unmodifiableList(styleables);\n}\n\n// Return all CssMetadata information\npublic static List&lt;CssMetaData&lt;? extends Styleable, ?&gt;&gt; getClassCssMetaData() {\n    return STYLEABLES;\n}\n\n@Override\npublic List&lt;CssMetaData&lt;? extends Styleable, ?&gt;&gt; getControlCssMetaData() {\n    return getClassCssMetaData();\n}\n</code></pre> <p>La creaci\u00f3n de <code>StyleableProperty</code> y <code>CssMetaData</code> necesita una gran cantidad de c\u00f3digo repetitivo y esto se puede reducir mediante el uso de <code>StyleablePropertyFactory</code> . <code>StyleablePropertyFactory</code> contiene m\u00e9todos para crear <code>StyleableProperty</code> con los <code>CssMetaData</code> correspondientes.</p> Java<pre><code>// StyleableProperty\nprivate final StyleableProperty&lt;Color&gt; color =\n    new SimpleStyleableObjectProperty&lt;&gt;(COLOR, this, \"color\");\n\n// Typical JavaFX property implementation\npublic Color getColor() {\n    return this.color.getValue();\n}\npublic void setColor(final Color color) {\n    this.color.setValue(color);\n}\npublic ObjectProperty&lt;Color&gt; colorProperty() {\n    return (ObjectProperty&lt;Color&gt;) this.color;\n}\n\n// StyleablePropertyFactory\nprivate static final StyleablePropertyFactory&lt;MY_CTRL&gt; FACTORY =\n    new StyleablePropertyFactory&lt;&gt;(Control.getClassCssMetaData());\n\n// CssMetaData from StyleablePropertyFactory\nprivate static final CssMetaData&lt;MY_CTRL, Color&gt; COLOR =\n    FACTORY.createColorCssMetaData(\"-color\", s -&gt; s.color, Color.RED, false);\u2028\n\n// Return all CssMetadata information from StyleablePropertyFactory\npublic static List&lt;CssMetaData&lt;? extends Styleable, ?&gt;&gt; getClassCssMetaData() {\n    return FACTORY.getCssMetaData();\n}\n\n@Override public List&lt;CssMetaData&lt;? extends Styleable, ?&gt;&gt; getControlCssMetaData() {\n    return getClassCssMetaData();\n}\n</code></pre>"},{"location":"ud10/ud1006/#tareas","title":"Tareas","text":"<p>Ahora veremos c\u00f3mo usar una tarea JavaFX para mantener la IU responsible. Es imperativo que cualquier operaci\u00f3n que tarde m\u00e1s de unos pocos cientos de milisegundos se ejecute en un subproceso separado para evitar bloquear la interfaz de usuario. Una tarea concluye la secuencia de pasos en una operaci\u00f3n de larga duraci\u00f3n y proporciona devoluciones de llamada para los posibles resultados.</p> <p>La clase Task tambi\u00e9n mantiene al usuario al tanto de la operaci\u00f3n a trav\u00e9s de propiedades que se pueden vincular a controles de interfaz de usuario como <code>ProgressBars</code> y <code>Labels</code>. El enlace actualiza din\u00e1micamente la interfaz de usuario. Estas propiedades incluyen</p> <ol> <li><code>runningProperty</code> : si la tarea se est\u00e1 ejecutando o no</li> <li><code>ProgressProperty</code> : el porcentaje completado de una operaci\u00f3n.</li> <li><code>messageProperty</code> : texto que describe un paso en la operaci\u00f3n</li> </ol>"},{"location":"ud10/ud1006/#demostracion","title":"Demostraci\u00f3n","text":"<p>Las siguientes capturas de pantalla muestran el funcionamiento de una aplicaci\u00f3n de recuperaci\u00f3n de HTML.</p> <p>Ingresar una URL y presionar \"Ir\" iniciar\u00e1 una tarea JavaFX. Al ejecutarse, la tarea har\u00e1 visible un <code>HBox</code> que contiene una barra de progreso y una etiqueta. <code>ProgressBar</code> y <code>Label</code> se actualizan a lo largo de la operaci\u00f3n.</p> <p>Cuando finaliza la recuperaci\u00f3n, se invoca al metodo <code>succeeded()</code> y se actualiza la interfaz de usuario. Tenga en cuenta que la llamada a <code>succeeded()</code> se lleva a cabo en el subproceso FX, por lo que es seguro manipular los controles.      </p> <p>Si hubo un error al recuperar el HTML, se invoca a <code>failed()</code> y se muestra una alerta de error. <code>failed()</code> tambi\u00e9n tiene lugar en el subproceso FX. Esta captura de pantalla muestra una entrada no v\u00e1lida. Se usa una \"h\" en la URL en lugar de \"http\".  </p>"},{"location":"ud10/ud1006/#codigo","title":"C\u00f3digo","text":"<p>Se coloca un controlador de eventos en el bot\u00f3n Obtener HTML que crea la tarea. El punto de entrada de la Tarea es el m\u00e9todo call() que comienza llamando a updateMessage() y updateProgress(). Estos m\u00e9todos se ejecutan en el subproceso FX y generar\u00e1n actualizaciones en cualquier propiedad enlazada.</p> <p>El programa contin\u00faa emitiendo un HTTP GET usando clases est\u00e1ndar de java.net. Se crea una cadena \"retval\" a partir de los caracteres recuperados. Las propiedades de mensaje y progreso se actualizan con m\u00e1s llamadas a updateMessage() y updateProgress(). El m\u00e9todo call() finaliza con la devoluci\u00f3n de la cadena que contiene el texto HTML.</p> <p>En una operaci\u00f3n exitosa, se invoca la devoluci\u00f3n de llamada de \u00e9xito (). getValue() es un m\u00e9todo de tarea que devolver\u00e1 el valor acumulado en la tarea (recuerde \"retval\"). El tipo del valor es lo que se proporciona en el argumento gen\u00e9rico, en este caso \"String\". Esto podr\u00eda ser un tipo complejo como un objeto de dominio o una colecci\u00f3n. La operaci\u00f3n de \u00e9xito () se ejecuta en el subproceso FX, por lo que la cadena getValue () se establece directamente en el \u00e1rea de texto.</p> <p>Si la operaci\u00f3n falla, se lanza una excepci\u00f3n. La excepci\u00f3n es capturada por la tarea y convertida en una llamada fallida(). fail() tambi\u00e9n es seguro para subprocesos FX y muestra una alerta.</p> Java<pre><code>String url = tfURL.getText();\n\nTask&lt;String&gt; task = new Task&lt;String&gt;() {\n\n    @Override\n    protected String call() throws Exception {\n\n        updateMessage(\"Getting HTML from \" + url );\n        updateProgress( 0.5d, 1.0d );\n\n        HttpURLConnection c = null;\n        InputStream is = null;\n        String retval = \"\";\n\n        try {\n\n            c = (HttpURLConnection) new URL(url).openConnection();\n\n            updateProgress( 0.6d, 1.0d );\n            is = c.getInputStream();\n            int ch;\n            while( (ch=is.read()) != -1 ) {\n                retval += (char)ch;\n            }\n\n        } finally {\n            if( is != null ) {\n                is.close();\n            }\n            if( c != null ) {\n                c.disconnect();\n            }\n        }\n\n        updateMessage(\"HTML retrieved\");\n        updateProgress( 1.0d, 1.0d );\n\n        return retval;\n    }\n\n    @Override\n    protected void succeeded() {\n        contents.setText( getValue() );\n    }\n\n    @Override\n    protected void failed() {\n        Alert alert = new Alert(Alert.AlertType.ERROR, getException().getMessage() );\n        alert.showAndWait();\n    }\n};\n</code></pre> <p>Tenga en cuenta que la tarea no actualiza la barra de progreso y la etiqueta de estado directamente. En su lugar, Task realiza llamadas seguras a updateMessage() y updateProgress(). Para actualizar la interfaz de usuario, se utiliza el enlace JavaFX en las siguientes declaraciones.</p> Java<pre><code>bottomControls.visibleProperty().bind( task.runningProperty() );\npb.progressProperty().bind( task.progressProperty() );\nmessageLabel.textProperty().bind( task.messageProperty() );\n</code></pre> <p>Task.runningProperty es un valor booleano que se puede vincular a bottomControls HBox visibleProperty. Task.progressProperty es un doble que se puede vincular a ProgressBarprogressProperty. Task.messageProperty es una cadena que se puede vincular a la etiqueta de estado textProperty.</p> <p>Para ejecutar la tarea, cree un subproceso que proporcione la tarea como argumento del constructor e invoque start().</p> Java<pre><code>new Thread(task).start();\n</code></pre> <p>Para cualquier operaci\u00f3n de ejecuci\u00f3n prolongada (archivo IO, la red), use una tarea JavaFX para mantener la capacidad de respuesta de su aplicaci\u00f3n. La tarea JavaFX le brinda a su aplicaci\u00f3n una forma consistente de manejar operaciones asincr\u00f3nicas y expone varias propiedades que se pueden usar para eliminar la l\u00f3gica repetitiva y de programaci\u00f3n.</p>"},{"location":"ud10/ud1006/#codigo-completo","title":"C\u00f3digo completo","text":"<p>El c\u00f3digo se puede probar en un solo archivo .java.</p> Java<pre><code>public class ProgressBarApp extends Application {\n\n    private HBox bottomControls;\n    private ProgressBar pb;\n    private Label messageLabel;\n\n    private TextField tfURL;\n\n    private TextArea contents;\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Parent p = createMainView();\n\n        Scene scene = new Scene(p);\n\n        primaryStage.setTitle(\"ProgressBarApp\");\n        primaryStage.setWidth( 667 );\n        primaryStage.setHeight( 376 );\n        primaryStage.setScene( scene );\n        primaryStage.show();\n    }\n\n    private Parent createMainView() {\n\n        VBox vbox = new VBox();\n        vbox.setPadding( new Insets(10) );\n        vbox.setSpacing( 10 );\n\n        HBox topControls = new HBox();\n        topControls.setAlignment(Pos.CENTER_LEFT);\n        topControls.setSpacing( 4 );\n\n        Label label = new Label(\"URL\");\n        tfURL = new TextField();\n        HBox.setHgrow( tfURL, Priority.ALWAYS );\n        Button btnGetHTML = new Button(\"Get HTML\");\n        btnGetHTML.setOnAction( this::getHTML );\n        topControls.getChildren().addAll(label, tfURL, btnGetHTML);\n\n        contents = new TextArea();\n        VBox.setVgrow( contents, Priority.ALWAYS );\n\n        bottomControls = new HBox();\n        bottomControls.setVisible(false);\n        bottomControls.setSpacing( 4 );\n        HBox.setMargin( bottomControls, new Insets(4));\n\n        pb = new ProgressBar();\n        messageLabel = new Label(\"\");\n        bottomControls.getChildren().addAll(pb, messageLabel);\n\n        vbox.getChildren().addAll(topControls, contents, bottomControls);\n\n        return vbox;\n    }\n\n    public void getHTML(ActionEvent evt) {\n\n        String url = tfURL.getText();\n\n        Task&lt;String&gt; task = new Task&lt;String&gt;() {\n\n            @Override\n            protected String call() throws Exception {\n\n                updateMessage(\"Getting HTML from \" + url );\n                updateProgress( 0.5d, 1.0d );\n\n                HttpURLConnection c = null;\n                InputStream is = null;\n                String retval = \"\";\n\n                try {\n\n                    c = (HttpURLConnection) new URL(url).openConnection();\n\n                    updateProgress( 0.6d, 1.0d );\n                    is = c.getInputStream();\n                    int ch;\n                    while( (ch=is.read()) != -1 ) {\n                        retval += (char)ch;\n                    }\n\n                } finally {\n                    if( is != null ) {\n                        is.close();\n                    }\n                    if( c != null ) {\n                        c.disconnect();\n                    }\n                }\n\n                updateMessage(\"HTML retrieved\");\n                updateProgress( 1.0d, 1.0d );\n\n                return retval;\n            }\n\n            @Override\n            protected void succeeded() {\n                contents.setText( getValue() );\n            }\n\n            @Override\n            protected void failed() {\n                Alert alert = new Alert(Alert.AlertType.ERROR, getException().getMessage() );\n                alert.showAndWait();\n            }\n        };\n\n        bottomControls.visibleProperty().bind( task.runningProperty() );\n        pb.progressProperty().bind( task.progressProperty() );\n        messageLabel.textProperty().bind( task.messageProperty() );\n\n        new Thread(task).start();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre>"},{"location":"ud10/ud1006/#evitar-nulos-en-comboboxes","title":"Evitar Nulos en ComboBoxes","text":"<p>Para usar a <code>ComboBox</code>en JavaFX, declare una Lista de elementos y establezca un valor inicial usando setValue(). El <code>ComboBox</code>m\u00e9todo getValue() recupera el valor seleccionado actualmente. Si no se proporciona un valor inicial, el control tiene un valor nulo predeterminado.</p> <p>El valor nulo es un problema cuando <code>ComboBox</code>impulsa otra l\u00f3gica como una transformaci\u00f3n a may\u00fasculas o la b\u00fasqueda de un registro de base de datos. Si bien generalmente se usa una verificaci\u00f3n nula para evitar este tipo de error, se prefiere un objeto vac\u00edo para simplificar el c\u00f3digo. Los cuadros combinados a menudo aparecen en grupos y la t\u00e9cnica de objetos vac\u00edos reduce las comprobaciones nulas en la interacci\u00f3n de los cuadros combinados relacionados y en las operaciones de guardar y cargar.</p> <p>Este art\u00edculo presenta un par de ComboBoxes relacionados. Una selecci\u00f3n de pa\u00eds en uno <code>ComboBox</code>modifica la lista de elementos de ciudad disponibles en un segundo <code>ComboBox</code>. No se requiere ninguna selecci\u00f3n. El usuario puede presionar Guardar <code>Button</code>en cualquier momento y, si no se realiza ninguna selecci\u00f3n <code>ComboBox</code>, se devolver\u00e1 un objeto vac\u00edo, en este caso una Cadena vac\u00eda.</p> <p>Esta es una captura de pantalla de la aplicaci\u00f3n. Si selecciona \"Suiza\" de un valor inicial vac\u00edo, la ciudad se llenar\u00e1 <code>ComboBox</code>de ciudades suizas. Seleccionando la ciudad \"Zurich\" y presionando Guardar recuperar\u00e1 esos valores.</p> Figura 64. Cuadros combinados relacionados"},{"location":"ud10/ud1006/#estructura-de-datos","title":"Estructura de datos","text":"<p>Las estructuras de datos que soportan la aplicaci\u00f3n son una Lista de pa\u00edses y un Mapa de ciudades. El Mapa de ciudades utiliza el pa\u00eds como clave.</p> Text Only<pre><code>NoNullComboApp.clase\n</code></pre> Java<pre><code>public class NoNullComboApp extends Application {\n\n    private List&lt;String&gt; countries = new ArrayList&lt;&gt;();\n\n    private Map&lt;String, List&lt;String&gt;&gt; citiesMap = new LinkedHashMap&lt;&gt;();\n\n    private void initData() {\n\n        String COUNTRY_FR = \"France\";\n        String COUNTRY_DE = \"Germany\";\n        String COUNTRY_CH = \"Switzerland\";\n\n        countries.add(COUNTRY_FR); countries.add(COUNTRY_DE); countries.add(COUNTRY_CH);\n\n        List&lt;String&gt; frenchCities = new ArrayList&lt;&gt;();\n        frenchCities.add(\"Paris\");\n        frenchCities.add(\"Strasbourg\");\n\n        List&lt;String&gt; germanCities = new ArrayList&lt;&gt;();\n        germanCities.add(\"Berlin\");\n        germanCities.add(\"Cologne\");\n        germanCities.add(\"Munich\");\n\n        List&lt;String&gt; swissCities = new ArrayList&lt;&gt;();\n        swissCities.add(\"Zurich\");\n\n        citiesMap.put(COUNTRY_FR, frenchCities );\n        citiesMap.put(COUNTRY_DE, germanCities );\n        citiesMap.put(COUNTRY_CH, swissCities );\n    }\n}\n</code></pre> <p>Para recuperar el conjunto de ciudades de un pa\u00eds determinado, utilice el m\u00e9todo get() del Mapa. El m\u00e9todo containsKey() se puede utilizar para determinar si el mapa contiene o no un valor para el pa\u00eds especificado. En este ejemplo, containsKey() se usar\u00e1 para manejar el caso del objeto vac\u00edo.</p>"},{"location":"ud10/ud1006/#interfaz-de-usuario","title":"interfaz de usuario","text":"<p>La interfaz de usuario es un par de cuadros combinados con etiquetas y un bot\u00f3n Guardar. Los controles se colocan en a <code>VBox</code>y justificados a la izquierda. El <code>VBox</code>est\u00e1 envuelto en un <code>TilePane</code>y centrado. Se <code>TilePane</code>utiliz\u00f3 ya que no se estira <code>VBox</code>horizontalmente.</p> Text Only<pre><code>NoNullComboApp.clase\n</code></pre> Java<pre><code>    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label countryLabel = new Label(\"Country:\");\n        country.setPrefWidth(200.0d);\n        Label cityLabel = new Label(\"City:\");\n        city.setPrefWidth(200.0d);\n        Button saveButton = new Button(\"Save\");\n\n        VBox vbox = new VBox(\n                countryLabel,\n                country,\n                cityLabel,\n                city,\n                saveButton\n        );\n        vbox.setAlignment(Pos.CENTER_LEFT );\n        vbox.setSpacing( 10.0d );\n\n        TilePane outerBox = new TilePane(vbox);\n        outerBox.setAlignment(Pos.CENTER);\n\n        Scene scene = new Scene(outerBox);\n\n        initData();\n    }\n</code></pre>"},{"location":"ud10/ud1006/#valores-iniciales","title":"Valores iniciales","text":"<p>Como se mencion\u00f3 anteriormente, si no se especifica un valor para un <code>ComboBox</code>, se devolver\u00e1 un valor nulo en una llamada a getValue(). Aunque existen varias t\u00e9cnicas defensivas (si se verifica, m\u00e9todos Commons StringUtils) para defenderse de NullPointerExceptions, es mejor evitarlas por completo. Esto es especialmente cierto cuando las interacciones se vuelven complejas o hay varios ComboBoxes que permiten selecciones vac\u00edas.</p> Text Only<pre><code>NoNullComboApp.clase\n</code></pre> Java<pre><code>country.getItems().add(\"\");\ncountry.getItems().addAll( countries );\ncountry.setValue( \"\" );  // empty selection is object and not null\n\ncity.getItems().add(\"\");\ncity.setValue( \"\" );\n</code></pre> <p>En esta aplicaci\u00f3n, el pa\u00eds <code>ComboBox</code>no se cambiar\u00e1, por lo que sus elementos se agregan en el m\u00e9todo start(). El pa\u00eds comienza con una selecci\u00f3n inicial vac\u00eda al igual que la ciudad. Ciudad, en este punto, contiene un \u00fanico elemento vac\u00edo.</p>"},{"location":"ud10/ud1006/#interaccion","title":"Interacci\u00f3n","text":"<p>Cuando se cambia el valor del pa\u00eds, se <code>ComboBox</code>debe reemplazar el contenido de la ciudad. Es com\u00fan usar clear() en la lista de respaldo; sin embargo, esto producir\u00e1 un valor nulo en <code>ComboBox</code>(sin elementos, sin valor). En su lugar, use removeIf() con una cl\u00e1usula para mantener un \u00fanico elemento vac\u00edo. Con la lista limpia de todos los datos (excepto el elemento vac\u00edo), los contenidos reci\u00e9n seleccionados se pueden agregar con addAll().</p> Text Only<pre><code>NoNullComboApp.clase\n</code></pre> Java<pre><code>country.setOnAction( (evt) -&gt; {\n\n    String cty = country.getValue();\n\n    city.getItems().removeIf( (c) -&gt; !c.isEmpty() );\n\n    if( citiesMap.containsKey(cty) ) {  // not an empty key\n        city.getItems().addAll( citiesMap.get(cty) );\n    }\n});\n\nsaveButton.setOnAction( (evt) -&gt; {\n    System.out.println(\"saving country='\" + country.getValue() +\n                       \"', city='\" + city.getValue() + \"'\");\n});\n</code></pre> <p>La acci\u00f3n del bot\u00f3n Guardar imprimir\u00e1 los valores. En ning\u00fan caso se devolver\u00e1 un valor nulo desde getValue().</p> <p>Si es un desarrollador de Java, ha escrito \"si no es nulo\" miles de veces. Sin embargo, proyecto tras proyecto, veo NullPointerExceptions que resaltan los casos que se perdieron o las nuevas condiciones que surgieron. Este art\u00edculo present\u00f3 una t\u00e9cnica para mantener objetos vac\u00edos en ComboBoxes estableciendo un valor inicial y usando removeIf() en lugar de clear() al cambiar listas. Aunque este ejemplo us\u00f3 objetos String, esto se puede expandir para trabajar con objetos de dominio que tienen una implementaci\u00f3n hashCode/equals,  una representaci\u00f3n de objeto vac\u00eda y cellFactory o toString() para producir una vista vac\u00eda.</p>"},{"location":"ud10/ud1006/#codigo-completo_1","title":"C\u00f3digo completo","text":"<p>El c\u00f3digo se puede probar en un solo archivo .java.</p> Text Only<pre><code>NoNullComboApp.clase\n</code></pre> Java<pre><code>public class NoNullComboApp extends Application {\n\n    private final ComboBox&lt;String&gt; country = new ComboBox&lt;&gt;();\n    private final ComboBox&lt;String&gt; city = new ComboBox&lt;&gt;();\n\n    private List&lt;String&gt; countries = new ArrayList&lt;&gt;();\n\n    private Map&lt;String, List&lt;String&gt;&gt; citiesMap = new LinkedHashMap&lt;&gt;();\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n\n        Label countryLabel = new Label(\"Country:\");\n        country.setPrefWidth(200.0d);\n        Label cityLabel = new Label(\"City:\");\n        city.setPrefWidth(200.0d);\n        Button saveButton = new Button(\"Save\");\n\n        VBox vbox = new VBox(\n                countryLabel,\n                country,\n                cityLabel,\n                city,\n                saveButton\n        );\n        vbox.setAlignment(Pos.CENTER_LEFT );\n        vbox.setSpacing( 10.0d );\n\n        TilePane outerBox = new TilePane(vbox);\n        outerBox.setAlignment(Pos.CENTER);\n\n        Scene scene = new Scene(outerBox);\n\n        initData();\n\n        country.getItems().add(\"\");\n        country.getItems().addAll( countries );\n        country.setValue( \"\" );  // empty selection is object and not null\n\n        city.getItems().add(\"\");\n        city.setValue( \"\" );\n\n        country.setOnAction( (evt) -&gt; {\n\n            String cty = country.getValue();\n\n            city.getItems().removeIf( (c) -&gt; !c.isEmpty() );\n\n            if( citiesMap.containsKey(cty) ) {  // not an empty key\n                city.getItems().addAll( citiesMap.get(cty) );\n            }\n        });\n\n        saveButton.setOnAction( (evt) -&gt; {\n           System.out.println(\"saving country='\" + country.getValue() +\n                                      \"', city='\" + city.getValue() + \"'\");\n        });\n\n        primaryStage.setTitle(\"NoNullComboApp\");\n        primaryStage.setScene( scene );\n        primaryStage.setWidth( 320 );\n        primaryStage.setHeight( 480 );\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    private void initData() {\n\n        String COUNTRY_FR = \"France\";\n        String COUNTRY_DE = \"Germany\";\n        String COUNTRY_CH = \"Switzerland\";\n\n        countries.add(COUNTRY_FR); countries.add(COUNTRY_DE); countries.add(COUNTRY_CH);\n\n        List&lt;String&gt; frenchCities = new ArrayList&lt;&gt;();\n        frenchCities.add(\"Paris\");\n        frenchCities.add(\"Strasbourg\");\n\n        List&lt;String&gt; germanCities = new ArrayList&lt;&gt;();\n        germanCities.add(\"Berlin\");\n        germanCities.add(\"Cologne\");\n        germanCities.add(\"Munich\");\n\n        List&lt;String&gt; swissCities = new ArrayList&lt;&gt;();\n        swissCities.add(\"Zurich\");\n\n        citiesMap.put(COUNTRY_FR, frenchCities );\n        citiesMap.put(COUNTRY_DE, germanCities );\n        citiesMap.put(COUNTRY_CH, swissCities );\n    }\n}\n</code></pre>"},{"location":"ud10/ud1007/","title":"10.7 JavaFX en IntelliJ","text":""},{"location":"ud10/ud1007/#introduccion","title":"Introducci\u00f3n","text":"<p>Vamos a ver c\u00f3mo crear una aplicaci\u00f3n <code>JavaFX</code> en IntelliJ. Necesitamos:</p> <ul> <li>IntelliJ Ultimate Edition (seguramente con el Comunity Edition funcione igualmente)</li> <li>OpenJDK 17 (seguramente funcionar\u00e1 con una posterior)</li> </ul>"},{"location":"ud10/ud1007/#proyectos-javafx-con-el-ide-intellij","title":"Proyectos JavaFX con el IDE IntelliJ","text":"<p>Sigue estos pasos para crear un proyecto <code>JavaFX</code> utilizando las herramientas IDE para compilarlo y ejecutarlo.</p>"},{"location":"ud10/ud1007/#descargar-el-sdk","title":"Descargar el SDK","text":"<p>Descargar el SDK (versi\u00f3n 21 LTS) de <code>JavaFX</code> https://gluonhq.com/products/javafx/ apropiado para tu sistema operativo. Este es mi caso:</p> <p>Descompr\u00edmelo en la ubicaci\u00f3n deseada, por ejemplo, <code>/Users/your-user/Downloads/javafx-sdk-19</code>. Es IMPORTANT\u00cdSIMO que recuerdes la ruta (<code>path</code>) hasta esta librer\u00eda.</p>"},{"location":"ud10/ud1007/#anadir-la-libreria-de-javafx-a-un-proyecto-intellij","title":"A\u00f1adir la libreria de JavaFX a un proyecto IntelliJ","text":"<p>En <code>File</code> -&gt; <code>Project Structure</code> -&gt; <code>Libraries</code></p> <p>A continuaci\u00f3n busca la carpeta que descargaste en el punto anterior y selecciona todos los archivos con extensi\u00f3n <code>*.jar</code> que incluye.</p> <p>Deberias terminar con algo similar a esto:</p>"},{"location":"ud10/ud1007/#crea-un-proyecto-de-javafx-opcion-no-recomendada","title":"Crea un proyecto de JavaFx (Opci\u00f3n no recomendada)","text":"<p>Cuando creas un proyecto en Intellij, el mismo IDE ofrece un tipo de proyecto JavaFx: </p> <p> </p> <p>No se recomienda esta opci\u00f3n para empezar porque \"oculta/facilita\" alguna de las cosas que necesitas entender.</p>"},{"location":"ud10/ud1007/#primer-proyecto-javafx","title":"Primer proyecto <code>JavaFX</code>","text":"<p>Una vez creado el proyecto Java, o configurado tal y como hemos visto en los puntos anteriores, comprobaremos que el IDE reconoce las clases de <code>JavaFX</code>, para ello vamos a crear nuestra primera clase con interfaz gr\u00e1fica con el siguiente c\u00f3digo:</p> <p>Comenzaremos por:</p> <ol> <li>Heredar la clase principal de la clase <code>Application</code>.</li> <li>Importar las clases de la librer\u00eda.</li> <li>implementar el m\u00e9todo abstracto, a\u00f1adir el <code>lauch()</code> al <code>main()</code> y a\u00f1adir los imports necesarios.</li> </ol> Java<pre><code>import javafx.application.Application;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.text.Text;\n\npublic class HolaFx extends Application {\n\n    private Parent createContent() {\n        return new StackPane(new Text(\"Hola Mundo\"));\n    }\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        stage.setScene(new Scene(createContent(), 400, 400));\n        stage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n</code></pre> <p>Si ejecutamos ahora mismo el c\u00f3digo, aunque no tiene ning\u00fan error de compilaci\u00f3n, obtendremos el siguiente error de ejecuci\u00f3n:</p> Bash<pre><code>/usr/lib/jvm/java-1.19.0-openjdk-amd64/bin/java -javaagent:/opt/idea-IU-232.9921.47/lib/idea_rt.jar=33389:/opt/idea-IU-232.9921.47/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /media/DADES/NextCloud/DOCENCIA/PRG-2324/JavaFXTest/out/production/JavaFXTest:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx-swt.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.base.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.controls.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.fxml.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.graphics.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.media.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.swing.jar:/media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/javafx.web.jar HolaFx\nError: JavaFX runtime components are missing, and are required to run this application\n\nProcess finished with exit code 1\n</code></pre> <p>Para resolver este error, debemos editar los par\u00e1metros de ejecuci\u00f3n del proyecto:</p> <p>(1) Elegimos la opci\u00f3n <code>Run with Parameters...</code></p> <p>(2) Ahora desplegamos el men\u00fa Modify options, y a\u00f1adimos las opciones de VM (m\u00e1quina virtual):</p> <p>(3) Dentro de esta opci\u00f3n que aparece ahora:</p> <p>A\u00f1adiremos los siguientes par\u00e1metros:</p> Bash<pre><code>--module-path /media/DADES/NextCloud/DOCENCIA/PRG-2324/javafx-sdk-21.0.3/lib/ --add-modules=javafx.controls\n##OJO! la ruta detr\u00e1s de --module-path debe ser la ruta que apunte a donde tienes tu libreria de JavaFX\n</code></pre> <p>Ahora, si volvemos a ejecutar el mismo proyecto veremos algo similar a esto:</p>"},{"location":"ud10/ud1008/","title":"10.8 SceneBuilder en IntelliJ","text":""},{"location":"ud10/ud1008/#introduccion","title":"Introducci\u00f3n","text":"<p>Scene Builder es una alternativa orientada al dise\u00f1o que puede ser m\u00e1s productiva. Adem\u00e1s es multiplataforma y est\u00e1 disponible para GNU/Linux, Windows y Mac. Scene Builder funciona con el ecosistema JavaFX: controles oficiales, proyectos comunitarios y ofertas de Gluon que incluyen Gluon Mobile, Gluon Desktop y Gluon CloudLink.</p> <p>El dise\u00f1o de la interfaz de usuario drag&amp;drop permite una iteraci\u00f3n r\u00e1pida. La separaci\u00f3n de los archivos de dise\u00f1o y l\u00f3gica permite que los miembros del equipo se concentren r\u00e1pida y f\u00e1cilmente en su capa espec\u00edfica de desarrollo de aplicaciones.</p> <p>Scene Builder es gratuito y de c\u00f3digo abierto, pero cuenta con el respaldo de Gluon. Est\u00e1n disponibles ofertas de soporte comercial, que incluyen formaci\u00f3n y servicios de consultor\u00eda personalizados.</p> <p>Descarga e informaci\u00f3n: https://gluonhq.com/products/scene-builder/</p>"},{"location":"ud10/ud1008/#configurar-en-intellij-la-localizacion-de-scenebuilder","title":"Configurar en <code>IntelliJ</code> la localizaci\u00f3n de <code>SceneBuilder</code>","text":"<p>Con el fin de que cuando se abra un archivo <code>FXML</code> desde <code>NetBeans</code> se muestre directamente con la herramienta <code>SceneBuider</code>, se debe indicar en la configuraci\u00f3n de NetBeans en qu\u00e9 carpeta se encuentra <code>SceneBuider</code>.</p> <p>En el art\u00edculo Using Scene Builder with IntelliJ IDEA de la web de Oracle se puede obtener tambi\u00e9n informaci\u00f3n sobre los pasos a seguir.</p> <p>SceneBuilder se encuentra instalada por defecto en la carpeta <code>C:\\Users\\TU_USUARIO\\AppData\\Local\\SceneBuilder\\SceneBuilder.exe</code> (en Windows), tambien es posible usar esta aplicaci\u00f3n en Mac o Linux. Lo m\u00e1s importante es que conozcas la ubicaci\u00f3n del ejecutable y lo configures en IntelliJ:</p> <p>Puedes acceder a las opciones de configuraci\u00f3n de NetBeans en el men\u00fa <code>Settings</code> -&gt; <code>Languages &amp; Frameworks</code>-&gt; <code>JavaFx</code>. Ah\u00ed accede a la secci\u00f3n <code>Path to SceneBuilder</code> y escribe la ruta donde se encuentre el ejecutable de SceneBuilder (en la im\u00e1gen superior tienes el ejemplo de mi m\u00e1quina linux).</p>"},{"location":"ud10/ud1008/#scenicview","title":"ScenicView","text":"<p>Scenic View es una aplicaci\u00f3n <code>JavaFX</code> dise\u00f1ada para simplificar la comprensi\u00f3n del estado actual del gr\u00e1fico de escena de su aplicaci\u00f3n y tambi\u00e9n para manipular f\u00e1cilmente las propiedades del gr\u00e1fico de escena sin tener que seguir editando su c\u00f3digo. Esto le permite encontrar errores y hacer que las cosas sean perfectas sin tener que hacer el baile de compilaci\u00f3n, verificaci\u00f3n y compilaci\u00f3n.</p>"},{"location":"ud10/ud1008/#descargar-e-instalar-scenicview","title":"Descargar e instalar ScenicView","text":"<p>Puedes descargar la versi\u00f3n adecuada para tu sistema operativo desde https://github.com/JonathanGiles/scenic-view</p> <p>En realidad ScenicView se distribuye como una aplicaci\u00f3n portable. Eso quiere decir que no es necesario instalarla, sino directamente ejecutar la aplicaci\u00f3n desde la carpeta <code>bin</code> seg\u00fan el sistema operativo en el que nos encontremos.</p>"},{"location":"ud10/ud1008/#usar-scenicview","title":"Usar ScenicView","text":"<p>Para examinar nuestra aplicaci\u00f3n <code>JavaFX</code> con <code>ScenicView</code>, debemos en primer lugar ejecutar la aplicaci\u00f3n <code>ScenicView</code>:</p> <p>Una vez ejecutada la aplicaci\u00f3n comienza a buscar aplicaciones que se esten ejecutando y que usen <code>JavaFX</code>.</p> <p>En este punto solo queda que ejecutemos nuestra aplicaci\u00f3n <code>JavaFX</code> (por ejemplo <code>HolaFX</code>) y <code>ScenicView</code> detectar\u00e1 la aplicaci\u00f3n y nos mostrar\u00e1 toda su informaci\u00f3n y nos permitir\u00e1 realizar modificaciones:</p>"},{"location":"ud10/ud1009/","title":"10.9 Calculadora en JavaFX","text":""},{"location":"ud10/ud1009/#introduccion","title":"Introducci\u00f3n","text":"<p>Vamos a intentar juntar todo lo aprendido en una gu\u00eda para realizar una aplicaci\u00f3n <code>JavaFX</code> con <code>SceneBuilder</code> i <code>NetBeans</code>, siguiendo el modelo <code>MVC</code>.</p> <p>Necesitaras:</p> <ul> <li>Apache Netbeans 16 o posterior</li> <li>OpenJDK 17 (seguramente funcionar\u00e1 con una posterior)</li> <li>JavaFx 19</li> <li>SceneBuilder</li> </ul>"},{"location":"ud10/ud1009/#crear-proyecto","title":"Crear proyecto","text":"<p>Vamos a crear el proyecto como siempre <code>Java with Ant</code> no necesitamos el asistente de <code>JavaFX</code>.</p> <p>En nuestro caso llamamos al proyecto <code>CalculadoraNBFX</code> y desmarcamos la opci\u00f3n de que nos cree una clase <code>main</code>.</p> <p>Ahora para seguir el modelo MVC crearemos los tres packages (<code>controller</code>, <code>model</code> y <code>view</code>).</p> <p>Ahora a\u00f1adimos al proyecto la librer\u00eda de <code>JavaFX19</code> que hemos creado en otros documentos de la unidad.</p> <p>En este momento nuestro proyecto deber\u00eda tener este aspecto:</p> <p>Desactivamos la opci\u00f3n de compilar al guardar del proyecto y a\u00f1adimos las propiedades correctas a las <code>VM options</code> del proyecto. Tal y como hemos visto en otros documentos de la unidad.</p>"},{"location":"ud10/ud1009/#modelo","title":"Modelo","text":"<p>Para la calculadora necesitaremos un modelo que se encargue de realizar las distintas operaciones de nuestra calculadora. Para ello crearemos un nuevo fichero <code>Operaciones.java</code> dentro del paquete <code>model</code> con el siguiente contenido:</p> Java<pre><code>package model;\n\npublic class Operaciones {\n    private double operador1;\n    private double operador2;\n\n    public Operaciones(double operador1, double operador2) {\n        this.operador1 = operador1;\n        this.operador2 = operador2;\n    }\n\n    public double getOperador1() {\n        return operador1;\n    }\n\n    public void setOperador1(double operador1) {\n        this.operador1 = operador1;\n    }\n\n    public double getOperador2() {\n        return operador2;\n    }\n\n    public void setOperador2(double operador2) {\n        this.operador2 = operador2;\n    }\n\n    public double suma(){\n        return this.operador1+this.operador2;\n    }\n    public double resta(){\n        return this.operador1-this.operador2;\n    }\n    public double multiplicacion(){\n        return this.operador1*this.operador2;\n    }\n    public double division(){\n        return this.operador1/this.operador2;\n    }\n}\n</code></pre> <p>F\u00edjate que este es un modelo muy simple, con dos atributos, un constructor, sus getters y setters y las cuatro operaciones b\u00e1sicas de nuestra calculadora (sumar, restar, multiplicar y dividir).</p>"},{"location":"ud10/ud1009/#vista","title":"Vista","text":"<p>Ahora vamos a\u00f1adir un nuevo fichero <code>Empty FXML</code> al paquete <code>view</code>. Llamaremos Calculadora al nuevo fichero, elegiremos el paquete correspondiente y pulsaremos finalizar (no crearemos el controlador ni la hoja de estilos, esto lo haremos manualmente m\u00e1s adelante).</p> <p>Si tenemos correctamente configurado el SceneBuilder, tal y como hemos visto en otros documentos, al hacer doble clic sobre el fichero <code>Calculadora.fxml</code> deber\u00eda abrirse con \u00e9l.</p> <p>Ahora deber\u00edas crear una ventana similar a esta:</p> <p>Este ejemplo tiene la siguiente jerarqu\u00eda:</p> <p>Recuerda dar nombre a todos los componentes en la pesta\u00f1a <code>code</code> al campo <code>fx:id</code>. </p> <p><code>txtOperador1</code>, <code>txtOperador2</code> y <code>txtResultado</code> para los <code>TextField's</code></p> <p><code>rbSuma</code>, <code>rbResta</code>, <code>rbMultiplicaci\u00f3n</code>, <code>rbDivision</code> para los <code>RadioButton's</code></p> <p>Desactiva el <code>txtResultado</code>, para que no sea editable.</p> <p>Crea los contenedores y ajusta sus alineaciones, as\u00ed como los m\u00e1rgenes y espaciadores de los elementos que contienen, de manera que si amplias la ventana al m\u00e1ximo quede algo similar a esto:</p> <p>Tambi\u00e9n debes a\u00f1adir la acciones <code>ON ACTION</code> dentro de la pesta\u00f1a <code>code</code> para los botones:</p> <p><code>btnSalir</code>: #<code>salir</code></p> <p><code>btnOperar</code>: #<code>operar</code></p>"},{"location":"ud10/ud1009/#controladores","title":"Controladores","text":"<p>Necesitaremos dos archivos dentro del package de <code>controller</code>:</p> <ol> <li>El controlador para la vista de la calculadora.</li> <li>La clase main que cargar\u00e1 la vista principal</li> </ol>"},{"location":"ud10/ud1009/#calculadoracontrollerjava","title":"<code>CalculadoraController.java</code>","text":"<p>Realizar el controlador para la vista es muy sencillo y autom\u00e1tico. Debemos hacer clic derecho sobre el archivo <code>Calculadora.fxml</code> y elegir la opci\u00f3n <code>Make Controller</code> de NetBeans. Esta opci\u00f3n crear\u00e1 el controlador en el mismo paquete de <code>view</code>, y posteriormente deberemos moverlo a su correspondiente lugar dentro del paquete <code>controller</code>.</p> <p>Recuerda tambi\u00e9n cambiarlo en el c\u00f3digo del archivo <code>Calculadora.fxml</code> (bot\u00f3n derecho <code>edit</code>) de:</p> Java<pre><code>&lt;VBox maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"253.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/19\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"view.CalculadoraController\"&gt;\n</code></pre> <p>a:</p> Java<pre><code>&lt;VBox maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"253.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/19\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"controller.CalculadoraController\"&gt;\n</code></pre> <p>Ahora, dentro del <code>CalculadoraController.java</code> agregaremos el c\u00f3digo necesario para gestionar las acciones de los botones, y adem\u00e1s asegurarnos que los radio buttons son auto-excluyentes:</p> <p>Acci\u00f3n <code>salir</code>:</p> Java<pre><code>@FXML\nprivate void salir(ActionEvent event) {\n    Stage stage = (Stage) btnSalir.getScene().getWindow();\n    stage.close();\n}\n</code></pre> <p>Acci\u00f3n <code>operar</code>:</p> Java<pre><code>@FXML\nprivate void operar(ActionEvent event) {\n    try {\n        double op1 = Double.parseDouble(this.txtOperador1.getText());\n        double op2 = Double.parseDouble(this.txtOperador2.getText());\n        Operaciones op = new Operaciones(op1, op2);\n        if (this.rbSuma.isSelected()) {\n            this.txtResultado.setText(String.valueOf(op.suma()));\n        } else if (this.rbResta.isSelected()) {\n            this.txtResultado.setText(String.valueOf(op.resta()));\n        } else if (this.rbMultiplicacion.isSelected()) {\n            this.txtResultado.setText(String.valueOf(op.multiplicacion()));\n        } else if (this.rbDivision.isSelected()) {\n            if (op2 != 0) {\n                this.txtResultado.setText(String.valueOf(op.division()));\n            } else {\n                Alert alert = new Alert(Alert.AlertType.ERROR);\n                alert.setHeaderText(null);\n                alert.setTitle(\"Error\");\n                alert.setContentText(\"El operador 2 no puede ser 0.\");\n                alert.showAndWait();\n            }\n        }\n    } catch (NumberFormatException numberFormatException) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setHeaderText(null);\n        alert.setTitle(\"Error\");\n        alert.setContentText(\"Formato incorrecto de algun operando\");\n        alert.showAndWait();\n    }        \n}\n</code></pre> <p>Recuerda</p> <p>Recuerda realizar el import del <code>model.Operaciones</code>: Java<pre><code>import model.Operaciones;\n</code></pre></p> <p>Acci\u00f3n <code>initialize</code>:</p> Java<pre><code>    @Override\n    public void initialize(URL url, ResourceBundle rb) {\n        ToggleGroup tgRadio = new ToggleGroup();\n        rbSuma.setToggleGroup(tgRadio);\n        rbMultiplicacion.setToggleGroup(tgRadio);\n        rbResta.setToggleGroup(tgRadio);\n        rbDivision.setToggleGroup(tgRadio);\n    }\n</code></pre> <p>El m\u00e9todo <code>initialize</code> ser\u00e1 llamado al instanciar el controlador y generar\u00e1 un <code>ToggleGroup</code> de manera que solo podamos seleccionar una de las cuatro opciones disponibles.</p>"},{"location":"ud10/ud1009/#mainjava","title":"<code>main.java</code>","text":"<p>Por \u00faltimo solo nos queda a\u00f1adir la clase <code>main</code>, que contendr\u00e1 el m\u00e9todo <code>main</code> que lanzar\u00e1 la aplicaci\u00f3n JavaFX.</p> <p>Para ello en el paquete controller pulsamos bot\u00f3n derecho y a\u00f1adimos un fichero de tipo <code>JavaFX Main Class</code> y le llamaremos <code>Main.java</code>.</p> <p>Netbeans genera un m\u00e9todo start de ejemplo, que nostotros sustituiremos el siguiente c\u00f3digo para que cargue nuestra vista:</p> Java<pre><code>@Override\npublic void start(Stage primaryStage) {\n    try {\n        Parent root = FXMLLoader.load(getClass().getResource(\"../view/Calculadora.fxml\"));\n        Scene scene = new Scene(root);\n        primaryStage.setTitle(\"CalculadoraNBFX\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    } catch (IOException e) {\n        System.out.println(e.getMessage());\n    }\n}\n</code></pre>"},{"location":"ud10/ud1009/#primer-lanzamiento","title":"Primer lanzamiento","text":"<p>La primera vez que ejecutemos el proyecto nos pedir\u00e1 asignar la clase <code>main</code> que contiene el m\u00e9todo <code>main</code>, debemos elegir la clase <code>model.Main</code>.</p> <p>Si todo ha ido bien deber\u00eda aparecer nuestra calculadora en pantalla:</p>"},{"location":"ud10/ud10ac/","title":"Actividades","text":""},{"location":"ud10/ud10ac/#cuestiones-generales","title":"Cuestiones generales","text":"<p>Implementa las aplicaciones gr\u00e1ficas siguiendo las especificaciones de dise\u00f1o y funcionalidad descritas en cada ejercicio. Ten en cuenta lo siguiente:</p> <ul> <li>Los aspectos del dise\u00f1o que no se describan quedan a tu elecci\u00f3n. En todo caso, intenta que la interfaz sea sencilla de utilizar para el usuario.</li> <li>Renombra todos los componentes para que se entienda su uso. En lugar de <code>TextField1</code>, <code>Button1</code> y <code>Label1</code> es mejor utilizar abreviaturas: <code>txtEdad</code>, <code>btnSuma</code> y <code>lblRes</code>.</li> <li>Valida la informaci\u00f3n introducida por el usuario y av\u00edsale en caso de error.</li> <li>Maneja las posibles excepciones que puedan producirse.</li> <li>Puedes implementar clases adicionales si lo consideras oportuno.</li> </ul>"},{"location":"ud10/ud10ac/#ejercicios-con-scenebuilder","title":"Ejercicios (con <code>SceneBuilder</code>)","text":""},{"location":"ud10/ud10ac/#ejercicio-01","title":"Ejercicio 01","text":"<p>Crea con JavaFX la siguiente pantalla.</p> <p>Cuando el usuario escriba n\u00fameros (controlarlo con excepciones) y pulse en sumar, debe mostrar en el <code>txtResultado</code> el resultado final.</p>"},{"location":"ud10/ud10ac/#ejercicio-02","title":"Ejercicio 02","text":"<p>Crea con <code>JavaFX</code> la siguiente pantalla.</p> <p>Cuando el usuario escriba n\u00fameros (controlarlo con excepciones) y seg\u00fan que operaci\u00f3n elija, deber\u00e1 hacer la operaci\u00f3n y mostrarlo en el txtResultado. Tener en cuenta que la divisi\u00f3n, debemos controlar que el segundo operando no debe ser 0. El proyecto debe seguir el modelo MVC.</p>"},{"location":"ud10/ud10ac/#ejercicio-03","title":"Ejercicio 03","text":"<p>Crea la siguiente pantalla con <code>JavaFX</code>.</p> <p>Al pulsar en el bot\u00f3n de agregar persona, creara un objeto <code>Persona</code> y lo insertara en la tabla.</p>"},{"location":"ud10/ud10ac/#ejercicio-04","title":"Ejercicio 04","text":"<p>Dado el ejercicio anterior, agrega lo siguiente.</p> <p>Al seleccionar en un registro, mostrara los datos en los txt.</p> <p>Al pulsar el bot\u00f3n Modificar, el registro seleccionado se modificara con los datos que hay en los txt (editando el objeto).</p> <p>Al pulsar el bot\u00f3n Eliminar, el registro seleccionado se eliminara de la tabla.</p>"},{"location":"ud10/ud10ac/#ejercicio-05","title":"Ejercicio 05","text":"<p>Dado el ejercicio anterior, modifica la ventana.</p> <p>Al pulsar el bot\u00f3n de agregar Persona, se mostrara la siguiente ventana.</p> <p>Cuando rellenamos los datos, cerrara la ventana y a\u00f1adir\u00e1 la persona a la tabla.</p>"},{"location":"ud10/ud10ac/#ejercicio-06","title":"Ejercicio 06","text":"<p>Dado el ejercicio anterior, modifica la ventana.</p> <p>Al pulsar el bot\u00f3n de agregar Persona, se mostrara la siguiente ventana.</p> <p>Cuando rellenamos los datos, cerrara la ventana y a\u00f1adir\u00e1 la persona a la tabla.</p> <p>Cuando pulsemos modificar, se abrir\u00e1 la ventana anterior, pero con los datos cargados y al guardar editara el objeto seleccionado.</p> <p>Cuando pulsemos eliminar, eliminar el objeto de la tabla.</p>"},{"location":"ud10/ud10ac/#ejercicio-07","title":"Ejercicio 07","text":"<p>Dado el ejercicio anterior, modifica la ventana (se mantiene el dialogo de persona).</p> <p>Cuando escribamos en el txt de arriba, filtrara los nombre de las personas que contengan el texto que tu indiques.</p>"},{"location":"ud10/ud10ac/#actividades","title":"Actividades","text":""},{"location":"ud10/ud10ac/#actividad-01","title":"Actividad 01","text":"<p><code>ParOImpar</code>    Aplicaci\u00f3n gr\u00e1fica que permita introducir un n\u00famero entero y luego saber si dicho n\u00famero es par o impar. Utiliza un <code>TextField</code> para introducir el valor, un <code>Button</code> con el texto \u201c\u00bfpar o impar?\u201d y un <code>Label</code> para mostrar \u201cPAR\u201d o \u201cIMPAR\u201d seg\u00fan el caso.</p>"},{"location":"ud10/ud10ac/#actividad-02","title":"Actividad 02","text":"<p><code>Minicalculadora1</code>    Aplicaci\u00f3n gr\u00e1fica que permita introducir dos n\u00fameros reales y calcular el resultado de su suma, resta, multiplicaci\u00f3n o divisi\u00f3n. Utiliza un Button distinto para cada operaci\u00f3n y un \u00fanico Label para mostrar el resultado.</p>"},{"location":"ud10/ud10ac/#actividad-03","title":"Actividad 03","text":"<p><code>Minicalculadora2</code>    Aplicaci\u00f3n gr\u00e1fica que permite introducir dos n\u00fameros enteros (A y B) y permita realizar tres c\u00e1lculos distintos: suma de A y B, producto de A x B y exponencial A^B (A elevado a B). Utiliza tres <code>RadioButton</code> (uno para cada c\u00e1lculo) y un bot\u00f3n \u201c\u00a1Calcula!\u201d.</p>"},{"location":"ud10/ud10ac/#actividad-04","title":"Actividad 04","text":"<p><code>Factorial</code>    Aplicaci\u00f3n de uso de JavaFX con FXML y controlador para calcular el factorial de un n\u00famero.</p>"},{"location":"ud10/ud10ac/#actividad-05","title":"Actividad 05","text":"<p><code>ValidarletraNIF</code>    Aplicaci\u00f3n gr\u00e1fica que permita introducir un NIF (8 n\u00fameros y una letra) e indique si la letra de dicho NIF es v\u00e1lida.</p>"},{"location":"ud10/ud10ac/#actividad-06","title":"Actividad 06","text":"<p><code>DadosDeRol</code>    Aplicaci\u00f3n gr\u00e1fica que permita al usuario simular que lanza un dado de juegos de rol. Podr\u00e1 elegir entre dado de 6 caras (de 1 a 6), dado de 8 caras (de 1 a 8), dado de 10 caras (de 1 a 10), dado de 12 caras (de 1 a 12) y dado de 20 caras (de 1 a 20). Utiliza un bot\u00f3n distinto para cada tipo de dado. Muestra en cada bot\u00f3n una imagen de cada dado. Puedes encontrar las im\u00e1genes f\u00e1cilmente haciendo una b\u00fasqueda en Internet.</p>"},{"location":"ud10/ud10ac/#actividad-07","title":"Actividad 07","text":"<p><code>InicioDeSesion</code>    Aplicaci\u00f3n gr\u00e1fica que simule una ventana de inicio de sesi\u00f3n y registro de usuarios. El usuario podr\u00e1 introducir su nombre de usuario, contrase\u00f1a (PasswordField) y hacer click en un bot\u00f3n de \u201cIniciar sesi\u00f3n\u201d. Muestra el resultado del intento de inicio de sesi\u00f3n en un Label.</p> <p>Los usuarios registrados y sus contrase\u00f1as estar\u00e1n en el archivo \u2018users.txt\u2019. Crea unos pocos usuarios de ejemplo para probar la aplicaci\u00f3n. No est\u00e1 permitido utilizar espacios ni en los nombres de usuario ni en las contrase\u00f1as.</p> <p>Extra: A\u00f1ade un bot\u00f3n \u201cCrear usuario\u201d que registre un nuevo usuario.</p>"},{"location":"ud10/ud10ac/#actividad-08","title":"Actividad 08","text":"<p><code>BurguerMenApp</code>    Implementa una aplicaci\u00f3n gr\u00e1fica que simule una aplicaci\u00f3n de pedidos de men\u00fas de hamburguesas. La aplicaci\u00f3n permitir\u00e1 configurar un solo men\u00fa. El usuario podr\u00e1 elegir el tipo de hamburguesa, pan, patatas y bebida. Tambi\u00e9n hay elementos opcionales/extra.</p> <p>El precio de un men\u00fa b\u00e1sico es de 8 euros pero algunas opciones tienen un coste adicional. Se mostrar\u00e1 el precio total del men\u00fa con las opciones elegidas, el IVA en \u20ac (21% adicional) y el precio de venta al p\u00fablico (tras sumar el IVA).</p> <p>Las opciones obligatorias a elegir son: </p> <ul> <li>Hamburguesa a elegir: pollo, cerdo, ternera (+1\u20ac) o vegana (+1\u20ac).</li> <li>Pan a elegir: normal, integral o centeno.</li> <li>Patatas a elegir: fritas, gajo y caseras (+1 \u20ac).</li> <li>Bebida a elegir: refresco de cola, refresco de naranja, refresco de lim\u00f3n, agua y cerveza.</li> </ul> <p>Las opciones extra/adicionales son:</p> <ul> <li>Hamburguesa doble (+2 \u20ac).</li> <li>Extra de queso (+0,50 \u20ac).</li> <li>Extra de patatas (+1 \u20ac).</li> <li>Salsas: ketchup, barbacoa, mostaza y thai. Pueden pedirse varias de cada (+0,50 cada una).</li> <li>Reparto a domicilio (precio est\u00e1ndar) o recogida en el local (-20% sobre el precio final).</li> </ul>"},{"location":"ud10/ud10ac/#mas-ejercicios-sin-scenebuilder","title":"M\u00e1s ejercicios (Sin <code>SceneBuilder</code>)","text":""},{"location":"ud10/ud10ac/#ejercicio-08","title":"Ejercicio 08","text":"<p>Escriba un programa que muestre la siguiente <code>stage</code> usando m\u00e1s de un contenedor. Los tres botones superiores se alinearan a la parte izquierda de la ventana, y los tres inferiores a la parte derecha.</p>"},{"location":"ud10/ud10ac/#ejercicio-09","title":"Ejercicio 09","text":"<p>Escriba un programa que muestre cuatro l\u00edneas de texto con cuatro <code>Label</code>:    - Escribe tu nombre, DNI, direcci\u00f3n, tel\u00e9fono en cada una de las etiquetas.</p> <ul> <li> <p>Establece el fondo de las etiquetas en blanco.</p> </li> <li> <p>Establece el color del texto de las etiquetas en negro, azul, cian, verde respectivamente.</p> </li> <li> <p>Establece la fuente de cada etiqueta en TimesNewRoman/Ubuntu, negrita y 20 p\u00edxeles.</p> </li> <li> <p>Establece el borde de cada etiqueta en un borde de l\u00ednea con color amarillo.</p> <p></p> </li> </ul>"},{"location":"ud10/ud10ac/#ejercicio-10","title":"Ejercicio 10","text":"<p>Muestre un <code>stage</code> que contenga nueve etiquetas. Una etiqueta puede mostrar un icono de imagen para X, un icono de imagen para O, o nada. Lo que se muestra se decide al azar. Utilizar el M\u00e9todo <code>Math.random()</code> para generar un n\u00famero entero 0, 1 o 2, que corresponde a un icono de imagen X, un icono O o nada (una imagen vac\u00eda).</p>"},{"location":"ud10/ud10pi/","title":"P\u00edldoras inform\u00e1ticas","text":"<ul> <li>https://www.youtube.com/playlist?list=PLNjWMbvTJAIjLRW2qyuc4DEgFVW5YFRSR</li> <li>https://www.youtube.com/playlist?list=PLaxZkGlLWHGUWZxuadN3J7KKaICRlhz5-</li> </ul>"},{"location":"ud10/ud10re/","title":"Fuentes de informaci\u00f3n","text":"<ul> <li>Wikipedia</li> <li>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> <li>FXDocs</li> <li>https://openjfx.io/openjfx-docs/</li> </ul>"}]}